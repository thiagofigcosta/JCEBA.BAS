# 1 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c"

# 1 "JCEBA.LoadLibs.h" 1
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 1 3 4
# 9 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/crtdefs.h" 1 3 4
# 10 "/usr/i686-w64-mingw32/sys-root/mingw/include/crtdefs.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw.h" 1 3 4
# 12 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw_mac.h" 1 3 4
# 13 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw_secapi.h" 1 3 4
# 14 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw.h" 2 3 4
# 275 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/vadefs.h" 1 3 4
# 9 "/usr/i686-w64-mingw32/sys-root/mingw/include/vadefs.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw.h" 1 3 4
# 565 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/sdks/_mingw_directx.h" 1 3 4
# 566 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/sdks/_mingw_ddk.h" 1 3 4
# 567 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw.h" 2 3 4
# 10 "/usr/i686-w64-mingw32/sys-root/mingw/include/vadefs.h" 2 3 4




#pragma pack(push,_CRT_PACKING)
# 24 "/usr/i686-w64-mingw32/sys-root/mingw/include/vadefs.h" 3 4
  
# 24 "/usr/i686-w64-mingw32/sys-root/mingw/include/vadefs.h" 3 4
 typedef __builtin_va_list __gnuc_va_list;






  typedef __gnuc_va_list va_list;
# 103 "/usr/i686-w64-mingw32/sys-root/mingw/include/vadefs.h" 3 4
#pragma pack(pop)
# 276 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw.h" 2 3 4
# 539 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw.h" 3 4
void __attribute__((__cdecl__)) __debugbreak(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void __attribute__((__cdecl__)) __debugbreak(void)
{
  __asm__ __volatile__("int {$}3":);
}




const char *__mingw_get_crt_info (void);
# 11 "/usr/i686-w64-mingw32/sys-root/mingw/include/crtdefs.h" 2 3 4




#pragma pack(push,_CRT_PACKING)
# 37 "/usr/i686-w64-mingw32/sys-root/mingw/include/crtdefs.h" 3 4
typedef unsigned int size_t;
# 47 "/usr/i686-w64-mingw32/sys-root/mingw/include/crtdefs.h" 3 4
typedef int ssize_t;




typedef size_t rsize_t;
# 64 "/usr/i686-w64-mingw32/sys-root/mingw/include/crtdefs.h" 3 4
typedef int intptr_t;
# 77 "/usr/i686-w64-mingw32/sys-root/mingw/include/crtdefs.h" 3 4
typedef unsigned int uintptr_t;
# 90 "/usr/i686-w64-mingw32/sys-root/mingw/include/crtdefs.h" 3 4
typedef int ptrdiff_t;







typedef unsigned short wchar_t;







typedef unsigned short wint_t;
typedef unsigned short wctype_t;





typedef int errno_t;




typedef long __time32_t;




__extension__ typedef long long __time64_t;
# 136 "/usr/i686-w64-mingw32/sys-root/mingw/include/crtdefs.h" 3 4
typedef __time32_t time_t;
# 422 "/usr/i686-w64-mingw32/sys-root/mingw/include/crtdefs.h" 3 4
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct *pthreadlocinfo;
typedef struct threadmbcinfostruct *pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct {
  pthreadlocinfo locinfo;
  pthreadmbcinfo mbcinfo;
} _locale_tstruct,*_locale_t;



typedef struct tagLC_ID {
  unsigned short wLanguage;
  unsigned short wCountry;
  unsigned short wCodePage;
} LC_ID,*LPLC_ID;




typedef struct threadlocaleinfostruct {
  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned long lc_handle[6];
  LC_ID lc_id[6];
  struct {
    char *locale;
    wchar_t *wlocale;
    int *refcount;
    int *wrefcount;
  } lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  struct lconv *lconv;
  int *ctype1_refcount;
  unsigned short *ctype1;
  const unsigned short *pctype;
  const unsigned char *pclmap;
  const unsigned char *pcumap;
  struct __lc_time_data *lc_time_curr;
} threadlocinfo;







#pragma pack(pop)
# 10 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 2 3 4

# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw_print_push.h" 1 3 4
# 12 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 2 3 4

#pragma pack(push,_CRT_PACKING)
# 26 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 3 4
  struct _iobuf {
    char *_ptr;
    int _cnt;
    char *_base;
    int _flag;
    int _file;
    int _charbuf;
    int _bufsiz;
    char *_tmpfname;
  };
  typedef struct _iobuf FILE;
# 80 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw_off_t.h" 1 3 4




  typedef long _off_t;

  typedef long off32_t;





  __extension__ typedef long long _off64_t;

  __extension__ typedef long long off64_t;
# 26 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw_off_t.h" 3 4
typedef off32_t off_t;
# 81 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 2 3 4
# 91 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 3 4
extern FILE (* _imp___iob)[];
# 103 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 3 4
  __extension__ typedef long long fpos_t;
# 139 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 3 4
extern
  __attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_sscanf(const char * __restrict__ _Src,const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vsscanf (const char * __restrict__ _Str,const char * __restrict__ Format,va_list argp);
extern
  __attribute__((__format__ (gnu_scanf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_scanf(const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 1, 0))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vscanf(const char * __restrict__ Format, va_list argp);
extern
  __attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fscanf(FILE * __restrict__ _File,const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfscanf (FILE * __restrict__ fp, const char * __restrict__ Format,va_list argp);

extern
  __attribute__((__format__ (gnu_printf, 3, 0))) __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_vsnprintf(char * __restrict__ _DstBuf,size_t _MaxCount,const char * __restrict__ _Format,
                               va_list _ArgList);
extern
  __attribute__((__format__ (gnu_printf, 3, 4))) __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_snprintf(char * __restrict__ s, size_t n, const char * __restrict__ format, ...);
extern
  __attribute__((__format__ (gnu_printf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_printf(const char * __restrict__ , ... ) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 1, 0))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vprintf (const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fprintf (FILE * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfprintf (FILE * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_sprintf (char * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vsprintf (char * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__((nonnull (1,2)))
  int __attribute__((__cdecl__)) __mingw_asprintf(char ** __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__((nonnull (1,2)))
  int __attribute__((__cdecl__)) __mingw_vasprintf(char ** __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
# 377 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 3 4
  int __attribute__((__cdecl__)) fprintf(FILE * __restrict__ _File,const char * __restrict__ _Format,...);
  int __attribute__((__cdecl__)) printf(const char * __restrict__ _Format,...);
  int __attribute__((__cdecl__)) sprintf(char * __restrict__ _Dest,const char * __restrict__ _Format,...) ;

  int __attribute__((__cdecl__)) vfprintf(FILE * __restrict__ _File,const char * __restrict__ _Format,va_list _ArgList);
  int __attribute__((__cdecl__)) vprintf(const char * __restrict__ _Format,va_list _ArgList);
  int __attribute__((__cdecl__)) vsprintf(char * __restrict__ _Dest,const char * __restrict__ _Format,va_list _Args) ;

  int __attribute__((__cdecl__)) fscanf(FILE * __restrict__ _File,const char * __restrict__ _Format,...) ;
  int __attribute__((__cdecl__)) scanf(const char * __restrict__ _Format,...) ;
  int __attribute__((__cdecl__)) sscanf(const char * __restrict__ _Src,const char * __restrict__ _Format,...) ;





  int __attribute__((__cdecl__)) __ms_vscanf(const char * __restrict__ Format, va_list argp);
  int __attribute__((__cdecl__)) __ms_vfscanf (FILE * __restrict__ fp, const char * __restrict__ Format,va_list argp);
  int __attribute__((__cdecl__)) __ms_vsscanf (const char * __restrict__ _Str,const char * __restrict__ Format,va_list argp);

  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  __attribute__ ((__nonnull__ (2)))
  int vfscanf (FILE *__stream, const char *__format, __builtin_va_list __local_argv)
  {
    return __ms_vfscanf (__stream, __format, __local_argv);
  }

  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  __attribute__ ((__nonnull__ (2)))
  int vsscanf (const char * __restrict__ __source, const char * __restrict__ __format, __builtin_va_list __local_argv)
  {
    return __ms_vsscanf( __source, __format, __local_argv );
  }
  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  __attribute__ ((__nonnull__ (1)))
  int vscanf(const char *__format, __builtin_va_list __local_argv)
  {
    return __ms_vscanf (__format, __local_argv);
  }




  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _filbuf(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _flsbuf(int _Ch,FILE *_File);



  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _fsopen(const char *_Filename,const char *_Mode,int _ShFlag);

  void __attribute__((__cdecl__)) clearerr(FILE *_File);
  int __attribute__((__cdecl__)) fclose(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fcloseall(void);



  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _fdopen(int _FileHandle,const char *_Mode);

  int __attribute__((__cdecl__)) feof(FILE *_File);
  int __attribute__((__cdecl__)) ferror(FILE *_File);
  int __attribute__((__cdecl__)) fflush(FILE *_File);
  int __attribute__((__cdecl__)) fgetc(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fgetchar(void);
  int __attribute__((__cdecl__)) fgetpos(FILE * __restrict__ _File ,fpos_t * __restrict__ _Pos);
  int __attribute__((__cdecl__)) fgetpos64(FILE * __restrict__ _File ,fpos_t * __restrict__ _Pos);
  char *__attribute__((__cdecl__)) fgets(char * __restrict__ _Buf,int _MaxCount,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fileno(FILE *_File);



  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _tempnam(const char *_DirName,const char *_FilePrefix);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _flushall(void);
  FILE *__attribute__((__cdecl__)) fopen(const char * __restrict__ _Filename,const char * __restrict__ _Mode) ;
  FILE *fopen64(const char * __restrict__ filename,const char * __restrict__ mode);
  int __attribute__((__cdecl__)) fputc(int _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fputchar(int _Ch);
  int __attribute__((__cdecl__)) fputs(const char * __restrict__ _Str,FILE * __restrict__ _File);
  size_t __attribute__((__cdecl__)) fread(void * __restrict__ _DstBuf,size_t _ElementSize,size_t _Count,FILE * __restrict__ _File);
  FILE *__attribute__((__cdecl__)) freopen(const char * __restrict__ _Filename,const char * __restrict__ _Mode,FILE * __restrict__ _File) ;
  int __attribute__((__cdecl__)) fsetpos(FILE *_File,const fpos_t *_Pos);
  int __attribute__((__cdecl__)) fsetpos64(FILE *_File,const fpos_t *_Pos);
  int __attribute__((__cdecl__)) fseek(FILE *_File,long _Offset,int _Origin);



  int fseeko64(FILE* stream, _off64_t offset, int whence);
  int fseeko(FILE* stream, _off_t offset, int whence);
# 472 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 3 4
  long __attribute__((__cdecl__)) ftell(FILE *_File);

  _off_t ftello(FILE * stream);
  _off64_t ftello64(FILE * stream);
# 484 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 3 4
  __extension__ int __attribute__((__cdecl__)) _fseeki64(FILE *_File,long long _Offset,int _Origin);
  __extension__ long long __attribute__((__cdecl__)) _ftelli64(FILE *_File);
  size_t __attribute__((__cdecl__)) fwrite(const void * __restrict__ _Str,size_t _Size,size_t _Count,FILE * __restrict__ _File);
  int __attribute__((__cdecl__)) getc(FILE *_File);
  int __attribute__((__cdecl__)) getchar(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _getmaxstdio(void);
  char *__attribute__((__cdecl__)) gets(char *_Buffer) ;
  int __attribute__((__cdecl__)) _getw(FILE *_File);


  void __attribute__((__cdecl__)) perror(const char *_ErrMsg);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _pclose(FILE *_File);
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _popen(const char *_Command,const char *_Mode);




  int __attribute__((__cdecl__)) putc(int _Ch,FILE *_File);
  int __attribute__((__cdecl__)) putchar(int _Ch);
  int __attribute__((__cdecl__)) puts(const char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putw(int _Word,FILE *_File);


  int __attribute__((__cdecl__)) remove(const char *_Filename);
  int __attribute__((__cdecl__)) rename(const char *_OldFilename,const char *_NewFilename);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _unlink(const char *_Filename);

  int __attribute__((__cdecl__)) unlink(const char *_Filename) ;


  void __attribute__((__cdecl__)) rewind(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _rmtmp(void);
  void __attribute__((__cdecl__)) setbuf(FILE * __restrict__ _File,char * __restrict__ _Buffer) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _setmaxstdio(int _Max);
  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _set_output_format(unsigned int _Format);
  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _get_output_format(void);
  int __attribute__((__cdecl__)) setvbuf(FILE * __restrict__ _File,char * __restrict__ _Buf,int _Mode,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scprintf(const char * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snscanf(const char * __restrict__ _Src,size_t _MaxCount,const char * __restrict__ _Format,...) ;
  FILE *__attribute__((__cdecl__)) tmpfile(void) ;
  char *__attribute__((__cdecl__)) tmpnam(char *_Buffer);
  int __attribute__((__cdecl__)) ungetc(int _Ch,FILE *_File);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf(char * __restrict__ _Dest,size_t _Count,const char * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf(char * __restrict__ _Dest,size_t _Count,const char * __restrict__ _Format,va_list _Args) ;




       
       


  int __attribute__((__cdecl__)) __ms_vsnprintf(char * __restrict__ d,size_t n,const char * __restrict__ format,va_list arg)
    ;

  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  __attribute__ ((__nonnull__ (3)))
  int vsnprintf (char * __restrict__ __stream, size_t __n, const char * __restrict__ __format, va_list __local_argv)
  {
    return __ms_vsnprintf (__stream, __n, __format, __local_argv);
  }

  int __attribute__((__cdecl__)) __ms_snprintf(char * __restrict__ s, size_t n, const char * __restrict__ format, ...);


static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__ ((__nonnull__ (3)))
int snprintf (char * __restrict__ __stream, size_t __n, const char * __restrict__ __format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __ms_vsnprintf (__stream, __n, __format, __local_argv);
  __builtin_va_end( __local_argv );
  return __retval;
}


       
       


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscprintf(const char * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_printf_count_output(int _Value);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _get_printf_count_output(void);




                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_swscanf(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vswscanf (const wchar_t * __restrict__ _Str,const wchar_t * __restrict__ Format,va_list argp);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_wscanf(const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vwscanf(const wchar_t * __restrict__ Format, va_list argp);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fwscanf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfwscanf (FILE * __restrict__ fp, const wchar_t * __restrict__ Format,va_list argp);

                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
                                                      __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_wprintf(const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
                                                      __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_snwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, ...);
                                                      __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_vsnwprintf (wchar_t * __restrict__ , size_t, const wchar_t * __restrict__ , va_list);
                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_swprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ , ...);
                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vswprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ ,va_list);
# 725 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 3 4
  int __attribute__((__cdecl__)) fwscanf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...) ;
  int __attribute__((__cdecl__)) swscanf(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,...) ;
  int __attribute__((__cdecl__)) wscanf(const wchar_t * __restrict__ _Format,...) ;

  int __attribute__((__cdecl__)) __ms_vwscanf (const wchar_t * __restrict__ , va_list);
  int __attribute__((__cdecl__)) __ms_vfwscanf (FILE * __restrict__ ,const wchar_t * __restrict__ ,va_list);
  int __attribute__((__cdecl__)) __ms_vswscanf (const wchar_t * __restrict__ ,const wchar_t * __restrict__ ,va_list);

  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  __attribute__ ((__nonnull__ (2)))
  int vfwscanf (FILE *__stream, const wchar_t *__format, __builtin_va_list __local_argv)
  {
    return __ms_vfwscanf (__stream, __format, __local_argv);
  }

  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  __attribute__ ((__nonnull__ (2)))
  int vswscanf (const wchar_t * __restrict__ __source, const wchar_t * __restrict__ __format, __builtin_va_list __local_argv)
  {
    return __ms_vswscanf( __source, __format, __local_argv );
  }
  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  __attribute__ ((__nonnull__ (1)))
  int vwscanf(const wchar_t *__format, __builtin_va_list __local_argv)
  {
    return __ms_vwscanf (__format, __local_argv);
  }



  int __attribute__((__cdecl__)) fwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
  int __attribute__((__cdecl__)) wprintf(const wchar_t * __restrict__ _Format,...);
  int __attribute__((__cdecl__)) vfwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
  int __attribute__((__cdecl__)) vwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
# 768 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 3 4
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfsopen(const wchar_t *_Filename,const wchar_t *_Mode,int _ShFlag);


  wint_t __attribute__((__cdecl__)) fgetwc(FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fgetwchar(void);
  wint_t __attribute__((__cdecl__)) fputwc(wchar_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fputwchar(wchar_t _Ch);
  wint_t __attribute__((__cdecl__)) getwc(FILE *_File);
  wint_t __attribute__((__cdecl__)) getwchar(void);
  wint_t __attribute__((__cdecl__)) putwc(wchar_t _Ch,FILE *_File);
  wint_t __attribute__((__cdecl__)) putwchar(wchar_t _Ch);
  wint_t __attribute__((__cdecl__)) ungetwc(wint_t _Ch,FILE *_File);
  wchar_t *__attribute__((__cdecl__)) fgetws(wchar_t * __restrict__ _Dst,int _SizeInWords,FILE * __restrict__ _File);
  int __attribute__((__cdecl__)) fputws(const wchar_t * __restrict__ _Str,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _getws(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putws(const wchar_t *_Str);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,va_list _Args) ;




       
       


  int __attribute__((__cdecl__)) __ms_snwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, ...);
  int __attribute__((__cdecl__)) __ms_vsnwprintf (wchar_t * __restrict__ , size_t, const wchar_t * __restrict__ , va_list);
  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  int snwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, ...)
  {
    int r;
    va_list argp;
    __builtin_va_start (argp, format);
    r = _vsnwprintf (s, n, format, argp);
    __builtin_va_end (argp);
    return r;
  }
  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  int __attribute__((__cdecl__)) vsnwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, va_list arg)
  {
    return _vsnwprintf(s,n,format,arg);
  }
       
       



  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,va_list _Args);


# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/swprintf.inl" 1 3 4
# 21 "/usr/i686-w64-mingw32/sys-root/mingw/include/swprintf.inl" 3 4
static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (3)))
int vswprintf (wchar_t *__stream, size_t __count, const wchar_t *__format, __builtin_va_list __local_argv)
{
  return vsnwprintf( __stream, __count, __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (3)))
int swprintf (wchar_t *__stream, size_t __count, const wchar_t *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv;

  __builtin_va_start( __local_argv, __format );
  __retval = vswprintf( __stream, __count, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}
# 825 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 2 3 4
# 834 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 3 4
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wtempnam(const wchar_t *_Directory,const wchar_t *_FilePrefix);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf(const wchar_t * __restrict__ _Src,size_t _MaxCount,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfdopen(int _FileHandle ,const wchar_t *_Mode);
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfopen(const wchar_t * __restrict__ _Filename,const wchar_t *__restrict__ _Mode) ;
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfreopen(const wchar_t * __restrict__ _Filename,const wchar_t * __restrict__ _Mode,FILE * __restrict__ _OldFile) ;



  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wperror(const wchar_t *_ErrMsg);

  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wpopen(const wchar_t *_Command,const wchar_t *_Mode);




  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wremove(const wchar_t *_Filename);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wtmpnam(wchar_t *_Buffer);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fgetwc_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fputwc_nolock(wchar_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _ungetwc_nolock(wint_t _Ch,FILE *_File);
# 884 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 3 4
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _lock_file(FILE *_File);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _unlock_file(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fclose_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fflush_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _fread_nolock(void * __restrict__ _DstBuf,size_t _ElementSize,size_t _Count,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fseek_nolock(FILE *_File,long _Offset,int _Origin);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _ftell_nolock(FILE *_File);
  __extension__ __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fseeki64_nolock(FILE *_File,long long _Offset,int _Origin);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _ftelli64_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _fwrite_nolock(const void * __restrict__ _DstBuf,size_t _Size,size_t _Count,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _ungetc_nolock(int _Ch,FILE *_File);





  char *__attribute__((__cdecl__)) tempnam(const char *_Directory,const char *_FilePrefix) ;
  int __attribute__((__cdecl__)) fcloseall(void) ;
  FILE *__attribute__((__cdecl__)) fdopen(int _FileHandle,const char *_Format) ;
  int __attribute__((__cdecl__)) fgetchar(void) ;
  int __attribute__((__cdecl__)) fileno(FILE *_File) ;
  int __attribute__((__cdecl__)) flushall(void) ;
  int __attribute__((__cdecl__)) fputchar(int _Ch) ;
  int __attribute__((__cdecl__)) getw(FILE *_File) ;
  int __attribute__((__cdecl__)) putw(int _Ch,FILE *_File) ;
  int __attribute__((__cdecl__)) rmtmp(void) ;
# 926 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 3 4
int __attribute__((__cdecl__)) __mingw_str_wide_utf8 (const wchar_t * const wptr, char **mbptr, size_t * buflen);
# 940 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 3 4
int __attribute__((__cdecl__)) __mingw_str_utf8_wide (const char *const mbptr, wchar_t ** wptr, size_t * buflen);
# 949 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 3 4
void __attribute__((__cdecl__)) __mingw_str_free(void *ptr);





  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnl(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnle(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnlp(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnlpe(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnv(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnve(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnvp(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnvpe(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
# 979 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 3 4
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnv(int _Mode,const char *_Filename,const char *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnve(int _Mode,const char *_Filename,const char *const *_ArgList,const char *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnvp(int _Mode,const char *_Filename,const char *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnvpe(int _Mode,const char *_Filename,const char *const *_ArgList,const char *const *_Env);






#pragma pack(pop)

# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/sec_api/stdio_s.h" 1 3 4
# 9 "/usr/i686-w64-mingw32/sys-root/mingw/include/sec_api/stdio_s.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 1 3 4
# 10 "/usr/i686-w64-mingw32/sys-root/mingw/include/sec_api/stdio_s.h" 2 3 4
# 19 "/usr/i686-w64-mingw32/sys-root/mingw/include/sec_api/stdio_s.h" 3 4
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) clearerr_s(FILE *_File);
  int __attribute__((__cdecl__)) fprintf_s(FILE *_File,const char *_Format,...);
  size_t __attribute__((__cdecl__)) fread_s(void *_DstBuf,size_t _DstSize,size_t _ElementSize,size_t _Count,FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fscanf_s_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  int __attribute__((__cdecl__)) printf_s(const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scanf_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scanf_s_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf_c(char *_DstBuf,size_t _MaxCount,const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf_c(char *_DstBuf,size_t _MaxCount,const char *_Format,va_list _ArgList);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fscanf_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sscanf_l(const char *_Src,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sscanf_s_l(const char *_Src,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) sscanf_s(const char *_Src,const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snscanf_s(const char *_Src,size_t _MaxCount,const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snscanf_l(const char *_Src,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snscanf_s_l(const char *_Src,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  int __attribute__((__cdecl__)) vfprintf_s(FILE *_File,const char *_Format,va_list _ArgList);
  int __attribute__((__cdecl__)) vprintf_s(const char *_Format,va_list _ArgList);

  int __attribute__((__cdecl__)) vsnprintf_s(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,va_list _ArgList);
 

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf_s(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,va_list _ArgList);
 

  int __attribute__((__cdecl__)) vsprintf_s(char *_DstBuf,size_t _Size,const char *_Format,va_list _ArgList);
 

  int __attribute__((__cdecl__)) sprintf_s(char *_DstBuf,size_t _DstSize,const char *_Format,...);
 

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf_s(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,...);
 

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fprintf_p(FILE *_File,const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _printf_p(const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sprintf_p(char *_Dst,size_t _MaxCount,const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfprintf_p(FILE *_File,const char *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vprintf_p(const char *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsprintf_p(char *_Dst,size_t _MaxCount,const char *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scprintf_p(const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscprintf_p(const char *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _printf_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _printf_p_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vprintf_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vprintf_p_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fprintf_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fprintf_p_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfprintf_l(FILE *_File,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfprintf_p_l(FILE *_File,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sprintf_l(char *_DstBuf,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sprintf_p_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsprintf_l(char *_DstBuf,const char *_Format,_locale_t,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsprintf_p_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scprintf_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scprintf_p_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscprintf_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscprintf_p_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _printf_s_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vprintf_s_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fprintf_s_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfprintf_s_l(FILE *_File,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sprintf_s_l(char *_DstBuf,size_t _DstSize,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsprintf_s_l(char *_DstBuf,size_t _DstSize,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf_s_l(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf_s_l(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf_c_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf_c_l(char *_DstBuf,size_t _MaxCount,const char *,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) fopen_s(FILE **_File,const char *_Filename,const char *_Mode);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) freopen_s(FILE** _File, const char *_Filename, const char *_Mode, FILE *_Stream);

  __attribute__ ((__dllimport__)) char* __attribute__((__cdecl__)) gets_s(char*,rsize_t);
 

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) tmpnam_s(char*,rsize_t);
 




  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _getws_s(wchar_t *_Str,size_t _SizeInWords);
 

  int __attribute__((__cdecl__)) fwprintf_s(FILE *_File,const wchar_t *_Format,...);
  int __attribute__((__cdecl__)) wprintf_s(const wchar_t *_Format,...);
  int __attribute__((__cdecl__)) vfwprintf_s(FILE *_File,const wchar_t *_Format,va_list _ArgList);
  int __attribute__((__cdecl__)) vwprintf_s(const wchar_t *_Format,va_list _ArgList);

  int __attribute__((__cdecl__)) vswprintf_s(wchar_t *_Dst,size_t _SizeInWords,const wchar_t *_Format,va_list _ArgList);
 

  int __attribute__((__cdecl__)) swprintf_s(wchar_t *_Dst,size_t _SizeInWords,const wchar_t *_Format,...);
 

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf_s(wchar_t *_DstBuf,size_t _DstSizeInWords,size_t _MaxCount,const wchar_t *_Format,va_list _ArgList);
 

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf_s(wchar_t *_DstBuf,size_t _DstSizeInWords,size_t _MaxCount,const wchar_t *_Format,...);
 


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_s_l(const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_s_l(const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_s_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_s_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_s_l(wchar_t *_DstBuf,size_t _DstSize,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_s_l(wchar_t *_DstBuf,size_t _DstSize,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf_s_l(wchar_t *_DstBuf,size_t _DstSize,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf_s_l(wchar_t *_DstBuf,size_t _DstSize,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwscanf_s_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swscanf_s_l(const wchar_t *_Src,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) swscanf_s(const wchar_t *_Src,const wchar_t *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf_s(const wchar_t *_Src,size_t _MaxCount,const wchar_t *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf_s_l(const wchar_t *_Src,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wscanf_s_l(const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wfopen_s(FILE **_File,const wchar_t *_Filename,const wchar_t *_Mode);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wfreopen_s(FILE **_File,const wchar_t *_Filename,const wchar_t *_Mode,FILE *_OldFile);

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wtmpnam_s(wchar_t *_DstBuf,size_t _SizeInWords);
 

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_p(FILE *_File,const wchar_t *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_p(const wchar_t *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_p(FILE *_File,const wchar_t *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_p(const wchar_t *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_p(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_p(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf_p(const wchar_t *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf_p(const wchar_t *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_l(const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_p_l(const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_l(const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_p_l(const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_p_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_p_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_c_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_p_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_c_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_p_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf_l(const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf_p_l(const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf_p_l(const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __swprintf_l(wchar_t *_Dest,const wchar_t *_Format,_locale_t _Plocinfo,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __vswprintf_l(wchar_t *_Dest,const wchar_t *_Format,_locale_t _Plocinfo,va_list _Args);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf_l(const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwscanf_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swscanf_l(const wchar_t *_Src,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf_l(const wchar_t *_Src,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wscanf_l(const wchar_t *_Format,_locale_t _Locale,...);



  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _fread_nolock_s(void *_DstBuf,size_t _DstSize,size_t _ElementSize,size_t _Count,FILE *_File);
# 992 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 2 3 4

# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw_print_pop.h" 1 3 4
# 994 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdio.h" 2 3 4
# 2 "JCEBA.LoadLibs.h" 2
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/string.h" 1 3 4
# 36 "/usr/i686-w64-mingw32/sys-root/mingw/include/string.h" 3 4
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _memccpy(void *_Dst,const void *_Src,int _Val,size_t _MaxCount);
  void *__attribute__((__cdecl__)) memchr(const void *_Buf ,int _Val,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _memicmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _memicmp_l(const void *_Buf1,const void *_Buf2,size_t _Size,_locale_t _Locale);
  int __attribute__((__cdecl__)) memcmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  void * __attribute__((__cdecl__)) memcpy(void * __restrict__ _Dst,const void * __restrict__ _Src,size_t _Size) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) memcpy_s (void *_dest,size_t _numberOfElements,const void *_src,size_t _count);
  void * __attribute__((__cdecl__)) mempcpy (void *_Dst, const void *_Src, size_t _Size);
  void * __attribute__((__cdecl__)) memset(void *_Dst,int _Val,size_t _Size);

  void * __attribute__((__cdecl__)) memccpy(void *_Dst,const void *_Src,int _Val,size_t _Size) ;
  int __attribute__((__cdecl__)) memicmp(const void *_Buf1,const void *_Buf2,size_t _Size) ;


  char * __attribute__((__cdecl__)) _strset(char *_Str,int _Val) ;
  char * __attribute__((__cdecl__)) _strset_l(char *_Str,int _Val,_locale_t _Locale) ;
  char * __attribute__((__cdecl__)) strcpy(char * __restrict__ _Dest,const char * __restrict__ _Source);
  char * __attribute__((__cdecl__)) strcat(char * __restrict__ _Dest,const char * __restrict__ _Source);
  int __attribute__((__cdecl__)) strcmp(const char *_Str1,const char *_Str2);
  size_t __attribute__((__cdecl__)) strlen(const char *_Str);
  size_t __attribute__((__cdecl__)) strnlen(const char *_Str,size_t _MaxCount);
  void *__attribute__((__cdecl__)) memmove(void *_Dst,const void *_Src,size_t _Size) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strdup(const char *_Src);
  char *__attribute__((__cdecl__)) strchr(const char *_Str,int _Val);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricmp(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strcmpi(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricmp_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  int __attribute__((__cdecl__)) strcoll(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strcoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricoll(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strncoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strncoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  size_t __attribute__((__cdecl__)) strcspn(const char *_Str,const char *_Control);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strerror(const char *_ErrMsg) ;
  char *__attribute__((__cdecl__)) strerror(int) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strlwr(char *_String) ;
  char *strlwr_l(char *_String,_locale_t _Locale) ;
  char *__attribute__((__cdecl__)) strncat(char * __restrict__ _Dest,const char * __restrict__ _Source,size_t _Count) ;
  int __attribute__((__cdecl__)) strncmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicmp_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  char *strncpy(char * __restrict__ _Dest,const char * __restrict__ _Source,size_t _Count) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strnset(char *_Str,int _Val,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strnset_l(char *str,int c,size_t count,_locale_t _Locale) ;
  char *__attribute__((__cdecl__)) strpbrk(const char *_Str,const char *_Control);
  char *__attribute__((__cdecl__)) strrchr(const char *_Str,int _Ch);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strrev(char *_Str);
  size_t __attribute__((__cdecl__)) strspn(const char *_Str,const char *_Control);
  char *__attribute__((__cdecl__)) strstr(const char *_Str,const char *_SubStr);
  char *__attribute__((__cdecl__)) strtok(char * __restrict__ _Str,const char * __restrict__ _Delim) ;
       

  char *strtok_r(char * __restrict__ _Str, const char * __restrict__ _Delim, char ** __restrict__ __last);
       
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strupr(char *_String) ;
  __attribute__ ((__dllimport__)) char *_strupr_l(char *_String,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) strxfrm(char * __restrict__ _Dst,const char * __restrict__ _Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _strxfrm_l(char * __restrict__ _Dst,const char * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);


  char *__attribute__((__cdecl__)) strdup(const char *_Src) ;
  int __attribute__((__cdecl__)) strcmpi(const char *_Str1,const char *_Str2) ;
  int __attribute__((__cdecl__)) stricmp(const char *_Str1,const char *_Str2) ;
  char *__attribute__((__cdecl__)) strlwr(char *_Str) ;
  int __attribute__((__cdecl__)) strnicmp(const char *_Str1,const char *_Str,size_t _MaxCount) ;
  int __attribute__((__cdecl__)) strncasecmp (const char *, const char *, size_t);
  int __attribute__((__cdecl__)) strcasecmp (const char *, const char *);







  char *__attribute__((__cdecl__)) strnset(char *_Str,int _Val,size_t _MaxCount) ;
  char *__attribute__((__cdecl__)) strrev(char *_Str) ;
  char *__attribute__((__cdecl__)) strset(char *_Str,int _Val) ;
  char *__attribute__((__cdecl__)) strupr(char *_Str) ;





  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsdup(const wchar_t *_Str);
  wchar_t *__attribute__((__cdecl__)) wcscat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
  wchar_t *__attribute__((__cdecl__)) wcschr(const wchar_t *_Str,wchar_t _Ch);
  int __attribute__((__cdecl__)) wcscmp(const wchar_t *_Str1,const wchar_t *_Str2);
  wchar_t *__attribute__((__cdecl__)) wcscpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
  size_t __attribute__((__cdecl__)) wcscspn(const wchar_t *_Str,const wchar_t *_Control);
  size_t __attribute__((__cdecl__)) wcslen(const wchar_t *_Str);
  size_t __attribute__((__cdecl__)) wcsnlen(const wchar_t *_Src,size_t _MaxCount);
  wchar_t *wcsncat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  int __attribute__((__cdecl__)) wcsncmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  wchar_t *wcsncpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  wchar_t *__attribute__((__cdecl__)) _wcsncpy_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count,_locale_t _Locale) ;
  wchar_t *__attribute__((__cdecl__)) wcspbrk(const wchar_t *_Str,const wchar_t *_Control);
  wchar_t *__attribute__((__cdecl__)) wcsrchr(const wchar_t *_Str,wchar_t _Ch);
  size_t __attribute__((__cdecl__)) wcsspn(const wchar_t *_Str,const wchar_t *_Control);
  wchar_t *__attribute__((__cdecl__)) wcsstr(const wchar_t *_Str,const wchar_t *_SubStr);
  wchar_t *__attribute__((__cdecl__)) wcstok(wchar_t * __restrict__ _Str,const wchar_t * __restrict__ _Delim) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcserror(int _ErrNum) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) __wcserror(const wchar_t *_Str) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsrev(wchar_t *_Str);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsset(wchar_t *_Str,wchar_t _Val) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcslwr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcslwr_l(wchar_t *_String,_locale_t _Locale) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsupr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcsupr_l(wchar_t *_String,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) wcsxfrm(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcsxfrm_l(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) wcscoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcscoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsncoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsncoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);


  wchar_t *__attribute__((__cdecl__)) wcsdup(const wchar_t *_Str) ;

  int __attribute__((__cdecl__)) wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2) ;
  int __attribute__((__cdecl__)) wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount) ;
  wchar_t *__attribute__((__cdecl__)) wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  wchar_t *__attribute__((__cdecl__)) wcsrev(wchar_t *_Str) ;
  wchar_t *__attribute__((__cdecl__)) wcsset(wchar_t *_Str,wchar_t _Val) ;
  wchar_t *__attribute__((__cdecl__)) wcslwr(wchar_t *_Str) ;
  wchar_t *__attribute__((__cdecl__)) wcsupr(wchar_t *_Str) ;
  int __attribute__((__cdecl__)) wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2) ;







# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/sec_api/string_s.h" 1 3 4
# 9 "/usr/i686-w64-mingw32/sys-root/mingw/include/sec_api/string_s.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/string.h" 1 3 4
# 10 "/usr/i686-w64-mingw32/sys-root/mingw/include/sec_api/string_s.h" 2 3 4







  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strset_s(char *_Dst,size_t _DstSize,int _Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strerror_s(char *_Buf,size_t _SizeInBytes,const char *_ErrMsg);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strerror_s(char *_Buf,size_t _SizeInBytes,int _ErrNum);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strlwr_s(char *_Str,size_t _Size);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strlwr_s_l(char *_Str,size_t _Size,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strnset_s(char *_Str,size_t _Size,int _Val,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strupr_s(char *_Str,size_t _Size);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strupr_s_l(char *_Str,size_t _Size,_locale_t _Locale);

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strncat_s(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strncat_s_l(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strcpy_s(char *_Dst, rsize_t _SizeInBytes, const char *_Src);
 
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strncpy_s(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strncpy_s_l(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) strtok_s(char *_Str,const char *_Delim,char **_Context);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strtok_s_l(char *_Str,const char *_Delim,char **_Context,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strcat_s(char *_Dst, rsize_t _SizeInBytes, const char * _Src);
 

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) memmove_s(void *_dest,size_t _numberOfElements,const void *_src,size_t _count);


  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) wcstok_s(wchar_t *_Str,const wchar_t *_Delim,wchar_t **_Context);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcserror_s(wchar_t *_Buf,size_t _SizeInWords,int _ErrNum);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) __wcserror_s(wchar_t *_Buffer,size_t _SizeInWords,const wchar_t *_ErrMsg);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsnset_s(wchar_t *_Dst,size_t _DstSizeInWords,wchar_t _Val,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsset_s(wchar_t *_Str,size_t _SizeInWords,wchar_t _Val);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcslwr_s(wchar_t *_Str,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcslwr_s_l(wchar_t *_Str,size_t _SizeInWords,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsupr_s(wchar_t *_Str,size_t _Size);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsupr_s_l(wchar_t *_Str,size_t _Size,_locale_t _Locale);

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcscpy_s(wchar_t *_Dst, rsize_t _SizeInWords, const wchar_t *_Src);
 
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcscat_s(wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t *_Src);
 

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcsncat_s(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsncat_s_l(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcsncpy_s(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsncpy_s_l(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcstok_s_l(wchar_t *_Str,const wchar_t *_Delim,wchar_t **_Context,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsset_s_l(wchar_t *_Str,size_t _SizeInChars,unsigned int _Val,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsnset_s_l(wchar_t *_Str,size_t _SizeInChars,unsigned int _Val, size_t _Count,_locale_t _Locale);

  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) size_t __attribute__((__cdecl__)) wcsnlen_s(const wchar_t * _src, size_t _count) {
    return _src ? wcsnlen(_src, _count) : 0;
  }
# 182 "/usr/i686-w64-mingw32/sys-root/mingw/include/string.h" 2 3 4
# 3 "JCEBA.LoadLibs.h" 2
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/time.h" 1 3 4
# 15 "/usr/i686-w64-mingw32/sys-root/mingw/include/time.h" 3 4
#pragma pack(push,_CRT_PACKING)
# 51 "/usr/i686-w64-mingw32/sys-root/mingw/include/time.h" 3 4
  typedef long clock_t;
# 88 "/usr/i686-w64-mingw32/sys-root/mingw/include/time.h" 3 4
  struct tm {
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
  };




  extern __attribute__ ((__dllimport__)) int _daylight;
  extern __attribute__ ((__dllimport__)) long _dstbias;
  extern __attribute__ ((__dllimport__)) long _timezone;
  extern __attribute__ ((__dllimport__)) char * _tzname[2];

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_daylight(int *_Daylight);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_dstbias(long *_Daylight_savings_bias);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_timezone(long *_Timezone);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_tzname(size_t *_ReturnValue,char *_Buffer,size_t _SizeInBytes,int _Index);
  char *__attribute__((__cdecl__)) asctime(const struct tm *_Tm) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) asctime_s (char *_Buf,size_t _SizeInWords,const struct tm *_Tm);
  char *__attribute__((__cdecl__)) _ctime32(const __time32_t *_Time) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ctime32_s (char *_Buf,size_t _SizeInBytes,const __time32_t *_Time);
  clock_t __attribute__((__cdecl__)) clock(void);
  double __attribute__((__cdecl__)) _difftime32(__time32_t _Time1,__time32_t _Time2);
  struct tm *__attribute__((__cdecl__)) _gmtime32(const __time32_t *_Time) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _gmtime32_s (struct tm *_Tm,const __time32_t *_Time);
  struct tm *__attribute__((__cdecl__)) _localtime32(const __time32_t *_Time) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _localtime32_s (struct tm *_Tm,const __time32_t *_Time);
  size_t __attribute__((__cdecl__)) strftime(char * __restrict__ _Buf,size_t _SizeInBytes,const char * __restrict__ _Format,const struct tm * __restrict__ _Tm);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _strftime_l(char * __restrict__ _Buf,size_t _Max_size,const char * __restrict__ _Format,const struct tm * __restrict__ _Tm,_locale_t _Locale);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strdate(char *_Buffer) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strdate_s (char *_Buf,size_t _SizeInBytes);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strtime(char *_Buffer) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strtime_s (char *_Buf ,size_t _SizeInBytes);
  __time32_t __attribute__((__cdecl__)) _time32(__time32_t *_Time);
  __time32_t __attribute__((__cdecl__)) _mktime32(struct tm *_Tm);
  __time32_t __attribute__((__cdecl__)) _mkgmtime32(struct tm *_Tm);


  void __attribute__((__cdecl__)) tzset(void) ;


  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _tzset(void);


  double __attribute__((__cdecl__)) _difftime64(__time64_t _Time1,__time64_t _Time2);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ctime64(const __time64_t *_Time) ;
  errno_t __attribute__((__cdecl__)) _ctime64_s (char *_Buf,size_t _SizeInBytes,const __time64_t *_Time);
  __attribute__ ((__dllimport__)) struct tm *__attribute__((__cdecl__)) _gmtime64(const __time64_t *_Time) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _gmtime64_s (struct tm *_Tm,const __time64_t *_Time);
  __attribute__ ((__dllimport__)) struct tm *__attribute__((__cdecl__)) _localtime64(const __time64_t *_Time) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _localtime64_s (struct tm *_Tm,const __time64_t *_Time);
  __attribute__ ((__dllimport__)) __time64_t __attribute__((__cdecl__)) _mktime64(struct tm *_Tm);
  __attribute__ ((__dllimport__)) __time64_t __attribute__((__cdecl__)) _mkgmtime64(struct tm *_Tm);
  __attribute__ ((__dllimport__)) __time64_t __attribute__((__cdecl__)) _time64(__time64_t *_Time);
  unsigned __attribute__((__cdecl__)) _getsystime(struct tm *_Tm);
  unsigned __attribute__((__cdecl__)) _setsystime(struct tm *_Tm,unsigned _MilliSec);


  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wasctime(const struct tm *_Tm);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wasctime_s (wchar_t *_Buf,size_t _SizeInWords,const struct tm *_Tm);
  wchar_t *__attribute__((__cdecl__)) _wctime32(const __time32_t *_Time) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wctime32_s (wchar_t *_Buf,size_t _SizeInWords,const __time32_t *_Time);
  size_t __attribute__((__cdecl__)) wcsftime(wchar_t * __restrict__ _Buf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,const struct tm * __restrict__ _Tm);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcsftime_l(wchar_t * __restrict__ _Buf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,const struct tm * __restrict__ _Tm,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wstrdate(wchar_t *_Buffer) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wstrdate_s (wchar_t *_Buf,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wstrtime(wchar_t *_Buffer) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wstrtime_s (wchar_t *_Buf,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wctime64(const __time64_t *_Time) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wctime64_s (wchar_t *_Buf,size_t _SizeInWords,const __time64_t *_Time);



  wchar_t *__attribute__((__cdecl__)) _wctime(const time_t *) ;
# 180 "/usr/i686-w64-mingw32/sys-root/mingw/include/time.h" 3 4
  errno_t __attribute__((__cdecl__)) _wctime_s(wchar_t *, size_t, const time_t *);
# 194 "/usr/i686-w64-mingw32/sys-root/mingw/include/time.h" 3 4
double __attribute__((__cdecl__)) difftime(time_t _Time1,time_t _Time2);
char *__attribute__((__cdecl__)) ctime(const time_t *_Time) ;
struct tm *__attribute__((__cdecl__)) gmtime(const time_t *_Time) ;
struct tm *__attribute__((__cdecl__)) localtime(const time_t *_Time) ;

time_t __attribute__((__cdecl__)) mktime(struct tm *_Tm);
time_t __attribute__((__cdecl__)) _mkgmtime(struct tm *_Tm);
time_t __attribute__((__cdecl__)) time(time_t *_Time);
# 226 "/usr/i686-w64-mingw32/sys-root/mingw/include/time.h" 3 4
extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) errno_t __attribute__((__cdecl__)) localtime_s(struct tm *_Tm,const time_t *_Time) { return _localtime32_s(_Tm,_Time); }
extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) errno_t __attribute__((__cdecl__)) gmtime_s(struct tm *_Tm, const time_t *_Time) { return _gmtime32_s(_Tm, _Time); }
extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) errno_t __attribute__((__cdecl__)) ctime_s(char *_Buf,size_t _SizeInBytes,const time_t *_Time) { return _ctime32_s(_Buf,_SizeInBytes,_Time); }
# 240 "/usr/i686-w64-mingw32/sys-root/mingw/include/time.h" 3 4
  __attribute__ ((__dllimport__)) extern int daylight;
  __attribute__ ((__dllimport__)) extern long timezone;
  __attribute__ ((__dllimport__)) extern char *tzname[2];
  void __attribute__((__cdecl__)) tzset(void) ;


# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/_timeval.h" 1 3 4
# 10 "/usr/i686-w64-mingw32/sys-root/mingw/include/_timeval.h" 3 4
struct timeval
{
 long tv_sec;
 long tv_usec;
};
# 247 "/usr/i686-w64-mingw32/sys-root/mingw/include/time.h" 2 3 4



struct timezone {
  int tz_minuteswest;
  int tz_dsttime;
};

  extern int __attribute__((__cdecl__)) mingw_gettimeofday (struct timeval *p, struct timezone *z);






#pragma pack(pop)
# 284 "/usr/i686-w64-mingw32/sys-root/mingw/include/time.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/sys/timeb.h" 1 3 4
# 15 "/usr/i686-w64-mingw32/sys-root/mingw/include/sys/timeb.h" 3 4
#pragma pack(push,_CRT_PACKING)
# 53 "/usr/i686-w64-mingw32/sys-root/mingw/include/sys/timeb.h" 3 4
  struct __timeb32 {
    __time32_t time;
    unsigned short millitm;
    short timezone;
    short dstflag;
  };


  struct timeb {
    time_t time;
    unsigned short millitm;
    short timezone;
    short dstflag;
  };


  struct __timeb64 {
    __time64_t time;
    unsigned short millitm;
    short timezone;
    short dstflag;
  };



  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _ftime64(struct __timeb64 *_Time);






  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _ftime(struct __timeb32 *);




struct timespec {
  time_t tv_sec;
  long tv_nsec;
};

struct itimerspec {
  struct timespec it_interval;
  struct timespec it_value;
};



  void __attribute__((__cdecl__)) ftime (struct timeb *);
# 122 "/usr/i686-w64-mingw32/sys-root/mingw/include/sys/timeb.h" 3 4
#pragma pack(pop)

# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/sec_api/sys/timeb_s.h" 1 3 4
# 10 "/usr/i686-w64-mingw32/sys-root/mingw/include/sec_api/sys/timeb_s.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/sys/timeb.h" 1 3 4
# 11 "/usr/i686-w64-mingw32/sys-root/mingw/include/sec_api/sys/timeb_s.h" 2 3 4







  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ftime_s(struct __timeb32 *_Time);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ftime64_s(struct __timeb64 *_Time);
# 125 "/usr/i686-w64-mingw32/sys-root/mingw/include/sys/timeb.h" 2 3 4
# 285 "/usr/i686-w64-mingw32/sys-root/mingw/include/time.h" 2 3 4







# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/pthread_time.h" 1 3 4
# 49 "/usr/i686-w64-mingw32/sys-root/mingw/include/pthread_time.h" 3 4
typedef int clockid_t;
# 78 "/usr/i686-w64-mingw32/sys-root/mingw/include/pthread_time.h" 3 4
       





int __attribute__((__cdecl__)) nanosleep(const struct timespec *request, struct timespec *remain);

int __attribute__((__cdecl__)) clock_nanosleep(clockid_t clock_id, int flags, const struct timespec *request, struct timespec *remain);
int __attribute__((__cdecl__)) clock_getres(clockid_t clock_id, struct timespec *res);
int __attribute__((__cdecl__)) clock_gettime(clockid_t clock_id, struct timespec *tp);
int __attribute__((__cdecl__)) clock_settime(clockid_t clock_id, const struct timespec *tp);

       
# 293 "/usr/i686-w64-mingw32/sys-root/mingw/include/time.h" 2 3 4
# 4 "JCEBA.LoadLibs.h" 2
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 1 3 4
# 10 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/limits.h" 1 3 4
# 11 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 2 3 4





#pragma pack(push,_CRT_PACKING)
# 40 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 3 4
  typedef int (__attribute__((__cdecl__)) *_onexit_t)(void);
# 50 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 3 4
  typedef struct _div_t {
    int quot;
    int rem;
  } div_t;

  typedef struct _ldiv_t {
    long quot;
    long rem;
  } ldiv_t;





#pragma pack(4)
  typedef struct {
    unsigned char ld[10];
  } _LDOUBLE;
#pragma pack()



  typedef struct {
    double x;
  } _CRT_DOUBLE;

  typedef struct {
    float f;
  } _CRT_FLOAT;

       


  typedef struct {
    long double x;
  } _LONGDOUBLE;

       

#pragma pack(4)
  typedef struct {
    unsigned char ld12[12];
  } _LDBL12;
#pragma pack()
# 105 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 3 4
  extern int * _imp____mb_cur_max;
# 131 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 3 4
  typedef void (__attribute__((__cdecl__)) *_purecall_handler)(void);

  __attribute__ ((__dllimport__)) _purecall_handler __attribute__((__cdecl__)) _set_purecall_handler(_purecall_handler _Handler);
  __attribute__ ((__dllimport__)) _purecall_handler __attribute__((__cdecl__)) _get_purecall_handler(void);

  typedef void (__attribute__((__cdecl__)) *_invalid_parameter_handler)(const wchar_t *,const wchar_t *,const wchar_t *,unsigned int,uintptr_t);
  __attribute__ ((__dllimport__)) _invalid_parameter_handler __attribute__((__cdecl__)) _set_invalid_parameter_handler(_invalid_parameter_handler _Handler);
  __attribute__ ((__dllimport__)) _invalid_parameter_handler __attribute__((__cdecl__)) _get_invalid_parameter_handler(void);



  __attribute__ ((__dllimport__)) extern int *__attribute__((__cdecl__)) _errno(void);

  errno_t __attribute__((__cdecl__)) _set_errno(int _Value);
  errno_t __attribute__((__cdecl__)) _get_errno(int *_Value);

  __attribute__ ((__dllimport__)) unsigned long *__attribute__((__cdecl__)) __doserrno(void);

  errno_t __attribute__((__cdecl__)) _set_doserrno(unsigned long _Value);
  errno_t __attribute__((__cdecl__)) _get_doserrno(unsigned long *_Value);




  extern __attribute__ ((__dllimport__)) char *_sys_errlist[1];
  extern __attribute__ ((__dllimport__)) int _sys_nerr;


  __attribute__ ((__dllimport__)) int *__attribute__((__cdecl__)) __p___argc(void);
  __attribute__ ((__dllimport__)) char ***__attribute__((__cdecl__)) __p___argv(void);
  __attribute__ ((__dllimport__)) wchar_t ***__attribute__((__cdecl__)) __p___wargv(void);
  __attribute__ ((__dllimport__)) char ***__attribute__((__cdecl__)) __p__environ(void);
  __attribute__ ((__dllimport__)) wchar_t ***__attribute__((__cdecl__)) __p__wenviron(void);
  __attribute__ ((__dllimport__)) char **__attribute__((__cdecl__)) __p__pgmptr(void);
  __attribute__ ((__dllimport__)) wchar_t **__attribute__((__cdecl__)) __p__wpgmptr(void);





  extern int * _imp____argc;







  extern char *** _imp____argv;







  extern wchar_t *** _imp____wargv;
# 199 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 3 4
  extern char *** _imp___environ;
# 208 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 3 4
  extern wchar_t *** _imp___wenviron;
# 217 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 3 4
  extern char ** _imp___pgmptr;
# 226 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 3 4
  extern wchar_t ** _imp___wpgmptr;



  errno_t __attribute__((__cdecl__)) _get_pgmptr(char **_Value);
  errno_t __attribute__((__cdecl__)) _get_wpgmptr(wchar_t **_Value);




  extern int * _imp___fmode;



  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _set_fmode(int _Mode);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_fmode(int *_PMode);





  extern unsigned int * _imp___osplatform;
# 256 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 3 4
  extern unsigned int * _imp___osver;
# 265 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 3 4
  extern unsigned int * _imp___winver;
# 274 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 3 4
  extern unsigned int * _imp___winmajor;
# 283 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 3 4
  extern unsigned int * _imp___winminor;




  errno_t __attribute__((__cdecl__)) _get_osplatform(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_osver(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winver(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winmajor(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winminor(unsigned int *_Value);
# 306 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 3 4
  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) exit(int _Code) __attribute__ ((__noreturn__));
  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _exit(int _Code) __attribute__ ((__noreturn__));



  void __attribute__((__cdecl__)) _Exit(int) __attribute__ ((__noreturn__));






       

  void __attribute__((__cdecl__)) __attribute__((noreturn)) abort(void);
       



  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _set_abort_behavior(unsigned int _Flags,unsigned int _Mask);



  int __attribute__((__cdecl__)) abs(int _X);
  long __attribute__((__cdecl__)) labs(long _X);


  __extension__ long long __attribute__((__cdecl__)) _abs64(long long);

  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) long long __attribute__((__cdecl__)) _abs64(long long x) {
    return __builtin_llabs(x);
  }


  int __attribute__((__cdecl__)) atexit(void (__attribute__((__cdecl__)) *)(void));


  double __attribute__((__cdecl__)) atof(const char *_String);
  double __attribute__((__cdecl__)) _atof_l(const char *_String,_locale_t _Locale);

  int __attribute__((__cdecl__)) atoi(const char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoi_l(const char *_Str,_locale_t _Locale);
  long __attribute__((__cdecl__)) atol(const char *_Str);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _atol_l(const char *_Str,_locale_t _Locale);


  void *__attribute__((__cdecl__)) bsearch(const void *_Key,const void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(const void *,const void *));
  void __attribute__((__cdecl__)) qsort(void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(const void *,const void *));

  unsigned short __attribute__((__cdecl__)) _byteswap_ushort(unsigned short _Short);
  unsigned long __attribute__((__cdecl__)) _byteswap_ulong (unsigned long _Long);
  __extension__ unsigned long long __attribute__((__cdecl__)) _byteswap_uint64(unsigned long long _Int64);
  div_t __attribute__((__cdecl__)) div(int _Numerator,int _Denominator);
  char *__attribute__((__cdecl__)) getenv(const char *_VarName) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _itoa(int _Value,char *_Dest,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _i64toa(long long _Val,char *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ui64toa(unsigned long long _Val,char *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _atoi64(const char *_String);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _atoi64_l(const char *_String,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _strtoi64(const char *_String,char **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _strtoi64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _strtoui64(const char *_String,char **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _strtoui64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  ldiv_t __attribute__((__cdecl__)) ldiv(long _Numerator,long _Denominator);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ltoa(long _Value,char *_Dest,int _Radix) ;
  int __attribute__((__cdecl__)) mblen(const char *_Ch,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _mblen_l(const char *_Ch,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrlen(const char *_Str);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrlen_l(const char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrnlen(const char *_Str,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrnlen_l(const char *_Str,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) mbtowc(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SrcSizeInBytes);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _mbtowc_l(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SrcSizeInBytes,_locale_t _Locale);
  size_t __attribute__((__cdecl__)) mbstowcs(wchar_t * __restrict__ _Dest,const char * __restrict__ _Source,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstowcs_l(wchar_t * __restrict__ _Dest,const char * __restrict__ _Source,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) mkstemp(char *template_name);
  int __attribute__((__cdecl__)) rand(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_error_mode(int _Mode);
  void __attribute__((__cdecl__)) srand(unsigned int _Seed);
# 411 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 3 4
  double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtod(const char * __restrict__ _Str,char ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtof(const char * __restrict__ nptr, char ** __restrict__ endptr);

  long double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtold(const char * __restrict__ , char ** __restrict__ );


  extern double __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
  __strtod (const char * __restrict__ , char ** __restrict__);






  float __attribute__((__cdecl__)) __mingw_strtof (const char * __restrict__, char ** __restrict__);
  double __attribute__((__cdecl__)) __mingw_strtod (const char * __restrict__, char ** __restrict__);
  long double __attribute__((__cdecl__)) __mingw_strtold(const char * __restrict__, char ** __restrict__);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _strtod_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,_locale_t _Locale);
  long __attribute__((__cdecl__)) strtol(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _strtol_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long __attribute__((__cdecl__)) strtoul(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _strtoul_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);


  int __attribute__((__cdecl__)) system(const char *_Command);

  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ultoa(unsigned long _Value,char *_Dest,int _Radix) ;
  int __attribute__((__cdecl__)) wctomb(char *_MbCh,wchar_t _WCh) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wctomb_l(char *_MbCh,wchar_t _WCh,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) wcstombs(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcstombs_l(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount,_locale_t _Locale) ;



  void *__attribute__((__cdecl__)) calloc(size_t _NumOfElements,size_t _SizeOfElements);
  void __attribute__((__cdecl__)) free(void *_Memory);
  void *__attribute__((__cdecl__)) malloc(size_t _Size);
  void *__attribute__((__cdecl__)) realloc(void *_Memory,size_t _NewSize);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _recalloc(void *_Memory,size_t _Count,size_t _Size);


       
       


  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _aligned_free(void *_Memory);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_malloc(size_t _Size,size_t _Alignment);
       
       

  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_malloc(size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_realloc(void *_Memory,size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_realloc(void *_Memory,size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment,size_t _Offset);





  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _itow(int _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ltow(long _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ultow(unsigned long _Value,wchar_t *_Dest,int _Radix) ;

  double __attribute__((__cdecl__)) __mingw_wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) __mingw_wcstof(const wchar_t * __restrict__ nptr, wchar_t ** __restrict__ endptr);
  long double __attribute__((__cdecl__)) __mingw_wcstold(const wchar_t * __restrict__, wchar_t ** __restrict__);
# 491 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 3 4
  double __attribute__((__cdecl__)) wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) wcstof(const wchar_t * __restrict__ nptr, wchar_t ** __restrict__ endptr);


  long double __attribute__((__cdecl__)) wcstold(const wchar_t * __restrict__, wchar_t ** __restrict__);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wcstod_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,_locale_t _Locale);
  long __attribute__((__cdecl__)) wcstol(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wcstol_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long __attribute__((__cdecl__)) wcstoul(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _wcstoul_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wgetenv(const wchar_t *_VarName) ;


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wsystem(const wchar_t *_Command);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wtof(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wtof_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wtoi(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wtoi_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtol(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtol_l(const wchar_t *_Str,_locale_t _Locale);

  __extension__ __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _i64tow(long long _Val,wchar_t *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ui64tow(unsigned long long _Val,wchar_t *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wtoi64(const wchar_t *_Str);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wtoi64_l(const wchar_t *_Str,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wcstoi64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wcstoi64_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _wcstoui64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _wcstoui64_l(const wchar_t *_Str ,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putenv(const char *_EnvString);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wputenv(const wchar_t *_EnvString);



  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _fullpath(char *_FullPath,const char *_Path,size_t _SizeInBytes);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atodbl(_CRT_DOUBLE *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoldbl(_LDOUBLE *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoflt(_CRT_FLOAT *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atodbl_l(_CRT_DOUBLE *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoldbl_l(_LDOUBLE *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoflt_l(_CRT_FLOAT *_Result,char *_Str,_locale_t _Locale);
# 554 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 3 4
unsigned long __attribute__((__cdecl__)) _lrotl(unsigned long,int);
unsigned long __attribute__((__cdecl__)) _lrotr(unsigned long,int);





  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _makepath(char *_Path,const char *_Drive,const char *_Dir,const char *_Filename,const char *_Ext);
  _onexit_t __attribute__((__cdecl__)) _onexit(_onexit_t _Func);





       
       


  __extension__ unsigned long long __attribute__((__cdecl__)) _rotl64(unsigned long long _Val,int _Shift);
  __extension__ unsigned long long __attribute__((__cdecl__)) _rotr64(unsigned long long Value,int Shift);
       
       
       
       


  unsigned int __attribute__((__cdecl__)) _rotr(unsigned int _Val,int _Shift);
  unsigned int __attribute__((__cdecl__)) _rotl(unsigned int _Val,int _Shift);
       
       
  __extension__ unsigned long long __attribute__((__cdecl__)) _rotr64(unsigned long long _Val,int _Shift);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _searchenv(const char *_Filename,const char *_EnvVar,char *_ResultPath) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _splitpath(const char *_FullPath,char *_Drive,char *_Dir,char *_Filename,char *_Ext) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _swab(char *_Buf1,char *_Buf2,int _SizeInBytes);



  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wfullpath(wchar_t *_FullPath,const wchar_t *_Path,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wmakepath(wchar_t *_ResultPath,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);




  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wsearchenv(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wsplitpath(const wchar_t *_FullPath,wchar_t *_Drive,wchar_t *_Dir,wchar_t *_Filename,wchar_t *_Ext) ;


  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _beep(unsigned _Frequency,unsigned _Duration) __attribute__ ((__deprecated__));

  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _seterrormode(int _Mode) __attribute__ ((__deprecated__));
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _sleep(unsigned long _Duration) __attribute__ ((__deprecated__));
# 625 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 3 4
  char *__attribute__((__cdecl__)) ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  char *__attribute__((__cdecl__)) fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  char *__attribute__((__cdecl__)) gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  char *__attribute__((__cdecl__)) itoa(int _Val,char *_DstBuf,int _Radix) ;
  char *__attribute__((__cdecl__)) ltoa(long _Val,char *_DstBuf,int _Radix) ;
  int __attribute__((__cdecl__)) putenv(const char *_EnvString) ;



  void __attribute__((__cdecl__)) swab(char *_Buf1,char *_Buf2,int _SizeInBytes) ;


  char *__attribute__((__cdecl__)) ultoa(unsigned long _Val,char *_Dstbuf,int _Radix) ;
  _onexit_t __attribute__((__cdecl__)) onexit(_onexit_t _Func);





  typedef struct { __extension__ long long quot, rem; } lldiv_t;

  __extension__ lldiv_t __attribute__((__cdecl__)) lldiv(long long, long long);

  __extension__ long long __attribute__((__cdecl__)) llabs(long long);




  __extension__ long long __attribute__((__cdecl__)) strtoll(const char * __restrict__, char ** __restrict, int);
  __extension__ unsigned long long __attribute__((__cdecl__)) strtoull(const char * __restrict__, char ** __restrict__, int);


  __extension__ long long __attribute__((__cdecl__)) atoll (const char *);


  __extension__ long long __attribute__((__cdecl__)) wtoll (const wchar_t *);
  __extension__ char *__attribute__((__cdecl__)) lltoa (long long, char *, int);
  __extension__ char *__attribute__((__cdecl__)) ulltoa (unsigned long long , char *, int);
  __extension__ wchar_t *__attribute__((__cdecl__)) lltow (long long, wchar_t *, int);
  __extension__ wchar_t *__attribute__((__cdecl__)) ulltow (unsigned long long, wchar_t *, int);
# 683 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 3 4
#pragma pack(pop)

# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/sec_api/stdlib_s.h" 1 3 4
# 9 "/usr/i686-w64-mingw32/sys-root/mingw/include/sec_api/stdlib_s.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 1 3 4
# 10 "/usr/i686-w64-mingw32/sys-root/mingw/include/sec_api/stdlib_s.h" 2 3 4







  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _dupenv_s(char **_PBuffer,size_t *_PBufferSizeInBytes,const char *_VarName);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _itoa_s(int _Value,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _i64toa_s(long long _Val,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ui64toa_s(unsigned long long _Val,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ltoa_s(long _Val,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) mbstowcs_s(size_t *_PtNumOfCharConverted,wchar_t *_DstBuf,size_t _SizeInWords,const char *_SrcBuf,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _mbstowcs_s_l(size_t *_PtNumOfCharConverted,wchar_t *_DstBuf,size_t _SizeInWords,const char *_SrcBuf,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ultoa_s(unsigned long _Val,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wctomb_s_l(int *_SizeConverted,char *_MbCh,size_t _SizeInBytes,wchar_t _WCh,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcstombs_s(size_t *_PtNumOfCharConverted,char *_Dst,size_t _DstSizeInBytes,const wchar_t *_Src,size_t _MaxCountInBytes);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcstombs_s_l(size_t *_PtNumOfCharConverted,char *_Dst,size_t _DstSizeInBytes,const wchar_t *_Src,size_t _MaxCountInBytes,_locale_t _Locale);



  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _itow_s (int _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ltow_s (long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ultow_s (unsigned long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wgetenv_s(size_t *_ReturnSize,wchar_t *_DstBuf,size_t _DstSizeInWords,const wchar_t *_VarName);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wdupenv_s(wchar_t **_Buffer,size_t *_BufferSizeInWords,const wchar_t *_VarName);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _i64tow_s(long long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ui64tow_s(unsigned long long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);



  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ecvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDights,int *_PtDec,int *_PtSign);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _fcvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDec,int *_PtDec,int *_PtSign);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _gcvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDigits);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _makepath_s(char *_PathResult,size_t _Size,const char *_Drive,const char *_Dir,const char *_Filename,const char *_Ext);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _putenv_s(const char *_Name,const char *_Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _searchenv_s(const char *_Filename,const char *_EnvVar,char *_ResultPath,size_t _SizeInBytes);

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _splitpath_s(const char *_FullPath,char *_Drive,size_t _DriveSize,char *_Dir,size_t _DirSize,char *_Filename,size_t _FilenameSize,char *_Ext,size_t _ExtSize);
 



  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wmakepath_s(wchar_t *_PathResult,size_t _SizeInWords,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wputenv_s(const wchar_t *_Name,const wchar_t *_Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wsearchenv_s(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath,size_t _SizeInWords);

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wsplitpath_s(const wchar_t *_FullPath,wchar_t *_Drive,size_t _DriveSizeInWords,wchar_t *_Dir,size_t _DirSizeInWords,wchar_t *_Filename,size_t _FilenameSizeInWords,wchar_t *_Ext,size_t _ExtSizeInWords);
 





  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) qsort_s(void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(void *,const void *,const void *),void *_Context);
# 686 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/malloc.h" 1 3 4
# 11 "/usr/i686-w64-mingw32/sys-root/mingw/include/malloc.h" 3 4
#pragma pack(push,_CRT_PACKING)
# 46 "/usr/i686-w64-mingw32/sys-root/mingw/include/malloc.h" 3 4
  typedef struct _heapinfo {
    int *_pentry;
    size_t _size;
    int _useflag;
  } _HEAPINFO;


  extern unsigned int _amblksiz;
# 65 "/usr/i686-w64-mingw32/sys-root/mingw/include/malloc.h" 3 4
       
       
# 97 "/usr/i686-w64-mingw32/sys-root/mingw/include/malloc.h" 3 4
       
       




void * __mingw_aligned_malloc (size_t _Size, size_t _Alignment);
void __mingw_aligned_free (void *_Memory);
void * __mingw_aligned_offset_realloc (void *_Memory, size_t _Size, size_t _Alignment, size_t _Offset);
void * __mingw_aligned_realloc (void *_Memory, size_t _Size, size_t _Offset);



  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _resetstkoflw (void);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _set_malloc_crt_max_wait(unsigned long _NewValue);

  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _expand(void *_Memory,size_t _NewSize);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _msize(void *_Memory);






  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _get_sbh_threshold(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_sbh_threshold(size_t _NewValue);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _set_amblksiz(size_t _Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_amblksiz(size_t *_Value);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapadd(void *_Memory,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapchk(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapmin(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapset(unsigned int _Fill);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapwalk(_HEAPINFO *_EntryInfo);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _heapused(size_t *_Used,size_t *_Commit);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _get_heap_handle(void);
# 144 "/usr/i686-w64-mingw32/sys-root/mingw/include/malloc.h" 3 4
  static __inline void *_MarkAllocaS(void *_Ptr,unsigned int _Marker) {
    if(_Ptr) {
      *((unsigned int*)_Ptr) = _Marker;
      _Ptr = (char*)_Ptr + 8;
    }
    return _Ptr;
  }
# 163 "/usr/i686-w64-mingw32/sys-root/mingw/include/malloc.h" 3 4
  static __inline void __attribute__((__cdecl__)) _freea(void *_Memory) {
    unsigned int _Marker;
    if(_Memory) {
      _Memory = (char*)_Memory - 8;
      _Marker = *(unsigned int *)_Memory;
      if(_Marker==0xDDDD) {
 free(_Memory);
      }





    }
  }
# 209 "/usr/i686-w64-mingw32/sys-root/mingw/include/malloc.h" 3 4
#pragma pack(pop)
# 687 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdlib.h" 2 3 4
# 5 "JCEBA.LoadLibs.h" 2
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/math.h" 1 3 4
# 10 "/usr/i686-w64-mingw32/sys-root/mingw/include/math.h" 3 4
       
# 11 "/usr/i686-w64-mingw32/sys-root/mingw/include/math.h" 3




struct _exception;

#pragma pack(push,_CRT_PACKING)
# 119 "/usr/i686-w64-mingw32/sys-root/mingw/include/math.h" 3
  typedef union __mingw_dbl_type_t {
    double x;
    unsigned long long val;
    __extension__ struct {
      unsigned int low, high;
    } lh;
  } __mingw_dbl_type_t;

  typedef union __mingw_flt_type_t {
    float x;
    unsigned int val;
  } __mingw_flt_type_t;

  typedef union __mingw_ldbl_type_t
  {
    long double x;
    __extension__ struct {
      unsigned int low, high;
      int sign_exponent : 16;
      int res1 : 16;
      int res0 : 32;
    } lh;
  } __mingw_ldbl_type_t;

  typedef union __mingw_fp_types_t
  {
    long double *ld;
    double *d;
    float *f;
    __mingw_ldbl_type_t *ldt;
    __mingw_dbl_type_t *dt;
    __mingw_flt_type_t *ft;
  } __mingw_fp_types_t;




  extern double * _imp___HUGE;
# 168 "/usr/i686-w64-mingw32/sys-root/mingw/include/math.h" 3
  struct _exception {
    int type;
    const char *name;
    double arg1;
    double arg2;
    double retval;
  };

  void __mingw_raise_matherr (int typ, const char *name, double a1, double a2,
         double rslt);
  void __mingw_setusermatherr (int (__attribute__((__cdecl__)) *)(struct _exception *));
  __attribute__ ((__dllimport__)) void __setusermatherr(int (__attribute__((__cdecl__)) *)(struct _exception *));



  double __attribute__((__cdecl__)) sin(double _X);
  double __attribute__((__cdecl__)) cos(double _X);
  double __attribute__((__cdecl__)) tan(double _X);
  double __attribute__((__cdecl__)) sinh(double _X);
  double __attribute__((__cdecl__)) cosh(double _X);
  double __attribute__((__cdecl__)) tanh(double _X);
  double __attribute__((__cdecl__)) asin(double _X);
  double __attribute__((__cdecl__)) acos(double _X);
  double __attribute__((__cdecl__)) atan(double _X);
  double __attribute__((__cdecl__)) atan2(double _Y,double _X);
  double __attribute__((__cdecl__)) exp(double _X);
  double __attribute__((__cdecl__)) log(double _X);
  double __attribute__((__cdecl__)) log10(double _X);
  double __attribute__((__cdecl__)) pow(double _X,double _Y);
  double __attribute__((__cdecl__)) sqrt(double _X);
  double __attribute__((__cdecl__)) ceil(double _X);
  double __attribute__((__cdecl__)) floor(double _X);


  extern float __attribute__((__cdecl__)) fabsf (float x);
  extern long double __attribute__((__cdecl__)) fabsl (long double);
  extern double __attribute__((__cdecl__)) fabs (double _X);
# 243 "/usr/i686-w64-mingw32/sys-root/mingw/include/math.h" 3
  double __attribute__((__cdecl__)) ldexp(double _X,int _Y);
  double __attribute__((__cdecl__)) frexp(double _X,int *_Y);
  double __attribute__((__cdecl__)) modf(double _X,double *_Y);
  double __attribute__((__cdecl__)) fmod(double _X,double _Y);

  void __attribute__((__cdecl__)) sincos (double __x, double *p_sin, double *p_cos);
  void __attribute__((__cdecl__)) sincosl (long double __x, long double *p_sin, long double *p_cos);
  void __attribute__((__cdecl__)) sincosf (float __x, float *p_sin, float *p_cos);
# 270 "/usr/i686-w64-mingw32/sys-root/mingw/include/math.h" 3
  struct _complex {
    double x;
    double y;
  };


  double __attribute__((__cdecl__)) _cabs(struct _complex _ComplexA);
  double __attribute__((__cdecl__)) _hypot(double _X,double _Y);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _j0(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _j1(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _jn(int _X,double _Y);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _y0(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _y1(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _yn(int _X,double _Y);


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _matherr (struct _exception *);
# 297 "/usr/i686-w64-mingw32/sys-root/mingw/include/math.h" 3
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _chgsign (double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _copysign (double _Number,double _Sign);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _logb (double);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _nextafter (double, double);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _scalb (double, long);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _finite (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fpclass (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isnan (double);






__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) j0 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) j1 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) jn (int, double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) y0 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) y1 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) yn (int, double) ;

__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) chgsign (double);
# 327 "/usr/i686-w64-mingw32/sys-root/mingw/include/math.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) finite (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) fpclass (double);
# 344 "/usr/i686-w64-mingw32/sys-root/mingw/include/math.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_SSE2_enable(int _Flag);
# 378 "/usr/i686-w64-mingw32/sys-root/mingw/include/math.h" 3
typedef long double float_t;
typedef long double double_t;
# 407 "/usr/i686-w64-mingw32/sys-root/mingw/include/math.h" 3
  extern int __attribute__((__cdecl__)) __fpclassifyl (long double);
  extern int __attribute__((__cdecl__)) __fpclassifyf (float);
  extern int __attribute__((__cdecl__)) __fpclassify (double);
# 533 "/usr/i686-w64-mingw32/sys-root/mingw/include/math.h" 3
  extern int __attribute__((__cdecl__)) __isnan (double);
  extern int __attribute__((__cdecl__)) __isnanf (float);
  extern int __attribute__((__cdecl__)) __isnanl (long double);
# 628 "/usr/i686-w64-mingw32/sys-root/mingw/include/math.h" 3
  extern int __attribute__((__cdecl__)) __signbit (double);
  extern int __attribute__((__cdecl__)) __signbitf (float);
  extern int __attribute__((__cdecl__)) __signbitl (long double);
# 688 "/usr/i686-w64-mingw32/sys-root/mingw/include/math.h" 3
  extern float __attribute__((__cdecl__)) sinf(float _X);
  extern long double __attribute__((__cdecl__)) sinl(long double);

  extern float __attribute__((__cdecl__)) cosf(float _X);
  extern long double __attribute__((__cdecl__)) cosl(long double);

  extern float __attribute__((__cdecl__)) tanf(float _X);
  extern long double __attribute__((__cdecl__)) tanl(long double);
  extern float __attribute__((__cdecl__)) asinf(float _X);
  extern long double __attribute__((__cdecl__)) asinl(long double);

  extern float __attribute__((__cdecl__)) acosf (float);
  extern long double __attribute__((__cdecl__)) acosl (long double);

  extern float __attribute__((__cdecl__)) atanf (float);
  extern long double __attribute__((__cdecl__)) atanl (long double);

  extern float __attribute__((__cdecl__)) atan2f (float, float);
  extern long double __attribute__((__cdecl__)) atan2l (long double, long double);


  extern float __attribute__((__cdecl__)) sinhf(float _X);



  extern long double __attribute__((__cdecl__)) sinhl(long double);

  extern float __attribute__((__cdecl__)) coshf(float _X);



  extern long double __attribute__((__cdecl__)) coshl(long double);

  extern float __attribute__((__cdecl__)) tanhf(float _X);



  extern long double __attribute__((__cdecl__)) tanhl(long double);



  extern double __attribute__((__cdecl__)) acosh (double);
  extern float __attribute__((__cdecl__)) acoshf (float);
  extern long double __attribute__((__cdecl__)) acoshl (long double);


  extern double __attribute__((__cdecl__)) asinh (double);
  extern float __attribute__((__cdecl__)) asinhf (float);
  extern long double __attribute__((__cdecl__)) asinhl (long double);


  extern double __attribute__((__cdecl__)) atanh (double);
  extern float __attribute__((__cdecl__)) atanhf (float);
  extern long double __attribute__((__cdecl__)) atanhl (long double);



  extern float __attribute__((__cdecl__)) expf(float _X);



  extern long double __attribute__((__cdecl__)) expl(long double);


  extern double __attribute__((__cdecl__)) exp2(double);
  extern float __attribute__((__cdecl__)) exp2f(float);
  extern long double __attribute__((__cdecl__)) exp2l(long double);



  extern double __attribute__((__cdecl__)) expm1(double);
  extern float __attribute__((__cdecl__)) expm1f(float);
  extern long double __attribute__((__cdecl__)) expm1l(long double);


  extern float frexpf(float _X,int *_Y);



  extern long double __attribute__((__cdecl__)) frexpl(long double,int *);




  extern int __attribute__((__cdecl__)) ilogb (double);
  extern int __attribute__((__cdecl__)) ilogbf (float);
  extern int __attribute__((__cdecl__)) ilogbl (long double);


  extern float __attribute__((__cdecl__)) ldexpf(float _X,int _Y);



  extern long double __attribute__((__cdecl__)) ldexpl (long double, int);


  extern float __attribute__((__cdecl__)) logf (float);
  extern long double __attribute__((__cdecl__)) logl(long double);


  extern float __attribute__((__cdecl__)) log10f (float);
  extern long double __attribute__((__cdecl__)) log10l(long double);


  extern double __attribute__((__cdecl__)) log1p(double);
  extern float __attribute__((__cdecl__)) log1pf(float);
  extern long double __attribute__((__cdecl__)) log1pl(long double);


  extern double __attribute__((__cdecl__)) log2 (double);
  extern float __attribute__((__cdecl__)) log2f (float);
  extern long double __attribute__((__cdecl__)) log2l (long double);


  extern double __attribute__((__cdecl__)) logb (double);
  extern float __attribute__((__cdecl__)) logbf (float);
  extern long double __attribute__((__cdecl__)) logbl (long double);
# 887 "/usr/i686-w64-mingw32/sys-root/mingw/include/math.h" 3
  extern float __attribute__((__cdecl__)) modff (float, float*);
  extern long double __attribute__((__cdecl__)) modfl (long double, long double*);


  extern double __attribute__((__cdecl__)) scalbn (double, int);
  extern float __attribute__((__cdecl__)) scalbnf (float, int);
  extern long double __attribute__((__cdecl__)) scalbnl (long double, int);

  extern double __attribute__((__cdecl__)) scalbln (double, long);
  extern float __attribute__((__cdecl__)) scalblnf (float, long);
  extern long double __attribute__((__cdecl__)) scalblnl (long double, long);



  extern double __attribute__((__cdecl__)) cbrt (double);
  extern float __attribute__((__cdecl__)) cbrtf (float);
  extern long double __attribute__((__cdecl__)) cbrtl (long double);


  extern double __attribute__((__cdecl__)) hypot (double, double) ;
  extern float __attribute__((__cdecl__)) hypotf (float x, float y);



  extern long double __attribute__((__cdecl__)) hypotl (long double, long double);


  extern float __attribute__((__cdecl__)) powf(float _X,float _Y);



  extern long double __attribute__((__cdecl__)) powl (long double, long double);


  extern float __attribute__((__cdecl__)) sqrtf (float);
  extern long double sqrtl(long double);


  extern double __attribute__((__cdecl__)) erf (double);
  extern float __attribute__((__cdecl__)) erff (float);
  extern long double __attribute__((__cdecl__)) erfl (long double);


  extern double __attribute__((__cdecl__)) erfc (double);
  extern float __attribute__((__cdecl__)) erfcf (float);
  extern long double __attribute__((__cdecl__)) erfcl (long double);


  extern double __attribute__((__cdecl__)) lgamma (double);
  extern float __attribute__((__cdecl__)) lgammaf (float);
  extern long double __attribute__((__cdecl__)) lgammal (long double);

  extern int signgam;


  extern double __attribute__((__cdecl__)) tgamma (double);
  extern float __attribute__((__cdecl__)) tgammaf (float);
  extern long double __attribute__((__cdecl__)) tgammal (long double);


  extern float __attribute__((__cdecl__)) ceilf (float);
  extern long double __attribute__((__cdecl__)) ceill (long double);


  extern float __attribute__((__cdecl__)) floorf (float);
  extern long double __attribute__((__cdecl__)) floorl (long double);


  extern double __attribute__((__cdecl__)) nearbyint ( double);
  extern float __attribute__((__cdecl__)) nearbyintf (float);
  extern long double __attribute__((__cdecl__)) nearbyintl (long double);



extern double __attribute__((__cdecl__)) rint (double);
extern float __attribute__((__cdecl__)) rintf (float);
extern long double __attribute__((__cdecl__)) rintl (long double);


extern long __attribute__((__cdecl__)) lrint (double);
extern long __attribute__((__cdecl__)) lrintf (float);
extern long __attribute__((__cdecl__)) lrintl (long double);

__extension__ long long __attribute__((__cdecl__)) llrint (double);
__extension__ long long __attribute__((__cdecl__)) llrintf (float);
__extension__ long long __attribute__((__cdecl__)) llrintl (long double);
# 1054 "/usr/i686-w64-mingw32/sys-root/mingw/include/math.h" 3
  extern double __attribute__((__cdecl__)) round (double);
  extern float __attribute__((__cdecl__)) roundf (float);
  extern long double __attribute__((__cdecl__)) roundl (long double);


  extern long __attribute__((__cdecl__)) lround (double);
  extern long __attribute__((__cdecl__)) lroundf (float);
  extern long __attribute__((__cdecl__)) lroundl (long double);
  __extension__ long long __attribute__((__cdecl__)) llround (double);
  __extension__ long long __attribute__((__cdecl__)) llroundf (float);
  __extension__ long long __attribute__((__cdecl__)) llroundl (long double);



  extern double __attribute__((__cdecl__)) trunc (double);
  extern float __attribute__((__cdecl__)) truncf (float);
  extern long double __attribute__((__cdecl__)) truncl (long double);


  extern float __attribute__((__cdecl__)) fmodf (float, float);
  extern long double __attribute__((__cdecl__)) fmodl (long double, long double);


  extern double __attribute__((__cdecl__)) remainder (double, double);
  extern float __attribute__((__cdecl__)) remainderf (float, float);
  extern long double __attribute__((__cdecl__)) remainderl (long double, long double);


  extern double __attribute__((__cdecl__)) remquo(double, double, int *);
  extern float __attribute__((__cdecl__)) remquof(float, float, int *);
  extern long double __attribute__((__cdecl__)) remquol(long double, long double, int *);


  extern double __attribute__((__cdecl__)) copysign (double, double);
  extern float __attribute__((__cdecl__)) copysignf (float, float);
  extern long double __attribute__((__cdecl__)) copysignl (long double, long double);
# 1111 "/usr/i686-w64-mingw32/sys-root/mingw/include/math.h" 3
  extern double __attribute__((__cdecl__)) nan(const char *tagp);
  extern float __attribute__((__cdecl__)) nanf(const char *tagp);
  extern long double __attribute__((__cdecl__)) nanl(const char *tagp);
# 1122 "/usr/i686-w64-mingw32/sys-root/mingw/include/math.h" 3
  extern double __attribute__((__cdecl__)) nextafter (double, double);
  extern float __attribute__((__cdecl__)) nextafterf (float, float);
  extern long double __attribute__((__cdecl__)) nextafterl (long double, long double);


  extern double __attribute__((__cdecl__)) nexttoward (double, long double);
  extern float __attribute__((__cdecl__)) nexttowardf (float, long double);
  extern long double __attribute__((__cdecl__)) nexttowardl (long double, long double);



  extern double __attribute__((__cdecl__)) fdim (double x, double y);
  extern float __attribute__((__cdecl__)) fdimf (float x, float y);
  extern long double __attribute__((__cdecl__)) fdiml (long double x, long double y);







  extern double __attribute__((__cdecl__)) fmax (double, double);
  extern float __attribute__((__cdecl__)) fmaxf (float, float);
  extern long double __attribute__((__cdecl__)) fmaxl (long double, long double);


  extern double __attribute__((__cdecl__)) fmin (double, double);
  extern float __attribute__((__cdecl__)) fminf (float, float);
  extern long double __attribute__((__cdecl__)) fminl (long double, long double);



  extern double __attribute__((__cdecl__)) fma (double, double, double);
  extern float __attribute__((__cdecl__)) fmaf (float, float, float);
  extern long double __attribute__((__cdecl__)) fmal (long double, long double, long double);
# 1201 "/usr/i686-w64-mingw32/sys-root/mingw/include/math.h" 3
  __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _hypotf(float _X,float _Y);



   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _copysignf (float _Number,float _Sign);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _chgsignf (float _X);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _logbf(float _X);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _nextafterf(float _X,float _Y);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _finitef(float _X);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isnanf(float _X);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fpclassf(float _X);



   extern long double __attribute__((__cdecl__)) _chgsignl (long double);
# 1605 "/usr/i686-w64-mingw32/sys-root/mingw/include/math.h" 3
#pragma pack(pop)
# 6 "JCEBA.LoadLibs.h" 2
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 1 3 4
# 275 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef unsigned int GLenum;
typedef unsigned int GLbitfield;
typedef unsigned int GLuint;
typedef int GLint;
typedef int GLsizei;
typedef unsigned char GLboolean;
typedef signed char GLbyte;
typedef short GLshort;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned long GLulong;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void GLvoid;
# 299 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/inttypes.h" 1 3 4
# 12 "/usr/i686-w64-mingw32/sys-root/mingw/include/inttypes.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdint.h" 1 3 4
# 32 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdint.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/stddef.h" 1 3 4
# 24 "/usr/i686-w64-mingw32/sys-root/mingw/include/stddef.h" 3 4
  __attribute__ ((__dllimport__)) extern unsigned long __attribute__((__cdecl__)) __threadid(void);

  __attribute__ ((__dllimport__)) extern uintptr_t __attribute__((__cdecl__)) __threadhandle(void);
# 33 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdint.h" 2 3 4


typedef signed char int8_t;
typedef unsigned char uint8_t;
typedef short int16_t;
typedef unsigned short uint16_t;
typedef int int32_t;
typedef unsigned uint32_t;
__extension__ typedef long long int64_t;
__extension__ typedef unsigned long long uint64_t;


typedef signed char int_least8_t;
typedef unsigned char uint_least8_t;
typedef short int_least16_t;
typedef unsigned short uint_least16_t;
typedef int int_least32_t;
typedef unsigned uint_least32_t;
__extension__ typedef long long int_least64_t;
__extension__ typedef unsigned long long uint_least64_t;





typedef signed char int_fast8_t;
typedef unsigned char uint_fast8_t;
typedef short int_fast16_t;
typedef unsigned short uint_fast16_t;
typedef int int_fast32_t;
typedef unsigned int uint_fast32_t;
__extension__ typedef long long int_fast64_t;
__extension__ typedef unsigned long long uint_fast64_t;


__extension__ typedef long long intmax_t;
__extension__ typedef unsigned long long uintmax_t;
# 13 "/usr/i686-w64-mingw32/sys-root/mingw/include/inttypes.h" 2 3 4

# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/stddef.h" 1 3 4
# 15 "/usr/i686-w64-mingw32/sys-root/mingw/include/inttypes.h" 2 3 4





typedef struct {
 intmax_t quot;
 intmax_t rem;
 } imaxdiv_t;


# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw_print_push.h" 1 3 4
# 27 "/usr/i686-w64-mingw32/sys-root/mingw/include/inttypes.h" 2 3 4
# 279 "/usr/i686-w64-mingw32/sys-root/mingw/include/inttypes.h" 3 4
intmax_t __attribute__((__cdecl__)) imaxabs (intmax_t j);




imaxdiv_t __attribute__((__cdecl__)) imaxdiv (intmax_t numer, intmax_t denom);



intmax_t __attribute__((__cdecl__)) strtoimax (const char* __restrict__ nptr,
                            char** __restrict__ endptr, int base);
uintmax_t __attribute__((__cdecl__)) strtoumax (const char* __restrict__ nptr,
        char** __restrict__ endptr, int base);

intmax_t __attribute__((__cdecl__)) wcstoimax (const wchar_t* __restrict__ nptr,
                            wchar_t** __restrict__ endptr, int base);
uintmax_t __attribute__((__cdecl__)) wcstoumax (const wchar_t* __restrict__ nptr,
        wchar_t** __restrict__ endptr, int base);


# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw_print_pop.h" 1 3 4
# 300 "/usr/i686-w64-mingw32/sys-root/mingw/include/inttypes.h" 2 3 4
# 300 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 2 3 4

typedef int64_t GLint64EXT;
typedef uint64_t GLuint64EXT;

typedef GLint64EXT GLint64;
typedef GLuint64EXT GLuint64;
typedef struct __GLsync *GLsync;

typedef char GLchar;
# 845 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
extern void __attribute__((__stdcall__)) glAccum (GLenum op, GLfloat value);
extern void __attribute__((__stdcall__)) glAlphaFunc (GLenum func, GLclampf ref);
extern GLboolean __attribute__((__stdcall__)) glAreTexturesResident (GLsizei n, const GLuint *textures, GLboolean *residences);
extern void __attribute__((__stdcall__)) glArrayElement (GLint i);
extern void __attribute__((__stdcall__)) glBegin (GLenum mode);
extern void __attribute__((__stdcall__)) glBindTexture (GLenum target, GLuint texture);
extern void __attribute__((__stdcall__)) glBitmap (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
extern void __attribute__((__stdcall__)) glBlendFunc (GLenum sfactor, GLenum dfactor);
extern void __attribute__((__stdcall__)) glCallList (GLuint list);
extern void __attribute__((__stdcall__)) glCallLists (GLsizei n, GLenum type, const void *lists);
extern void __attribute__((__stdcall__)) glClear (GLbitfield mask);
extern void __attribute__((__stdcall__)) glClearAccum (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern void __attribute__((__stdcall__)) glClearColor (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
extern void __attribute__((__stdcall__)) glClearDepth (GLclampd depth);
extern void __attribute__((__stdcall__)) glClearIndex (GLfloat c);
extern void __attribute__((__stdcall__)) glClearStencil (GLint s);
extern void __attribute__((__stdcall__)) glClipPlane (GLenum plane, const GLdouble *equation);
extern void __attribute__((__stdcall__)) glColor3b (GLbyte red, GLbyte green, GLbyte blue);
extern void __attribute__((__stdcall__)) glColor3bv (const GLbyte *v);
extern void __attribute__((__stdcall__)) glColor3d (GLdouble red, GLdouble green, GLdouble blue);
extern void __attribute__((__stdcall__)) glColor3dv (const GLdouble *v);
extern void __attribute__((__stdcall__)) glColor3f (GLfloat red, GLfloat green, GLfloat blue);
extern void __attribute__((__stdcall__)) glColor3fv (const GLfloat *v);
extern void __attribute__((__stdcall__)) glColor3i (GLint red, GLint green, GLint blue);
extern void __attribute__((__stdcall__)) glColor3iv (const GLint *v);
extern void __attribute__((__stdcall__)) glColor3s (GLshort red, GLshort green, GLshort blue);
extern void __attribute__((__stdcall__)) glColor3sv (const GLshort *v);
extern void __attribute__((__stdcall__)) glColor3ub (GLubyte red, GLubyte green, GLubyte blue);
extern void __attribute__((__stdcall__)) glColor3ubv (const GLubyte *v);
extern void __attribute__((__stdcall__)) glColor3ui (GLuint red, GLuint green, GLuint blue);
extern void __attribute__((__stdcall__)) glColor3uiv (const GLuint *v);
extern void __attribute__((__stdcall__)) glColor3us (GLushort red, GLushort green, GLushort blue);
extern void __attribute__((__stdcall__)) glColor3usv (const GLushort *v);
extern void __attribute__((__stdcall__)) glColor4b (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
extern void __attribute__((__stdcall__)) glColor4bv (const GLbyte *v);
extern void __attribute__((__stdcall__)) glColor4d (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
extern void __attribute__((__stdcall__)) glColor4dv (const GLdouble *v);
extern void __attribute__((__stdcall__)) glColor4f (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern void __attribute__((__stdcall__)) glColor4fv (const GLfloat *v);
extern void __attribute__((__stdcall__)) glColor4i (GLint red, GLint green, GLint blue, GLint alpha);
extern void __attribute__((__stdcall__)) glColor4iv (const GLint *v);
extern void __attribute__((__stdcall__)) glColor4s (GLshort red, GLshort green, GLshort blue, GLshort alpha);
extern void __attribute__((__stdcall__)) glColor4sv (const GLshort *v);
extern void __attribute__((__stdcall__)) glColor4ub (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
extern void __attribute__((__stdcall__)) glColor4ubv (const GLubyte *v);
extern void __attribute__((__stdcall__)) glColor4ui (GLuint red, GLuint green, GLuint blue, GLuint alpha);
extern void __attribute__((__stdcall__)) glColor4uiv (const GLuint *v);
extern void __attribute__((__stdcall__)) glColor4us (GLushort red, GLushort green, GLushort blue, GLushort alpha);
extern void __attribute__((__stdcall__)) glColor4usv (const GLushort *v);
extern void __attribute__((__stdcall__)) glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
extern void __attribute__((__stdcall__)) glColorMaterial (GLenum face, GLenum mode);
extern void __attribute__((__stdcall__)) glColorPointer (GLint size, GLenum type, GLsizei stride, const void *pointer);
extern void __attribute__((__stdcall__)) glCopyPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
extern void __attribute__((__stdcall__)) glCopyTexImage1D (GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border);
extern void __attribute__((__stdcall__)) glCopyTexImage2D (GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
extern void __attribute__((__stdcall__)) glCopyTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
extern void __attribute__((__stdcall__)) glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern void __attribute__((__stdcall__)) glCullFace (GLenum mode);
extern void __attribute__((__stdcall__)) glDeleteLists (GLuint list, GLsizei range);
extern void __attribute__((__stdcall__)) glDeleteTextures (GLsizei n, const GLuint *textures);
extern void __attribute__((__stdcall__)) glDepthFunc (GLenum func);
extern void __attribute__((__stdcall__)) glDepthMask (GLboolean flag);
extern void __attribute__((__stdcall__)) glDepthRange (GLclampd zNear, GLclampd zFar);
extern void __attribute__((__stdcall__)) glDisable (GLenum cap);
extern void __attribute__((__stdcall__)) glDisableClientState (GLenum array);
extern void __attribute__((__stdcall__)) glDrawArrays (GLenum mode, GLint first, GLsizei count);
extern void __attribute__((__stdcall__)) glDrawBuffer (GLenum mode);
extern void __attribute__((__stdcall__)) glDrawElements (GLenum mode, GLsizei count, GLenum type, const void *indices);
extern void __attribute__((__stdcall__)) glDrawPixels (GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
extern void __attribute__((__stdcall__)) glEdgeFlag (GLboolean flag);
extern void __attribute__((__stdcall__)) glEdgeFlagPointer (GLsizei stride, const void *pointer);
extern void __attribute__((__stdcall__)) glEdgeFlagv (const GLboolean *flag);
extern void __attribute__((__stdcall__)) glEnable (GLenum cap);
extern void __attribute__((__stdcall__)) glEnableClientState (GLenum array);
extern void __attribute__((__stdcall__)) glEnd (void);
extern void __attribute__((__stdcall__)) glEndList (void);
extern void __attribute__((__stdcall__)) glEvalCoord1d (GLdouble u);
extern void __attribute__((__stdcall__)) glEvalCoord1dv (const GLdouble *u);
extern void __attribute__((__stdcall__)) glEvalCoord1f (GLfloat u);
extern void __attribute__((__stdcall__)) glEvalCoord1fv (const GLfloat *u);
extern void __attribute__((__stdcall__)) glEvalCoord2d (GLdouble u, GLdouble v);
extern void __attribute__((__stdcall__)) glEvalCoord2dv (const GLdouble *u);
extern void __attribute__((__stdcall__)) glEvalCoord2f (GLfloat u, GLfloat v);
extern void __attribute__((__stdcall__)) glEvalCoord2fv (const GLfloat *u);
extern void __attribute__((__stdcall__)) glEvalMesh1 (GLenum mode, GLint i1, GLint i2);
extern void __attribute__((__stdcall__)) glEvalMesh2 (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
extern void __attribute__((__stdcall__)) glEvalPoint1 (GLint i);
extern void __attribute__((__stdcall__)) glEvalPoint2 (GLint i, GLint j);
extern void __attribute__((__stdcall__)) glFeedbackBuffer (GLsizei size, GLenum type, GLfloat *buffer);
extern void __attribute__((__stdcall__)) glFinish (void);
extern void __attribute__((__stdcall__)) glFlush (void);
extern void __attribute__((__stdcall__)) glFogf (GLenum pname, GLfloat param);
extern void __attribute__((__stdcall__)) glFogfv (GLenum pname, const GLfloat *params);
extern void __attribute__((__stdcall__)) glFogi (GLenum pname, GLint param);
extern void __attribute__((__stdcall__)) glFogiv (GLenum pname, const GLint *params);
extern void __attribute__((__stdcall__)) glFrontFace (GLenum mode);
extern void __attribute__((__stdcall__)) glFrustum (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
extern GLuint __attribute__((__stdcall__)) glGenLists (GLsizei range);
extern void __attribute__((__stdcall__)) glGenTextures (GLsizei n, GLuint *textures);
extern void __attribute__((__stdcall__)) glGetBooleanv (GLenum pname, GLboolean *params);
extern void __attribute__((__stdcall__)) glGetClipPlane (GLenum plane, GLdouble *equation);
extern void __attribute__((__stdcall__)) glGetDoublev (GLenum pname, GLdouble *params);
extern GLenum __attribute__((__stdcall__)) glGetError (void);
extern void __attribute__((__stdcall__)) glGetFloatv (GLenum pname, GLfloat *params);
extern void __attribute__((__stdcall__)) glGetIntegerv (GLenum pname, GLint *params);
extern void __attribute__((__stdcall__)) glGetLightfv (GLenum light, GLenum pname, GLfloat *params);
extern void __attribute__((__stdcall__)) glGetLightiv (GLenum light, GLenum pname, GLint *params);
extern void __attribute__((__stdcall__)) glGetMapdv (GLenum target, GLenum query, GLdouble *v);
extern void __attribute__((__stdcall__)) glGetMapfv (GLenum target, GLenum query, GLfloat *v);
extern void __attribute__((__stdcall__)) glGetMapiv (GLenum target, GLenum query, GLint *v);
extern void __attribute__((__stdcall__)) glGetMaterialfv (GLenum face, GLenum pname, GLfloat *params);
extern void __attribute__((__stdcall__)) glGetMaterialiv (GLenum face, GLenum pname, GLint *params);
extern void __attribute__((__stdcall__)) glGetPixelMapfv (GLenum map, GLfloat *values);
extern void __attribute__((__stdcall__)) glGetPixelMapuiv (GLenum map, GLuint *values);
extern void __attribute__((__stdcall__)) glGetPixelMapusv (GLenum map, GLushort *values);
extern void __attribute__((__stdcall__)) glGetPointerv (GLenum pname, void* *params);
extern void __attribute__((__stdcall__)) glGetPolygonStipple (GLubyte *mask);
extern const GLubyte * __attribute__((__stdcall__)) glGetString (GLenum name);
extern void __attribute__((__stdcall__)) glGetTexEnvfv (GLenum target, GLenum pname, GLfloat *params);
extern void __attribute__((__stdcall__)) glGetTexEnviv (GLenum target, GLenum pname, GLint *params);
extern void __attribute__((__stdcall__)) glGetTexGendv (GLenum coord, GLenum pname, GLdouble *params);
extern void __attribute__((__stdcall__)) glGetTexGenfv (GLenum coord, GLenum pname, GLfloat *params);
extern void __attribute__((__stdcall__)) glGetTexGeniv (GLenum coord, GLenum pname, GLint *params);
extern void __attribute__((__stdcall__)) glGetTexImage (GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
extern void __attribute__((__stdcall__)) glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat *params);
extern void __attribute__((__stdcall__)) glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint *params);
extern void __attribute__((__stdcall__)) glGetTexParameterfv (GLenum target, GLenum pname, GLfloat *params);
extern void __attribute__((__stdcall__)) glGetTexParameteriv (GLenum target, GLenum pname, GLint *params);
extern void __attribute__((__stdcall__)) glHint (GLenum target, GLenum mode);
extern void __attribute__((__stdcall__)) glIndexMask (GLuint mask);
extern void __attribute__((__stdcall__)) glIndexPointer (GLenum type, GLsizei stride, const void *pointer);
extern void __attribute__((__stdcall__)) glIndexd (GLdouble c);
extern void __attribute__((__stdcall__)) glIndexdv (const GLdouble *c);
extern void __attribute__((__stdcall__)) glIndexf (GLfloat c);
extern void __attribute__((__stdcall__)) glIndexfv (const GLfloat *c);
extern void __attribute__((__stdcall__)) glIndexi (GLint c);
extern void __attribute__((__stdcall__)) glIndexiv (const GLint *c);
extern void __attribute__((__stdcall__)) glIndexs (GLshort c);
extern void __attribute__((__stdcall__)) glIndexsv (const GLshort *c);
extern void __attribute__((__stdcall__)) glIndexub (GLubyte c);
extern void __attribute__((__stdcall__)) glIndexubv (const GLubyte *c);
extern void __attribute__((__stdcall__)) glInitNames (void);
extern void __attribute__((__stdcall__)) glInterleavedArrays (GLenum format, GLsizei stride, const void *pointer);
extern GLboolean __attribute__((__stdcall__)) glIsEnabled (GLenum cap);
extern GLboolean __attribute__((__stdcall__)) glIsList (GLuint list);
extern GLboolean __attribute__((__stdcall__)) glIsTexture (GLuint texture);
extern void __attribute__((__stdcall__)) glLightModelf (GLenum pname, GLfloat param);
extern void __attribute__((__stdcall__)) glLightModelfv (GLenum pname, const GLfloat *params);
extern void __attribute__((__stdcall__)) glLightModeli (GLenum pname, GLint param);
extern void __attribute__((__stdcall__)) glLightModeliv (GLenum pname, const GLint *params);
extern void __attribute__((__stdcall__)) glLightf (GLenum light, GLenum pname, GLfloat param);
extern void __attribute__((__stdcall__)) glLightfv (GLenum light, GLenum pname, const GLfloat *params);
extern void __attribute__((__stdcall__)) glLighti (GLenum light, GLenum pname, GLint param);
extern void __attribute__((__stdcall__)) glLightiv (GLenum light, GLenum pname, const GLint *params);
extern void __attribute__((__stdcall__)) glLineStipple (GLint factor, GLushort pattern);
extern void __attribute__((__stdcall__)) glLineWidth (GLfloat width);
extern void __attribute__((__stdcall__)) glListBase (GLuint base);
extern void __attribute__((__stdcall__)) glLoadIdentity (void);
extern void __attribute__((__stdcall__)) glLoadMatrixd (const GLdouble *m);
extern void __attribute__((__stdcall__)) glLoadMatrixf (const GLfloat *m);
extern void __attribute__((__stdcall__)) glLoadName (GLuint name);
extern void __attribute__((__stdcall__)) glLogicOp (GLenum opcode);
extern void __attribute__((__stdcall__)) glMap1d (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
extern void __attribute__((__stdcall__)) glMap1f (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
extern void __attribute__((__stdcall__)) glMap2d (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
extern void __attribute__((__stdcall__)) glMap2f (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
extern void __attribute__((__stdcall__)) glMapGrid1d (GLint un, GLdouble u1, GLdouble u2);
extern void __attribute__((__stdcall__)) glMapGrid1f (GLint un, GLfloat u1, GLfloat u2);
extern void __attribute__((__stdcall__)) glMapGrid2d (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
extern void __attribute__((__stdcall__)) glMapGrid2f (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
extern void __attribute__((__stdcall__)) glMaterialf (GLenum face, GLenum pname, GLfloat param);
extern void __attribute__((__stdcall__)) glMaterialfv (GLenum face, GLenum pname, const GLfloat *params);
extern void __attribute__((__stdcall__)) glMateriali (GLenum face, GLenum pname, GLint param);
extern void __attribute__((__stdcall__)) glMaterialiv (GLenum face, GLenum pname, const GLint *params);
extern void __attribute__((__stdcall__)) glMatrixMode (GLenum mode);
extern void __attribute__((__stdcall__)) glMultMatrixd (const GLdouble *m);
extern void __attribute__((__stdcall__)) glMultMatrixf (const GLfloat *m);
extern void __attribute__((__stdcall__)) glNewList (GLuint list, GLenum mode);
extern void __attribute__((__stdcall__)) glNormal3b (GLbyte nx, GLbyte ny, GLbyte nz);
extern void __attribute__((__stdcall__)) glNormal3bv (const GLbyte *v);
extern void __attribute__((__stdcall__)) glNormal3d (GLdouble nx, GLdouble ny, GLdouble nz);
extern void __attribute__((__stdcall__)) glNormal3dv (const GLdouble *v);
extern void __attribute__((__stdcall__)) glNormal3f (GLfloat nx, GLfloat ny, GLfloat nz);
extern void __attribute__((__stdcall__)) glNormal3fv (const GLfloat *v);
extern void __attribute__((__stdcall__)) glNormal3i (GLint nx, GLint ny, GLint nz);
extern void __attribute__((__stdcall__)) glNormal3iv (const GLint *v);
extern void __attribute__((__stdcall__)) glNormal3s (GLshort nx, GLshort ny, GLshort nz);
extern void __attribute__((__stdcall__)) glNormal3sv (const GLshort *v);
extern void __attribute__((__stdcall__)) glNormalPointer (GLenum type, GLsizei stride, const void *pointer);
extern void __attribute__((__stdcall__)) glOrtho (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
extern void __attribute__((__stdcall__)) glPassThrough (GLfloat token);
extern void __attribute__((__stdcall__)) glPixelMapfv (GLenum map, GLsizei mapsize, const GLfloat *values);
extern void __attribute__((__stdcall__)) glPixelMapuiv (GLenum map, GLsizei mapsize, const GLuint *values);
extern void __attribute__((__stdcall__)) glPixelMapusv (GLenum map, GLsizei mapsize, const GLushort *values);
extern void __attribute__((__stdcall__)) glPixelStoref (GLenum pname, GLfloat param);
extern void __attribute__((__stdcall__)) glPixelStorei (GLenum pname, GLint param);
extern void __attribute__((__stdcall__)) glPixelTransferf (GLenum pname, GLfloat param);
extern void __attribute__((__stdcall__)) glPixelTransferi (GLenum pname, GLint param);
extern void __attribute__((__stdcall__)) glPixelZoom (GLfloat xfactor, GLfloat yfactor);
extern void __attribute__((__stdcall__)) glPointSize (GLfloat size);
extern void __attribute__((__stdcall__)) glPolygonMode (GLenum face, GLenum mode);
extern void __attribute__((__stdcall__)) glPolygonOffset (GLfloat factor, GLfloat units);
extern void __attribute__((__stdcall__)) glPolygonStipple (const GLubyte *mask);
extern void __attribute__((__stdcall__)) glPopAttrib (void);
extern void __attribute__((__stdcall__)) glPopClientAttrib (void);
extern void __attribute__((__stdcall__)) glPopMatrix (void);
extern void __attribute__((__stdcall__)) glPopName (void);
extern void __attribute__((__stdcall__)) glPrioritizeTextures (GLsizei n, const GLuint *textures, const GLclampf *priorities);
extern void __attribute__((__stdcall__)) glPushAttrib (GLbitfield mask);
extern void __attribute__((__stdcall__)) glPushClientAttrib (GLbitfield mask);
extern void __attribute__((__stdcall__)) glPushMatrix (void);
extern void __attribute__((__stdcall__)) glPushName (GLuint name);
extern void __attribute__((__stdcall__)) glRasterPos2d (GLdouble x, GLdouble y);
extern void __attribute__((__stdcall__)) glRasterPos2dv (const GLdouble *v);
extern void __attribute__((__stdcall__)) glRasterPos2f (GLfloat x, GLfloat y);
extern void __attribute__((__stdcall__)) glRasterPos2fv (const GLfloat *v);
extern void __attribute__((__stdcall__)) glRasterPos2i (GLint x, GLint y);
extern void __attribute__((__stdcall__)) glRasterPos2iv (const GLint *v);
extern void __attribute__((__stdcall__)) glRasterPos2s (GLshort x, GLshort y);
extern void __attribute__((__stdcall__)) glRasterPos2sv (const GLshort *v);
extern void __attribute__((__stdcall__)) glRasterPos3d (GLdouble x, GLdouble y, GLdouble z);
extern void __attribute__((__stdcall__)) glRasterPos3dv (const GLdouble *v);
extern void __attribute__((__stdcall__)) glRasterPos3f (GLfloat x, GLfloat y, GLfloat z);
extern void __attribute__((__stdcall__)) glRasterPos3fv (const GLfloat *v);
extern void __attribute__((__stdcall__)) glRasterPos3i (GLint x, GLint y, GLint z);
extern void __attribute__((__stdcall__)) glRasterPos3iv (const GLint *v);
extern void __attribute__((__stdcall__)) glRasterPos3s (GLshort x, GLshort y, GLshort z);
extern void __attribute__((__stdcall__)) glRasterPos3sv (const GLshort *v);
extern void __attribute__((__stdcall__)) glRasterPos4d (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern void __attribute__((__stdcall__)) glRasterPos4dv (const GLdouble *v);
extern void __attribute__((__stdcall__)) glRasterPos4f (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern void __attribute__((__stdcall__)) glRasterPos4fv (const GLfloat *v);
extern void __attribute__((__stdcall__)) glRasterPos4i (GLint x, GLint y, GLint z, GLint w);
extern void __attribute__((__stdcall__)) glRasterPos4iv (const GLint *v);
extern void __attribute__((__stdcall__)) glRasterPos4s (GLshort x, GLshort y, GLshort z, GLshort w);
extern void __attribute__((__stdcall__)) glRasterPos4sv (const GLshort *v);
extern void __attribute__((__stdcall__)) glReadBuffer (GLenum mode);
extern void __attribute__((__stdcall__)) glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
extern void __attribute__((__stdcall__)) glRectd (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
extern void __attribute__((__stdcall__)) glRectdv (const GLdouble *v1, const GLdouble *v2);
extern void __attribute__((__stdcall__)) glRectf (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
extern void __attribute__((__stdcall__)) glRectfv (const GLfloat *v1, const GLfloat *v2);
extern void __attribute__((__stdcall__)) glRecti (GLint x1, GLint y1, GLint x2, GLint y2);
extern void __attribute__((__stdcall__)) glRectiv (const GLint *v1, const GLint *v2);
extern void __attribute__((__stdcall__)) glRects (GLshort x1, GLshort y1, GLshort x2, GLshort y2);
extern void __attribute__((__stdcall__)) glRectsv (const GLshort *v1, const GLshort *v2);
extern GLint __attribute__((__stdcall__)) glRenderMode (GLenum mode);
extern void __attribute__((__stdcall__)) glRotated (GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
extern void __attribute__((__stdcall__)) glRotatef (GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
extern void __attribute__((__stdcall__)) glScaled (GLdouble x, GLdouble y, GLdouble z);
extern void __attribute__((__stdcall__)) glScalef (GLfloat x, GLfloat y, GLfloat z);
extern void __attribute__((__stdcall__)) glScissor (GLint x, GLint y, GLsizei width, GLsizei height);
extern void __attribute__((__stdcall__)) glSelectBuffer (GLsizei size, GLuint *buffer);
extern void __attribute__((__stdcall__)) glShadeModel (GLenum mode);
extern void __attribute__((__stdcall__)) glStencilFunc (GLenum func, GLint ref, GLuint mask);
extern void __attribute__((__stdcall__)) glStencilMask (GLuint mask);
extern void __attribute__((__stdcall__)) glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);
extern void __attribute__((__stdcall__)) glTexCoord1d (GLdouble s);
extern void __attribute__((__stdcall__)) glTexCoord1dv (const GLdouble *v);
extern void __attribute__((__stdcall__)) glTexCoord1f (GLfloat s);
extern void __attribute__((__stdcall__)) glTexCoord1fv (const GLfloat *v);
extern void __attribute__((__stdcall__)) glTexCoord1i (GLint s);
extern void __attribute__((__stdcall__)) glTexCoord1iv (const GLint *v);
extern void __attribute__((__stdcall__)) glTexCoord1s (GLshort s);
extern void __attribute__((__stdcall__)) glTexCoord1sv (const GLshort *v);
extern void __attribute__((__stdcall__)) glTexCoord2d (GLdouble s, GLdouble t);
extern void __attribute__((__stdcall__)) glTexCoord2dv (const GLdouble *v);
extern void __attribute__((__stdcall__)) glTexCoord2f (GLfloat s, GLfloat t);
extern void __attribute__((__stdcall__)) glTexCoord2fv (const GLfloat *v);
extern void __attribute__((__stdcall__)) glTexCoord2i (GLint s, GLint t);
extern void __attribute__((__stdcall__)) glTexCoord2iv (const GLint *v);
extern void __attribute__((__stdcall__)) glTexCoord2s (GLshort s, GLshort t);
extern void __attribute__((__stdcall__)) glTexCoord2sv (const GLshort *v);
extern void __attribute__((__stdcall__)) glTexCoord3d (GLdouble s, GLdouble t, GLdouble r);
extern void __attribute__((__stdcall__)) glTexCoord3dv (const GLdouble *v);
extern void __attribute__((__stdcall__)) glTexCoord3f (GLfloat s, GLfloat t, GLfloat r);
extern void __attribute__((__stdcall__)) glTexCoord3fv (const GLfloat *v);
extern void __attribute__((__stdcall__)) glTexCoord3i (GLint s, GLint t, GLint r);
extern void __attribute__((__stdcall__)) glTexCoord3iv (const GLint *v);
extern void __attribute__((__stdcall__)) glTexCoord3s (GLshort s, GLshort t, GLshort r);
extern void __attribute__((__stdcall__)) glTexCoord3sv (const GLshort *v);
extern void __attribute__((__stdcall__)) glTexCoord4d (GLdouble s, GLdouble t, GLdouble r, GLdouble q);
extern void __attribute__((__stdcall__)) glTexCoord4dv (const GLdouble *v);
extern void __attribute__((__stdcall__)) glTexCoord4f (GLfloat s, GLfloat t, GLfloat r, GLfloat q);
extern void __attribute__((__stdcall__)) glTexCoord4fv (const GLfloat *v);
extern void __attribute__((__stdcall__)) glTexCoord4i (GLint s, GLint t, GLint r, GLint q);
extern void __attribute__((__stdcall__)) glTexCoord4iv (const GLint *v);
extern void __attribute__((__stdcall__)) glTexCoord4s (GLshort s, GLshort t, GLshort r, GLshort q);
extern void __attribute__((__stdcall__)) glTexCoord4sv (const GLshort *v);
extern void __attribute__((__stdcall__)) glTexCoordPointer (GLint size, GLenum type, GLsizei stride, const void *pointer);
extern void __attribute__((__stdcall__)) glTexEnvf (GLenum target, GLenum pname, GLfloat param);
extern void __attribute__((__stdcall__)) glTexEnvfv (GLenum target, GLenum pname, const GLfloat *params);
extern void __attribute__((__stdcall__)) glTexEnvi (GLenum target, GLenum pname, GLint param);
extern void __attribute__((__stdcall__)) glTexEnviv (GLenum target, GLenum pname, const GLint *params);
extern void __attribute__((__stdcall__)) glTexGend (GLenum coord, GLenum pname, GLdouble param);
extern void __attribute__((__stdcall__)) glTexGendv (GLenum coord, GLenum pname, const GLdouble *params);
extern void __attribute__((__stdcall__)) glTexGenf (GLenum coord, GLenum pname, GLfloat param);
extern void __attribute__((__stdcall__)) glTexGenfv (GLenum coord, GLenum pname, const GLfloat *params);
extern void __attribute__((__stdcall__)) glTexGeni (GLenum coord, GLenum pname, GLint param);
extern void __attribute__((__stdcall__)) glTexGeniv (GLenum coord, GLenum pname, const GLint *params);
extern void __attribute__((__stdcall__)) glTexImage1D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
extern void __attribute__((__stdcall__)) glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
extern void __attribute__((__stdcall__)) glTexParameterf (GLenum target, GLenum pname, GLfloat param);
extern void __attribute__((__stdcall__)) glTexParameterfv (GLenum target, GLenum pname, const GLfloat *params);
extern void __attribute__((__stdcall__)) glTexParameteri (GLenum target, GLenum pname, GLint param);
extern void __attribute__((__stdcall__)) glTexParameteriv (GLenum target, GLenum pname, const GLint *params);
extern void __attribute__((__stdcall__)) glTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
extern void __attribute__((__stdcall__)) glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
extern void __attribute__((__stdcall__)) glTranslated (GLdouble x, GLdouble y, GLdouble z);
extern void __attribute__((__stdcall__)) glTranslatef (GLfloat x, GLfloat y, GLfloat z);
extern void __attribute__((__stdcall__)) glVertex2d (GLdouble x, GLdouble y);
extern void __attribute__((__stdcall__)) glVertex2dv (const GLdouble *v);
extern void __attribute__((__stdcall__)) glVertex2f (GLfloat x, GLfloat y);
extern void __attribute__((__stdcall__)) glVertex2fv (const GLfloat *v);
extern void __attribute__((__stdcall__)) glVertex2i (GLint x, GLint y);
extern void __attribute__((__stdcall__)) glVertex2iv (const GLint *v);
extern void __attribute__((__stdcall__)) glVertex2s (GLshort x, GLshort y);
extern void __attribute__((__stdcall__)) glVertex2sv (const GLshort *v);
extern void __attribute__((__stdcall__)) glVertex3d (GLdouble x, GLdouble y, GLdouble z);
extern void __attribute__((__stdcall__)) glVertex3dv (const GLdouble *v);
extern void __attribute__((__stdcall__)) glVertex3f (GLfloat x, GLfloat y, GLfloat z);
extern void __attribute__((__stdcall__)) glVertex3fv (const GLfloat *v);
extern void __attribute__((__stdcall__)) glVertex3i (GLint x, GLint y, GLint z);
extern void __attribute__((__stdcall__)) glVertex3iv (const GLint *v);
extern void __attribute__((__stdcall__)) glVertex3s (GLshort x, GLshort y, GLshort z);
extern void __attribute__((__stdcall__)) glVertex3sv (const GLshort *v);
extern void __attribute__((__stdcall__)) glVertex4d (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern void __attribute__((__stdcall__)) glVertex4dv (const GLdouble *v);
extern void __attribute__((__stdcall__)) glVertex4f (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern void __attribute__((__stdcall__)) glVertex4fv (const GLfloat *v);
extern void __attribute__((__stdcall__)) glVertex4i (GLint x, GLint y, GLint z, GLint w);
extern void __attribute__((__stdcall__)) glVertex4iv (const GLint *v);
extern void __attribute__((__stdcall__)) glVertex4s (GLshort x, GLshort y, GLshort z, GLshort w);
extern void __attribute__((__stdcall__)) glVertex4sv (const GLshort *v);
extern void __attribute__((__stdcall__)) glVertexPointer (GLint size, GLenum type, GLsizei stride, const void *pointer);
extern void __attribute__((__stdcall__)) glViewport (GLint x, GLint y, GLsizei width, GLsizei height);
# 1202 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glu.h" 1 3 4
# 12 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glu.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/gl.h" 1 3 4
# 13 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glu.h" 2 3 4
# 24 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glu.h" 3 4
const GLubyte *__attribute__((__stdcall__)) gluErrorString(GLenum errCode);
const wchar_t *__attribute__((__stdcall__)) gluErrorUnicodeStringEXT(GLenum errCode);
const GLubyte *__attribute__((__stdcall__)) gluGetString(GLenum name);
void __attribute__((__stdcall__)) gluOrtho2D(GLdouble left,GLdouble right,GLdouble bottom,GLdouble top);
void __attribute__((__stdcall__)) gluPerspective(GLdouble fovy,GLdouble aspect,GLdouble zNear,GLdouble zFar);
void __attribute__((__stdcall__)) gluPickMatrix(GLdouble x,GLdouble y,GLdouble width,GLdouble height,GLint viewport[4]);
void __attribute__((__stdcall__)) gluLookAt(GLdouble eyex,GLdouble eyey,GLdouble eyez,GLdouble centerx,GLdouble centery,GLdouble centerz,GLdouble upx,GLdouble upy,GLdouble upz);
int __attribute__((__stdcall__)) gluProject(GLdouble objx,GLdouble objy,GLdouble objz,const GLdouble modelMatrix[16],const GLdouble projMatrix[16],const GLint viewport[4],GLdouble *winx,GLdouble *winy,GLdouble *winz);
int __attribute__((__stdcall__)) gluUnProject(GLdouble winx,GLdouble winy,GLdouble winz,const GLdouble modelMatrix[16],const GLdouble projMatrix[16],const GLint viewport[4],GLdouble *objx,GLdouble *objy,GLdouble *objz);
int __attribute__((__stdcall__)) gluScaleImage(GLenum format,GLint widthin,GLint heightin,GLenum typein,const void *datain,GLint widthout,GLint heightout,GLenum typeout,void *dataout);
int __attribute__((__stdcall__)) gluBuild1DMipmaps(GLenum target,GLint components,GLint width,GLenum format,GLenum type,const void *data);
int __attribute__((__stdcall__)) gluBuild2DMipmaps(GLenum target,GLint components,GLint width,GLint height,GLenum format,GLenum type,const void *data);
# 49 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glu.h" 3 4
typedef struct GLUnurbs GLUnurbs;
typedef struct GLUquadric GLUquadric;
typedef struct GLUtesselator GLUtesselator;
typedef struct GLUnurbs GLUnurbsObj;
typedef struct GLUquadric GLUquadricObj;
typedef struct GLUtesselator GLUtesselatorObj;
typedef struct GLUtesselator GLUtriangulatorObj;


GLUquadric *__attribute__((__stdcall__)) gluNewQuadric(void);
void __attribute__((__stdcall__)) gluDeleteQuadric(GLUquadric *state);
void __attribute__((__stdcall__)) gluQuadricNormals(GLUquadric *quadObject,GLenum normals);
void __attribute__((__stdcall__)) gluQuadricTexture(GLUquadric *quadObject,GLboolean textureCoords);
void __attribute__((__stdcall__)) gluQuadricOrientation(GLUquadric *quadObject,GLenum orientation);
void __attribute__((__stdcall__)) gluQuadricDrawStyle(GLUquadric *quadObject,GLenum drawStyle);
void __attribute__((__stdcall__)) gluCylinder(GLUquadric *qobj,GLdouble baseRadius,GLdouble topRadius,GLdouble height,GLint slices,GLint stacks);
void __attribute__((__stdcall__)) gluDisk(GLUquadric *qobj,GLdouble innerRadius,GLdouble outerRadius,GLint slices,GLint loops);
void __attribute__((__stdcall__)) gluPartialDisk(GLUquadric *qobj,GLdouble innerRadius,GLdouble outerRadius,GLint slices,GLint loops,GLdouble startAngle,GLdouble sweepAngle);
void __attribute__((__stdcall__)) gluSphere(GLUquadric *qobj,GLdouble radius,GLint slices,GLint stacks);
void __attribute__((__stdcall__)) gluQuadricCallback(GLUquadric *qobj,GLenum which,void (__attribute__ ((__stdcall__)) *fn)());
GLUtesselator *__attribute__((__stdcall__)) gluNewTess(void);
void __attribute__((__stdcall__)) gluDeleteTess(GLUtesselator *tess);
void __attribute__((__stdcall__)) gluTessBeginPolygon(GLUtesselator *tess,void *polygon_data);
void __attribute__((__stdcall__)) gluTessBeginContour(GLUtesselator *tess);
void __attribute__((__stdcall__)) gluTessVertex(GLUtesselator *tess,GLdouble coords[3],void *data);
void __attribute__((__stdcall__)) gluTessEndContour(GLUtesselator *tess);
void __attribute__((__stdcall__)) gluTessEndPolygon(GLUtesselator *tess);
void __attribute__((__stdcall__)) gluTessProperty(GLUtesselator *tess,GLenum which,GLdouble value);
void __attribute__((__stdcall__)) gluTessNormal(GLUtesselator *tess,GLdouble x,GLdouble y,GLdouble z);
void __attribute__((__stdcall__)) gluTessCallback(GLUtesselator *tess,GLenum which,void (__attribute__ ((__stdcall__)) *fn)());
void __attribute__((__stdcall__)) gluGetTessProperty(GLUtesselator *tess,GLenum which,GLdouble *value);
GLUnurbs *__attribute__((__stdcall__)) gluNewNurbsRenderer(void);
void __attribute__((__stdcall__)) gluDeleteNurbsRenderer(GLUnurbs *nobj);
void __attribute__((__stdcall__)) gluBeginSurface(GLUnurbs *nobj);
void __attribute__((__stdcall__)) gluBeginCurve(GLUnurbs *nobj);
void __attribute__((__stdcall__)) gluEndCurve(GLUnurbs *nobj);
void __attribute__((__stdcall__)) gluEndSurface(GLUnurbs *nobj);
void __attribute__((__stdcall__)) gluBeginTrim(GLUnurbs *nobj);
void __attribute__((__stdcall__)) gluEndTrim(GLUnurbs *nobj);
void __attribute__((__stdcall__)) gluPwlCurve(GLUnurbs *nobj,GLint count,GLfloat *array,GLint stride,GLenum type);
void __attribute__((__stdcall__)) gluNurbsCurve(GLUnurbs *nobj,GLint nknots,GLfloat *knot,GLint stride,GLfloat *ctlarray,GLint order,GLenum type);
void __attribute__((__stdcall__)) gluNurbsSurface(GLUnurbs *nobj,GLint sknot_count,float *sknot,GLint tknot_count,GLfloat *tknot,GLint s_stride,GLint t_stride,GLfloat *ctlarray,GLint sorder,GLint torder,GLenum type);
void __attribute__((__stdcall__)) gluLoadSamplingMatrices(GLUnurbs *nobj,const GLfloat modelMatrix[16],const GLfloat projMatrix[16],const GLint viewport[4]);
void __attribute__((__stdcall__)) gluNurbsProperty(GLUnurbs *nobj,GLenum property,GLfloat value);
void __attribute__((__stdcall__)) gluGetNurbsProperty(GLUnurbs *nobj,GLenum property,GLfloat *value);
void __attribute__((__stdcall__)) gluNurbsCallback(GLUnurbs *nobj,GLenum which,void (__attribute__ ((__stdcall__)) *fn)());

typedef void (__attribute__ ((__stdcall__)) *GLUquadricErrorProc)(GLenum);
typedef void (__attribute__ ((__stdcall__)) *GLUtessBeginProc)(GLenum);
typedef void (__attribute__ ((__stdcall__)) *GLUtessEdgeFlagProc) (GLboolean);
typedef void (__attribute__ ((__stdcall__)) *GLUtessVertexProc)(void *);
typedef void (__attribute__ ((__stdcall__)) *GLUtessEndProc)(void);
typedef void (__attribute__ ((__stdcall__)) *GLUtessErrorProc)(GLenum);
typedef void (__attribute__ ((__stdcall__)) *GLUtessCombineProc)(GLdouble[3],void*[4],GLfloat[4],void**);
typedef void (__attribute__ ((__stdcall__)) *GLUtessBeginDataProc)(GLenum,void *);
typedef void (__attribute__ ((__stdcall__)) *GLUtessEdgeFlagDataProc) (GLboolean,void *);
typedef void (__attribute__ ((__stdcall__)) *GLUtessVertexDataProc)(void *,void *);
typedef void (__attribute__ ((__stdcall__)) *GLUtessEndDataProc)(void *);
typedef void (__attribute__ ((__stdcall__)) *GLUtessErrorDataProc)(GLenum,void *);
typedef void (__attribute__ ((__stdcall__)) *GLUtessCombineDataProc)(GLdouble[3],void*[4],GLfloat[4],void**,void*);
typedef void (__attribute__ ((__stdcall__)) *GLUnurbsErrorProc)(GLenum);
# 235 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glu.h" 3 4
void __attribute__((__stdcall__)) gluBeginPolygon(GLUtesselator *tess);
void __attribute__((__stdcall__)) gluNextContour(GLUtesselator *tess,GLenum type);
void __attribute__((__stdcall__)) gluEndPolygon(GLUtesselator *tess);
# 1203 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 2 3 4
# 1252 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
# 1377 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLACTIVETEXTUREPROC) (GLenum texture);
typedef void (__attribute__((__stdcall__)) * PFNGLCLIENTACTIVETEXTUREPROC) (GLenum texture);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint lod, void *img);
typedef void (__attribute__((__stdcall__)) * PFNGLLOADTRANSPOSEMATRIXDPROC) (const GLdouble m[16]);
typedef void (__attribute__((__stdcall__)) * PFNGLLOADTRANSPOSEMATRIXFPROC) (const GLfloat m[16]);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTTRANSPOSEMATRIXDPROC) (const GLdouble m[16]);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTTRANSPOSEMATRIXFPROC) (const GLfloat m[16]);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD1DPROC) (GLenum target, GLdouble s);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD1DVPROC) (GLenum target, const GLdouble *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD1FPROC) (GLenum target, GLfloat s);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD1FVPROC) (GLenum target, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD1IPROC) (GLenum target, GLint s);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD1IVPROC) (GLenum target, const GLint *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD1SPROC) (GLenum target, GLshort s);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD1SVPROC) (GLenum target, const GLshort *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD2DPROC) (GLenum target, GLdouble s, GLdouble t);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD2DVPROC) (GLenum target, const GLdouble *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD2FPROC) (GLenum target, GLfloat s, GLfloat t);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD2FVPROC) (GLenum target, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD2IPROC) (GLenum target, GLint s, GLint t);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD2IVPROC) (GLenum target, const GLint *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD2SPROC) (GLenum target, GLshort s, GLshort t);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD2SVPROC) (GLenum target, const GLshort *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD3DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD3DVPROC) (GLenum target, const GLdouble *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD3FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD3FVPROC) (GLenum target, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD3IPROC) (GLenum target, GLint s, GLint t, GLint r);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD3IVPROC) (GLenum target, const GLint *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD3SPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD3SVPROC) (GLenum target, const GLshort *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD4DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD4DVPROC) (GLenum target, const GLdouble *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD4FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD4FVPROC) (GLenum target, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD4IPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD4IVPROC) (GLenum target, const GLint *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD4SPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD4SVPROC) (GLenum target, const GLshort *v);
typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLECOVERAGEPROC) (GLclampf value, GLboolean invert);
# 1520 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDCOLORPROC) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDEQUATIONPROC) (GLenum mode);
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (__attribute__((__stdcall__)) * PFNGLFOGCOORDPOINTERPROC) (GLenum type, GLsizei stride, const void *pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLFOGCOORDDPROC) (GLdouble coord);
typedef void (__attribute__((__stdcall__)) * PFNGLFOGCOORDDVPROC) (const GLdouble *coord);
typedef void (__attribute__((__stdcall__)) * PFNGLFOGCOORDFPROC) (GLfloat coord);
typedef void (__attribute__((__stdcall__)) * PFNGLFOGCOORDFVPROC) (const GLfloat *coord);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const* indices, GLsizei drawcount);
typedef void (__attribute__((__stdcall__)) * PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param);
typedef void (__attribute__((__stdcall__)) * PFNGLPOINTPARAMETERFVPROC) (GLenum pname, const GLfloat *params);
typedef void (__attribute__((__stdcall__)) * PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLPOINTPARAMETERIVPROC) (GLenum pname, const GLint *params);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3BPROC) (GLbyte red, GLbyte green, GLbyte blue);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3BVPROC) (const GLbyte *v);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3DPROC) (GLdouble red, GLdouble green, GLdouble blue);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3DVPROC) (const GLdouble *v);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3FPROC) (GLfloat red, GLfloat green, GLfloat blue);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3FVPROC) (const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3IPROC) (GLint red, GLint green, GLint blue);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3IVPROC) (const GLint *v);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3SPROC) (GLshort red, GLshort green, GLshort blue);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3SVPROC) (const GLshort *v);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3UBPROC) (GLubyte red, GLubyte green, GLubyte blue);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3UBVPROC) (const GLubyte *v);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3UIPROC) (GLuint red, GLuint green, GLuint blue);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3UIVPROC) (const GLuint *v);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3USPROC) (GLushort red, GLushort green, GLushort blue);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3USVPROC) (const GLushort *v);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLORPOINTERPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2DPROC) (GLdouble x, GLdouble y);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2DVPROC) (const GLdouble *p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2FPROC) (GLfloat x, GLfloat y);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2FVPROC) (const GLfloat *p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2IPROC) (GLint x, GLint y);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2IVPROC) (const GLint *p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2SPROC) (GLshort x, GLshort y);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2SVPROC) (const GLshort *p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3DPROC) (GLdouble x, GLdouble y, GLdouble z);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3DVPROC) (const GLdouble *p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3FPROC) (GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3FVPROC) (const GLfloat *p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3IPROC) (GLint x, GLint y, GLint z);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3IVPROC) (const GLint *p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3SPROC) (GLshort x, GLshort y, GLshort z);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3SVPROC) (const GLshort *p);
# 1676 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef ptrdiff_t GLintptr;
typedef ptrdiff_t GLsizeiptr;

typedef void (__attribute__((__stdcall__)) * PFNGLBEGINQUERYPROC) (GLenum target, GLuint id);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);
typedef void (__attribute__((__stdcall__)) * PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const void* data, GLenum usage);
typedef void (__attribute__((__stdcall__)) * PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const void* data);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint* buffers);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint* ids);
typedef void (__attribute__((__stdcall__)) * PFNGLENDQUERYPROC) (GLenum target);
typedef void (__attribute__((__stdcall__)) * PFNGLGENBUFFERSPROC) (GLsizei n, GLuint* buffers);
typedef void (__attribute__((__stdcall__)) * PFNGLGENQUERIESPROC) (GLsizei n, GLuint* ids);
typedef void (__attribute__((__stdcall__)) * PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, void** params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, void* data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint* params);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISBUFFERPROC) (GLuint buffer);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISQUERYPROC) (GLuint id);
typedef void* (__attribute__((__stdcall__)) * PFNGLMAPBUFFERPROC) (GLenum target, GLenum access);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLUNMAPBUFFERPROC) (GLenum target);
# 1813 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar* name);
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPILESHADERPROC) (GLuint shader);
typedef GLuint (__attribute__((__stdcall__)) * PFNGLCREATEPROGRAMPROC) (void);
typedef GLuint (__attribute__((__stdcall__)) * PFNGLCREATESHADERPROC) (GLenum type);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEPROGRAMPROC) (GLuint program);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETESHADERPROC) (GLuint shader);
typedef void (__attribute__((__stdcall__)) * PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);
typedef void (__attribute__((__stdcall__)) * PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index);
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum* bufs);
typedef void (__attribute__((__stdcall__)) * PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index);
typedef void (__attribute__((__stdcall__)) * PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
typedef void (__attribute__((__stdcall__)) * PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
typedef void (__attribute__((__stdcall__)) * PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);
typedef GLint (__attribute__((__stdcall__)) * PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar* name);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint* param);
typedef void (__attribute__((__stdcall__)) * PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
typedef void (__attribute__((__stdcall__)) * PFNGLGETSHADERSOURCEPROC) (GLuint obj, GLsizei maxLength, GLsizei* length, GLchar* source);
typedef void (__attribute__((__stdcall__)) * PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint* param);
typedef GLint (__attribute__((__stdcall__)) * PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar* name);
typedef void (__attribute__((__stdcall__)) * PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, void** pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBDVPROC) (GLuint index, GLenum pname, GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBFVPROC) (GLuint index, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint* params);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISPROGRAMPROC) (GLuint program);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISSHADERPROC) (GLuint shader);
typedef void (__attribute__((__stdcall__)) * PFNGLLINKPROGRAMPROC) (GLuint program);
typedef void (__attribute__((__stdcall__)) * PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar *const* string, const GLint* length);
typedef void (__attribute__((__stdcall__)) * PFNGLSTENCILFUNCSEPARATEPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
typedef void (__attribute__((__stdcall__)) * PFNGLSTENCILMASKSEPARATEPROC) (GLenum face, GLuint mask);
typedef void (__attribute__((__stdcall__)) * PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1IPROC) (GLint location, GLint v0);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUSEPROGRAMPROC) (GLuint program);
typedef void (__attribute__((__stdcall__)) * PFNGLVALIDATEPROGRAMPROC) (GLuint program);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1DPROC) (GLuint index, GLdouble x);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1DVPROC) (GLuint index, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1SVPROC) (GLuint index, const GLshort* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2DPROC) (GLuint index, GLdouble x, GLdouble y);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2DVPROC) (GLuint index, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2SPROC) (GLuint index, GLshort x, GLshort y);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2SVPROC) (GLuint index, const GLshort* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3DVPROC) (GLuint index, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3SPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3SVPROC) (GLuint index, const GLshort* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4NBVPROC) (GLuint index, const GLbyte* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4NIVPROC) (GLuint index, const GLint* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4NSVPROC) (GLuint index, const GLshort* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4NUBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4NUBVPROC) (GLuint index, const GLubyte* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4NUIVPROC) (GLuint index, const GLuint* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4NUSVPROC) (GLuint index, const GLushort* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4BVPROC) (GLuint index, const GLbyte* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4DVPROC) (GLuint index, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4IVPROC) (GLuint index, const GLint* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4SPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4SVPROC) (GLuint index, const GLshort* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4UBVPROC) (GLuint index, const GLubyte* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer);
# 2034 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX2X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX2X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX3X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX3X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX4X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX4X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
# 2163 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBEGINCONDITIONALRENDERPROC) (GLuint id, GLenum mode);
typedef void (__attribute__((__stdcall__)) * PFNGLBEGINTRANSFORMFEEDBACKPROC) (GLenum primitiveMode);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDFRAGDATALOCATIONPROC) (GLuint program, GLuint colorNumber, const GLchar* name);
typedef void (__attribute__((__stdcall__)) * PFNGLCLAMPCOLORPROC) (GLenum target, GLenum clamp);
typedef void (__attribute__((__stdcall__)) * PFNGLCLEARBUFFERFIPROC) (GLenum buffer, GLint drawBuffer, GLfloat depth, GLint stencil);
typedef void (__attribute__((__stdcall__)) * PFNGLCLEARBUFFERFVPROC) (GLenum buffer, GLint drawBuffer, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLCLEARBUFFERIVPROC) (GLenum buffer, GLint drawBuffer, const GLint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLCLEARBUFFERUIVPROC) (GLenum buffer, GLint drawBuffer, const GLuint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORMASKIPROC) (GLuint buf, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void (__attribute__((__stdcall__)) * PFNGLDISABLEIPROC) (GLenum cap, GLuint index);
typedef void (__attribute__((__stdcall__)) * PFNGLENABLEIPROC) (GLenum cap, GLuint index);
typedef void (__attribute__((__stdcall__)) * PFNGLENDCONDITIONALRENDERPROC) (void);
typedef void (__attribute__((__stdcall__)) * PFNGLENDTRANSFORMFEEDBACKPROC) (void);
typedef void (__attribute__((__stdcall__)) * PFNGLGETBOOLEANI_VPROC) (GLenum pname, GLuint index, GLboolean* data);
typedef GLint (__attribute__((__stdcall__)) * PFNGLGETFRAGDATALOCATIONPROC) (GLuint program, const GLchar* name);
typedef const GLubyte* (__attribute__((__stdcall__)) * PFNGLGETSTRINGIPROC) (GLenum name, GLuint index);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, GLuint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
typedef void (__attribute__((__stdcall__)) * PFNGLGETUNIFORMUIVPROC) (GLuint program, GLint location, GLuint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBIIVPROC) (GLuint index, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBIUIVPROC) (GLuint index, GLenum pname, GLuint* params);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISENABLEDIPROC) (GLenum cap, GLuint index);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, const GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, const GLuint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLTRANSFORMFEEDBACKVARYINGSPROC) (GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1UIPROC) (GLint location, GLuint v0);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1UIVPROC) (GLint location, GLsizei count, const GLuint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2UIPROC) (GLint location, GLuint v0, GLuint v1);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2UIVPROC) (GLint location, GLsizei count, const GLuint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3UIVPROC) (GLint location, GLsizei count, const GLuint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4UIVPROC) (GLint location, GLsizei count, const GLuint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI1IPROC) (GLuint index, GLint v0);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI1IVPROC) (GLuint index, const GLint* v0);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI1UIPROC) (GLuint index, GLuint v0);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI1UIVPROC) (GLuint index, const GLuint* v0);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI2IPROC) (GLuint index, GLint v0, GLint v1);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI2IVPROC) (GLuint index, const GLint* v0);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI2UIPROC) (GLuint index, GLuint v0, GLuint v1);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI2UIVPROC) (GLuint index, const GLuint* v0);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI3IPROC) (GLuint index, GLint v0, GLint v1, GLint v2);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI3IVPROC) (GLuint index, const GLint* v0);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI3UIPROC) (GLuint index, GLuint v0, GLuint v1, GLuint v2);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI3UIVPROC) (GLuint index, const GLuint* v0);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4BVPROC) (GLuint index, const GLbyte* v0);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4IPROC) (GLuint index, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4IVPROC) (GLuint index, const GLint* v0);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4SVPROC) (GLuint index, const GLshort* v0);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4UBVPROC) (GLuint index, const GLubyte* v0);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4UIPROC) (GLuint index, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4UIVPROC) (GLuint index, const GLuint* v0);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4USVPROC) (GLuint index, const GLushort* v0);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBIPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void*pointer);
# 2319 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWARRAYSINSTANCEDPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWELEMENTSINSTANCEDPROC) (GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount);
typedef void (__attribute__((__stdcall__)) * PFNGLPRIMITIVERESTARTINDEXPROC) (GLuint buffer);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXBUFFERPROC) (GLenum target, GLenum internalFormat, GLuint buffer);
# 2361 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERTEXTUREPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (__attribute__((__stdcall__)) * PFNGLGETBUFFERPARAMETERI64VPROC) (GLenum target, GLenum value, GLint64 * data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETINTEGER64I_VPROC) (GLenum pname, GLuint index, GLint64 * data);
# 2381 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBDIVISORPROC) (GLuint index, GLuint divisor);
# 2407 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDEQUATIONIPROC) (GLuint buf, GLenum mode);
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst);
typedef void (__attribute__((__stdcall__)) * PFNGLMINSAMPLESHADINGPROC) (GLclampf value);
# 2482 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef GLenum (__attribute__((__stdcall__)) * PFNGLGETGRAPHICSRESETSTATUSPROC) (void);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint lod, GLsizei bufSize, GLvoid *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNTEXIMAGEPROC) (GLenum tex, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNUNIFORMDVPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
# 2515 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLTBUFFERMASK3DFXPROC) (GLuint mask);
# 2576 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) *GLDEBUGPROCAMD)(GLuint id, GLenum category, GLenum severity, GLsizei length, const GLchar* message, void* userParam);

typedef void (__attribute__((__stdcall__)) * PFNGLDEBUGMESSAGECALLBACKAMDPROC) (GLDEBUGPROCAMD callback, void *userParam);
typedef void (__attribute__((__stdcall__)) * PFNGLDEBUGMESSAGEENABLEAMDPROC) (GLenum category, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);
typedef void (__attribute__((__stdcall__)) * PFNGLDEBUGMESSAGEINSERTAMDPROC) (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar* buf);
typedef GLuint (__attribute__((__stdcall__)) * PFNGLGETDEBUGMESSAGELOGAMDPROC) (GLuint count, GLsizei bufsize, GLenum* categories, GLuint* severities, GLuint* ids, GLsizei* lengths, GLchar* message);
# 2609 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDEQUATIONINDEXEDAMDPROC) (GLuint buf, GLenum mode);
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDFUNCINDEXEDAMDPROC) (GLuint buf, GLenum src, GLenum dst);
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
# 2656 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBPARAMETERIAMDPROC) (GLuint index, GLenum pname, GLint param);
# 2669 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC) (GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride);
# 2690 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDELETENAMESAMDPROC) (GLenum identifier, GLuint num, const GLuint* names);
typedef void (__attribute__((__stdcall__)) * PFNGLGENNAMESAMDPROC) (GLenum identifier, GLuint num, GLuint* names);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISNAMEAMDPROC) (GLenum identifier, GLuint name);
# 2714 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLQUERYOBJECTPARAMETERUIAMDPROC) (GLenum target, GLuint id, GLenum pname, GLuint param);
# 2735 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBEGINPERFMONITORAMDPROC) (GLuint monitor);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEPERFMONITORSAMDPROC) (GLsizei n, GLuint* monitors);
typedef void (__attribute__((__stdcall__)) * PFNGLENDPERFMONITORAMDPROC) (GLuint monitor);
typedef void (__attribute__((__stdcall__)) * PFNGLGENPERFMONITORSAMDPROC) (GLsizei n, GLuint* monitors);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPERFMONITORCOUNTERDATAAMDPROC) (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint* data, GLint *bytesWritten);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPERFMONITORCOUNTERINFOAMDPROC) (GLuint group, GLuint counter, GLenum pname, void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) (GLuint group, GLuint counter, GLsizei bufSize, GLsizei* length, GLchar *counterString);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPERFMONITORCOUNTERSAMDPROC) (GLuint group, GLint* numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPERFMONITORGROUPSTRINGAMDPROC) (GLuint group, GLsizei bufSize, GLsizei* length, GLchar *groupString);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPERFMONITORGROUPSAMDPROC) (GLint* numGroups, GLsizei groupsSize, GLuint *groups);
typedef void (__attribute__((__stdcall__)) * PFNGLSELECTPERFMONITORCOUNTERSAMDPROC) (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint* counterList);
# 2794 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLSETMULTISAMPLEFVAMDPROC) (GLenum pname, GLuint index, const GLfloat* val);
# 2864 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLTEXSTORAGESPARSEAMDPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTURESTORAGESPARSEAMDPROC) (GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
# 2884 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLSTENCILOPVALUEAMDPROC) (GLenum face, GLuint value);
# 2943 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLTESSELLATIONFACTORAMDPROC) (GLfloat factor);
typedef void (__attribute__((__stdcall__)) * PFNGLTESSELLATIONMODEAMDPROC) (GLenum mode);
# 2981 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBLITFRAMEBUFFERANGLEPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
# 2998 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
# 3013 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWARRAYSINSTANCEDANGLEPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWELEMENTSINSTANCEDANGLEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBDIVISORANGLEPROC) (GLuint index, GLuint divisor);
# 3113 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBEGINQUERYANGLEPROC) (GLenum target, GLuint id);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEQUERIESANGLEPROC) (GLsizei n, const GLuint* ids);
typedef void (__attribute__((__stdcall__)) * PFNGLENDQUERYANGLEPROC) (GLenum target);
typedef void (__attribute__((__stdcall__)) * PFNGLGENQUERIESANGLEPROC) (GLsizei n, GLuint* ids);
typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYOBJECTI64VANGLEPROC) (GLuint id, GLenum pname, GLint64* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYOBJECTIVANGLEPROC) (GLuint id, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYOBJECTUI64VANGLEPROC) (GLuint id, GLenum pname, GLuint64* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYOBJECTUIVANGLEPROC) (GLuint id, GLenum pname, GLuint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYIVANGLEPROC) (GLenum target, GLenum pname, GLint* params);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISQUERYANGLEPROC) (GLuint id);
typedef void (__attribute__((__stdcall__)) * PFNGLQUERYCOUNTERANGLEPROC) (GLuint id, GLenum target);
# 3148 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC) (GLuint shader, GLsizei bufsize, GLsizei* length, GLchar* source);
# 3187 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, GLint first, GLsizei count);
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
typedef void (__attribute__((__stdcall__)) * PFNGLELEMENTPOINTERAPPLEPROC) (GLenum type, const void *pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, const GLint* first, const GLsizei *count, GLsizei primcount);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei *count, GLsizei primcount);
# 3211 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEFENCESAPPLEPROC) (GLsizei n, const GLuint* fences);
typedef void (__attribute__((__stdcall__)) * PFNGLFINISHFENCEAPPLEPROC) (GLuint fence);
typedef void (__attribute__((__stdcall__)) * PFNGLFINISHOBJECTAPPLEPROC) (GLenum object, GLint name);
typedef void (__attribute__((__stdcall__)) * PFNGLGENFENCESAPPLEPROC) (GLsizei n, GLuint* fences);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISFENCEAPPLEPROC) (GLuint fence);
typedef void (__attribute__((__stdcall__)) * PFNGLSETFENCEAPPLEPROC) (GLuint fence);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLTESTFENCEAPPLEPROC) (GLuint fence);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLTESTOBJECTAPPLEPROC) (GLenum object, GLuint name);
# 3265 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBUFFERPARAMETERIAPPLEPROC) (GLenum target, GLenum pname, GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) (GLenum target, GLintptr offset, GLsizeiptr size);
# 3287 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETOBJECTPARAMETERIVAPPLEPROC) (GLenum objectType, GLuint name, GLenum pname, GLint* params);
typedef GLenum (__attribute__((__stdcall__)) * PFNGLOBJECTPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option);
typedef GLenum (__attribute__((__stdcall__)) * PFNGLOBJECTUNPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option);
# 3359 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC) (GLenum target, GLenum pname, void **params);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTURERANGEAPPLEPROC) (GLenum target, GLsizei length, void *pointer);
# 3387 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBINDVERTEXARRAYAPPLEPROC) (GLuint array);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint* arrays);
typedef void (__attribute__((__stdcall__)) * PFNGLGENVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint* arrays);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISVERTEXARRAYAPPLEPROC) (GLuint array);
# 3415 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, void *pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYPARAMETERIAPPLEPROC) (GLenum pname, GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, void *pointer);
# 3443 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDISABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);
typedef void (__attribute__((__stdcall__)) * PFNGLENABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISVERTEXATTRIBENABLEDAPPLEPROC) (GLuint index, GLenum pname);
typedef void (__attribute__((__stdcall__)) * PFNGLMAPVERTEXATTRIB1DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points);
typedef void (__attribute__((__stdcall__)) * PFNGLMAPVERTEXATTRIB1FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points);
typedef void (__attribute__((__stdcall__)) * PFNGLMAPVERTEXATTRIB2DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points);
typedef void (__attribute__((__stdcall__)) * PFNGLMAPVERTEXATTRIB2FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points);
# 3496 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef int GLfixed;

typedef void (__attribute__((__stdcall__)) * PFNGLCLEARDEPTHFPROC) (GLclampf d);
typedef void (__attribute__((__stdcall__)) * PFNGLDEPTHRANGEFPROC) (GLclampf n, GLclampf f);
typedef void (__attribute__((__stdcall__)) * PFNGLGETSHADERPRECISIONFORMATPROC) (GLenum shadertype, GLenum precisiontype, GLint* range, GLint *precision);
typedef void (__attribute__((__stdcall__)) * PFNGLRELEASESHADERCOMPILERPROC) (void);
typedef void (__attribute__((__stdcall__)) * PFNGLSHADERBINARYPROC) (GLsizei count, const GLuint* shaders, GLenum binaryformat, const void*binary, GLsizei length);
# 3519 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLMEMORYBARRIERBYREGIONPROC) (GLbitfield barriers);
# 3536 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLPRIMITIVEBOUNDINGBOXARBPROC) (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
# 3582 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance);
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, GLuint baseinstance);
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance);
# 3601 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef GLuint64 (__attribute__((__stdcall__)) * PFNGLGETIMAGEHANDLEARBPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
typedef GLuint64 (__attribute__((__stdcall__)) * PFNGLGETTEXTUREHANDLEARBPROC) (GLuint texture);
typedef GLuint64 (__attribute__((__stdcall__)) * PFNGLGETTEXTURESAMPLERHANDLEARBPROC) (GLuint texture, GLuint sampler);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBLUI64VARBPROC) (GLuint index, GLenum pname, GLuint64EXT* params);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISTEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle);
typedef void (__attribute__((__stdcall__)) * PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC) (GLuint64 handle);
typedef void (__attribute__((__stdcall__)) * PFNGLMAKEIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle, GLenum access);
typedef void (__attribute__((__stdcall__)) * PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC) (GLuint64 handle);
typedef void (__attribute__((__stdcall__)) * PFNGLMAKETEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC) (GLuint program, GLint location, GLuint64 value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64* values);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMHANDLEUI64ARBPROC) (GLint location, GLuint64 value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMHANDLEUI64VARBPROC) (GLint location, GLsizei count, const GLuint64* value);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL1UI64ARBPROC) (GLuint index, GLuint64EXT x);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL1UI64VARBPROC) (GLuint index, const GLuint64EXT* v);
# 3649 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) (GLuint program, GLuint colorNumber, GLuint index, const GLchar * name);
typedef GLint (__attribute__((__stdcall__)) * PFNGLGETFRAGDATAINDEXPROC) (GLuint program, const GLchar * name);
# 3674 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBUFFERSTORAGEPROC) (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDBUFFERSTORAGEEXTPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
# 3692 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef struct _cl_context *cl_context;
typedef struct _cl_event *cl_event;

typedef GLsync (__attribute__((__stdcall__)) * PFNGLCREATESYNCFROMCLEVENTARBPROC) (cl_context context, cl_event event, GLbitfield flags);
# 3708 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCLEARBUFFERDATAPROC) (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCLEARBUFFERSUBDATAPROC) (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCLEARNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
# 3729 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCLEARTEXIMAGEPROC) (GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCLEARTEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
# 3751 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCLIPCONTROLPROC) (GLenum origin, GLenum depth);
# 3770 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCLAMPCOLORARBPROC) (GLenum target, GLenum clamp);
# 3829 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDISPATCHCOMPUTEPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
typedef void (__attribute__((__stdcall__)) * PFNGLDISPATCHCOMPUTEINDIRECTPROC) (GLintptr indirect);
# 3849 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);
# 3888 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYBUFFERSUBDATAPROC) (GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size);
# 3901 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYIMAGESUBDATAPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
# 3949 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) *GLDEBUGPROCARB)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam);

typedef void (__attribute__((__stdcall__)) * PFNGLDEBUGMESSAGECALLBACKARBPROC) (GLDEBUGPROCARB callback, const void *userParam);
typedef void (__attribute__((__stdcall__)) * PFNGLDEBUGMESSAGECONTROLARBPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);
typedef void (__attribute__((__stdcall__)) * PFNGLDEBUGMESSAGEINSERTARBPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf);
typedef GLuint (__attribute__((__stdcall__)) * PFNGLGETDEBUGMESSAGELOGARBPROC) (GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);
# 4021 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBINDTEXTUREUNITPROC) (GLuint unit, GLuint texture);
typedef void (__attribute__((__stdcall__)) * PFNGLBLITNAMEDFRAMEBUFFERPROC) (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef GLenum (__attribute__((__stdcall__)) * PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC) (GLuint framebuffer, GLenum target);
typedef void (__attribute__((__stdcall__)) * PFNGLCLEARNAMEDBUFFERDATAPROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCLEARNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCLEARNAMEDFRAMEBUFFERFIPROC) (GLuint framebuffer, GLenum buffer, GLfloat depth, GLint stencil);
typedef void (__attribute__((__stdcall__)) * PFNGLCLEARNAMEDFRAMEBUFFERFVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLCLEARNAMEDFRAMEBUFFERIVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYNAMEDBUFFERSUBDATAPROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (__attribute__((__stdcall__)) * PFNGLCREATEBUFFERSPROC) (GLsizei n, GLuint* buffers);
typedef void (__attribute__((__stdcall__)) * PFNGLCREATEFRAMEBUFFERSPROC) (GLsizei n, GLuint* framebuffers);
typedef void (__attribute__((__stdcall__)) * PFNGLCREATEPROGRAMPIPELINESPROC) (GLsizei n, GLuint* pipelines);
typedef void (__attribute__((__stdcall__)) * PFNGLCREATEQUERIESPROC) (GLenum target, GLsizei n, GLuint* ids);
typedef void (__attribute__((__stdcall__)) * PFNGLCREATERENDERBUFFERSPROC) (GLsizei n, GLuint* renderbuffers);
typedef void (__attribute__((__stdcall__)) * PFNGLCREATESAMPLERSPROC) (GLsizei n, GLuint* samplers);
typedef void (__attribute__((__stdcall__)) * PFNGLCREATETEXTURESPROC) (GLenum target, GLsizei n, GLuint* textures);
typedef void (__attribute__((__stdcall__)) * PFNGLCREATETRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint* ids);
typedef void (__attribute__((__stdcall__)) * PFNGLCREATEVERTEXARRAYSPROC) (GLsizei n, GLuint* arrays);
typedef void (__attribute__((__stdcall__)) * PFNGLDISABLEVERTEXARRAYATTRIBPROC) (GLuint vaobj, GLuint index);
typedef void (__attribute__((__stdcall__)) * PFNGLENABLEVERTEXARRAYATTRIBPROC) (GLuint vaobj, GLuint index);
typedef void (__attribute__((__stdcall__)) * PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (__attribute__((__stdcall__)) * PFNGLGENERATETEXTUREMIPMAPPROC) (GLuint texture);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC) (GLuint texture, GLint level, GLsizei bufSize, void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNAMEDBUFFERPARAMETERI64VPROC) (GLuint buffer, GLenum pname, GLint64* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNAMEDBUFFERPARAMETERIVPROC) (GLuint buffer, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNAMEDBUFFERPOINTERVPROC) (GLuint buffer, GLenum pname, void** params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC) (GLuint framebuffer, GLenum pname, GLint* param);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC) (GLuint renderbuffer, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYBUFFEROBJECTI64VPROC) (GLuint id,GLuint buffer,GLenum pname,GLintptr offset);
typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYBUFFEROBJECTIVPROC) (GLuint id,GLuint buffer,GLenum pname,GLintptr offset);
typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYBUFFEROBJECTUI64VPROC) (GLuint id,GLuint buffer,GLenum pname,GLintptr offset);
typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYBUFFEROBJECTUIVPROC) (GLuint id,GLuint buffer,GLenum pname,GLintptr offset);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXTUREIMAGEPROC) (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXTURELEVELPARAMETERFVPROC) (GLuint texture, GLint level, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXTURELEVELPARAMETERIVPROC) (GLuint texture, GLint level, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXTUREPARAMETERIIVPROC) (GLuint texture, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXTUREPARAMETERIUIVPROC) (GLuint texture, GLenum pname, GLuint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXTUREPARAMETERFVPROC) (GLuint texture, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXTUREPARAMETERIVPROC) (GLuint texture, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTRANSFORMFEEDBACKI64_VPROC) (GLuint xfb, GLenum pname, GLuint index, GLint64* param);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTRANSFORMFEEDBACKI_VPROC) (GLuint xfb, GLenum pname, GLuint index, GLint* param);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTRANSFORMFEEDBACKIVPROC) (GLuint xfb, GLenum pname, GLint* param);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXARRAYINDEXED64IVPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint64* param);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXARRAYINDEXEDIVPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint* param);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXARRAYIVPROC) (GLuint vaobj, GLenum pname, GLint* param);
typedef void (__attribute__((__stdcall__)) * PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC) (GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments);
typedef void (__attribute__((__stdcall__)) * PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC) (GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void * (__attribute__((__stdcall__)) * PFNGLMAPNAMEDBUFFERPROC) (GLuint buffer, GLenum access);
typedef void * (__attribute__((__stdcall__)) * PFNGLMAPNAMEDBUFFERRANGEPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDBUFFERDATAPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDBUFFERSTORAGEPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC) (GLuint framebuffer, GLenum mode);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC) (GLuint framebuffer, GLsizei n, const GLenum* bufs);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC) (GLuint framebuffer, GLenum pname, GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC) (GLuint framebuffer, GLenum mode);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDFRAMEBUFFERTEXTUREPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDRENDERBUFFERSTORAGEPROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREBUFFERPROC) (GLuint texture, GLenum internalformat, GLuint buffer);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREBUFFERRANGEPROC) (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREPARAMETERIIVPROC) (GLuint texture, GLenum pname, const GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREPARAMETERIUIVPROC) (GLuint texture, GLenum pname, const GLuint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREPARAMETERFPROC) (GLuint texture, GLenum pname, GLfloat param);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREPARAMETERFVPROC) (GLuint texture, GLenum pname, const GLfloat* param);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREPARAMETERIPROC) (GLuint texture, GLenum pname, GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREPARAMETERIVPROC) (GLuint texture, GLenum pname, const GLint* param);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTURESTORAGE1DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTURESTORAGE2DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC) (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTURESTORAGE3DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC) (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC) (GLuint xfb, GLuint index, GLuint buffer);
typedef void (__attribute__((__stdcall__)) * PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC) (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLUNMAPNAMEDBUFFERPROC) (GLuint buffer);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYATTRIBBINDINGPROC) (GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYATTRIBFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYATTRIBIFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYATTRIBLFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYBINDINGDIVISORPROC) (GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYELEMENTBUFFERPROC) (GLuint vaobj, GLuint buffer);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYVERTEXBUFFERPROC) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYVERTEXBUFFERSPROC) (GLuint vaobj, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr *offsets, const GLsizei *strides);
# 4244 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWBUFFERSARBPROC) (GLsizei n, const GLenum* bufs);
# 4257 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDEQUATIONSEPARATEIARBPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDEQUATIONIARBPROC) (GLuint buf, GLenum mode);
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDFUNCSEPARATEIARBPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDFUNCIARBPROC) (GLuint buf, GLenum src, GLenum dst);
# 4276 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, GLint basevertex);
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, const GLsizei* count, GLenum type, const void *const *indices, GLsizei primcount, const GLint *basevertex);
# 4298 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect);
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect);
# 4439 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLGETFRAMEBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC) (GLuint framebuffer, GLenum pname, GLint param);
# 4533 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBINDFRAMEBUFFERPROC) (GLenum target, GLuint framebuffer);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDRENDERBUFFERPROC) (GLenum target, GLuint renderbuffer);
typedef void (__attribute__((__stdcall__)) * PFNGLBLITFRAMEBUFFERPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef GLenum (__attribute__((__stdcall__)) * PFNGLCHECKFRAMEBUFFERSTATUSPROC) (GLenum target);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEFRAMEBUFFERSPROC) (GLsizei n, const GLuint* framebuffers);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETERENDERBUFFERSPROC) (GLsizei n, const GLuint* renderbuffers);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERTEXTURE1DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERTEXTURE2DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERTEXTURE3DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERTEXTURELAYERPROC) (GLenum target,GLenum attachment, GLuint texture,GLint level,GLint layer);
typedef void (__attribute__((__stdcall__)) * PFNGLGENFRAMEBUFFERSPROC) (GLsizei n, GLuint* framebuffers);
typedef void (__attribute__((__stdcall__)) * PFNGLGENRENDERBUFFERSPROC) (GLsizei n, GLuint* renderbuffers);
typedef void (__attribute__((__stdcall__)) * PFNGLGENERATEMIPMAPPROC) (GLenum target);
typedef void (__attribute__((__stdcall__)) * PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum target, GLenum attachment, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETRENDERBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint* params);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISFRAMEBUFFERPROC) (GLuint framebuffer);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISRENDERBUFFERPROC) (GLuint renderbuffer);
typedef void (__attribute__((__stdcall__)) * PFNGLRENDERBUFFERSTORAGEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (__attribute__((__stdcall__)) * PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
# 4615 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERTEXTUREARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERTEXTUREFACEARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERTEXTURELAYERARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMPARAMETERIARBPROC) (GLuint program, GLenum pname, GLint value);
# 4639 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMBINARYPROC) (GLuint program, GLsizei bufSize, GLsizei* length, GLenum *binaryFormat, void*binary);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMBINARYPROC) (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMPARAMETERIPROC) (GLuint program, GLenum pname, GLint value);
# 4656 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXTURESUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
# 4700 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETUNIFORMDVPROC) (GLuint program, GLint location, GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1DPROC) (GLint location, GLdouble x);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1DVPROC) (GLint location, GLsizei count, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2DPROC) (GLint location, GLdouble x, GLdouble y);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2DVPROC) (GLint location, GLsizei count, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3DVPROC) (GLint location, GLsizei count, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4DVPROC) (GLint location, GLsizei count, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX2X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX2X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX3X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX3X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX4X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX4X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
# 4756 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETUNIFORMI64VARBPROC) (GLuint program, GLint location, GLint64* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETUNIFORMUI64VARBPROC) (GLuint program, GLint location, GLuint64* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNUNIFORMI64VARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint64* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNUNIFORMUI64VARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint64* params);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1I64ARBPROC) (GLuint program, GLint location, GLint64 x);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1UI64ARBPROC) (GLuint program, GLint location, GLuint64 x);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2I64ARBPROC) (GLuint program, GLint location, GLint64 x, GLint64 y);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2UI64ARBPROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3I64ARBPROC) (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3UI64ARBPROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4I64ARBPROC) (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4UI64ARBPROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1I64ARBPROC) (GLint location, GLint64 x);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1I64VARBPROC) (GLint location, GLsizei count, const GLint64* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1UI64ARBPROC) (GLint location, GLuint64 x);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1UI64VARBPROC) (GLint location, GLsizei count, const GLuint64* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2I64ARBPROC) (GLint location, GLint64 x, GLint64 y);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2I64VARBPROC) (GLint location, GLsizei count, const GLint64* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2UI64ARBPROC) (GLint location, GLuint64 x, GLuint64 y);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2UI64VARBPROC) (GLint location, GLsizei count, const GLuint64* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3I64ARBPROC) (GLint location, GLint64 x, GLint64 y, GLint64 z);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3I64VARBPROC) (GLint location, GLsizei count, const GLint64* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3UI64ARBPROC) (GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3UI64VARBPROC) (GLint location, GLsizei count, const GLuint64* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4I64ARBPROC) (GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4I64VARBPROC) (GLint location, GLsizei count, const GLint64* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4UI64ARBPROC) (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4UI64VARBPROC) (GLint location, GLsizei count, const GLuint64* value);
# 4939 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void (__attribute__((__stdcall__)) * PFNGLCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image);
typedef void (__attribute__((__stdcall__)) * PFNGLCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image);
typedef void (__attribute__((__stdcall__)) * PFNGLCONVOLUTIONPARAMETERFPROC) (GLenum target, GLenum pname, GLfloat params);
typedef void (__attribute__((__stdcall__)) * PFNGLCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
typedef void (__attribute__((__stdcall__)) * PFNGLCONVOLUTIONPARAMETERIPROC) (GLenum target, GLenum pname, GLint params);
typedef void (__attribute__((__stdcall__)) * PFNGLCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCOLORTABLEPROC) (GLenum target, GLenum format, GLenum type, void *table);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCONVOLUTIONFILTERPROC) (GLenum target, GLenum format, GLenum type, void *image);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETHISTOGRAMPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
typedef void (__attribute__((__stdcall__)) * PFNGLGETHISTOGRAMPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETHISTOGRAMPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMINMAXPROC) (GLenum target, GLboolean reset, GLenum format, GLenum types, void *values);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMINMAXPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMINMAXPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETSEPARABLEFILTERPROC) (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span);
typedef void (__attribute__((__stdcall__)) * PFNGLHISTOGRAMPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
typedef void (__attribute__((__stdcall__)) * PFNGLMINMAXPROC) (GLenum target, GLenum internalformat, GLboolean sink);
typedef void (__attribute__((__stdcall__)) * PFNGLRESETHISTOGRAMPROC) (GLenum target);
typedef void (__attribute__((__stdcall__)) * PFNGLRESETMINMAXPROC) (GLenum target);
typedef void (__attribute__((__stdcall__)) * PFNGLSEPARABLEFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column);
# 5017 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC) (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC) (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
# 5034 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWARRAYSINSTANCEDARBPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWELEMENTSINSTANCEDARBPROC) (GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBDIVISORARBPROC) (GLuint index, GLuint divisor);
# 5053 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETINTERNALFORMATIVPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint* params);
# 5166 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETINTERNALFORMATI64VPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64* params);
# 5179 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLINVALIDATEBUFFERDATAPROC) (GLuint buffer);
typedef void (__attribute__((__stdcall__)) * PFNGLINVALIDATEBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (__attribute__((__stdcall__)) * PFNGLINVALIDATEFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum* attachments);
typedef void (__attribute__((__stdcall__)) * PFNGLINVALIDATESUBFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (__attribute__((__stdcall__)) * PFNGLINVALIDATETEXIMAGEPROC) (GLuint texture, GLint level);
typedef void (__attribute__((__stdcall__)) * PFNGLINVALIDATETEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
# 5220 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLFLUSHMAPPEDBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length);
typedef void * (__attribute__((__stdcall__)) * PFNGLMAPBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
# 5246 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCURRENTPALETTEMATRIXARBPROC) (GLint index);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXINDEXPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, void *pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXINDEXUBVARBPROC) (GLint size, GLubyte *indices);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXINDEXUIVARBPROC) (GLint size, GLuint *indices);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXINDEXUSVARBPROC) (GLint size, GLushort *indices);
# 5267 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBINDBUFFERSBASEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint* buffers);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDBUFFERSRANGEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDIMAGETEXTURESPROC) (GLuint first, GLsizei count, const GLuint* textures);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDSAMPLERSPROC) (GLuint first, GLsizei count, const GLuint* samplers);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDTEXTURESPROC) (GLuint first, GLsizei count, const GLuint* textures);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDVERTEXBUFFERSPROC) (GLuint first, GLsizei count, const GLuint* buffers, const GLintptr *offsets, const GLsizei *strides);
# 5290 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLMULTIDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTIDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride);
# 5315 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLECOVERAGEARBPROC) (GLclampf value, GLboolean invert);
# 5364 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLACTIVETEXTUREARBPROC) (GLenum texture);
typedef void (__attribute__((__stdcall__)) * PFNGLCLIENTACTIVETEXTUREARBPROC) (GLenum texture);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD1DARBPROC) (GLenum target, GLdouble s);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD1DVARBPROC) (GLenum target, const GLdouble *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD1FARBPROC) (GLenum target, GLfloat s);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD1FVARBPROC) (GLenum target, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD1IARBPROC) (GLenum target, GLint s);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD1IVARBPROC) (GLenum target, const GLint *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD1SARBPROC) (GLenum target, GLshort s);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD1SVARBPROC) (GLenum target, const GLshort *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD2DARBPROC) (GLenum target, GLdouble s, GLdouble t);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD2DVARBPROC) (GLenum target, const GLdouble *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD2FARBPROC) (GLenum target, GLfloat s, GLfloat t);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD2FVARBPROC) (GLenum target, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD2IARBPROC) (GLenum target, GLint s, GLint t);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD2IVARBPROC) (GLenum target, const GLint *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD2SARBPROC) (GLenum target, GLshort s, GLshort t);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD2SVARBPROC) (GLenum target, const GLshort *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD3DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD3DVARBPROC) (GLenum target, const GLdouble *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD3FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD3FVARBPROC) (GLenum target, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD3IARBPROC) (GLenum target, GLint s, GLint t, GLint r);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD3IVARBPROC) (GLenum target, const GLint *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD3SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD3SVARBPROC) (GLenum target, const GLshort *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD4DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD4DVARBPROC) (GLenum target, const GLdouble *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD4FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD4FVARBPROC) (GLenum target, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD4IARBPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD4IVARBPROC) (GLenum target, const GLint *v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD4SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD4SVARBPROC) (GLenum target, const GLshort *v);
# 5449 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBEGINQUERYARBPROC) (GLenum target, GLuint id);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEQUERIESARBPROC) (GLsizei n, const GLuint* ids);
typedef void (__attribute__((__stdcall__)) * PFNGLENDQUERYARBPROC) (GLenum target);
typedef void (__attribute__((__stdcall__)) * PFNGLGENQUERIESARBPROC) (GLsizei n, GLuint* ids);
typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYOBJECTIVARBPROC) (GLuint id, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYOBJECTUIVARBPROC) (GLuint id, GLenum pname, GLuint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYIVARBPROC) (GLenum target, GLenum pname, GLint* params);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISQUERYARBPROC) (GLuint id);
# 5490 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLMAXSHADERCOMPILERTHREADSARBPROC) (GLuint count);
# 5543 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLPOINTPARAMETERFARBPROC) (GLenum pname, GLfloat param);
typedef void (__attribute__((__stdcall__)) * PFNGLPOINTPARAMETERFVARBPROC) (GLenum pname, const GLfloat* params);
# 5627 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMINTERFACEIVPROC) (GLuint program, GLenum programInterface, GLenum pname, GLint* params);
typedef GLuint (__attribute__((__stdcall__)) * PFNGLGETPROGRAMRESOURCEINDEXPROC) (GLuint program, GLenum programInterface, const GLchar* name);
typedef GLint (__attribute__((__stdcall__)) * PFNGLGETPROGRAMRESOURCELOCATIONPROC) (GLuint program, GLenum programInterface, const GLchar* name);
typedef GLint (__attribute__((__stdcall__)) * PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) (GLuint program, GLenum programInterface, const GLchar* name);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMRESOURCENAMEPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar *name);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMRESOURCEIVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei *length, GLint *params);
# 5655 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLPROVOKINGVERTEXPROC) (GLenum mode);
# 5699 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef GLenum (__attribute__((__stdcall__)) * PFNGLGETGRAPHICSRESETSTATUSARBPROC) (void);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNCOLORTABLEARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, GLsizei bufSize, void* img);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNCONVOLUTIONFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNHISTOGRAMARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNMAPDVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNMAPFVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLfloat* v);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNMAPIVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLint* v);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNMINMAXARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNPIXELMAPFVARBPROC) (GLenum map, GLsizei bufSize, GLfloat* values);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNPIXELMAPUIVARBPROC) (GLenum map, GLsizei bufSize, GLuint* values);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNPIXELMAPUSVARBPROC) (GLenum map, GLsizei bufSize, GLushort* values);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNPOLYGONSTIPPLEARBPROC) (GLsizei bufSize, GLubyte* pattern);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNSEPARABLEFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void*column, void*span);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNTEXIMAGEARBPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* img);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNUNIFORMDVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNUNIFORMFVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNUNIFORMIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNUNIFORMUIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLREADNPIXELSARBPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);
# 5777 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC) (GLenum target, GLuint start, GLsizei count, const GLfloat* v);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC) (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v);
# 5795 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLMINSAMPLESHADINGARBPROC) (GLclampf value);
# 5810 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETESAMPLERSPROC) (GLsizei count, const GLuint * samplers);
typedef void (__attribute__((__stdcall__)) * PFNGLGENSAMPLERSPROC) (GLsizei count, GLuint* samplers);
typedef void (__attribute__((__stdcall__)) * PFNGLGETSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, GLuint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, GLint* params);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISSAMPLERPROC) (GLuint sampler);
typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, const GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, const GLuint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLERPARAMETERFPROC) (GLuint sampler, GLenum pname, GLfloat param);
typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLERPARAMETERIPROC) (GLuint sampler, GLenum pname, GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, const GLint* params);
# 5881 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLACTIVESHADERPROGRAMPROC) (GLuint pipeline, GLuint program);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDPROGRAMPIPELINEPROC) (GLuint pipeline);
typedef GLuint (__attribute__((__stdcall__)) * PFNGLCREATESHADERPROGRAMVPROC) (GLenum type, GLsizei count, const GLchar * const * strings);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEPROGRAMPIPELINESPROC) (GLsizei n, const GLuint* pipelines);
typedef void (__attribute__((__stdcall__)) * PFNGLGENPROGRAMPIPELINESPROC) (GLsizei n, GLuint* pipelines);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMPIPELINEINFOLOGPROC) (GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar *infoLog);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMPIPELINEIVPROC) (GLuint pipeline, GLenum pname, GLint* params);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISPROGRAMPIPELINEPROC) (GLuint pipeline);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1DPROC) (GLuint program, GLint location, GLdouble x);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1FPROC) (GLuint program, GLint location, GLfloat x);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1IPROC) (GLuint program, GLint location, GLint x);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1IVPROC) (GLuint program, GLint location, GLsizei count, const GLint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1UIPROC) (GLuint program, GLint location, GLuint x);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2DPROC) (GLuint program, GLint location, GLdouble x, GLdouble y);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2FPROC) (GLuint program, GLint location, GLfloat x, GLfloat y);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2IPROC) (GLuint program, GLint location, GLint x, GLint y);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2IVPROC) (GLuint program, GLint location, GLsizei count, const GLint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2UIPROC) (GLuint program, GLint location, GLuint x, GLuint y);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3DPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3FPROC) (GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3IPROC) (GLuint program, GLint location, GLint x, GLint y, GLint z);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3IVPROC) (GLuint program, GLint location, GLsizei count, const GLint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3UIPROC) (GLuint program, GLint location, GLuint x, GLuint y, GLuint z);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4DPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4FPROC) (GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4IPROC) (GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4IVPROC) (GLuint program, GLint location, GLsizei count, const GLint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4UIPROC) (GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUSEPROGRAMSTAGESPROC) (GLuint pipeline, GLbitfield stages, GLuint program);
typedef void (__attribute__((__stdcall__)) * PFNGLVALIDATEPROGRAMPIPELINEPROC) (GLuint pipeline);
# 6051 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint* params);
# 6174 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
typedef void (__attribute__((__stdcall__)) * PFNGLMEMORYBARRIERPROC) (GLbitfield barriers);
# 6233 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef char GLcharARB;
typedef unsigned int GLhandleARB;

typedef void (__attribute__((__stdcall__)) * PFNGLATTACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB obj);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPILESHADERARBPROC) (GLhandleARB shaderObj);
typedef GLhandleARB (__attribute__((__stdcall__)) * PFNGLCREATEPROGRAMOBJECTARBPROC) (void);
typedef GLhandleARB (__attribute__((__stdcall__)) * PFNGLCREATESHADEROBJECTARBPROC) (GLenum shaderType);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEOBJECTARBPROC) (GLhandleARB obj);
typedef void (__attribute__((__stdcall__)) * PFNGLDETACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB attachedObj);
typedef void (__attribute__((__stdcall__)) * PFNGLGETACTIVEUNIFORMARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint *size, GLenum *type, GLcharARB *name);
typedef void (__attribute__((__stdcall__)) * PFNGLGETATTACHEDOBJECTSARBPROC) (GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB *obj);
typedef GLhandleARB (__attribute__((__stdcall__)) * PFNGLGETHANDLEARBPROC) (GLenum pname);
typedef void (__attribute__((__stdcall__)) * PFNGLGETINFOLOGARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB *infoLog);
typedef void (__attribute__((__stdcall__)) * PFNGLGETOBJECTPARAMETERFVARBPROC) (GLhandleARB obj, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETOBJECTPARAMETERIVARBPROC) (GLhandleARB obj, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETSHADERSOURCEARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB *source);
typedef GLint (__attribute__((__stdcall__)) * PFNGLGETUNIFORMLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB* name);
typedef void (__attribute__((__stdcall__)) * PFNGLGETUNIFORMFVARBPROC) (GLhandleARB programObj, GLint location, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETUNIFORMIVARBPROC) (GLhandleARB programObj, GLint location, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLLINKPROGRAMARBPROC) (GLhandleARB programObj);
typedef void (__attribute__((__stdcall__)) * PFNGLSHADERSOURCEARBPROC) (GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint *length);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1FARBPROC) (GLint location, GLfloat v0);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1FVARBPROC) (GLint location, GLsizei count, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1IARBPROC) (GLint location, GLint v0);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1IVARBPROC) (GLint location, GLsizei count, const GLint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2FARBPROC) (GLint location, GLfloat v0, GLfloat v1);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2FVARBPROC) (GLint location, GLsizei count, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2IARBPROC) (GLint location, GLint v0, GLint v1);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2IVARBPROC) (GLint location, GLsizei count, const GLint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3FVARBPROC) (GLint location, GLsizei count, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3IVARBPROC) (GLint location, GLsizei count, const GLint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4FVARBPROC) (GLint location, GLsizei count, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4IVARBPROC) (GLint location, GLsizei count, const GLint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX2FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX3FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX4FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUSEPROGRAMOBJECTARBPROC) (GLhandleARB programObj);
typedef void (__attribute__((__stdcall__)) * PFNGLVALIDATEPROGRAMARBPROC) (GLhandleARB programObj);
# 6360 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLSHADERSTORAGEBLOCKBINDINGPROC) (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
# 6383 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETACTIVESUBROUTINENAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar *name);
typedef void (__attribute__((__stdcall__)) * PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar *name);
typedef void (__attribute__((__stdcall__)) * PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint* values);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMSTAGEIVPROC) (GLuint program, GLenum shadertype, GLenum pname, GLint* values);
typedef GLuint (__attribute__((__stdcall__)) * PFNGLGETSUBROUTINEINDEXPROC) (GLuint program, GLenum shadertype, const GLchar* name);
typedef GLint (__attribute__((__stdcall__)) * PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) (GLuint program, GLenum shadertype, const GLchar* name);
typedef void (__attribute__((__stdcall__)) * PFNGLGETUNIFORMSUBROUTINEUIVPROC) (GLenum shadertype, GLint location, GLuint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMSUBROUTINESUIVPROC) (GLenum shadertype, GLsizei count, const GLuint* indices);
# 6461 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPILESHADERINCLUDEARBPROC) (GLuint shader, GLsizei count, const GLchar* const *path, const GLint *length);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETENAMEDSTRINGARBPROC) (GLint namelen, const GLchar* name);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNAMEDSTRINGARBPROC) (GLint namelen, const GLchar* name, GLsizei bufSize, GLint *stringlen, GLchar *string);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNAMEDSTRINGIVARBPROC) (GLint namelen, const GLchar* name, GLenum pname, GLint *params);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISNAMEDSTRINGARBPROC) (GLint namelen, const GLchar* name);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDSTRINGARBPROC) (GLenum type, GLint namelen, const GLchar* name, GLint stringlen, const GLchar *string);
# 6520 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBUFFERPAGECOMMITMENTARBPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit);
# 6545 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLTEXPAGECOMMITMENTARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREPAGECOMMITMENTEXTPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
# 6605 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef GLenum (__attribute__((__stdcall__)) * PFNGLCLIENTWAITSYNCPROC) (GLsync GLsync,GLbitfield flags,GLuint64 timeout);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETESYNCPROC) (GLsync GLsync);
typedef GLsync (__attribute__((__stdcall__)) * PFNGLFENCESYNCPROC) (GLenum condition,GLbitfield flags);
typedef void (__attribute__((__stdcall__)) * PFNGLGETINTEGER64VPROC) (GLenum pname, GLint64* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETSYNCIVPROC) (GLsync GLsync,GLenum pname,GLsizei bufSize,GLsizei* length, GLint *values);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISSYNCPROC) (GLsync GLsync);
typedef void (__attribute__((__stdcall__)) * PFNGLWAITSYNCPROC) (GLsync GLsync,GLbitfield flags,GLuint64 timeout);
# 6663 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLPATCHPARAMETERFVPROC) (GLenum pname, const GLfloat* values);
typedef void (__attribute__((__stdcall__)) * PFNGLPATCHPARAMETERIPROC) (GLenum pname, GLint value);
# 6678 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREBARRIERPROC) (void);
# 6708 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLTEXBUFFERARBPROC) (GLenum target, GLenum internalformat, GLuint buffer);
# 6734 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLTEXBUFFERRANGEPROC) (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREBUFFERRANGEEXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
# 6761 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, void *img);
# 7014 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETMULTISAMPLEFVPROC) (GLenum pname, GLuint index, GLfloat* val);
typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLEMASKIPROC) (GLuint index, GLbitfield mask);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXIMAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXIMAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
# 7135 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLTEXSTORAGE1DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXSTORAGE2DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXSTORAGE3DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTURESTORAGE1DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTURESTORAGE2DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTURESTORAGE3DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
# 7158 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLTEXSTORAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXSTORAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
# 7198 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREVIEWPROC) (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
# 7214 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYOBJECTI64VPROC) (GLuint id, GLenum pname, GLint64* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYOBJECTUI64VPROC) (GLuint id, GLenum pname, GLuint64* params);
typedef void (__attribute__((__stdcall__)) * PFNGLQUERYCOUNTERPROC) (GLuint id, GLenum target);
# 7236 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBINDTRANSFORMFEEDBACKPROC) (GLenum target, GLuint id);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETETRANSFORMFEEDBACKSPROC) (GLsizei n, const GLuint* ids);
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWTRANSFORMFEEDBACKPROC) (GLenum mode, GLuint id);
typedef void (__attribute__((__stdcall__)) * PFNGLGENTRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint* ids);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISTRANSFORMFEEDBACKPROC) (GLuint id);
typedef void (__attribute__((__stdcall__)) * PFNGLPAUSETRANSFORMFEEDBACKPROC) (void);
typedef void (__attribute__((__stdcall__)) * PFNGLRESUMETRANSFORMFEEDBACKPROC) (void);
# 7264 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBEGINQUERYINDEXEDPROC) (GLenum target, GLuint index, GLuint id);
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) (GLenum mode, GLuint id, GLuint stream);
typedef void (__attribute__((__stdcall__)) * PFNGLENDQUERYINDEXEDPROC) (GLenum target, GLuint index);
typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYINDEXEDIVPROC) (GLenum target, GLuint index, GLenum pname, GLint* params);
# 7283 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) (GLenum mode, GLuint id, GLsizei primcount);
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) (GLenum mode, GLuint id, GLuint stream, GLsizei primcount);
# 7315 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLLOADTRANSPOSEMATRIXDARBPROC) (GLdouble m[16]);
typedef void (__attribute__((__stdcall__)) * PFNGLLOADTRANSPOSEMATRIXFARBPROC) (GLfloat m[16]);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTTRANSPOSEMATRIXDARBPROC) (GLdouble m[16]);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTTRANSPOSEMATRIXFARBPROC) (GLfloat m[16]);
# 7368 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBINDBUFFERBASEPROC) (GLenum target, GLuint index, GLuint buffer);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDBUFFERRANGEPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (__attribute__((__stdcall__)) * PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName);
typedef void (__attribute__((__stdcall__)) * PFNGLGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName);
typedef void (__attribute__((__stdcall__)) * PFNGLGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint* data);
typedef GLuint (__attribute__((__stdcall__)) * PFNGLGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar* uniformBlockName);
typedef void (__attribute__((__stdcall__)) * PFNGLGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const * uniformNames, GLuint* uniformIndices);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
# 7412 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBINDVERTEXARRAYPROC) (GLuint array);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint* arrays);
typedef void (__attribute__((__stdcall__)) * PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint* arrays);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISVERTEXARRAYPROC) (GLuint array);
# 7431 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBLDVPROC) (GLuint index, GLenum pname, GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL1DPROC) (GLuint index, GLdouble x);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL1DVPROC) (GLuint index, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL2DPROC) (GLuint index, GLdouble x, GLdouble y);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL2DVPROC) (GLuint index, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL3DVPROC) (GLuint index, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL4DVPROC) (GLuint index, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBLPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
# 7471 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBINDVERTEXBUFFERPROC) (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC) (GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC) (GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBBINDINGPROC) (GLuint attribindex, GLuint bindingindex);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBIFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBLFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXBINDINGDIVISORPROC) (GLuint bindingindex, GLuint divisor);
# 7549 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXBLENDARBPROC) (GLint count);
typedef void (__attribute__((__stdcall__)) * PFNGLWEIGHTPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, void *pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLWEIGHTBVARBPROC) (GLint size, GLbyte *weights);
typedef void (__attribute__((__stdcall__)) * PFNGLWEIGHTDVARBPROC) (GLint size, GLdouble *weights);
typedef void (__attribute__((__stdcall__)) * PFNGLWEIGHTFVARBPROC) (GLint size, GLfloat *weights);
typedef void (__attribute__((__stdcall__)) * PFNGLWEIGHTIVARBPROC) (GLint size, GLint *weights);
typedef void (__attribute__((__stdcall__)) * PFNGLWEIGHTSVARBPROC) (GLint size, GLshort *weights);
typedef void (__attribute__((__stdcall__)) * PFNGLWEIGHTUBVARBPROC) (GLint size, GLubyte *weights);
typedef void (__attribute__((__stdcall__)) * PFNGLWEIGHTUIVARBPROC) (GLint size, GLuint *weights);
typedef void (__attribute__((__stdcall__)) * PFNGLWEIGHTUSVARBPROC) (GLint size, GLushort *weights);
# 7612 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef ptrdiff_t GLintptrARB;
typedef ptrdiff_t GLsizeiptrARB;

typedef void (__attribute__((__stdcall__)) * PFNGLBINDBUFFERARBPROC) (GLenum target, GLuint buffer);
typedef void (__attribute__((__stdcall__)) * PFNGLBUFFERDATAARBPROC) (GLenum target, GLsizeiptrARB size, const void *data, GLenum usage);
typedef void (__attribute__((__stdcall__)) * PFNGLBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEBUFFERSARBPROC) (GLsizei n, const GLuint* buffers);
typedef void (__attribute__((__stdcall__)) * PFNGLGENBUFFERSARBPROC) (GLsizei n, GLuint* buffers);
typedef void (__attribute__((__stdcall__)) * PFNGLGETBUFFERPARAMETERIVARBPROC) (GLenum target, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETBUFFERPOINTERVARBPROC) (GLenum target, GLenum pname, void** params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISBUFFERARBPROC) (GLuint buffer);
typedef void * (__attribute__((__stdcall__)) * PFNGLMAPBUFFERARBPROC) (GLenum target, GLenum access);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLUNMAPBUFFERARBPROC) (GLenum target);
# 7728 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBINDPROGRAMARBPROC) (GLenum target, GLuint program);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEPROGRAMSARBPROC) (GLsizei n, const GLuint* programs);
typedef void (__attribute__((__stdcall__)) * PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
typedef void (__attribute__((__stdcall__)) * PFNGLENABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
typedef void (__attribute__((__stdcall__)) * PFNGLGENPROGRAMSARBPROC) (GLsizei n, GLuint* programs);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMENVPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMENVPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMSTRINGARBPROC) (GLenum target, GLenum pname, void *string);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMIVARBPROC) (GLenum target, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBPOINTERVARBPROC) (GLuint index, GLenum pname, void** pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBDVARBPROC) (GLuint index, GLenum pname, GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBFVARBPROC) (GLuint index, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBIVARBPROC) (GLuint index, GLenum pname, GLint* params);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISPROGRAMARBPROC) (GLuint program);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMENVPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMENVPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMENVPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMENVPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMLOCALPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMLOCALPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMSTRINGARBPROC) (GLenum target, GLenum format, GLsizei len, const void *string);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1DARBPROC) (GLuint index, GLdouble x);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1DVARBPROC) (GLuint index, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1FARBPROC) (GLuint index, GLfloat x);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1FVARBPROC) (GLuint index, const GLfloat* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1SARBPROC) (GLuint index, GLshort x);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1SVARBPROC) (GLuint index, const GLshort* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2DARBPROC) (GLuint index, GLdouble x, GLdouble y);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2DVARBPROC) (GLuint index, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2FARBPROC) (GLuint index, GLfloat x, GLfloat y);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2FVARBPROC) (GLuint index, const GLfloat* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2SARBPROC) (GLuint index, GLshort x, GLshort y);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2SVARBPROC) (GLuint index, const GLshort* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3DVARBPROC) (GLuint index, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3FVARBPROC) (GLuint index, const GLfloat* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3SVARBPROC) (GLuint index, const GLshort* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4NBVARBPROC) (GLuint index, const GLbyte* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4NIVARBPROC) (GLuint index, const GLint* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4NSVARBPROC) (GLuint index, const GLshort* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4NUBARBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4NUBVARBPROC) (GLuint index, const GLubyte* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4NUIVARBPROC) (GLuint index, const GLuint* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4NUSVARBPROC) (GLuint index, const GLushort* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4BVARBPROC) (GLuint index, const GLbyte* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4DVARBPROC) (GLuint index, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4FVARBPROC) (GLuint index, const GLfloat* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4IVARBPROC) (GLuint index, const GLint* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4SVARBPROC) (GLuint index, const GLshort* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4UBVARBPROC) (GLuint index, const GLubyte* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4UIVARBPROC) (GLuint index, const GLuint* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4USVARBPROC) (GLuint index, const GLushort* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBPOINTERARBPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
# 7871 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBINDATTRIBLOCATIONARBPROC) (GLhandleARB programObj, GLuint index, const GLcharARB* name);
typedef void (__attribute__((__stdcall__)) * PFNGLGETACTIVEATTRIBARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint *size, GLenum *type, GLcharARB *name);
typedef GLint (__attribute__((__stdcall__)) * PFNGLGETATTRIBLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB* name);
# 7902 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORP3UIPROC) (GLenum type, GLuint color);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORP3UIVPROC) (GLenum type, const GLuint* color);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORP4UIPROC) (GLenum type, GLuint color);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORP4UIVPROC) (GLenum type, const GLuint* color);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORDP1UIPROC) (GLenum texture, GLenum type, GLuint coords);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORDP1UIVPROC) (GLenum texture, GLenum type, const GLuint* coords);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORDP2UIPROC) (GLenum texture, GLenum type, GLuint coords);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORDP2UIVPROC) (GLenum texture, GLenum type, const GLuint* coords);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORDP3UIPROC) (GLenum texture, GLenum type, GLuint coords);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORDP3UIVPROC) (GLenum texture, GLenum type, const GLuint* coords);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORDP4UIPROC) (GLenum texture, GLenum type, GLuint coords);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORDP4UIVPROC) (GLenum texture, GLenum type, const GLuint* coords);
typedef void (__attribute__((__stdcall__)) * PFNGLNORMALP3UIPROC) (GLenum type, GLuint coords);
typedef void (__attribute__((__stdcall__)) * PFNGLNORMALP3UIVPROC) (GLenum type, const GLuint* coords);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLORP3UIPROC) (GLenum type, GLuint color);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLORP3UIVPROC) (GLenum type, const GLuint* color);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORDP1UIPROC) (GLenum type, GLuint coords);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORDP1UIVPROC) (GLenum type, const GLuint* coords);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORDP2UIPROC) (GLenum type, GLuint coords);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORDP2UIVPROC) (GLenum type, const GLuint* coords);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORDP3UIPROC) (GLenum type, GLuint coords);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORDP3UIVPROC) (GLenum type, const GLuint* coords);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORDP4UIPROC) (GLenum type, GLuint coords);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORDP4UIVPROC) (GLenum type, const GLuint* coords);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBP1UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBP1UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBP2UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBP2UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBP3UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBP3UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBP4UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBP4UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXP2UIPROC) (GLenum type, GLuint value);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXP2UIVPROC) (GLenum type, const GLuint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXP3UIPROC) (GLenum type, GLuint value);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXP3UIVPROC) (GLenum type, const GLuint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXP4UIPROC) (GLenum type, GLuint value);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXP4UIVPROC) (GLenum type, const GLuint* value);
# 8003 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDEPTHRANGEARRAYVPROC) (GLuint first, GLsizei count, const GLclampd * v);
typedef void (__attribute__((__stdcall__)) * PFNGLDEPTHRANGEINDEXEDPROC) (GLuint index, GLclampd n, GLclampd f);
typedef void (__attribute__((__stdcall__)) * PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble* data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat* data);
typedef void (__attribute__((__stdcall__)) * PFNGLSCISSORARRAYVPROC) (GLuint first, GLsizei count, const GLint * v);
typedef void (__attribute__((__stdcall__)) * PFNGLSCISSORINDEXEDPROC) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
typedef void (__attribute__((__stdcall__)) * PFNGLSCISSORINDEXEDVPROC) (GLuint index, const GLint * v);
typedef void (__attribute__((__stdcall__)) * PFNGLVIEWPORTARRAYVPROC) (GLuint first, GLsizei count, const GLfloat * v);
typedef void (__attribute__((__stdcall__)) * PFNGLVIEWPORTINDEXEDFPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
typedef void (__attribute__((__stdcall__)) * PFNGLVIEWPORTINDEXEDFVPROC) (GLuint index, const GLfloat * v);
# 8034 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2DARBPROC) (GLdouble x, GLdouble y);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2DVARBPROC) (const GLdouble* p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2FARBPROC) (GLfloat x, GLfloat y);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2FVARBPROC) (const GLfloat* p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2IARBPROC) (GLint x, GLint y);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2IVARBPROC) (const GLint* p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2SARBPROC) (GLshort x, GLshort y);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2SVARBPROC) (const GLshort* p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3DARBPROC) (GLdouble x, GLdouble y, GLdouble z);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3DVARBPROC) (const GLdouble* p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3FARBPROC) (GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3FVARBPROC) (const GLfloat* p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3IARBPROC) (GLint x, GLint y, GLint z);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3IVARBPROC) (const GLint* p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3SARBPROC) (GLshort x, GLshort y, GLshort z);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3SVARBPROC) (const GLshort* p);
# 8148 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWBUFFERSATIPROC) (GLsizei n, const GLenum* bufs);
# 8165 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWELEMENTARRAYATIPROC) (GLenum mode, GLsizei count);
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWRANGEELEMENTARRAYATIPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count);
typedef void (__attribute__((__stdcall__)) * PFNGLELEMENTPOINTERATIPROC) (GLenum type, const void *pointer);
# 8191 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXBUMPPARAMETERFVATIPROC) (GLenum pname, GLfloat *param);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXBUMPPARAMETERIVATIPROC) (GLenum pname, GLint *param);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXBUMPPARAMETERFVATIPROC) (GLenum pname, GLfloat *param);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXBUMPPARAMETERIVATIPROC) (GLenum pname, GLint *param);
# 8265 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLALPHAFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
typedef void (__attribute__((__stdcall__)) * PFNGLALPHAFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
typedef void (__attribute__((__stdcall__)) * PFNGLALPHAFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
typedef void (__attribute__((__stdcall__)) * PFNGLBEGINFRAGMENTSHADERATIPROC) (void);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDFRAGMENTSHADERATIPROC) (GLuint id);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEFRAGMENTSHADERATIPROC) (GLuint id);
typedef void (__attribute__((__stdcall__)) * PFNGLENDFRAGMENTSHADERATIPROC) (void);
typedef GLuint (__attribute__((__stdcall__)) * PFNGLGENFRAGMENTSHADERSATIPROC) (GLuint range);
typedef void (__attribute__((__stdcall__)) * PFNGLPASSTEXCOORDATIPROC) (GLuint dst, GLuint coord, GLenum swizzle);
typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLEMAPATIPROC) (GLuint dst, GLuint interp, GLenum swizzle);
typedef void (__attribute__((__stdcall__)) * PFNGLSETFRAGMENTSHADERCONSTANTATIPROC) (GLuint dst, const GLfloat* value);
# 8304 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void * (__attribute__((__stdcall__)) * PFNGLMAPOBJECTBUFFERATIPROC) (GLuint buffer);
typedef void (__attribute__((__stdcall__)) * PFNGLUNMAPOBJECTBUFFERATIPROC) (GLuint buffer);
# 8342 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLPNTRIANGLESFATIPROC) (GLenum pname, GLfloat param);
typedef void (__attribute__((__stdcall__)) * PFNGLPNTRIANGLESIATIPROC) (GLenum pname, GLint param);
# 8362 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLSTENCILFUNCSEPARATEATIPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
typedef void (__attribute__((__stdcall__)) * PFNGLSTENCILOPSEPARATEATIPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
# 8464 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLARRAYOBJECTATIPROC) (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
typedef void (__attribute__((__stdcall__)) * PFNGLFREEOBJECTBUFFERATIPROC) (GLuint buffer);
typedef void (__attribute__((__stdcall__)) * PFNGLGETARRAYOBJECTFVATIPROC) (GLenum array, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETARRAYOBJECTIVATIPROC) (GLenum array, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETOBJECTBUFFERFVATIPROC) (GLuint buffer, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETOBJECTBUFFERIVATIPROC) (GLuint buffer, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVARIANTARRAYOBJECTFVATIPROC) (GLuint id, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVARIANTARRAYOBJECTIVATIPROC) (GLuint id, GLenum pname, GLint* params);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISOBJECTBUFFERATIPROC) (GLuint buffer);
typedef GLuint (__attribute__((__stdcall__)) * PFNGLNEWOBJECTBUFFERATIPROC) (GLsizei size, const void *pointer, GLenum usage);
typedef void (__attribute__((__stdcall__)) * PFNGLUPDATEOBJECTBUFFERATIPROC) (GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve);
typedef void (__attribute__((__stdcall__)) * PFNGLVARIANTARRAYOBJECTATIPROC) (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
# 8499 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC) (GLuint index, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC) (GLuint index, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBARRAYOBJECTATIPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
# 8527 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC) (GLenum stream);
typedef void (__attribute__((__stdcall__)) * PFNGLNORMALSTREAM3BATIPROC) (GLenum stream, GLbyte x, GLbyte y, GLbyte z);
typedef void (__attribute__((__stdcall__)) * PFNGLNORMALSTREAM3BVATIPROC) (GLenum stream, const GLbyte *coords);
typedef void (__attribute__((__stdcall__)) * PFNGLNORMALSTREAM3DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z);
typedef void (__attribute__((__stdcall__)) * PFNGLNORMALSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);
typedef void (__attribute__((__stdcall__)) * PFNGLNORMALSTREAM3FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLNORMALSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);
typedef void (__attribute__((__stdcall__)) * PFNGLNORMALSTREAM3IATIPROC) (GLenum stream, GLint x, GLint y, GLint z);
typedef void (__attribute__((__stdcall__)) * PFNGLNORMALSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);
typedef void (__attribute__((__stdcall__)) * PFNGLNORMALSTREAM3SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z);
typedef void (__attribute__((__stdcall__)) * PFNGLNORMALSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXBLENDENVFATIPROC) (GLenum pname, GLfloat param);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXBLENDENVIATIPROC) (GLenum pname, GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM1DATIPROC) (GLenum stream, GLdouble x);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM1DVATIPROC) (GLenum stream, const GLdouble *coords);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM1FATIPROC) (GLenum stream, GLfloat x);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM1FVATIPROC) (GLenum stream, const GLfloat *coords);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM1IATIPROC) (GLenum stream, GLint x);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM1IVATIPROC) (GLenum stream, const GLint *coords);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM1SATIPROC) (GLenum stream, GLshort x);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM1SVATIPROC) (GLenum stream, const GLshort *coords);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM2DATIPROC) (GLenum stream, GLdouble x, GLdouble y);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM2DVATIPROC) (GLenum stream, const GLdouble *coords);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM2FATIPROC) (GLenum stream, GLfloat x, GLfloat y);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM2FVATIPROC) (GLenum stream, const GLfloat *coords);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM2IATIPROC) (GLenum stream, GLint x, GLint y);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM2IVATIPROC) (GLenum stream, const GLint *coords);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM2SATIPROC) (GLenum stream, GLshort x, GLshort y);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM2SVATIPROC) (GLenum stream, const GLshort *coords);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM3DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM3FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM3IATIPROC) (GLenum stream, GLint x, GLint y, GLint z);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM3SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM4DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM4DVATIPROC) (GLenum stream, const GLdouble *coords);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM4FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM4FVATIPROC) (GLenum stream, const GLfloat *coords);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM4IATIPROC) (GLenum stream, GLint x, GLint y, GLint z, GLint w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM4IVATIPROC) (GLenum stream, const GLint *coords);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM4SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXSTREAM4SVATIPROC) (GLenum stream, const GLshort *coords);
# 8684 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef GLint (__attribute__((__stdcall__)) * PFNGLGETUNIFORMBUFFERSIZEEXTPROC) (GLuint program, GLint location);
typedef GLintptr (__attribute__((__stdcall__)) * PFNGLGETUNIFORMOFFSETEXTPROC) (GLuint program, GLint location);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMBUFFEREXTPROC) (GLuint program, GLint location, GLuint buffer);
# 8707 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDCOLOREXTPROC) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
# 8723 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDEQUATIONSEPARATEEXTPROC) (GLenum modeRGB, GLenum modeAlpha);
# 8741 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDFUNCSEPARATEEXTPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
# 8768 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDEQUATIONEXTPROC) (GLenum mode);
# 8818 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
# 8836 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLLOCKARRAYSEXTPROC) (GLint first, GLsizei count);
typedef void (__attribute__((__stdcall__)) * PFNGLUNLOCKARRAYSEXTPROC) (void);
# 8872 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image);
typedef void (__attribute__((__stdcall__)) * PFNGLCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image);
typedef void (__attribute__((__stdcall__)) * PFNGLCONVOLUTIONPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat param);
typedef void (__attribute__((__stdcall__)) * PFNGLCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLCONVOLUTIONPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCONVOLUTIONFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, void *image);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETSEPARABLEFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span);
typedef void (__attribute__((__stdcall__)) * PFNGLSEPARABLEFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column);
# 8924 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBINORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, void *pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLTANGENTPOINTEREXTPROC) (GLenum type, GLsizei stride, void *pointer);
# 8939 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYTEXIMAGE1DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYTEXIMAGE2DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
# 8964 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCULLPARAMETERDVEXTPROC) (GLenum pname, GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLCULLPARAMETERFVEXTPROC) (GLenum pname, GLfloat* params);
# 8986 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETOBJECTLABELEXTPROC) (GLenum type, GLuint object, GLsizei bufSize, GLsizei* length, GLchar *label);
typedef void (__attribute__((__stdcall__)) * PFNGLLABELOBJECTEXTPROC) (GLenum type, GLuint object, GLsizei length, const GLchar* label);
# 9001 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLINSERTEVENTMARKEREXTPROC) (GLsizei length, const GLchar* marker);
typedef void (__attribute__((__stdcall__)) * PFNGLPOPGROUPMARKEREXTPROC) (void);
typedef void (__attribute__((__stdcall__)) * PFNGLPUSHGROUPMARKEREXTPROC) (GLsizei length, const GLchar* marker);
# 9021 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDEPTHBOUNDSEXTPROC) (GLclampd zmin, GLclampd zmax);
# 9038 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBINDMULTITEXTUREEXTPROC) (GLenum texunit, GLenum target, GLuint texture);
typedef GLenum (__attribute__((__stdcall__)) * PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC) (GLuint framebuffer, GLenum target);
typedef void (__attribute__((__stdcall__)) * PFNGLCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (__attribute__((__stdcall__)) * PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index);
typedef void (__attribute__((__stdcall__)) * PFNGLDISABLECLIENTSTATEIEXTPROC) (GLenum array, GLuint index);
typedef void (__attribute__((__stdcall__)) * PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC) (GLuint vaobj, GLuint index);
typedef void (__attribute__((__stdcall__)) * PFNGLDISABLEVERTEXARRAYEXTPROC) (GLuint vaobj, GLenum array);
typedef void (__attribute__((__stdcall__)) * PFNGLENABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index);
typedef void (__attribute__((__stdcall__)) * PFNGLENABLECLIENTSTATEIEXTPROC) (GLenum array, GLuint index);
typedef void (__attribute__((__stdcall__)) * PFNGLENABLEVERTEXARRAYATTRIBEXTPROC) (GLuint vaobj, GLuint index);
typedef void (__attribute__((__stdcall__)) * PFNGLENABLEVERTEXARRAYEXTPROC) (GLuint vaobj, GLenum array);
typedef void (__attribute__((__stdcall__)) * PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC) (GLuint framebuffer, GLenum mode);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC) (GLuint framebuffer, GLsizei n, const GLenum* bufs);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERREADBUFFEREXTPROC) (GLuint framebuffer, GLenum mode);
typedef void (__attribute__((__stdcall__)) * PFNGLGENERATEMULTITEXMIPMAPEXTPROC) (GLenum texunit, GLenum target);
typedef void (__attribute__((__stdcall__)) * PFNGLGENERATETEXTUREMIPMAPEXTPROC) (GLuint texture, GLenum target);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint level, void *img);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint level, void *img);
typedef void (__attribute__((__stdcall__)) * PFNGLGETDOUBLEINDEXEDVEXTPROC) (GLenum target, GLuint index, GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETDOUBLEI_VEXTPROC) (GLenum pname, GLuint index, GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETFLOATINDEXEDVEXTPROC) (GLenum target, GLuint index, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETFLOATI_VEXTPROC) (GLenum pname, GLuint index, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint* param);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLuint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC) (GLuint buffer, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNAMEDBUFFERPOINTERVEXTPROC) (GLuint buffer, GLenum pname, void** params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum pname, void *string);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNAMEDPROGRAMIVEXTPROC) (GLuint program, GLenum target, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC) (GLuint renderbuffer, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPOINTERINDEXEDVEXTPROC) (GLenum target, GLuint index, void** params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPOINTERI_VEXTPROC) (GLenum pname, GLuint index, void** params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLuint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint* param);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXARRAYINTEGERVEXTPROC) (GLuint vaobj, GLenum pname, GLint* param);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenum pname, void** param);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXARRAYPOINTERVEXTPROC) (GLuint vaobj, GLenum pname, void** param);
typedef void * (__attribute__((__stdcall__)) * PFNGLMAPNAMEDBUFFEREXTPROC) (GLuint buffer, GLenum access);
typedef void * (__attribute__((__stdcall__)) * PFNGLMAPNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXFRUSTUMEXTPROC) (GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXLOADIDENTITYEXTPROC) (GLenum matrixMode);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXLOADTRANSPOSEDEXTPROC) (GLenum matrixMode, const GLdouble* m);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXLOADTRANSPOSEFEXTPROC) (GLenum matrixMode, const GLfloat* m);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXLOADDEXTPROC) (GLenum matrixMode, const GLdouble* m);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXLOADFEXTPROC) (GLenum matrixMode, const GLfloat* m);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXMULTTRANSPOSEDEXTPROC) (GLenum matrixMode, const GLdouble* m);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXMULTTRANSPOSEFEXTPROC) (GLenum matrixMode, const GLfloat* m);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXMULTDEXTPROC) (GLenum matrixMode, const GLdouble* m);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXMULTFEXTPROC) (GLenum matrixMode, const GLfloat* m);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXORTHOEXTPROC) (GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXPOPEXTPROC) (GLenum matrixMode);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXPUSHEXTPROC) (GLenum matrixMode);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXROTATEDEXTPROC) (GLenum matrixMode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXROTATEFEXTPROC) (GLenum matrixMode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXSCALEDEXTPROC) (GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXSCALEFEXTPROC) (GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXTRANSLATEDEXTPROC) (GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXTRANSLATEFEXTPROC) (GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXBUFFEREXTPROC) (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORDPOINTEREXTPROC) (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXENVFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXENVIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXGENDEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXGENFEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXGENIEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLuint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXPARAMETERFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat* param);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXPARAMETERIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint* param);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXRENDERBUFFEREXTPROC) (GLenum texunit, GLenum target, GLuint renderbuffer);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC) (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLuint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum format, GLsizei len, const void *string);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC) (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1FEXTPROC) (GLuint program, GLint location, GLfloat v0);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1IEXTPROC) (GLuint program, GLint location, GLint v0);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1UIEXTPROC) (GLuint program, GLint location, GLuint v0);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREBUFFEREXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLuint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREPARAMETERFEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat param);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLfloat* param);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREPARAMETERIEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint* param);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTURERENDERBUFFEREXTPROC) (GLuint texture, GLenum target, GLuint renderbuffer);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLUNMAPNAMEDBUFFEREXTPROC) (GLuint buffer);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYCOLOROFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYINDEXOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYNORMALOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC) (GLuint vaobj, GLuint index, GLuint divisor);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
# 9477 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORMASKINDEXEDEXTPROC) (GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void (__attribute__((__stdcall__)) * PFNGLDISABLEINDEXEDEXTPROC) (GLenum target, GLuint index);
typedef void (__attribute__((__stdcall__)) * PFNGLENABLEINDEXEDEXTPROC) (GLenum target, GLuint index);
typedef void (__attribute__((__stdcall__)) * PFNGLGETBOOLEANINDEXEDVEXTPROC) (GLenum value, GLuint index, GLboolean* data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETINTEGERINDEXEDVEXTPROC) (GLenum value, GLuint index, GLint* data);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISENABLEDINDEXEDEXTPROC) (GLenum target, GLuint index);
# 9500 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWARRAYSINSTANCEDEXTPROC) (GLenum mode, GLint start, GLsizei count, GLsizei primcount);
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWELEMENTSINSTANCEDEXTPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
# 9518 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWRANGEELEMENTSEXTPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
# 9540 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLFOGCOORDPOINTEREXTPROC) (GLenum type, GLsizei stride, const void *pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLFOGCOORDDEXTPROC) (GLdouble coord);
typedef void (__attribute__((__stdcall__)) * PFNGLFOGCOORDDVEXTPROC) (const GLdouble *coord);
typedef void (__attribute__((__stdcall__)) * PFNGLFOGCOORDFEXTPROC) (GLfloat coord);
typedef void (__attribute__((__stdcall__)) * PFNGLFOGCOORDFVEXTPROC) (const GLfloat *coord);
# 9576 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTCOLORMATERIALEXTPROC) (GLenum face, GLenum mode);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTLIGHTMODELFEXTPROC) (GLenum pname, GLfloat param);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTLIGHTMODELFVEXTPROC) (GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTLIGHTMODELIEXTPROC) (GLenum pname, GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTLIGHTMODELIVEXTPROC) (GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTLIGHTFEXTPROC) (GLenum light, GLenum pname, GLfloat param);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTLIGHTFVEXTPROC) (GLenum light, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTLIGHTIEXTPROC) (GLenum light, GLenum pname, GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTLIGHTIVEXTPROC) (GLenum light, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTMATERIALFEXTPROC) (GLenum face, GLenum pname, const GLfloat param);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTMATERIALFVEXTPROC) (GLenum face, GLenum pname, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTMATERIALIEXTPROC) (GLenum face, GLenum pname, const GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTMATERIALIVEXTPROC) (GLenum face, GLenum pname, const GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETFRAGMENTLIGHTFVEXTPROC) (GLenum light, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETFRAGMENTLIGHTIVEXTPROC) (GLenum light, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETFRAGMENTMATERIALFVEXTPROC) (GLenum face, GLenum pname, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETFRAGMENTMATERIALIVEXTPROC) (GLenum face, GLenum pname, const GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLLIGHTENVIEXTPROC) (GLenum pname, GLint param);
# 9628 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBLITFRAMEBUFFEREXTPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
# 9645 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
# 9722 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBINDFRAMEBUFFEREXTPROC) (GLenum target, GLuint framebuffer);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDRENDERBUFFEREXTPROC) (GLenum target, GLuint renderbuffer);
typedef GLenum (__attribute__((__stdcall__)) * PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) (GLenum target);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEFRAMEBUFFERSEXTPROC) (GLsizei n, const GLuint* framebuffers);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETERENDERBUFFERSEXTPROC) (GLsizei n, const GLuint* renderbuffers);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERTEXTURE1DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERTEXTURE2DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERTEXTURE3DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (__attribute__((__stdcall__)) * PFNGLGENFRAMEBUFFERSEXTPROC) (GLsizei n, GLuint* framebuffers);
typedef void (__attribute__((__stdcall__)) * PFNGLGENRENDERBUFFERSEXTPROC) (GLsizei n, GLuint* renderbuffers);
typedef void (__attribute__((__stdcall__)) * PFNGLGENERATEMIPMAPEXTPROC) (GLenum target);
typedef void (__attribute__((__stdcall__)) * PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLenum target, GLenum attachment, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISFRAMEBUFFEREXTPROC) (GLuint framebuffer);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISRENDERBUFFEREXTPROC) (GLuint renderbuffer);
typedef void (__attribute__((__stdcall__)) * PFNGLRENDERBUFFERSTORAGEEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
# 9800 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERTEXTUREEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMPARAMETERIEXTPROC) (GLuint program, GLenum pname, GLint value);
# 9817 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMENVPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat* params);
# 9859 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBINDFRAGDATALOCATIONEXTPROC) (GLuint program, GLuint color, const GLchar *name);
typedef GLint (__attribute__((__stdcall__)) * PFNGLGETFRAGDATALOCATIONEXTPROC) (GLuint program, const GLchar *name);
typedef void (__attribute__((__stdcall__)) * PFNGLGETUNIFORMUIVEXTPROC) (GLuint program, GLint location, GLuint *params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBIIVEXTPROC) (GLuint index, GLenum pname, GLint *params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBIUIVEXTPROC) (GLuint index, GLenum pname, GLuint *params);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1UIEXTPROC) (GLint location, GLuint v0);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2UIEXTPROC) (GLint location, GLuint v0, GLuint v1);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI1IEXTPROC) (GLuint index, GLint x);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI1IVEXTPROC) (GLuint index, const GLint *v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI1UIEXTPROC) (GLuint index, GLuint x);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI1UIVEXTPROC) (GLuint index, const GLuint *v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI2IEXTPROC) (GLuint index, GLint x, GLint y);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI2IVEXTPROC) (GLuint index, const GLint *v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI2UIEXTPROC) (GLuint index, GLuint x, GLuint y);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI2UIVEXTPROC) (GLuint index, const GLuint *v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI3IEXTPROC) (GLuint index, GLint x, GLint y, GLint z);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI3IVEXTPROC) (GLuint index, const GLint *v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI3UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI3UIVEXTPROC) (GLuint index, const GLuint *v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4BVEXTPROC) (GLuint index, const GLbyte *v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4IEXTPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4IVEXTPROC) (GLuint index, const GLint *v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4SVEXTPROC) (GLuint index, const GLshort *v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4UBVEXTPROC) (GLuint index, const GLubyte *v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4UIVEXTPROC) (GLuint index, const GLuint *v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4USVEXTPROC) (GLuint index, const GLushort *v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBIPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
# 9952 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETHISTOGRAMEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
typedef void (__attribute__((__stdcall__)) * PFNGLGETHISTOGRAMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETHISTOGRAMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMINMAXEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMINMAXPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMINMAXPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLHISTOGRAMEXTPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
typedef void (__attribute__((__stdcall__)) * PFNGLMINMAXEXTPROC) (GLenum target, GLenum internalformat, GLboolean sink);
typedef void (__attribute__((__stdcall__)) * PFNGLRESETHISTOGRAMEXTPROC) (GLenum target);
typedef void (__attribute__((__stdcall__)) * PFNGLRESETMINMAXEXTPROC) (GLenum target);
# 9992 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLINDEXFUNCEXTPROC) (GLenum func, GLfloat ref);
# 10005 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLINDEXMATERIALEXTPROC) (GLenum face, GLenum mode);
# 10037 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLAPPLYTEXTUREEXTPROC) (GLenum mode);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTURELIGHTEXTPROC) (GLenum pname);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREMATERIALEXTPROC) (GLenum face, GLenum mode);
# 10063 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLMULTIDRAWARRAYSEXTPROC) (GLenum mode, const GLint* first, const GLsizei *count, GLsizei primcount);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTIDRAWELEMENTSEXTPROC) (GLenum mode, GLsizei* count, GLenum type, const void *const *indices, GLsizei primcount);
# 10096 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLEMASKEXTPROC) (GLclampf value, GLboolean invert);
typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLEPATTERNEXTPROC) (GLenum pattern);
# 10175 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORTABLEEXTPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCOLORTABLEEXTPROC) (GLenum target, GLenum format, GLenum type, void *data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCOLORTABLEPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCOLORTABLEPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params);
# 10218 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLPIXELTRANSFORMPARAMETERFEXTPROC) (GLenum target, GLenum pname, const GLfloat param);
typedef void (__attribute__((__stdcall__)) * PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLPIXELTRANSFORMPARAMETERIEXTPROC) (GLenum target, GLenum pname, const GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint* params);
# 10255 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLPOINTPARAMETERFEXTPROC) (GLenum pname, GLfloat param);
typedef void (__attribute__((__stdcall__)) * PFNGLPOINTPARAMETERFVEXTPROC) (GLenum pname, const GLfloat* params);
# 10274 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLPOLYGONOFFSETEXTPROC) (GLfloat factor, GLfloat bias);
# 10289 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLPOLYGONOFFSETCLAMPEXTPROC) (GLfloat factor, GLfloat units, GLfloat clamp);
# 10316 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLPROVOKINGVERTEXEXTPROC) (GLenum mode);
# 10344 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCOVERAGEMODULATIONNVPROC) (GLenum components);
typedef void (__attribute__((__stdcall__)) * PFNGLCOVERAGEMODULATIONTABLENVPROC) (GLsizei n, const GLfloat* v);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCOVERAGEMODULATIONTABLENVPROC) (GLsizei bufsize, GLfloat* v);
typedef void (__attribute__((__stdcall__)) * PFNGLRASTERSAMPLESEXTPROC) (GLuint samples, GLboolean fixedsamplelocations);
# 10374 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBEGINSCENEEXTPROC) (void);
typedef void (__attribute__((__stdcall__)) * PFNGLENDSCENEEXTPROC) (void);
# 10397 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3BEXTPROC) (GLbyte red, GLbyte green, GLbyte blue);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3BVEXTPROC) (const GLbyte *v);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3DEXTPROC) (GLdouble red, GLdouble green, GLdouble blue);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3DVEXTPROC) (const GLdouble *v);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3FEXTPROC) (GLfloat red, GLfloat green, GLfloat blue);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3FVEXTPROC) (const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3IEXTPROC) (GLint red, GLint green, GLint blue);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3IVEXTPROC) (const GLint *v);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3SEXTPROC) (GLshort red, GLshort green, GLshort blue);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3SVEXTPROC) (const GLshort *v);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3UBEXTPROC) (GLubyte red, GLubyte green, GLubyte blue);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3UBVEXTPROC) (const GLubyte *v);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3UIEXTPROC) (GLuint red, GLuint green, GLuint blue);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3UIVEXTPROC) (const GLuint *v);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3USEXTPROC) (GLushort red, GLushort green, GLushort blue);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3USVEXTPROC) (const GLushort *v);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);
# 10444 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLACTIVEPROGRAMEXTPROC) (GLuint program);
typedef GLuint (__attribute__((__stdcall__)) * PFNGLCREATESHADERPROGRAMEXTPROC) (GLenum type, const GLchar* string);
typedef void (__attribute__((__stdcall__)) * PFNGLUSESHADERPROGRAMEXTPROC) (GLenum type, GLuint program);
# 10539 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBINDIMAGETEXTUREEXTPROC) (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
typedef void (__attribute__((__stdcall__)) * PFNGLMEMORYBARRIEREXTPROC) (GLbitfield barriers);
# 10607 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLACTIVESTENCILFACEEXTPROC) (GLenum face);
# 10632 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
# 10711 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLTEXIMAGE3DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
# 10733 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
# 10752 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLTEXBUFFEREXTPROC) (GLenum target, GLenum internalformat, GLuint buffer);
# 10982 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCLEARCOLORIIEXTPROC) (GLint red, GLint green, GLint blue, GLint alpha);
typedef void (__attribute__((__stdcall__)) * PFNGLCLEARCOLORIUIEXTPROC) (GLuint red, GLuint green, GLuint blue, GLuint alpha);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, GLuint *params);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, const GLuint *params);
# 11037 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLARETEXTURESRESIDENTEXTPROC) (GLsizei n, const GLuint* textures, GLboolean* residences);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDTEXTUREEXTPROC) (GLenum target, GLuint texture);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETETEXTURESEXTPROC) (GLsizei n, const GLuint* textures);
typedef void (__attribute__((__stdcall__)) * PFNGLGENTEXTURESEXTPROC) (GLsizei n, GLuint* textures);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISTEXTUREEXTPROC) (GLuint texture);
typedef void (__attribute__((__stdcall__)) * PFNGLPRIORITIZETEXTURESEXTPROC) (GLsizei n, const GLuint* textures, const GLclampf* priorities);
# 11063 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTURENORMALEXTPROC) (GLenum mode);
# 11194 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYOBJECTI64VEXTPROC) (GLuint id, GLenum pname, GLint64EXT *params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYOBJECTUI64VEXTPROC) (GLuint id, GLenum pname, GLuint64EXT *params);
# 11225 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBEGINTRANSFORMFEEDBACKEXTPROC) (GLenum primitiveMode);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDBUFFERBASEEXTPROC) (GLenum target, GLuint index, GLuint buffer);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDBUFFEROFFSETEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDBUFFERRANGEEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (__attribute__((__stdcall__)) * PFNGLENDTRANSFORMFEEDBACKEXTPROC) (void);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei *size, GLenum *type, GLchar *name);
typedef void (__attribute__((__stdcall__)) * PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC) (GLuint program, GLsizei count, const GLchar * const* varyings, GLenum bufferMode);
# 11284 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLARRAYELEMENTEXTPROC) (GLint i);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWARRAYSEXTPROC) (GLenum mode, GLint first, GLsizei count);
typedef void (__attribute__((__stdcall__)) * PFNGLEDGEFLAGPOINTEREXTPROC) (GLsizei stride, GLsizei count, const GLboolean* pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLINDEXPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const void *pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLNORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const void *pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORDPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
# 11335 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBLDVEXTPROC) (GLuint index, GLenum pname, GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL1DEXTPROC) (GLuint index, GLdouble x);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL1DVEXTPROC) (GLuint index, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL2DEXTPROC) (GLuint index, GLdouble x, GLdouble y);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL2DVEXTPROC) (GLuint index, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL3DEXTPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL3DVEXTPROC) (GLuint index, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL4DEXTPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL4DVEXTPROC) (GLuint index, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBLPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
# 11479 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBEGINVERTEXSHADEREXTPROC) (void);
typedef GLuint (__attribute__((__stdcall__)) * PFNGLBINDLIGHTPARAMETEREXTPROC) (GLenum light, GLenum value);
typedef GLuint (__attribute__((__stdcall__)) * PFNGLBINDMATERIALPARAMETEREXTPROC) (GLenum face, GLenum value);
typedef GLuint (__attribute__((__stdcall__)) * PFNGLBINDPARAMETEREXTPROC) (GLenum value);
typedef GLuint (__attribute__((__stdcall__)) * PFNGLBINDTEXGENPARAMETEREXTPROC) (GLenum unit, GLenum coord, GLenum value);
typedef GLuint (__attribute__((__stdcall__)) * PFNGLBINDTEXTUREUNITPARAMETEREXTPROC) (GLenum unit, GLenum value);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDVERTEXSHADEREXTPROC) (GLuint id);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEVERTEXSHADEREXTPROC) (GLuint id);
typedef void (__attribute__((__stdcall__)) * PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
typedef void (__attribute__((__stdcall__)) * PFNGLENABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
typedef void (__attribute__((__stdcall__)) * PFNGLENDVERTEXSHADEREXTPROC) (void);
typedef void (__attribute__((__stdcall__)) * PFNGLEXTRACTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
typedef GLuint (__attribute__((__stdcall__)) * PFNGLGENSYMBOLSEXTPROC) (GLenum dataType, GLenum storageType, GLenum range, GLuint components);
typedef GLuint (__attribute__((__stdcall__)) * PFNGLGENVERTEXSHADERSEXTPROC) (GLuint range);
typedef void (__attribute__((__stdcall__)) * PFNGLGETINVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETINVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETINVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETLOCALCONSTANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETLOCALCONSTANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVARIANTPOINTERVEXTPROC) (GLuint id, GLenum value, void **data);
typedef void (__attribute__((__stdcall__)) * PFNGLINSERTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISVARIANTENABLEDEXTPROC) (GLuint id, GLenum cap);
typedef void (__attribute__((__stdcall__)) * PFNGLSETINVARIANTEXTPROC) (GLuint id, GLenum type, void *addr);
typedef void (__attribute__((__stdcall__)) * PFNGLSETLOCALCONSTANTEXTPROC) (GLuint id, GLenum type, void *addr);
typedef void (__attribute__((__stdcall__)) * PFNGLSHADEROP1EXTPROC) (GLenum op, GLuint res, GLuint arg1);
typedef void (__attribute__((__stdcall__)) * PFNGLSHADEROP2EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2);
typedef void (__attribute__((__stdcall__)) * PFNGLSHADEROP3EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
typedef void (__attribute__((__stdcall__)) * PFNGLSWIZZLEEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
typedef void (__attribute__((__stdcall__)) * PFNGLVARIANTPOINTEREXTPROC) (GLuint id, GLenum type, GLuint stride, void *addr);
typedef void (__attribute__((__stdcall__)) * PFNGLVARIANTBVEXTPROC) (GLuint id, GLbyte *addr);
typedef void (__attribute__((__stdcall__)) * PFNGLVARIANTDVEXTPROC) (GLuint id, GLdouble *addr);
typedef void (__attribute__((__stdcall__)) * PFNGLVARIANTFVEXTPROC) (GLuint id, GLfloat *addr);
typedef void (__attribute__((__stdcall__)) * PFNGLVARIANTIVEXTPROC) (GLuint id, GLint *addr);
typedef void (__attribute__((__stdcall__)) * PFNGLVARIANTSVEXTPROC) (GLuint id, GLshort *addr);
typedef void (__attribute__((__stdcall__)) * PFNGLVARIANTUBVEXTPROC) (GLuint id, GLubyte *addr);
typedef void (__attribute__((__stdcall__)) * PFNGLVARIANTUIVEXTPROC) (GLuint id, GLuint *addr);
typedef void (__attribute__((__stdcall__)) * PFNGLVARIANTUSVEXTPROC) (GLuint id, GLushort *addr);
typedef void (__attribute__((__stdcall__)) * PFNGLWRITEMASKEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
# 11588 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXWEIGHTPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, void *pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXWEIGHTFEXTPROC) (GLfloat weight);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXWEIGHTFVEXTPROC) (GLfloat* weight);
# 11607 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef GLsync (__attribute__((__stdcall__)) * PFNGLIMPORTSYNCEXTPROC) (GLenum external_sync_type, GLintptr external_sync, GLbitfield flags);
# 11620 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMETERMINATORGREMEDYPROC) (void);
# 11633 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLSTRINGMARKERGREMEDYPROC) (GLsizei len, const void *string);
# 11655 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, const GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLIMAGETRANSFORMPARAMETERFHPPROC) (GLenum target, GLenum pname, const GLfloat param);
typedef void (__attribute__((__stdcall__)) * PFNGLIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLIMAGETRANSFORMPARAMETERIHPPROC) (GLenum target, GLenum pname, const GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, const GLint* params);
# 11707 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLMULTIMODEDRAWARRAYSIBMPROC) (const GLenum* mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTIMODEDRAWELEMENTSIBMPROC) (const GLenum* mode, const GLsizei *count, GLenum type, const void *const *indices, GLsizei primcount, GLint modestride);
# 11773 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride);
typedef void (__attribute__((__stdcall__)) * PFNGLEDGEFLAGPOINTERLISTIBMPROC) (GLint stride, const GLboolean ** pointer, GLint ptrstride);
typedef void (__attribute__((__stdcall__)) * PFNGLFOGCOORDPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void** pointer, GLint ptrstride);
typedef void (__attribute__((__stdcall__)) * PFNGLINDEXPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void** pointer, GLint ptrstride);
typedef void (__attribute__((__stdcall__)) * PFNGLNORMALPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void** pointer, GLint ptrstride);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORDPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride);
# 11852 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void * (__attribute__((__stdcall__)) * PFNGLMAPTEXTURE2DINTELPROC) (GLuint texture, GLint level, GLbitfield access, GLint* stride, GLenum *layout);
typedef void (__attribute__((__stdcall__)) * PFNGLSYNCTEXTUREINTELPROC) (GLuint texture);
typedef void (__attribute__((__stdcall__)) * PFNGLUNMAPTEXTURE2DINTELPROC) (GLuint texture, GLint level);
# 11875 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORPOINTERVINTELPROC) (GLint size, GLenum type, const void** pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLNORMALPOINTERVINTELPROC) (GLenum type, const void** pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORDPOINTERVINTELPROC) (GLint size, GLenum type, const void** pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXPOINTERVINTELPROC) (GLint size, GLenum type, const void** pointer);
# 11915 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBEGINPERFQUERYINTELPROC) (GLuint queryHandle);
typedef void (__attribute__((__stdcall__)) * PFNGLCREATEPERFQUERYINTELPROC) (GLuint queryId, GLuint* queryHandle);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEPERFQUERYINTELPROC) (GLuint queryHandle);
typedef void (__attribute__((__stdcall__)) * PFNGLENDPERFQUERYINTELPROC) (GLuint queryHandle);
typedef void (__attribute__((__stdcall__)) * PFNGLGETFIRSTPERFQUERYIDINTELPROC) (GLuint* queryId);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNEXTPERFQUERYIDINTELPROC) (GLuint queryId, GLuint* nextQueryId);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPERFCOUNTERINFOINTELPROC) (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar* counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPERFQUERYDATAINTELPROC) (GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPERFQUERYIDBYNAMEINTELPROC) (GLchar* queryName, GLuint *queryId);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPERFQUERYINFOINTELPROC) (GLuint queryId, GLuint queryNameLength, GLchar* queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask);
# 11946 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLTEXSCISSORFUNCINTELPROC) (GLenum target, GLenum lfunc, GLenum hfunc);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXSCISSORINTELPROC) (GLenum target, GLclampf tlow, GLclampf thigh);
# 11978 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDBARRIERKHRPROC) (void);
# 12053 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) *GLDEBUGPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam);

typedef void (__attribute__((__stdcall__)) * PFNGLDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
typedef void (__attribute__((__stdcall__)) * PFNGLDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);
typedef void (__attribute__((__stdcall__)) * PFNGLDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf);
typedef GLuint (__attribute__((__stdcall__)) * PFNGLGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);
typedef void (__attribute__((__stdcall__)) * PFNGLGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar *label);
typedef void (__attribute__((__stdcall__)) * PFNGLGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei* length, GLchar *label);
typedef void (__attribute__((__stdcall__)) * PFNGLOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar* label);
typedef void (__attribute__((__stdcall__)) * PFNGLOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar* label);
typedef void (__attribute__((__stdcall__)) * PFNGLPOPDEBUGGROUPPROC) (void);
typedef void (__attribute__((__stdcall__)) * PFNGLPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar * message);
# 12115 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETNUNIFORMFVPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNUNIFORMIVPROC) (GLuint program, GLint location, GLsizei bufSize, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNUNIFORMUIVPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLREADNPIXELSPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
# 12215 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef GLuint (__attribute__((__stdcall__)) * PFNGLBUFFERREGIONENABLEDPROC) (void);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEBUFFERREGIONPROC) (GLenum region);
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWBUFFERREGIONPROC) (GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest);
typedef GLuint (__attribute__((__stdcall__)) * PFNGLNEWBUFFERREGIONPROC) (GLenum region);
typedef void (__attribute__((__stdcall__)) * PFNGLREADBUFFERREGIONPROC) (GLuint region, GLint x, GLint y, GLsizei width, GLsizei height);
# 12263 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLRESIZEBUFFERSMESAPROC) (void);
# 12276 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2DMESAPROC) (GLdouble x, GLdouble y);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2DVMESAPROC) (const GLdouble* p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2FMESAPROC) (GLfloat x, GLfloat y);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2FVMESAPROC) (const GLfloat* p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2IMESAPROC) (GLint x, GLint y);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2IVMESAPROC) (const GLint* p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2SMESAPROC) (GLshort x, GLshort y);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS2SVMESAPROC) (const GLshort* p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3DMESAPROC) (GLdouble x, GLdouble y, GLdouble z);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3DVMESAPROC) (const GLdouble* p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3FMESAPROC) (GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3FVMESAPROC) (const GLfloat* p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3IMESAPROC) (GLint x, GLint y, GLint z);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3IVMESAPROC) (const GLint* p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3SMESAPROC) (GLshort x, GLshort y, GLshort z);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS3SVMESAPROC) (const GLshort* p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS4DMESAPROC) (GLdouble x, GLdouble y, GLdouble z, GLdouble);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS4DVMESAPROC) (const GLdouble* p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS4FMESAPROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS4FVMESAPROC) (const GLfloat* p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS4IMESAPROC) (GLint x, GLint y, GLint z, GLint w);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS4IVMESAPROC) (const GLint* p);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS4SMESAPROC) (GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (__attribute__((__stdcall__)) * PFNGLWINDOWPOS4SVMESAPROC) (const GLshort* p);
# 12348 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBEGINCONDITIONALRENDERNVXPROC) (GLuint id);
typedef void (__attribute__((__stdcall__)) * PFNGLENDCONDITIONALRENDERNVXPROC) (void);
# 12378 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC) (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
# 12393 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC) (GLenum mode, const void *indirect, GLintptr drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC) (GLenum mode, GLenum type, const void *indirect, GLintptr drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
# 12408 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef GLuint64 (__attribute__((__stdcall__)) * PFNGLGETIMAGEHANDLENVPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
typedef GLuint64 (__attribute__((__stdcall__)) * PFNGLGETTEXTUREHANDLENVPROC) (GLuint texture);
typedef GLuint64 (__attribute__((__stdcall__)) * PFNGLGETTEXTURESAMPLERHANDLENVPROC) (GLuint texture, GLuint sampler);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISIMAGEHANDLERESIDENTNVPROC) (GLuint64 handle);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISTEXTUREHANDLERESIDENTNVPROC) (GLuint64 handle);
typedef void (__attribute__((__stdcall__)) * PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC) (GLuint64 handle);
typedef void (__attribute__((__stdcall__)) * PFNGLMAKEIMAGEHANDLERESIDENTNVPROC) (GLuint64 handle, GLenum access);
typedef void (__attribute__((__stdcall__)) * PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC) (GLuint64 handle);
typedef void (__attribute__((__stdcall__)) * PFNGLMAKETEXTUREHANDLERESIDENTNVPROC) (GLuint64 handle);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC) (GLuint program, GLint location, GLuint64 value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64* values);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMHANDLEUI64NVPROC) (GLint location, GLuint64 value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMHANDLEUI64VNVPROC) (GLint location, GLsizei count, const GLuint64* value);
# 12496 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDBARRIERNVPROC) (void);
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDPARAMETERINVPROC) (GLenum pname, GLint value);
# 12546 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBEGINCONDITIONALRENDERNVPROC) (GLuint id, GLenum mode);
typedef void (__attribute__((__stdcall__)) * PFNGLENDCONDITIONALRENDERNVPROC) (void);
# 12566 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLSUBPIXELPRECISIONBIASNVPROC) (GLuint xbits, GLuint ybits);
# 12583 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCONSERVATIVERASTERPARAMETERFNVPROC) (GLenum pname, GLfloat value);
# 12608 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYIMAGESUBDATANVPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
# 12638 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCLEARDEPTHDNVPROC) (GLdouble depth);
typedef void (__attribute__((__stdcall__)) * PFNGLDEPTHBOUNDSDNVPROC) (GLdouble zmin, GLdouble zmax);
typedef void (__attribute__((__stdcall__)) * PFNGLDEPTHRANGEDNVPROC) (GLdouble zNear, GLdouble zFar);
# 12681 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWTEXTURENVPROC) (GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
# 12719 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLEVALMAPSNVPROC) (GLenum target, GLenum mode);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMAPATTRIBPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMAPATTRIBPARAMETERIVNVPROC) (GLenum target, GLuint index, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points);
typedef void (__attribute__((__stdcall__)) * PFNGLMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, const GLint* params);
# 12759 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETMULTISAMPLEFVNVPROC) (GLenum pname, GLuint index, GLfloat* val);
typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLEMASKINDEXEDNVPROC) (GLuint index, GLbitfield mask);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXRENDERBUFFERNVPROC) (GLenum target, GLuint renderbuffer);
# 12780 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEFENCESNVPROC) (GLsizei n, const GLuint* fences);
typedef void (__attribute__((__stdcall__)) * PFNGLFINISHFENCENVPROC) (GLuint fence);
typedef void (__attribute__((__stdcall__)) * PFNGLGENFENCESNVPROC) (GLsizei n, GLuint* fences);
typedef void (__attribute__((__stdcall__)) * PFNGLGETFENCEIVNVPROC) (GLuint fence, GLenum pname, GLint* params);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISFENCENVPROC) (GLuint fence);
typedef void (__attribute__((__stdcall__)) * PFNGLSETFENCENVPROC) (GLuint fence, GLenum condition);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLTESTFENCENVPROC) (GLuint fence);
# 12857 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTCOVERAGECOLORNVPROC) (GLuint color);
# 12877 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC) (GLuint id, GLsizei len, const GLubyte* name, GLdouble *params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC) (GLuint id, GLsizei len, const GLubyte* name, GLfloat *params);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMNAMEDPARAMETER4DNVPROC) (GLuint id, GLsizei len, const GLubyte* name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC) (GLuint id, GLsizei len, const GLubyte* name, const GLdouble v[]);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMNAMEDPARAMETER4FNVPROC) (GLuint id, GLsizei len, const GLubyte* name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC) (GLuint id, GLsizei len, const GLubyte* name, const GLfloat v[]);
# 12971 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
# 12988 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMVERTEXLIMITNVPROC) (GLenum target, GLint limit);
# 13028 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMENVPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMENVPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMENVPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMENVPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMENVPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMLOCALPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMLOCALPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);
# 13126 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETUNIFORMI64VNVPROC) (GLuint program, GLint location, GLint64EXT* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLuint64EXT* params);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1I64NVPROC) (GLuint program, GLint location, GLint64EXT x);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1I64NVPROC) (GLint location, GLint64EXT x);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1UI64NVPROC) (GLint location, GLuint64EXT x);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT* value);
# 13207 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef unsigned short GLhalf;

typedef void (__attribute__((__stdcall__)) * PFNGLCOLOR3HNVPROC) (GLhalf red, GLhalf green, GLhalf blue);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLOR3HVNVPROC) (const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLOR4HNVPROC) (GLhalf red, GLhalf green, GLhalf blue, GLhalf alpha);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLOR4HVNVPROC) (const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLFOGCOORDHNVPROC) (GLhalf fog);
typedef void (__attribute__((__stdcall__)) * PFNGLFOGCOORDHVNVPROC) (const GLhalf* fog);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD1HNVPROC) (GLenum target, GLhalf s);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD1HVNVPROC) (GLenum target, const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD2HNVPROC) (GLenum target, GLhalf s, GLhalf t);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD2HVNVPROC) (GLenum target, const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD3HNVPROC) (GLenum target, GLhalf s, GLhalf t, GLhalf r);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD3HVNVPROC) (GLenum target, const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD4HNVPROC) (GLenum target, GLhalf s, GLhalf t, GLhalf r, GLhalf q);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD4HVNVPROC) (GLenum target, const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLNORMAL3HNVPROC) (GLhalf nx, GLhalf ny, GLhalf nz);
typedef void (__attribute__((__stdcall__)) * PFNGLNORMAL3HVNVPROC) (const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3HNVPROC) (GLhalf red, GLhalf green, GLhalf blue);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLOR3HVNVPROC) (const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORD1HNVPROC) (GLhalf s);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORD1HVNVPROC) (const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORD2HNVPROC) (GLhalf s, GLhalf t);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORD2HVNVPROC) (const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORD3HNVPROC) (GLhalf s, GLhalf t, GLhalf r);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORD3HVNVPROC) (const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORD4HNVPROC) (GLhalf s, GLhalf t, GLhalf r, GLhalf q);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORD4HVNVPROC) (const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEX2HNVPROC) (GLhalf x, GLhalf y);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEX2HVNVPROC) (const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEX3HNVPROC) (GLhalf x, GLhalf y, GLhalf z);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEX3HVNVPROC) (const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEX4HNVPROC) (GLhalf x, GLhalf y, GLhalf z, GLhalf w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEX4HVNVPROC) (const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1HNVPROC) (GLuint index, GLhalf x);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1HVNVPROC) (GLuint index, const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2HNVPROC) (GLuint index, GLhalf x, GLhalf y);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2HVNVPROC) (GLuint index, const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3HNVPROC) (GLuint index, GLhalf x, GLhalf y, GLhalf z);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3HVNVPROC) (GLuint index, const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4HNVPROC) (GLuint index, GLhalf x, GLhalf y, GLhalf z, GLhalf w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4HVNVPROC) (GLuint index, const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBS1HVNVPROC) (GLuint index, GLsizei n, const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBS2HVNVPROC) (GLuint index, GLsizei n, const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBS3HVNVPROC) (GLuint index, GLsizei n, const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBS4HVNVPROC) (GLuint index, GLsizei n, const GLhalf* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXWEIGHTHNVPROC) (GLhalf weight);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXWEIGHTHVNVPROC) (const GLhalf* weight);
# 13317 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETINTERNALFORMATSAMPLEIVNVPROC) (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint* params);
# 13369 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBEGINOCCLUSIONQUERYNVPROC) (GLuint id);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEOCCLUSIONQUERIESNVPROC) (GLsizei n, const GLuint* ids);
typedef void (__attribute__((__stdcall__)) * PFNGLENDOCCLUSIONQUERYNVPROC) (void);
typedef void (__attribute__((__stdcall__)) * PFNGLGENOCCLUSIONQUERIESNVPROC) (GLsizei n, GLuint* ids);
typedef void (__attribute__((__stdcall__)) * PFNGLGETOCCLUSIONQUERYIVNVPROC) (GLuint id, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETOCCLUSIONQUERYUIVNVPROC) (GLuint id, GLenum pname, GLuint* params);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISOCCLUSIONQUERYNVPROC) (GLuint id);
# 13412 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params);
# 13588 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
typedef void (__attribute__((__stdcall__)) * PFNGLCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void (__attribute__((__stdcall__)) * PFNGLCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
typedef void (__attribute__((__stdcall__)) * PFNGLCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void (__attribute__((__stdcall__)) * PFNGLCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEPATHSNVPROC) (GLuint path, GLsizei range);
typedef GLuint (__attribute__((__stdcall__)) * PFNGLGENPATHSNVPROC) (GLsizei range);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte* commands);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPATHCOORDSNVPROC) (GLuint path, GLfloat* coords);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat* dashArray);
typedef GLfloat (__attribute__((__stdcall__)) * PFNGLGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat* metrics);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMRESOURCEFVNVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei *length, GLfloat *params);
typedef void (__attribute__((__stdcall__)) * PFNGLINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISPATHNVPROC) (GLuint path);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXLOAD3X2FNVPROC) (GLenum matrixMode, const GLfloat* m);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXLOAD3X3FNVPROC) (GLenum matrixMode, const GLfloat* m);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC) (GLenum matrixMode, const GLfloat* m);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXMULT3X2FNVPROC) (GLenum matrixMode, const GLfloat* m);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXMULT3X3FNVPROC) (GLenum matrixMode, const GLfloat* m);
typedef void (__attribute__((__stdcall__)) * PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC) (GLenum matrixMode, const GLfloat* m);
typedef void (__attribute__((__stdcall__)) * PFNGLPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat* coeffs);
typedef void (__attribute__((__stdcall__)) * PFNGLPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const void*coords);
typedef void (__attribute__((__stdcall__)) * PFNGLPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords);
typedef void (__attribute__((__stdcall__)) * PFNGLPATHCOVERDEPTHFUNCNVPROC) (GLenum zfunc);
typedef void (__attribute__((__stdcall__)) * PFNGLPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat* dashArray);
typedef void (__attribute__((__stdcall__)) * PFNGLPATHFOGGENNVPROC) (GLenum genMode);
typedef GLenum (__attribute__((__stdcall__)) * PFNGLPATHGLYPHINDEXARRAYNVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef GLenum (__attribute__((__stdcall__)) * PFNGLPATHGLYPHINDEXRANGENVPROC) (GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]);
typedef void (__attribute__((__stdcall__)) * PFNGLPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef void (__attribute__((__stdcall__)) * PFNGLPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void*charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef GLenum (__attribute__((__stdcall__)) * PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC) (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef void (__attribute__((__stdcall__)) * PFNGLPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
typedef void (__attribute__((__stdcall__)) * PFNGLPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
typedef void (__attribute__((__stdcall__)) * PFNGLPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint* value);
typedef void (__attribute__((__stdcall__)) * PFNGLPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
typedef void (__attribute__((__stdcall__)) * PFNGLPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
typedef void (__attribute__((__stdcall__)) * PFNGLPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const void *pathString);
typedef void (__attribute__((__stdcall__)) * PFNGLPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const void*coords);
typedef void (__attribute__((__stdcall__)) * PFNGLPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords);
typedef void (__attribute__((__stdcall__)) * PFNGLPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat* coeffs);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat* x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC) (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat* coeffs);
typedef void (__attribute__((__stdcall__)) * PFNGLSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
typedef void (__attribute__((__stdcall__)) * PFNGLSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
typedef void (__attribute__((__stdcall__)) * PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
typedef void (__attribute__((__stdcall__)) * PFNGLSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
typedef void (__attribute__((__stdcall__)) * PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void (__attribute__((__stdcall__)) * PFNGLSTENCILTHENCOVERFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode);
typedef void (__attribute__((__stdcall__)) * PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void (__attribute__((__stdcall__)) * PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask, GLenum coverMode);
typedef void (__attribute__((__stdcall__)) * PFNGLTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat* transformValues);
typedef void (__attribute__((__stdcall__)) * PFNGLWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint paths[], const GLfloat weights[]);
# 13745 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLFLUSHPIXELDATARANGENVPROC) (GLenum target);
typedef void (__attribute__((__stdcall__)) * PFNGLPIXELDATARANGENVPROC) (GLenum target, GLsizei length, void *pointer);
# 13764 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLPOINTPARAMETERINVPROC) (GLenum pname, GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLPOINTPARAMETERIVNVPROC) (GLenum pname, const GLint* params);
# 13786 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETVIDEOI64VNVPROC) (GLuint video_slot, GLenum pname, GLint64EXT* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVIDEOIVNVPROC) (GLuint video_slot, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVIDEOUI64VNVPROC) (GLuint video_slot, GLenum pname, GLuint64EXT* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVIDEOUIVNVPROC) (GLuint video_slot, GLenum pname, GLuint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLPRESENTFRAMEDUALFILLNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
typedef void (__attribute__((__stdcall__)) * PFNGLPRESENTFRAMEKEYEDNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
# 13812 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLPRIMITIVERESTARTINDEXNVPROC) (GLuint index);
typedef void (__attribute__((__stdcall__)) * PFNGLPRIMITIVERESTARTNVPROC) (void);
# 13879 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCOMBINERINPUTNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMBINEROUTPUTNVPROC) (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMBINERPARAMETERFNVPROC) (GLenum pname, GLfloat param);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMBINERPARAMETERFVNVPROC) (GLenum pname, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMBINERPARAMETERINVPROC) (GLenum pname, GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLCOMBINERPARAMETERIVNVPROC) (GLenum pname, const GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLFINALCOMBINERINPUTNVPROC) (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC) (GLenum variable, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) (GLenum variable, GLenum pname, GLint* params);
# 13918 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, GLfloat* params);
# 13942 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLenum target, GLuint start, GLsizei count, const GLfloat* v);
typedef void (__attribute__((__stdcall__)) * PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v);
# 14006 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETBUFFERPARAMETERUI64VNVPROC) (GLenum target, GLenum pname, GLuint64EXT* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETINTEGERUI64VNVPROC) (GLenum value, GLuint64EXT* result);
typedef void (__attribute__((__stdcall__)) * PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC) (GLuint buffer, GLenum pname, GLuint64EXT* params);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISBUFFERRESIDENTNVPROC) (GLenum target);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISNAMEDBUFFERRESIDENTNVPROC) (GLuint buffer);
typedef void (__attribute__((__stdcall__)) * PFNGLMAKEBUFFERNONRESIDENTNVPROC) (GLenum target);
typedef void (__attribute__((__stdcall__)) * PFNGLMAKEBUFFERRESIDENTNVPROC) (GLenum target, GLenum access);
typedef void (__attribute__((__stdcall__)) * PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC) (GLuint buffer);
typedef void (__attribute__((__stdcall__)) * PFNGLMAKENAMEDBUFFERRESIDENTNVPROC) (GLuint buffer, GLenum access);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMUI64NVPROC) (GLuint program, GLint location, GLuint64EXT value);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMUI64NVPROC) (GLint location, GLuint64EXT value);
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMUI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT* value);
# 14114 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREBARRIERNVPROC) (void);
# 14165 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC) (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC) (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC) (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC) (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
# 14376 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLACTIVEVARYINGNVPROC) (GLuint program, const GLchar *name);
typedef void (__attribute__((__stdcall__)) * PFNGLBEGINTRANSFORMFEEDBACKNVPROC) (GLenum primitiveMode);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDBUFFERBASENVPROC) (GLenum target, GLuint index, GLuint buffer);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDBUFFEROFFSETNVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDBUFFERRANGENVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (__attribute__((__stdcall__)) * PFNGLENDTRANSFORMFEEDBACKNVPROC) (void);
typedef void (__attribute__((__stdcall__)) * PFNGLGETACTIVEVARYINGNVPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) (GLuint program, GLuint index, GLint *location);
typedef GLint (__attribute__((__stdcall__)) * PFNGLGETVARYINGLOCATIONNVPROC) (GLuint program, const GLchar *name);
typedef void (__attribute__((__stdcall__)) * PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) (GLuint count, const GLint *attribs, GLenum bufferMode);
typedef void (__attribute__((__stdcall__)) * PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);
# 14414 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBINDTRANSFORMFEEDBACKNVPROC) (GLenum target, GLuint id);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETETRANSFORMFEEDBACKSNVPROC) (GLsizei n, const GLuint* ids);
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWTRANSFORMFEEDBACKNVPROC) (GLenum mode, GLuint id);
typedef void (__attribute__((__stdcall__)) * PFNGLGENTRANSFORMFEEDBACKSNVPROC) (GLsizei n, GLuint* ids);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISTRANSFORMFEEDBACKNVPROC) (GLuint id);
typedef void (__attribute__((__stdcall__)) * PFNGLPAUSETRANSFORMFEEDBACKNVPROC) (void);
typedef void (__attribute__((__stdcall__)) * PFNGLRESUMETRANSFORMFEEDBACKNVPROC) (void);
# 14457 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef GLintptr GLvdpauSurfaceNV;

typedef void (__attribute__((__stdcall__)) * PFNGLVDPAUFININVPROC) (void);
typedef void (__attribute__((__stdcall__)) * PFNGLVDPAUGETSURFACEIVNVPROC) (GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei* length, GLint *values);
typedef void (__attribute__((__stdcall__)) * PFNGLVDPAUINITNVPROC) (const void* vdpDevice, const void*getProcAddress);
typedef void (__attribute__((__stdcall__)) * PFNGLVDPAUISSURFACENVPROC) (GLvdpauSurfaceNV surface);
typedef void (__attribute__((__stdcall__)) * PFNGLVDPAUMAPSURFACESNVPROC) (GLsizei numSurfaces, const GLvdpauSurfaceNV* surfaces);
typedef GLvdpauSurfaceNV (__attribute__((__stdcall__)) * PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC) (const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
typedef GLvdpauSurfaceNV (__attribute__((__stdcall__)) * PFNGLVDPAUREGISTERVIDEOSURFACENVPROC) (const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
typedef void (__attribute__((__stdcall__)) * PFNGLVDPAUSURFACEACCESSNVPROC) (GLvdpauSurfaceNV surface, GLenum access);
typedef void (__attribute__((__stdcall__)) * PFNGLVDPAUUNMAPSURFACESNVPROC) (GLsizei numSurface, const GLvdpauSurfaceNV* surfaces);
typedef void (__attribute__((__stdcall__)) * PFNGLVDPAUUNREGISTERSURFACENVPROC) (GLvdpauSurfaceNV surface);
# 14496 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLFLUSHVERTEXARRAYRANGENVPROC) (void);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXARRAYRANGENVPROC) (GLsizei length, void *pointer);
# 14525 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBLI64VNVPROC) (GLuint index, GLenum pname, GLint64EXT* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBLUI64VNVPROC) (GLuint index, GLenum pname, GLuint64EXT* params);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL1I64NVPROC) (GLuint index, GLint64EXT x);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL1I64VNVPROC) (GLuint index, const GLint64EXT* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL1UI64NVPROC) (GLuint index, GLuint64EXT x);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL1UI64VNVPROC) (GLuint index, const GLuint64EXT* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL2I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL2I64VNVPROC) (GLuint index, const GLint64EXT* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL2UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL2UI64VNVPROC) (GLuint index, const GLuint64EXT* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL3I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL3I64VNVPROC) (GLuint index, const GLint64EXT* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL3UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL3UI64VNVPROC) (GLuint index, const GLuint64EXT* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL4I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL4I64VNVPROC) (GLuint index, const GLint64EXT* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL4UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL4UI64VNVPROC) (GLuint index, const GLuint64EXT* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBLFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride);
# 14600 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBUFFERADDRESSRANGENVPROC) (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
typedef void (__attribute__((__stdcall__)) * PFNGLEDGEFLAGFORMATNVPROC) (GLsizei stride);
typedef void (__attribute__((__stdcall__)) * PFNGLFOGCOORDFORMATNVPROC) (GLenum type, GLsizei stride);
typedef void (__attribute__((__stdcall__)) * PFNGLGETINTEGERUI64I_VNVPROC) (GLenum value, GLuint index, GLuint64EXT result[]);
typedef void (__attribute__((__stdcall__)) * PFNGLINDEXFORMATNVPROC) (GLenum type, GLsizei stride);
typedef void (__attribute__((__stdcall__)) * PFNGLNORMALFORMATNVPROC) (GLenum type, GLsizei stride);
typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORDFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBIFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
# 14719 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLAREPROGRAMSRESIDENTNVPROC) (GLsizei n, const GLuint* ids, GLboolean *residences);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDPROGRAMNVPROC) (GLenum target, GLuint id);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEPROGRAMSNVPROC) (GLsizei n, const GLuint* ids);
typedef void (__attribute__((__stdcall__)) * PFNGLEXECUTEPROGRAMNVPROC) (GLenum target, GLuint id, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGENPROGRAMSNVPROC) (GLsizei n, GLuint* ids);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMPARAMETERDVNVPROC) (GLenum target, GLuint index, GLenum pname, GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMSTRINGNVPROC) (GLuint id, GLenum pname, GLubyte* program);
typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMIVNVPROC) (GLuint id, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTRACKMATRIXIVNVPROC) (GLenum target, GLuint address, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBPOINTERVNVPROC) (GLuint index, GLenum pname, void** pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBDVNVPROC) (GLuint index, GLenum pname, GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBFVNVPROC) (GLuint index, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBIVNVPROC) (GLuint index, GLenum pname, GLint* params);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISPROGRAMNVPROC) (GLuint id);
typedef void (__attribute__((__stdcall__)) * PFNGLLOADPROGRAMNVPROC) (GLenum target, GLuint id, GLsizei len, const GLubyte* program);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMPARAMETER4DNVPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMPARAMETER4DVNVPROC) (GLenum target, GLuint index, const GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMPARAMETER4FNVPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMPARAMETER4FVNVPROC) (GLenum target, GLuint index, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMPARAMETERS4DVNVPROC) (GLenum target, GLuint index, GLsizei num, const GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMPARAMETERS4FVNVPROC) (GLenum target, GLuint index, GLsizei num, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLREQUESTRESIDENTPROGRAMSNVPROC) (GLsizei n, GLuint* ids);
typedef void (__attribute__((__stdcall__)) * PFNGLTRACKMATRIXNVPROC) (GLenum target, GLuint address, GLenum matrix, GLenum transform);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1DNVPROC) (GLuint index, GLdouble x);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1DVNVPROC) (GLuint index, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1FNVPROC) (GLuint index, GLfloat x);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1FVNVPROC) (GLuint index, const GLfloat* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1SNVPROC) (GLuint index, GLshort x);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1SVNVPROC) (GLuint index, const GLshort* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2DNVPROC) (GLuint index, GLdouble x, GLdouble y);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2DVNVPROC) (GLuint index, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2FNVPROC) (GLuint index, GLfloat x, GLfloat y);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2FVNVPROC) (GLuint index, const GLfloat* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2SNVPROC) (GLuint index, GLshort x, GLshort y);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2SVNVPROC) (GLuint index, const GLshort* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3DVNVPROC) (GLuint index, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3FVNVPROC) (GLuint index, const GLfloat* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3SVNVPROC) (GLuint index, const GLshort* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4DVNVPROC) (GLuint index, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4FVNVPROC) (GLuint index, const GLfloat* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4SVNVPROC) (GLuint index, const GLshort* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4UBNVPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4UBVNVPROC) (GLuint index, const GLubyte* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBPOINTERNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBS1DVNVPROC) (GLuint index, GLsizei n, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBS1FVNVPROC) (GLuint index, GLsizei n, const GLfloat* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBS1SVNVPROC) (GLuint index, GLsizei n, const GLshort* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBS2DVNVPROC) (GLuint index, GLsizei n, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBS2FVNVPROC) (GLuint index, GLsizei n, const GLfloat* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBS2SVNVPROC) (GLuint index, GLsizei n, const GLshort* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBS3DVNVPROC) (GLuint index, GLsizei n, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBS3FVNVPROC) (GLuint index, GLsizei n, const GLfloat* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBS3SVNVPROC) (GLuint index, GLsizei n, const GLshort* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBS4DVNVPROC) (GLuint index, GLsizei n, const GLdouble* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBS4FVNVPROC) (GLuint index, GLsizei n, const GLfloat* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBS4SVNVPROC) (GLuint index, GLsizei n, const GLshort* v);
typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBS4UBVNVPROC) (GLuint index, GLsizei n, const GLubyte* v);
# 14940 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLBEGINVIDEOCAPTURENVPROC) (GLuint video_capture_slot);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
typedef void (__attribute__((__stdcall__)) * PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
typedef void (__attribute__((__stdcall__)) * PFNGLENDVIDEOCAPTURENVPROC) (GLuint video_capture_slot);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVIDEOCAPTURESTREAMDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVIDEOCAPTURESTREAMFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVIDEOCAPTURESTREAMIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETVIDEOCAPTUREIVNVPROC) (GLuint video_capture_slot, GLenum pname, GLint* params);
typedef GLenum (__attribute__((__stdcall__)) * PFNGLVIDEOCAPTURENVPROC) (GLuint video_capture_slot, GLuint* sequence_num, GLuint64EXT *capture_time);
typedef void (__attribute__((__stdcall__)) * PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble* params);
typedef void (__attribute__((__stdcall__)) * PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint* params);
# 15025 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCLEARDEPTHFOESPROC) (GLclampf depth);
typedef void (__attribute__((__stdcall__)) * PFNGLCLIPPLANEFOESPROC) (GLenum plane, const GLfloat* equation);
typedef void (__attribute__((__stdcall__)) * PFNGLDEPTHRANGEFOESPROC) (GLclampf n, GLclampf f);
typedef void (__attribute__((__stdcall__)) * PFNGLFRUSTUMFOESPROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCLIPPLANEFOESPROC) (GLenum plane, GLfloat* equation);
typedef void (__attribute__((__stdcall__)) * PFNGLORTHOFOESPROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
# 15093 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews);
# 15177 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef int GLclampx;

typedef void (__attribute__((__stdcall__)) * PFNGLALPHAFUNCXPROC) (GLenum func, GLclampx ref);
typedef void (__attribute__((__stdcall__)) * PFNGLCLEARCOLORXPROC) (GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha);
typedef void (__attribute__((__stdcall__)) * PFNGLCLEARDEPTHXPROC) (GLclampx depth);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLOR4XPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void (__attribute__((__stdcall__)) * PFNGLDEPTHRANGEXPROC) (GLclampx zNear, GLclampx zFar);
typedef void (__attribute__((__stdcall__)) * PFNGLFOGXPROC) (GLenum pname, GLfixed param);
typedef void (__attribute__((__stdcall__)) * PFNGLFOGXVPROC) (GLenum pname, const GLfixed* params);
typedef void (__attribute__((__stdcall__)) * PFNGLFRUSTUMFPROC) (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);
typedef void (__attribute__((__stdcall__)) * PFNGLFRUSTUMXPROC) (GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar);
typedef void (__attribute__((__stdcall__)) * PFNGLLIGHTMODELXPROC) (GLenum pname, GLfixed param);
typedef void (__attribute__((__stdcall__)) * PFNGLLIGHTMODELXVPROC) (GLenum pname, const GLfixed* params);
typedef void (__attribute__((__stdcall__)) * PFNGLLIGHTXPROC) (GLenum light, GLenum pname, GLfixed param);
typedef void (__attribute__((__stdcall__)) * PFNGLLIGHTXVPROC) (GLenum light, GLenum pname, const GLfixed* params);
typedef void (__attribute__((__stdcall__)) * PFNGLLINEWIDTHXPROC) (GLfixed width);
typedef void (__attribute__((__stdcall__)) * PFNGLLOADMATRIXXPROC) (const GLfixed* m);
typedef void (__attribute__((__stdcall__)) * PFNGLMATERIALXPROC) (GLenum face, GLenum pname, GLfixed param);
typedef void (__attribute__((__stdcall__)) * PFNGLMATERIALXVPROC) (GLenum face, GLenum pname, const GLfixed* params);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTMATRIXXPROC) (const GLfixed* m);
typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORD4XPROC) (GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
typedef void (__attribute__((__stdcall__)) * PFNGLNORMAL3XPROC) (GLfixed nx, GLfixed ny, GLfixed nz);
typedef void (__attribute__((__stdcall__)) * PFNGLORTHOFPROC) (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);
typedef void (__attribute__((__stdcall__)) * PFNGLORTHOXPROC) (GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar);
typedef void (__attribute__((__stdcall__)) * PFNGLPOINTSIZEXPROC) (GLfixed size);
typedef void (__attribute__((__stdcall__)) * PFNGLPOLYGONOFFSETXPROC) (GLfixed factor, GLfixed units);
typedef void (__attribute__((__stdcall__)) * PFNGLROTATEXPROC) (GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLECOVERAGEXPROC) (GLclampx value, GLboolean invert);
typedef void (__attribute__((__stdcall__)) * PFNGLSCALEXPROC) (GLfixed x, GLfixed y, GLfixed z);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXENVXPROC) (GLenum target, GLenum pname, GLfixed param);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXENVXVPROC) (GLenum target, GLenum pname, const GLfixed* params);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXPARAMETERXPROC) (GLenum target, GLenum pname, GLfixed param);
typedef void (__attribute__((__stdcall__)) * PFNGLTRANSLATEXPROC) (GLfixed x, GLfixed y, GLfixed z);
# 15252 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCLIPPLANEFPROC) (GLenum plane, const GLfloat* equation);
typedef void (__attribute__((__stdcall__)) * PFNGLCLIPPLANEXPROC) (GLenum plane, const GLfixed* equation);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCLIPPLANEFPROC) (GLenum pname, GLfloat eqn[4]);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCLIPPLANEXPROC) (GLenum pname, GLfixed eqn[4]);
typedef void (__attribute__((__stdcall__)) * PFNGLGETFIXEDVPROC) (GLenum pname, GLfixed* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETLIGHTXVPROC) (GLenum light, GLenum pname, GLfixed* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETMATERIALXVPROC) (GLenum face, GLenum pname, GLfixed* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXENVXVPROC) (GLenum env, GLenum pname, GLfixed* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXPARAMETERXVPROC) (GLenum target, GLenum pname, GLfixed* params);
typedef void (__attribute__((__stdcall__)) * PFNGLPOINTPARAMETERXPROC) (GLenum pname, GLfixed param);
typedef void (__attribute__((__stdcall__)) * PFNGLPOINTPARAMETERXVPROC) (GLenum pname, const GLfixed* params);
typedef void (__attribute__((__stdcall__)) * PFNGLPOINTSIZEPOINTEROESPROC) (GLenum type, GLsizei stride, const void *pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXPARAMETERXVPROC) (GLenum target, GLenum pname, const GLfixed* params);
# 15309 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef const GLchar* (__attribute__((__stdcall__)) * PFNGLERRORSTRINGREGALPROC) (GLenum error);
# 15322 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLGETEXTENSIONREGALPROC) (const GLchar* ext);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISSUPPORTEDREGALPROC) (const GLchar* ext);
# 15347 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) *GLLOGPROCREGAL)(GLenum stream, GLsizei length, const GLchar *message, void *context);

typedef void (__attribute__((__stdcall__)) * PFNGLLOGMESSAGECALLBACKREGALPROC) (GLLOGPROCREGAL callback);
# 15362 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void * (__attribute__((__stdcall__)) * PFNGLGETPROCADDRESSREGALPROC) (const GLchar *name);
# 15422 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLDETAILTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat* points);
typedef void (__attribute__((__stdcall__)) * PFNGLGETDETAILTEXFUNCSGISPROC) (GLenum target, GLfloat* points);
# 15437 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLFOGFUNCSGISPROC) (GLsizei n, const GLfloat* points);
typedef void (__attribute__((__stdcall__)) * PFNGLGETFOGFUNCSGISPROC) (GLfloat* points);
# 15481 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLEMASKSGISPROC) (GLclampf value, GLboolean invert);
typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLEPATTERNSGISPROC) (GLenum pattern);
# 15523 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETSHARPENTEXFUNCSGISPROC) (GLenum target, GLfloat* points);
typedef void (__attribute__((__stdcall__)) * PFNGLSHARPENTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat* points);
# 15538 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLTEXIMAGE4DSGISPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei extent, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXSUBIMAGE4DSGISPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei extent, GLenum format, GLenum type, const void *pixels);
# 15575 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLfloat* weights);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLsizei n, const GLfloat* weights);
# 15615 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLASYNCMARKERSGIXPROC) (GLuint marker);
typedef void (__attribute__((__stdcall__)) * PFNGLDELETEASYNCMARKERSSGIXPROC) (GLuint marker, GLsizei range);
typedef GLint (__attribute__((__stdcall__)) * PFNGLFINISHASYNCSGIXPROC) (GLuint* markerp);
typedef GLuint (__attribute__((__stdcall__)) * PFNGLGENASYNCMARKERSSGIXPROC) (GLsizei range);
typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISASYNCMARKERSGIXPROC) (GLuint marker);
typedef GLint (__attribute__((__stdcall__)) * PFNGLPOLLASYNCSGIXPROC) (GLuint* markerp);
# 15711 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLFLUSHRASTERSGIXPROC) (void);
# 15740 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLTEXTUREFOGSGIXPROC) (GLenum pname);
# 15753 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTCOLORMATERIALSGIXPROC) (GLenum face, GLenum mode);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTLIGHTMODELFSGIXPROC) (GLenum pname, GLfloat param);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTLIGHTMODELFVSGIXPROC) (GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTLIGHTMODELISGIXPROC) (GLenum pname, GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTLIGHTMODELIVSGIXPROC) (GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTLIGHTFSGIXPROC) (GLenum light, GLenum pname, GLfloat param);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTLIGHTISGIXPROC) (GLenum light, GLenum pname, GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTMATERIALFSGIXPROC) (GLenum face, GLenum pname, const GLfloat param);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTMATERIALISGIXPROC) (GLenum face, GLenum pname, const GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, const GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum value, GLfloat* data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum value, GLint* data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, const GLfloat* data);
typedef void (__attribute__((__stdcall__)) * PFNGLGETFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, const GLint* data);
# 15798 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEZOOMSGIXPROC) (GLint factor);
# 15840 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLPIXELTEXGENSGIXPROC) (GLenum mode);
# 15862 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLREFERENCEPLANESGIXPROC) (const GLdouble* equation);
# 15915 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLSPRITEPARAMETERFSGIXPROC) (GLenum pname, GLfloat param);
typedef void (__attribute__((__stdcall__)) * PFNGLSPRITEPARAMETERFVSGIXPROC) (GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLSPRITEPARAMETERISGIXPROC) (GLenum pname, GLint param);
typedef void (__attribute__((__stdcall__)) * PFNGLSPRITEPARAMETERIVSGIXPROC) (GLenum pname, GLint* params);
# 15934 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLTAGSAMPLEBUFFERSGIXPROC) (void);
# 16112 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, const GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, const GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table);
typedef void (__attribute__((__stdcall__)) * PFNGLCOPYCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, GLfloat* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, GLint* params);
typedef void (__attribute__((__stdcall__)) * PFNGLGETCOLORTABLESGIPROC) (GLenum target, GLenum format, GLenum type, void *table);
# 16152 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLFINISHTEXTURESUNXPROC) (void);
# 16179 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLGLOBALALPHAFACTORBSUNPROC) (GLbyte factor);
typedef void (__attribute__((__stdcall__)) * PFNGLGLOBALALPHAFACTORDSUNPROC) (GLdouble factor);
typedef void (__attribute__((__stdcall__)) * PFNGLGLOBALALPHAFACTORFSUNPROC) (GLfloat factor);
typedef void (__attribute__((__stdcall__)) * PFNGLGLOBALALPHAFACTORISUNPROC) (GLint factor);
typedef void (__attribute__((__stdcall__)) * PFNGLGLOBALALPHAFACTORSSUNPROC) (GLshort factor);
typedef void (__attribute__((__stdcall__)) * PFNGLGLOBALALPHAFACTORUBSUNPROC) (GLubyte factor);
typedef void (__attribute__((__stdcall__)) * PFNGLGLOBALALPHAFACTORUISUNPROC) (GLuint factor);
typedef void (__attribute__((__stdcall__)) * PFNGLGLOBALALPHAFACTORUSSUNPROC) (GLushort factor);
# 16218 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLREADVIDEOPIXELSSUNPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
# 16260 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEPOINTERSUNPROC) (GLenum type, GLsizei stride, const void *pointer);
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEUBSUNPROC) (GLubyte code);
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEUBVSUNPROC) (const GLubyte* code);
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEUISUNPROC) (GLuint code);
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEUIVSUNPROC) (const GLuint* code);
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEUSSUNPROC) (GLushort code);
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEUSVSUNPROC) (const GLushort* code);
# 16285 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLCOLOR3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLOR3FVERTEX3FVSUNPROC) (const GLfloat* c, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat* c, const GLfloat *n, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLOR4UBVERTEX2FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLOR4UBVERTEX2FVSUNPROC) (const GLubyte* c, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLOR4UBVERTEX3FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLCOLOR4UBVERTEX3FVSUNPROC) (const GLubyte* c, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLNORMAL3FVERTEX3FSUNPROC) (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLNORMAL3FVERTEX3FVSUNPROC) (const GLfloat* n, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *c, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC) (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC) (const GLuint* rc, const GLubyte *c, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *n, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *tc, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC) (GLuint rc, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC) (const GLfloat* tc, const GLfloat *c, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat* tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC) (const GLfloat* tc, const GLubyte *c, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat* tc, const GLfloat *n, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORD2FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORD2FVERTEX3FVSUNPROC) (const GLfloat* tc, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC) (const GLfloat* tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORD4FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORD4FVERTEX4FVSUNPROC) (const GLfloat* tc, const GLfloat *v);
# 16399 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
typedef void (__attribute__((__stdcall__)) * PFNGLADDSWAPHINTRECTWINPROC) (GLint x, GLint y, GLsizei width, GLsizei height);
# 16426 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
extern __attribute__((dllimport)) PFNGLCOPYTEXSUBIMAGE3DPROC __glewCopyTexSubImage3D;
extern __attribute__((dllimport)) PFNGLDRAWRANGEELEMENTSPROC __glewDrawRangeElements;
extern __attribute__((dllimport)) PFNGLTEXIMAGE3DPROC __glewTexImage3D;
extern __attribute__((dllimport)) PFNGLTEXSUBIMAGE3DPROC __glewTexSubImage3D;

extern __attribute__((dllimport)) PFNGLACTIVETEXTUREPROC __glewActiveTexture;
extern __attribute__((dllimport)) PFNGLCLIENTACTIVETEXTUREPROC __glewClientActiveTexture;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDTEXIMAGE1DPROC __glewCompressedTexImage1D;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDTEXIMAGE2DPROC __glewCompressedTexImage2D;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDTEXIMAGE3DPROC __glewCompressedTexImage3D;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC __glewCompressedTexSubImage1D;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC __glewCompressedTexSubImage2D;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC __glewCompressedTexSubImage3D;
extern __attribute__((dllimport)) PFNGLGETCOMPRESSEDTEXIMAGEPROC __glewGetCompressedTexImage;
extern __attribute__((dllimport)) PFNGLLOADTRANSPOSEMATRIXDPROC __glewLoadTransposeMatrixd;
extern __attribute__((dllimport)) PFNGLLOADTRANSPOSEMATRIXFPROC __glewLoadTransposeMatrixf;
extern __attribute__((dllimport)) PFNGLMULTTRANSPOSEMATRIXDPROC __glewMultTransposeMatrixd;
extern __attribute__((dllimport)) PFNGLMULTTRANSPOSEMATRIXFPROC __glewMultTransposeMatrixf;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD1DPROC __glewMultiTexCoord1d;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD1DVPROC __glewMultiTexCoord1dv;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD1FPROC __glewMultiTexCoord1f;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD1FVPROC __glewMultiTexCoord1fv;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD1IPROC __glewMultiTexCoord1i;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD1IVPROC __glewMultiTexCoord1iv;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD1SPROC __glewMultiTexCoord1s;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD1SVPROC __glewMultiTexCoord1sv;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD2DPROC __glewMultiTexCoord2d;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD2DVPROC __glewMultiTexCoord2dv;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD2FPROC __glewMultiTexCoord2f;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD2FVPROC __glewMultiTexCoord2fv;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD2IPROC __glewMultiTexCoord2i;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD2IVPROC __glewMultiTexCoord2iv;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD2SPROC __glewMultiTexCoord2s;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD2SVPROC __glewMultiTexCoord2sv;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD3DPROC __glewMultiTexCoord3d;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD3DVPROC __glewMultiTexCoord3dv;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD3FPROC __glewMultiTexCoord3f;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD3FVPROC __glewMultiTexCoord3fv;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD3IPROC __glewMultiTexCoord3i;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD3IVPROC __glewMultiTexCoord3iv;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD3SPROC __glewMultiTexCoord3s;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD3SVPROC __glewMultiTexCoord3sv;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD4DPROC __glewMultiTexCoord4d;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD4DVPROC __glewMultiTexCoord4dv;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD4FPROC __glewMultiTexCoord4f;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD4FVPROC __glewMultiTexCoord4fv;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD4IPROC __glewMultiTexCoord4i;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD4IVPROC __glewMultiTexCoord4iv;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD4SPROC __glewMultiTexCoord4s;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD4SVPROC __glewMultiTexCoord4sv;
extern __attribute__((dllimport)) PFNGLSAMPLECOVERAGEPROC __glewSampleCoverage;

extern __attribute__((dllimport)) PFNGLBLENDCOLORPROC __glewBlendColor;
extern __attribute__((dllimport)) PFNGLBLENDEQUATIONPROC __glewBlendEquation;
extern __attribute__((dllimport)) PFNGLBLENDFUNCSEPARATEPROC __glewBlendFuncSeparate;
extern __attribute__((dllimport)) PFNGLFOGCOORDPOINTERPROC __glewFogCoordPointer;
extern __attribute__((dllimport)) PFNGLFOGCOORDDPROC __glewFogCoordd;
extern __attribute__((dllimport)) PFNGLFOGCOORDDVPROC __glewFogCoorddv;
extern __attribute__((dllimport)) PFNGLFOGCOORDFPROC __glewFogCoordf;
extern __attribute__((dllimport)) PFNGLFOGCOORDFVPROC __glewFogCoordfv;
extern __attribute__((dllimport)) PFNGLMULTIDRAWARRAYSPROC __glewMultiDrawArrays;
extern __attribute__((dllimport)) PFNGLMULTIDRAWELEMENTSPROC __glewMultiDrawElements;
extern __attribute__((dllimport)) PFNGLPOINTPARAMETERFPROC __glewPointParameterf;
extern __attribute__((dllimport)) PFNGLPOINTPARAMETERFVPROC __glewPointParameterfv;
extern __attribute__((dllimport)) PFNGLPOINTPARAMETERIPROC __glewPointParameteri;
extern __attribute__((dllimport)) PFNGLPOINTPARAMETERIVPROC __glewPointParameteriv;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3BPROC __glewSecondaryColor3b;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3BVPROC __glewSecondaryColor3bv;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3DPROC __glewSecondaryColor3d;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3DVPROC __glewSecondaryColor3dv;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3FPROC __glewSecondaryColor3f;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3FVPROC __glewSecondaryColor3fv;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3IPROC __glewSecondaryColor3i;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3IVPROC __glewSecondaryColor3iv;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3SPROC __glewSecondaryColor3s;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3SVPROC __glewSecondaryColor3sv;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3UBPROC __glewSecondaryColor3ub;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3UBVPROC __glewSecondaryColor3ubv;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3UIPROC __glewSecondaryColor3ui;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3UIVPROC __glewSecondaryColor3uiv;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3USPROC __glewSecondaryColor3us;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3USVPROC __glewSecondaryColor3usv;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLORPOINTERPROC __glewSecondaryColorPointer;
extern __attribute__((dllimport)) PFNGLWINDOWPOS2DPROC __glewWindowPos2d;
extern __attribute__((dllimport)) PFNGLWINDOWPOS2DVPROC __glewWindowPos2dv;
extern __attribute__((dllimport)) PFNGLWINDOWPOS2FPROC __glewWindowPos2f;
extern __attribute__((dllimport)) PFNGLWINDOWPOS2FVPROC __glewWindowPos2fv;
extern __attribute__((dllimport)) PFNGLWINDOWPOS2IPROC __glewWindowPos2i;
extern __attribute__((dllimport)) PFNGLWINDOWPOS2IVPROC __glewWindowPos2iv;
extern __attribute__((dllimport)) PFNGLWINDOWPOS2SPROC __glewWindowPos2s;
extern __attribute__((dllimport)) PFNGLWINDOWPOS2SVPROC __glewWindowPos2sv;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3DPROC __glewWindowPos3d;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3DVPROC __glewWindowPos3dv;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3FPROC __glewWindowPos3f;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3FVPROC __glewWindowPos3fv;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3IPROC __glewWindowPos3i;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3IVPROC __glewWindowPos3iv;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3SPROC __glewWindowPos3s;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3SVPROC __glewWindowPos3sv;

extern __attribute__((dllimport)) PFNGLBEGINQUERYPROC __glewBeginQuery;
extern __attribute__((dllimport)) PFNGLBINDBUFFERPROC __glewBindBuffer;
extern __attribute__((dllimport)) PFNGLBUFFERDATAPROC __glewBufferData;
extern __attribute__((dllimport)) PFNGLBUFFERSUBDATAPROC __glewBufferSubData;
extern __attribute__((dllimport)) PFNGLDELETEBUFFERSPROC __glewDeleteBuffers;
extern __attribute__((dllimport)) PFNGLDELETEQUERIESPROC __glewDeleteQueries;
extern __attribute__((dllimport)) PFNGLENDQUERYPROC __glewEndQuery;
extern __attribute__((dllimport)) PFNGLGENBUFFERSPROC __glewGenBuffers;
extern __attribute__((dllimport)) PFNGLGENQUERIESPROC __glewGenQueries;
extern __attribute__((dllimport)) PFNGLGETBUFFERPARAMETERIVPROC __glewGetBufferParameteriv;
extern __attribute__((dllimport)) PFNGLGETBUFFERPOINTERVPROC __glewGetBufferPointerv;
extern __attribute__((dllimport)) PFNGLGETBUFFERSUBDATAPROC __glewGetBufferSubData;
extern __attribute__((dllimport)) PFNGLGETQUERYOBJECTIVPROC __glewGetQueryObjectiv;
extern __attribute__((dllimport)) PFNGLGETQUERYOBJECTUIVPROC __glewGetQueryObjectuiv;
extern __attribute__((dllimport)) PFNGLGETQUERYIVPROC __glewGetQueryiv;
extern __attribute__((dllimport)) PFNGLISBUFFERPROC __glewIsBuffer;
extern __attribute__((dllimport)) PFNGLISQUERYPROC __glewIsQuery;
extern __attribute__((dllimport)) PFNGLMAPBUFFERPROC __glewMapBuffer;
extern __attribute__((dllimport)) PFNGLUNMAPBUFFERPROC __glewUnmapBuffer;

extern __attribute__((dllimport)) PFNGLATTACHSHADERPROC __glewAttachShader;
extern __attribute__((dllimport)) PFNGLBINDATTRIBLOCATIONPROC __glewBindAttribLocation;
extern __attribute__((dllimport)) PFNGLBLENDEQUATIONSEPARATEPROC __glewBlendEquationSeparate;
extern __attribute__((dllimport)) PFNGLCOMPILESHADERPROC __glewCompileShader;
extern __attribute__((dllimport)) PFNGLCREATEPROGRAMPROC __glewCreateProgram;
extern __attribute__((dllimport)) PFNGLCREATESHADERPROC __glewCreateShader;
extern __attribute__((dllimport)) PFNGLDELETEPROGRAMPROC __glewDeleteProgram;
extern __attribute__((dllimport)) PFNGLDELETESHADERPROC __glewDeleteShader;
extern __attribute__((dllimport)) PFNGLDETACHSHADERPROC __glewDetachShader;
extern __attribute__((dllimport)) PFNGLDISABLEVERTEXATTRIBARRAYPROC __glewDisableVertexAttribArray;
extern __attribute__((dllimport)) PFNGLDRAWBUFFERSPROC __glewDrawBuffers;
extern __attribute__((dllimport)) PFNGLENABLEVERTEXATTRIBARRAYPROC __glewEnableVertexAttribArray;
extern __attribute__((dllimport)) PFNGLGETACTIVEATTRIBPROC __glewGetActiveAttrib;
extern __attribute__((dllimport)) PFNGLGETACTIVEUNIFORMPROC __glewGetActiveUniform;
extern __attribute__((dllimport)) PFNGLGETATTACHEDSHADERSPROC __glewGetAttachedShaders;
extern __attribute__((dllimport)) PFNGLGETATTRIBLOCATIONPROC __glewGetAttribLocation;
extern __attribute__((dllimport)) PFNGLGETPROGRAMINFOLOGPROC __glewGetProgramInfoLog;
extern __attribute__((dllimport)) PFNGLGETPROGRAMIVPROC __glewGetProgramiv;
extern __attribute__((dllimport)) PFNGLGETSHADERINFOLOGPROC __glewGetShaderInfoLog;
extern __attribute__((dllimport)) PFNGLGETSHADERSOURCEPROC __glewGetShaderSource;
extern __attribute__((dllimport)) PFNGLGETSHADERIVPROC __glewGetShaderiv;
extern __attribute__((dllimport)) PFNGLGETUNIFORMLOCATIONPROC __glewGetUniformLocation;
extern __attribute__((dllimport)) PFNGLGETUNIFORMFVPROC __glewGetUniformfv;
extern __attribute__((dllimport)) PFNGLGETUNIFORMIVPROC __glewGetUniformiv;
extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBPOINTERVPROC __glewGetVertexAttribPointerv;
extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBDVPROC __glewGetVertexAttribdv;
extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBFVPROC __glewGetVertexAttribfv;
extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBIVPROC __glewGetVertexAttribiv;
extern __attribute__((dllimport)) PFNGLISPROGRAMPROC __glewIsProgram;
extern __attribute__((dllimport)) PFNGLISSHADERPROC __glewIsShader;
extern __attribute__((dllimport)) PFNGLLINKPROGRAMPROC __glewLinkProgram;
extern __attribute__((dllimport)) PFNGLSHADERSOURCEPROC __glewShaderSource;
extern __attribute__((dllimport)) PFNGLSTENCILFUNCSEPARATEPROC __glewStencilFuncSeparate;
extern __attribute__((dllimport)) PFNGLSTENCILMASKSEPARATEPROC __glewStencilMaskSeparate;
extern __attribute__((dllimport)) PFNGLSTENCILOPSEPARATEPROC __glewStencilOpSeparate;
extern __attribute__((dllimport)) PFNGLUNIFORM1FPROC __glewUniform1f;
extern __attribute__((dllimport)) PFNGLUNIFORM1FVPROC __glewUniform1fv;
extern __attribute__((dllimport)) PFNGLUNIFORM1IPROC __glewUniform1i;
extern __attribute__((dllimport)) PFNGLUNIFORM1IVPROC __glewUniform1iv;
extern __attribute__((dllimport)) PFNGLUNIFORM2FPROC __glewUniform2f;
extern __attribute__((dllimport)) PFNGLUNIFORM2FVPROC __glewUniform2fv;
extern __attribute__((dllimport)) PFNGLUNIFORM2IPROC __glewUniform2i;
extern __attribute__((dllimport)) PFNGLUNIFORM2IVPROC __glewUniform2iv;
extern __attribute__((dllimport)) PFNGLUNIFORM3FPROC __glewUniform3f;
extern __attribute__((dllimport)) PFNGLUNIFORM3FVPROC __glewUniform3fv;
extern __attribute__((dllimport)) PFNGLUNIFORM3IPROC __glewUniform3i;
extern __attribute__((dllimport)) PFNGLUNIFORM3IVPROC __glewUniform3iv;
extern __attribute__((dllimport)) PFNGLUNIFORM4FPROC __glewUniform4f;
extern __attribute__((dllimport)) PFNGLUNIFORM4FVPROC __glewUniform4fv;
extern __attribute__((dllimport)) PFNGLUNIFORM4IPROC __glewUniform4i;
extern __attribute__((dllimport)) PFNGLUNIFORM4IVPROC __glewUniform4iv;
extern __attribute__((dllimport)) PFNGLUNIFORMMATRIX2FVPROC __glewUniformMatrix2fv;
extern __attribute__((dllimport)) PFNGLUNIFORMMATRIX3FVPROC __glewUniformMatrix3fv;
extern __attribute__((dllimport)) PFNGLUNIFORMMATRIX4FVPROC __glewUniformMatrix4fv;
extern __attribute__((dllimport)) PFNGLUSEPROGRAMPROC __glewUseProgram;
extern __attribute__((dllimport)) PFNGLVALIDATEPROGRAMPROC __glewValidateProgram;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB1DPROC __glewVertexAttrib1d;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB1DVPROC __glewVertexAttrib1dv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB1FPROC __glewVertexAttrib1f;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB1FVPROC __glewVertexAttrib1fv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB1SPROC __glewVertexAttrib1s;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB1SVPROC __glewVertexAttrib1sv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB2DPROC __glewVertexAttrib2d;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB2DVPROC __glewVertexAttrib2dv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB2FPROC __glewVertexAttrib2f;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB2FVPROC __glewVertexAttrib2fv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB2SPROC __glewVertexAttrib2s;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB2SVPROC __glewVertexAttrib2sv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB3DPROC __glewVertexAttrib3d;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB3DVPROC __glewVertexAttrib3dv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB3FPROC __glewVertexAttrib3f;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB3FVPROC __glewVertexAttrib3fv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB3SPROC __glewVertexAttrib3s;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB3SVPROC __glewVertexAttrib3sv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4NBVPROC __glewVertexAttrib4Nbv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4NIVPROC __glewVertexAttrib4Niv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4NSVPROC __glewVertexAttrib4Nsv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4NUBPROC __glewVertexAttrib4Nub;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4NUBVPROC __glewVertexAttrib4Nubv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4NUIVPROC __glewVertexAttrib4Nuiv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4NUSVPROC __glewVertexAttrib4Nusv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4BVPROC __glewVertexAttrib4bv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4DPROC __glewVertexAttrib4d;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4DVPROC __glewVertexAttrib4dv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4FPROC __glewVertexAttrib4f;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4FVPROC __glewVertexAttrib4fv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4IVPROC __glewVertexAttrib4iv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4SPROC __glewVertexAttrib4s;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4SVPROC __glewVertexAttrib4sv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4UBVPROC __glewVertexAttrib4ubv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4UIVPROC __glewVertexAttrib4uiv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4USVPROC __glewVertexAttrib4usv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBPOINTERPROC __glewVertexAttribPointer;

extern __attribute__((dllimport)) PFNGLUNIFORMMATRIX2X3FVPROC __glewUniformMatrix2x3fv;
extern __attribute__((dllimport)) PFNGLUNIFORMMATRIX2X4FVPROC __glewUniformMatrix2x4fv;
extern __attribute__((dllimport)) PFNGLUNIFORMMATRIX3X2FVPROC __glewUniformMatrix3x2fv;
extern __attribute__((dllimport)) PFNGLUNIFORMMATRIX3X4FVPROC __glewUniformMatrix3x4fv;
extern __attribute__((dllimport)) PFNGLUNIFORMMATRIX4X2FVPROC __glewUniformMatrix4x2fv;
extern __attribute__((dllimport)) PFNGLUNIFORMMATRIX4X3FVPROC __glewUniformMatrix4x3fv;

extern __attribute__((dllimport)) PFNGLBEGINCONDITIONALRENDERPROC __glewBeginConditionalRender;
extern __attribute__((dllimport)) PFNGLBEGINTRANSFORMFEEDBACKPROC __glewBeginTransformFeedback;
extern __attribute__((dllimport)) PFNGLBINDFRAGDATALOCATIONPROC __glewBindFragDataLocation;
extern __attribute__((dllimport)) PFNGLCLAMPCOLORPROC __glewClampColor;
extern __attribute__((dllimport)) PFNGLCLEARBUFFERFIPROC __glewClearBufferfi;
extern __attribute__((dllimport)) PFNGLCLEARBUFFERFVPROC __glewClearBufferfv;
extern __attribute__((dllimport)) PFNGLCLEARBUFFERIVPROC __glewClearBufferiv;
extern __attribute__((dllimport)) PFNGLCLEARBUFFERUIVPROC __glewClearBufferuiv;
extern __attribute__((dllimport)) PFNGLCOLORMASKIPROC __glewColorMaski;
extern __attribute__((dllimport)) PFNGLDISABLEIPROC __glewDisablei;
extern __attribute__((dllimport)) PFNGLENABLEIPROC __glewEnablei;
extern __attribute__((dllimport)) PFNGLENDCONDITIONALRENDERPROC __glewEndConditionalRender;
extern __attribute__((dllimport)) PFNGLENDTRANSFORMFEEDBACKPROC __glewEndTransformFeedback;
extern __attribute__((dllimport)) PFNGLGETBOOLEANI_VPROC __glewGetBooleani_v;
extern __attribute__((dllimport)) PFNGLGETFRAGDATALOCATIONPROC __glewGetFragDataLocation;
extern __attribute__((dllimport)) PFNGLGETSTRINGIPROC __glewGetStringi;
extern __attribute__((dllimport)) PFNGLGETTEXPARAMETERIIVPROC __glewGetTexParameterIiv;
extern __attribute__((dllimport)) PFNGLGETTEXPARAMETERIUIVPROC __glewGetTexParameterIuiv;
extern __attribute__((dllimport)) PFNGLGETTRANSFORMFEEDBACKVARYINGPROC __glewGetTransformFeedbackVarying;
extern __attribute__((dllimport)) PFNGLGETUNIFORMUIVPROC __glewGetUniformuiv;
extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBIIVPROC __glewGetVertexAttribIiv;
extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBIUIVPROC __glewGetVertexAttribIuiv;
extern __attribute__((dllimport)) PFNGLISENABLEDIPROC __glewIsEnabledi;
extern __attribute__((dllimport)) PFNGLTEXPARAMETERIIVPROC __glewTexParameterIiv;
extern __attribute__((dllimport)) PFNGLTEXPARAMETERIUIVPROC __glewTexParameterIuiv;
extern __attribute__((dllimport)) PFNGLTRANSFORMFEEDBACKVARYINGSPROC __glewTransformFeedbackVaryings;
extern __attribute__((dllimport)) PFNGLUNIFORM1UIPROC __glewUniform1ui;
extern __attribute__((dllimport)) PFNGLUNIFORM1UIVPROC __glewUniform1uiv;
extern __attribute__((dllimport)) PFNGLUNIFORM2UIPROC __glewUniform2ui;
extern __attribute__((dllimport)) PFNGLUNIFORM2UIVPROC __glewUniform2uiv;
extern __attribute__((dllimport)) PFNGLUNIFORM3UIPROC __glewUniform3ui;
extern __attribute__((dllimport)) PFNGLUNIFORM3UIVPROC __glewUniform3uiv;
extern __attribute__((dllimport)) PFNGLUNIFORM4UIPROC __glewUniform4ui;
extern __attribute__((dllimport)) PFNGLUNIFORM4UIVPROC __glewUniform4uiv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI1IPROC __glewVertexAttribI1i;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI1IVPROC __glewVertexAttribI1iv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI1UIPROC __glewVertexAttribI1ui;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI1UIVPROC __glewVertexAttribI1uiv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI2IPROC __glewVertexAttribI2i;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI2IVPROC __glewVertexAttribI2iv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI2UIPROC __glewVertexAttribI2ui;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI2UIVPROC __glewVertexAttribI2uiv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI3IPROC __glewVertexAttribI3i;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI3IVPROC __glewVertexAttribI3iv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI3UIPROC __glewVertexAttribI3ui;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI3UIVPROC __glewVertexAttribI3uiv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI4BVPROC __glewVertexAttribI4bv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI4IPROC __glewVertexAttribI4i;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI4IVPROC __glewVertexAttribI4iv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI4SVPROC __glewVertexAttribI4sv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI4UBVPROC __glewVertexAttribI4ubv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI4UIPROC __glewVertexAttribI4ui;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI4UIVPROC __glewVertexAttribI4uiv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI4USVPROC __glewVertexAttribI4usv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBIPOINTERPROC __glewVertexAttribIPointer;

extern __attribute__((dllimport)) PFNGLDRAWARRAYSINSTANCEDPROC __glewDrawArraysInstanced;
extern __attribute__((dllimport)) PFNGLDRAWELEMENTSINSTANCEDPROC __glewDrawElementsInstanced;
extern __attribute__((dllimport)) PFNGLPRIMITIVERESTARTINDEXPROC __glewPrimitiveRestartIndex;
extern __attribute__((dllimport)) PFNGLTEXBUFFERPROC __glewTexBuffer;

extern __attribute__((dllimport)) PFNGLFRAMEBUFFERTEXTUREPROC __glewFramebufferTexture;
extern __attribute__((dllimport)) PFNGLGETBUFFERPARAMETERI64VPROC __glewGetBufferParameteri64v;
extern __attribute__((dllimport)) PFNGLGETINTEGER64I_VPROC __glewGetInteger64i_v;

extern __attribute__((dllimport)) PFNGLVERTEXATTRIBDIVISORPROC __glewVertexAttribDivisor;

extern __attribute__((dllimport)) PFNGLBLENDEQUATIONSEPARATEIPROC __glewBlendEquationSeparatei;
extern __attribute__((dllimport)) PFNGLBLENDEQUATIONIPROC __glewBlendEquationi;
extern __attribute__((dllimport)) PFNGLBLENDFUNCSEPARATEIPROC __glewBlendFuncSeparatei;
extern __attribute__((dllimport)) PFNGLBLENDFUNCIPROC __glewBlendFunci;
extern __attribute__((dllimport)) PFNGLMINSAMPLESHADINGPROC __glewMinSampleShading;

extern __attribute__((dllimport)) PFNGLGETGRAPHICSRESETSTATUSPROC __glewGetGraphicsResetStatus;
extern __attribute__((dllimport)) PFNGLGETNCOMPRESSEDTEXIMAGEPROC __glewGetnCompressedTexImage;
extern __attribute__((dllimport)) PFNGLGETNTEXIMAGEPROC __glewGetnTexImage;
extern __attribute__((dllimport)) PFNGLGETNUNIFORMDVPROC __glewGetnUniformdv;

extern __attribute__((dllimport)) PFNGLTBUFFERMASK3DFXPROC __glewTbufferMask3DFX;

extern __attribute__((dllimport)) PFNGLDEBUGMESSAGECALLBACKAMDPROC __glewDebugMessageCallbackAMD;
extern __attribute__((dllimport)) PFNGLDEBUGMESSAGEENABLEAMDPROC __glewDebugMessageEnableAMD;
extern __attribute__((dllimport)) PFNGLDEBUGMESSAGEINSERTAMDPROC __glewDebugMessageInsertAMD;
extern __attribute__((dllimport)) PFNGLGETDEBUGMESSAGELOGAMDPROC __glewGetDebugMessageLogAMD;

extern __attribute__((dllimport)) PFNGLBLENDEQUATIONINDEXEDAMDPROC __glewBlendEquationIndexedAMD;
extern __attribute__((dllimport)) PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC __glewBlendEquationSeparateIndexedAMD;
extern __attribute__((dllimport)) PFNGLBLENDFUNCINDEXEDAMDPROC __glewBlendFuncIndexedAMD;
extern __attribute__((dllimport)) PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC __glewBlendFuncSeparateIndexedAMD;

extern __attribute__((dllimport)) PFNGLVERTEXATTRIBPARAMETERIAMDPROC __glewVertexAttribParameteriAMD;

extern __attribute__((dllimport)) PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC __glewMultiDrawArraysIndirectAMD;
extern __attribute__((dllimport)) PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC __glewMultiDrawElementsIndirectAMD;

extern __attribute__((dllimport)) PFNGLDELETENAMESAMDPROC __glewDeleteNamesAMD;
extern __attribute__((dllimport)) PFNGLGENNAMESAMDPROC __glewGenNamesAMD;
extern __attribute__((dllimport)) PFNGLISNAMEAMDPROC __glewIsNameAMD;

extern __attribute__((dllimport)) PFNGLQUERYOBJECTPARAMETERUIAMDPROC __glewQueryObjectParameteruiAMD;

extern __attribute__((dllimport)) PFNGLBEGINPERFMONITORAMDPROC __glewBeginPerfMonitorAMD;
extern __attribute__((dllimport)) PFNGLDELETEPERFMONITORSAMDPROC __glewDeletePerfMonitorsAMD;
extern __attribute__((dllimport)) PFNGLENDPERFMONITORAMDPROC __glewEndPerfMonitorAMD;
extern __attribute__((dllimport)) PFNGLGENPERFMONITORSAMDPROC __glewGenPerfMonitorsAMD;
extern __attribute__((dllimport)) PFNGLGETPERFMONITORCOUNTERDATAAMDPROC __glewGetPerfMonitorCounterDataAMD;
extern __attribute__((dllimport)) PFNGLGETPERFMONITORCOUNTERINFOAMDPROC __glewGetPerfMonitorCounterInfoAMD;
extern __attribute__((dllimport)) PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC __glewGetPerfMonitorCounterStringAMD;
extern __attribute__((dllimport)) PFNGLGETPERFMONITORCOUNTERSAMDPROC __glewGetPerfMonitorCountersAMD;
extern __attribute__((dllimport)) PFNGLGETPERFMONITORGROUPSTRINGAMDPROC __glewGetPerfMonitorGroupStringAMD;
extern __attribute__((dllimport)) PFNGLGETPERFMONITORGROUPSAMDPROC __glewGetPerfMonitorGroupsAMD;
extern __attribute__((dllimport)) PFNGLSELECTPERFMONITORCOUNTERSAMDPROC __glewSelectPerfMonitorCountersAMD;

extern __attribute__((dllimport)) PFNGLSETMULTISAMPLEFVAMDPROC __glewSetMultisamplefvAMD;

extern __attribute__((dllimport)) PFNGLTEXSTORAGESPARSEAMDPROC __glewTexStorageSparseAMD;
extern __attribute__((dllimport)) PFNGLTEXTURESTORAGESPARSEAMDPROC __glewTextureStorageSparseAMD;

extern __attribute__((dllimport)) PFNGLSTENCILOPVALUEAMDPROC __glewStencilOpValueAMD;

extern __attribute__((dllimport)) PFNGLTESSELLATIONFACTORAMDPROC __glewTessellationFactorAMD;
extern __attribute__((dllimport)) PFNGLTESSELLATIONMODEAMDPROC __glewTessellationModeAMD;

extern __attribute__((dllimport)) PFNGLBLITFRAMEBUFFERANGLEPROC __glewBlitFramebufferANGLE;

extern __attribute__((dllimport)) PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC __glewRenderbufferStorageMultisampleANGLE;

extern __attribute__((dllimport)) PFNGLDRAWARRAYSINSTANCEDANGLEPROC __glewDrawArraysInstancedANGLE;
extern __attribute__((dllimport)) PFNGLDRAWELEMENTSINSTANCEDANGLEPROC __glewDrawElementsInstancedANGLE;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBDIVISORANGLEPROC __glewVertexAttribDivisorANGLE;

extern __attribute__((dllimport)) PFNGLBEGINQUERYANGLEPROC __glewBeginQueryANGLE;
extern __attribute__((dllimport)) PFNGLDELETEQUERIESANGLEPROC __glewDeleteQueriesANGLE;
extern __attribute__((dllimport)) PFNGLENDQUERYANGLEPROC __glewEndQueryANGLE;
extern __attribute__((dllimport)) PFNGLGENQUERIESANGLEPROC __glewGenQueriesANGLE;
extern __attribute__((dllimport)) PFNGLGETQUERYOBJECTI64VANGLEPROC __glewGetQueryObjecti64vANGLE;
extern __attribute__((dllimport)) PFNGLGETQUERYOBJECTIVANGLEPROC __glewGetQueryObjectivANGLE;
extern __attribute__((dllimport)) PFNGLGETQUERYOBJECTUI64VANGLEPROC __glewGetQueryObjectui64vANGLE;
extern __attribute__((dllimport)) PFNGLGETQUERYOBJECTUIVANGLEPROC __glewGetQueryObjectuivANGLE;
extern __attribute__((dllimport)) PFNGLGETQUERYIVANGLEPROC __glewGetQueryivANGLE;
extern __attribute__((dllimport)) PFNGLISQUERYANGLEPROC __glewIsQueryANGLE;
extern __attribute__((dllimport)) PFNGLQUERYCOUNTERANGLEPROC __glewQueryCounterANGLE;

extern __attribute__((dllimport)) PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC __glewGetTranslatedShaderSourceANGLE;

extern __attribute__((dllimport)) PFNGLDRAWELEMENTARRAYAPPLEPROC __glewDrawElementArrayAPPLE;
extern __attribute__((dllimport)) PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC __glewDrawRangeElementArrayAPPLE;
extern __attribute__((dllimport)) PFNGLELEMENTPOINTERAPPLEPROC __glewElementPointerAPPLE;
extern __attribute__((dllimport)) PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC __glewMultiDrawElementArrayAPPLE;
extern __attribute__((dllimport)) PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC __glewMultiDrawRangeElementArrayAPPLE;

extern __attribute__((dllimport)) PFNGLDELETEFENCESAPPLEPROC __glewDeleteFencesAPPLE;
extern __attribute__((dllimport)) PFNGLFINISHFENCEAPPLEPROC __glewFinishFenceAPPLE;
extern __attribute__((dllimport)) PFNGLFINISHOBJECTAPPLEPROC __glewFinishObjectAPPLE;
extern __attribute__((dllimport)) PFNGLGENFENCESAPPLEPROC __glewGenFencesAPPLE;
extern __attribute__((dllimport)) PFNGLISFENCEAPPLEPROC __glewIsFenceAPPLE;
extern __attribute__((dllimport)) PFNGLSETFENCEAPPLEPROC __glewSetFenceAPPLE;
extern __attribute__((dllimport)) PFNGLTESTFENCEAPPLEPROC __glewTestFenceAPPLE;
extern __attribute__((dllimport)) PFNGLTESTOBJECTAPPLEPROC __glewTestObjectAPPLE;

extern __attribute__((dllimport)) PFNGLBUFFERPARAMETERIAPPLEPROC __glewBufferParameteriAPPLE;
extern __attribute__((dllimport)) PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC __glewFlushMappedBufferRangeAPPLE;

extern __attribute__((dllimport)) PFNGLGETOBJECTPARAMETERIVAPPLEPROC __glewGetObjectParameterivAPPLE;
extern __attribute__((dllimport)) PFNGLOBJECTPURGEABLEAPPLEPROC __glewObjectPurgeableAPPLE;
extern __attribute__((dllimport)) PFNGLOBJECTUNPURGEABLEAPPLEPROC __glewObjectUnpurgeableAPPLE;

extern __attribute__((dllimport)) PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC __glewGetTexParameterPointervAPPLE;
extern __attribute__((dllimport)) PFNGLTEXTURERANGEAPPLEPROC __glewTextureRangeAPPLE;

extern __attribute__((dllimport)) PFNGLBINDVERTEXARRAYAPPLEPROC __glewBindVertexArrayAPPLE;
extern __attribute__((dllimport)) PFNGLDELETEVERTEXARRAYSAPPLEPROC __glewDeleteVertexArraysAPPLE;
extern __attribute__((dllimport)) PFNGLGENVERTEXARRAYSAPPLEPROC __glewGenVertexArraysAPPLE;
extern __attribute__((dllimport)) PFNGLISVERTEXARRAYAPPLEPROC __glewIsVertexArrayAPPLE;

extern __attribute__((dllimport)) PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC __glewFlushVertexArrayRangeAPPLE;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYPARAMETERIAPPLEPROC __glewVertexArrayParameteriAPPLE;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYRANGEAPPLEPROC __glewVertexArrayRangeAPPLE;

extern __attribute__((dllimport)) PFNGLDISABLEVERTEXATTRIBAPPLEPROC __glewDisableVertexAttribAPPLE;
extern __attribute__((dllimport)) PFNGLENABLEVERTEXATTRIBAPPLEPROC __glewEnableVertexAttribAPPLE;
extern __attribute__((dllimport)) PFNGLISVERTEXATTRIBENABLEDAPPLEPROC __glewIsVertexAttribEnabledAPPLE;
extern __attribute__((dllimport)) PFNGLMAPVERTEXATTRIB1DAPPLEPROC __glewMapVertexAttrib1dAPPLE;
extern __attribute__((dllimport)) PFNGLMAPVERTEXATTRIB1FAPPLEPROC __glewMapVertexAttrib1fAPPLE;
extern __attribute__((dllimport)) PFNGLMAPVERTEXATTRIB2DAPPLEPROC __glewMapVertexAttrib2dAPPLE;
extern __attribute__((dllimport)) PFNGLMAPVERTEXATTRIB2FAPPLEPROC __glewMapVertexAttrib2fAPPLE;

extern __attribute__((dllimport)) PFNGLCLEARDEPTHFPROC __glewClearDepthf;
extern __attribute__((dllimport)) PFNGLDEPTHRANGEFPROC __glewDepthRangef;
extern __attribute__((dllimport)) PFNGLGETSHADERPRECISIONFORMATPROC __glewGetShaderPrecisionFormat;
extern __attribute__((dllimport)) PFNGLRELEASESHADERCOMPILERPROC __glewReleaseShaderCompiler;
extern __attribute__((dllimport)) PFNGLSHADERBINARYPROC __glewShaderBinary;

extern __attribute__((dllimport)) PFNGLMEMORYBARRIERBYREGIONPROC __glewMemoryBarrierByRegion;

extern __attribute__((dllimport)) PFNGLPRIMITIVEBOUNDINGBOXARBPROC __glewPrimitiveBoundingBoxARB;

extern __attribute__((dllimport)) PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC __glewDrawArraysInstancedBaseInstance;
extern __attribute__((dllimport)) PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC __glewDrawElementsInstancedBaseInstance;
extern __attribute__((dllimport)) PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC __glewDrawElementsInstancedBaseVertexBaseInstance;

extern __attribute__((dllimport)) PFNGLGETIMAGEHANDLEARBPROC __glewGetImageHandleARB;
extern __attribute__((dllimport)) PFNGLGETTEXTUREHANDLEARBPROC __glewGetTextureHandleARB;
extern __attribute__((dllimport)) PFNGLGETTEXTURESAMPLERHANDLEARBPROC __glewGetTextureSamplerHandleARB;
extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBLUI64VARBPROC __glewGetVertexAttribLui64vARB;
extern __attribute__((dllimport)) PFNGLISIMAGEHANDLERESIDENTARBPROC __glewIsImageHandleResidentARB;
extern __attribute__((dllimport)) PFNGLISTEXTUREHANDLERESIDENTARBPROC __glewIsTextureHandleResidentARB;
extern __attribute__((dllimport)) PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC __glewMakeImageHandleNonResidentARB;
extern __attribute__((dllimport)) PFNGLMAKEIMAGEHANDLERESIDENTARBPROC __glewMakeImageHandleResidentARB;
extern __attribute__((dllimport)) PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC __glewMakeTextureHandleNonResidentARB;
extern __attribute__((dllimport)) PFNGLMAKETEXTUREHANDLERESIDENTARBPROC __glewMakeTextureHandleResidentARB;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC __glewProgramUniformHandleui64ARB;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC __glewProgramUniformHandleui64vARB;
extern __attribute__((dllimport)) PFNGLUNIFORMHANDLEUI64ARBPROC __glewUniformHandleui64ARB;
extern __attribute__((dllimport)) PFNGLUNIFORMHANDLEUI64VARBPROC __glewUniformHandleui64vARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL1UI64ARBPROC __glewVertexAttribL1ui64ARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL1UI64VARBPROC __glewVertexAttribL1ui64vARB;

extern __attribute__((dllimport)) PFNGLBINDFRAGDATALOCATIONINDEXEDPROC __glewBindFragDataLocationIndexed;
extern __attribute__((dllimport)) PFNGLGETFRAGDATAINDEXPROC __glewGetFragDataIndex;

extern __attribute__((dllimport)) PFNGLBUFFERSTORAGEPROC __glewBufferStorage;
extern __attribute__((dllimport)) PFNGLNAMEDBUFFERSTORAGEEXTPROC __glewNamedBufferStorageEXT;

extern __attribute__((dllimport)) PFNGLCREATESYNCFROMCLEVENTARBPROC __glewCreateSyncFromCLeventARB;

extern __attribute__((dllimport)) PFNGLCLEARBUFFERDATAPROC __glewClearBufferData;
extern __attribute__((dllimport)) PFNGLCLEARBUFFERSUBDATAPROC __glewClearBufferSubData;
extern __attribute__((dllimport)) PFNGLCLEARNAMEDBUFFERDATAEXTPROC __glewClearNamedBufferDataEXT;
extern __attribute__((dllimport)) PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC __glewClearNamedBufferSubDataEXT;

extern __attribute__((dllimport)) PFNGLCLEARTEXIMAGEPROC __glewClearTexImage;
extern __attribute__((dllimport)) PFNGLCLEARTEXSUBIMAGEPROC __glewClearTexSubImage;

extern __attribute__((dllimport)) PFNGLCLIPCONTROLPROC __glewClipControl;

extern __attribute__((dllimport)) PFNGLCLAMPCOLORARBPROC __glewClampColorARB;

extern __attribute__((dllimport)) PFNGLDISPATCHCOMPUTEPROC __glewDispatchCompute;
extern __attribute__((dllimport)) PFNGLDISPATCHCOMPUTEINDIRECTPROC __glewDispatchComputeIndirect;

extern __attribute__((dllimport)) PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC __glewDispatchComputeGroupSizeARB;

extern __attribute__((dllimport)) PFNGLCOPYBUFFERSUBDATAPROC __glewCopyBufferSubData;

extern __attribute__((dllimport)) PFNGLCOPYIMAGESUBDATAPROC __glewCopyImageSubData;

extern __attribute__((dllimport)) PFNGLDEBUGMESSAGECALLBACKARBPROC __glewDebugMessageCallbackARB;
extern __attribute__((dllimport)) PFNGLDEBUGMESSAGECONTROLARBPROC __glewDebugMessageControlARB;
extern __attribute__((dllimport)) PFNGLDEBUGMESSAGEINSERTARBPROC __glewDebugMessageInsertARB;
extern __attribute__((dllimport)) PFNGLGETDEBUGMESSAGELOGARBPROC __glewGetDebugMessageLogARB;

extern __attribute__((dllimport)) PFNGLBINDTEXTUREUNITPROC __glewBindTextureUnit;
extern __attribute__((dllimport)) PFNGLBLITNAMEDFRAMEBUFFERPROC __glewBlitNamedFramebuffer;
extern __attribute__((dllimport)) PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC __glewCheckNamedFramebufferStatus;
extern __attribute__((dllimport)) PFNGLCLEARNAMEDBUFFERDATAPROC __glewClearNamedBufferData;
extern __attribute__((dllimport)) PFNGLCLEARNAMEDBUFFERSUBDATAPROC __glewClearNamedBufferSubData;
extern __attribute__((dllimport)) PFNGLCLEARNAMEDFRAMEBUFFERFIPROC __glewClearNamedFramebufferfi;
extern __attribute__((dllimport)) PFNGLCLEARNAMEDFRAMEBUFFERFVPROC __glewClearNamedFramebufferfv;
extern __attribute__((dllimport)) PFNGLCLEARNAMEDFRAMEBUFFERIVPROC __glewClearNamedFramebufferiv;
extern __attribute__((dllimport)) PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC __glewClearNamedFramebufferuiv;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC __glewCompressedTextureSubImage1D;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC __glewCompressedTextureSubImage2D;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC __glewCompressedTextureSubImage3D;
extern __attribute__((dllimport)) PFNGLCOPYNAMEDBUFFERSUBDATAPROC __glewCopyNamedBufferSubData;
extern __attribute__((dllimport)) PFNGLCOPYTEXTURESUBIMAGE1DPROC __glewCopyTextureSubImage1D;
extern __attribute__((dllimport)) PFNGLCOPYTEXTURESUBIMAGE2DPROC __glewCopyTextureSubImage2D;
extern __attribute__((dllimport)) PFNGLCOPYTEXTURESUBIMAGE3DPROC __glewCopyTextureSubImage3D;
extern __attribute__((dllimport)) PFNGLCREATEBUFFERSPROC __glewCreateBuffers;
extern __attribute__((dllimport)) PFNGLCREATEFRAMEBUFFERSPROC __glewCreateFramebuffers;
extern __attribute__((dllimport)) PFNGLCREATEPROGRAMPIPELINESPROC __glewCreateProgramPipelines;
extern __attribute__((dllimport)) PFNGLCREATEQUERIESPROC __glewCreateQueries;
extern __attribute__((dllimport)) PFNGLCREATERENDERBUFFERSPROC __glewCreateRenderbuffers;
extern __attribute__((dllimport)) PFNGLCREATESAMPLERSPROC __glewCreateSamplers;
extern __attribute__((dllimport)) PFNGLCREATETEXTURESPROC __glewCreateTextures;
extern __attribute__((dllimport)) PFNGLCREATETRANSFORMFEEDBACKSPROC __glewCreateTransformFeedbacks;
extern __attribute__((dllimport)) PFNGLCREATEVERTEXARRAYSPROC __glewCreateVertexArrays;
extern __attribute__((dllimport)) PFNGLDISABLEVERTEXARRAYATTRIBPROC __glewDisableVertexArrayAttrib;
extern __attribute__((dllimport)) PFNGLENABLEVERTEXARRAYATTRIBPROC __glewEnableVertexArrayAttrib;
extern __attribute__((dllimport)) PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC __glewFlushMappedNamedBufferRange;
extern __attribute__((dllimport)) PFNGLGENERATETEXTUREMIPMAPPROC __glewGenerateTextureMipmap;
extern __attribute__((dllimport)) PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC __glewGetCompressedTextureImage;
extern __attribute__((dllimport)) PFNGLGETNAMEDBUFFERPARAMETERI64VPROC __glewGetNamedBufferParameteri64v;
extern __attribute__((dllimport)) PFNGLGETNAMEDBUFFERPARAMETERIVPROC __glewGetNamedBufferParameteriv;
extern __attribute__((dllimport)) PFNGLGETNAMEDBUFFERPOINTERVPROC __glewGetNamedBufferPointerv;
extern __attribute__((dllimport)) PFNGLGETNAMEDBUFFERSUBDATAPROC __glewGetNamedBufferSubData;
extern __attribute__((dllimport)) PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC __glewGetNamedFramebufferAttachmentParameteriv;
extern __attribute__((dllimport)) PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC __glewGetNamedFramebufferParameteriv;
extern __attribute__((dllimport)) PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC __glewGetNamedRenderbufferParameteriv;
extern __attribute__((dllimport)) PFNGLGETQUERYBUFFEROBJECTI64VPROC __glewGetQueryBufferObjecti64v;
extern __attribute__((dllimport)) PFNGLGETQUERYBUFFEROBJECTIVPROC __glewGetQueryBufferObjectiv;
extern __attribute__((dllimport)) PFNGLGETQUERYBUFFEROBJECTUI64VPROC __glewGetQueryBufferObjectui64v;
extern __attribute__((dllimport)) PFNGLGETQUERYBUFFEROBJECTUIVPROC __glewGetQueryBufferObjectuiv;
extern __attribute__((dllimport)) PFNGLGETTEXTUREIMAGEPROC __glewGetTextureImage;
extern __attribute__((dllimport)) PFNGLGETTEXTURELEVELPARAMETERFVPROC __glewGetTextureLevelParameterfv;
extern __attribute__((dllimport)) PFNGLGETTEXTURELEVELPARAMETERIVPROC __glewGetTextureLevelParameteriv;
extern __attribute__((dllimport)) PFNGLGETTEXTUREPARAMETERIIVPROC __glewGetTextureParameterIiv;
extern __attribute__((dllimport)) PFNGLGETTEXTUREPARAMETERIUIVPROC __glewGetTextureParameterIuiv;
extern __attribute__((dllimport)) PFNGLGETTEXTUREPARAMETERFVPROC __glewGetTextureParameterfv;
extern __attribute__((dllimport)) PFNGLGETTEXTUREPARAMETERIVPROC __glewGetTextureParameteriv;
extern __attribute__((dllimport)) PFNGLGETTRANSFORMFEEDBACKI64_VPROC __glewGetTransformFeedbacki64_v;
extern __attribute__((dllimport)) PFNGLGETTRANSFORMFEEDBACKI_VPROC __glewGetTransformFeedbacki_v;
extern __attribute__((dllimport)) PFNGLGETTRANSFORMFEEDBACKIVPROC __glewGetTransformFeedbackiv;
extern __attribute__((dllimport)) PFNGLGETVERTEXARRAYINDEXED64IVPROC __glewGetVertexArrayIndexed64iv;
extern __attribute__((dllimport)) PFNGLGETVERTEXARRAYINDEXEDIVPROC __glewGetVertexArrayIndexediv;
extern __attribute__((dllimport)) PFNGLGETVERTEXARRAYIVPROC __glewGetVertexArrayiv;
extern __attribute__((dllimport)) PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC __glewInvalidateNamedFramebufferData;
extern __attribute__((dllimport)) PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC __glewInvalidateNamedFramebufferSubData;
extern __attribute__((dllimport)) PFNGLMAPNAMEDBUFFERPROC __glewMapNamedBuffer;
extern __attribute__((dllimport)) PFNGLMAPNAMEDBUFFERRANGEPROC __glewMapNamedBufferRange;
extern __attribute__((dllimport)) PFNGLNAMEDBUFFERDATAPROC __glewNamedBufferData;
extern __attribute__((dllimport)) PFNGLNAMEDBUFFERSTORAGEPROC __glewNamedBufferStorage;
extern __attribute__((dllimport)) PFNGLNAMEDBUFFERSUBDATAPROC __glewNamedBufferSubData;
extern __attribute__((dllimport)) PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC __glewNamedFramebufferDrawBuffer;
extern __attribute__((dllimport)) PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC __glewNamedFramebufferDrawBuffers;
extern __attribute__((dllimport)) PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC __glewNamedFramebufferParameteri;
extern __attribute__((dllimport)) PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC __glewNamedFramebufferReadBuffer;
extern __attribute__((dllimport)) PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC __glewNamedFramebufferRenderbuffer;
extern __attribute__((dllimport)) PFNGLNAMEDFRAMEBUFFERTEXTUREPROC __glewNamedFramebufferTexture;
extern __attribute__((dllimport)) PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC __glewNamedFramebufferTextureLayer;
extern __attribute__((dllimport)) PFNGLNAMEDRENDERBUFFERSTORAGEPROC __glewNamedRenderbufferStorage;
extern __attribute__((dllimport)) PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC __glewNamedRenderbufferStorageMultisample;
extern __attribute__((dllimport)) PFNGLTEXTUREBUFFERPROC __glewTextureBuffer;
extern __attribute__((dllimport)) PFNGLTEXTUREBUFFERRANGEPROC __glewTextureBufferRange;
extern __attribute__((dllimport)) PFNGLTEXTUREPARAMETERIIVPROC __glewTextureParameterIiv;
extern __attribute__((dllimport)) PFNGLTEXTUREPARAMETERIUIVPROC __glewTextureParameterIuiv;
extern __attribute__((dllimport)) PFNGLTEXTUREPARAMETERFPROC __glewTextureParameterf;
extern __attribute__((dllimport)) PFNGLTEXTUREPARAMETERFVPROC __glewTextureParameterfv;
extern __attribute__((dllimport)) PFNGLTEXTUREPARAMETERIPROC __glewTextureParameteri;
extern __attribute__((dllimport)) PFNGLTEXTUREPARAMETERIVPROC __glewTextureParameteriv;
extern __attribute__((dllimport)) PFNGLTEXTURESTORAGE1DPROC __glewTextureStorage1D;
extern __attribute__((dllimport)) PFNGLTEXTURESTORAGE2DPROC __glewTextureStorage2D;
extern __attribute__((dllimport)) PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC __glewTextureStorage2DMultisample;
extern __attribute__((dllimport)) PFNGLTEXTURESTORAGE3DPROC __glewTextureStorage3D;
extern __attribute__((dllimport)) PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC __glewTextureStorage3DMultisample;
extern __attribute__((dllimport)) PFNGLTEXTURESUBIMAGE1DPROC __glewTextureSubImage1D;
extern __attribute__((dllimport)) PFNGLTEXTURESUBIMAGE2DPROC __glewTextureSubImage2D;
extern __attribute__((dllimport)) PFNGLTEXTURESUBIMAGE3DPROC __glewTextureSubImage3D;
extern __attribute__((dllimport)) PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC __glewTransformFeedbackBufferBase;
extern __attribute__((dllimport)) PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC __glewTransformFeedbackBufferRange;
extern __attribute__((dllimport)) PFNGLUNMAPNAMEDBUFFERPROC __glewUnmapNamedBuffer;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYATTRIBBINDINGPROC __glewVertexArrayAttribBinding;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYATTRIBFORMATPROC __glewVertexArrayAttribFormat;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYATTRIBIFORMATPROC __glewVertexArrayAttribIFormat;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYATTRIBLFORMATPROC __glewVertexArrayAttribLFormat;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYBINDINGDIVISORPROC __glewVertexArrayBindingDivisor;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYELEMENTBUFFERPROC __glewVertexArrayElementBuffer;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYVERTEXBUFFERPROC __glewVertexArrayVertexBuffer;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYVERTEXBUFFERSPROC __glewVertexArrayVertexBuffers;

extern __attribute__((dllimport)) PFNGLDRAWBUFFERSARBPROC __glewDrawBuffersARB;

extern __attribute__((dllimport)) PFNGLBLENDEQUATIONSEPARATEIARBPROC __glewBlendEquationSeparateiARB;
extern __attribute__((dllimport)) PFNGLBLENDEQUATIONIARBPROC __glewBlendEquationiARB;
extern __attribute__((dllimport)) PFNGLBLENDFUNCSEPARATEIARBPROC __glewBlendFuncSeparateiARB;
extern __attribute__((dllimport)) PFNGLBLENDFUNCIARBPROC __glewBlendFunciARB;

extern __attribute__((dllimport)) PFNGLDRAWELEMENTSBASEVERTEXPROC __glewDrawElementsBaseVertex;
extern __attribute__((dllimport)) PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC __glewDrawElementsInstancedBaseVertex;
extern __attribute__((dllimport)) PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC __glewDrawRangeElementsBaseVertex;
extern __attribute__((dllimport)) PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC __glewMultiDrawElementsBaseVertex;

extern __attribute__((dllimport)) PFNGLDRAWARRAYSINDIRECTPROC __glewDrawArraysIndirect;
extern __attribute__((dllimport)) PFNGLDRAWELEMENTSINDIRECTPROC __glewDrawElementsIndirect;

extern __attribute__((dllimport)) PFNGLFRAMEBUFFERPARAMETERIPROC __glewFramebufferParameteri;
extern __attribute__((dllimport)) PFNGLGETFRAMEBUFFERPARAMETERIVPROC __glewGetFramebufferParameteriv;
extern __attribute__((dllimport)) PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC __glewGetNamedFramebufferParameterivEXT;
extern __attribute__((dllimport)) PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC __glewNamedFramebufferParameteriEXT;

extern __attribute__((dllimport)) PFNGLBINDFRAMEBUFFERPROC __glewBindFramebuffer;
extern __attribute__((dllimport)) PFNGLBINDRENDERBUFFERPROC __glewBindRenderbuffer;
extern __attribute__((dllimport)) PFNGLBLITFRAMEBUFFERPROC __glewBlitFramebuffer;
extern __attribute__((dllimport)) PFNGLCHECKFRAMEBUFFERSTATUSPROC __glewCheckFramebufferStatus;
extern __attribute__((dllimport)) PFNGLDELETEFRAMEBUFFERSPROC __glewDeleteFramebuffers;
extern __attribute__((dllimport)) PFNGLDELETERENDERBUFFERSPROC __glewDeleteRenderbuffers;
extern __attribute__((dllimport)) PFNGLFRAMEBUFFERRENDERBUFFERPROC __glewFramebufferRenderbuffer;
extern __attribute__((dllimport)) PFNGLFRAMEBUFFERTEXTURE1DPROC __glewFramebufferTexture1D;
extern __attribute__((dllimport)) PFNGLFRAMEBUFFERTEXTURE2DPROC __glewFramebufferTexture2D;
extern __attribute__((dllimport)) PFNGLFRAMEBUFFERTEXTURE3DPROC __glewFramebufferTexture3D;
extern __attribute__((dllimport)) PFNGLFRAMEBUFFERTEXTURELAYERPROC __glewFramebufferTextureLayer;
extern __attribute__((dllimport)) PFNGLGENFRAMEBUFFERSPROC __glewGenFramebuffers;
extern __attribute__((dllimport)) PFNGLGENRENDERBUFFERSPROC __glewGenRenderbuffers;
extern __attribute__((dllimport)) PFNGLGENERATEMIPMAPPROC __glewGenerateMipmap;
extern __attribute__((dllimport)) PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC __glewGetFramebufferAttachmentParameteriv;
extern __attribute__((dllimport)) PFNGLGETRENDERBUFFERPARAMETERIVPROC __glewGetRenderbufferParameteriv;
extern __attribute__((dllimport)) PFNGLISFRAMEBUFFERPROC __glewIsFramebuffer;
extern __attribute__((dllimport)) PFNGLISRENDERBUFFERPROC __glewIsRenderbuffer;
extern __attribute__((dllimport)) PFNGLRENDERBUFFERSTORAGEPROC __glewRenderbufferStorage;
extern __attribute__((dllimport)) PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC __glewRenderbufferStorageMultisample;

extern __attribute__((dllimport)) PFNGLFRAMEBUFFERTEXTUREARBPROC __glewFramebufferTextureARB;
extern __attribute__((dllimport)) PFNGLFRAMEBUFFERTEXTUREFACEARBPROC __glewFramebufferTextureFaceARB;
extern __attribute__((dllimport)) PFNGLFRAMEBUFFERTEXTURELAYERARBPROC __glewFramebufferTextureLayerARB;
extern __attribute__((dllimport)) PFNGLPROGRAMPARAMETERIARBPROC __glewProgramParameteriARB;

extern __attribute__((dllimport)) PFNGLGETPROGRAMBINARYPROC __glewGetProgramBinary;
extern __attribute__((dllimport)) PFNGLPROGRAMBINARYPROC __glewProgramBinary;
extern __attribute__((dllimport)) PFNGLPROGRAMPARAMETERIPROC __glewProgramParameteri;

extern __attribute__((dllimport)) PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC __glewGetCompressedTextureSubImage;
extern __attribute__((dllimport)) PFNGLGETTEXTURESUBIMAGEPROC __glewGetTextureSubImage;

extern __attribute__((dllimport)) PFNGLGETUNIFORMDVPROC __glewGetUniformdv;
extern __attribute__((dllimport)) PFNGLUNIFORM1DPROC __glewUniform1d;
extern __attribute__((dllimport)) PFNGLUNIFORM1DVPROC __glewUniform1dv;
extern __attribute__((dllimport)) PFNGLUNIFORM2DPROC __glewUniform2d;
extern __attribute__((dllimport)) PFNGLUNIFORM2DVPROC __glewUniform2dv;
extern __attribute__((dllimport)) PFNGLUNIFORM3DPROC __glewUniform3d;
extern __attribute__((dllimport)) PFNGLUNIFORM3DVPROC __glewUniform3dv;
extern __attribute__((dllimport)) PFNGLUNIFORM4DPROC __glewUniform4d;
extern __attribute__((dllimport)) PFNGLUNIFORM4DVPROC __glewUniform4dv;
extern __attribute__((dllimport)) PFNGLUNIFORMMATRIX2DVPROC __glewUniformMatrix2dv;
extern __attribute__((dllimport)) PFNGLUNIFORMMATRIX2X3DVPROC __glewUniformMatrix2x3dv;
extern __attribute__((dllimport)) PFNGLUNIFORMMATRIX2X4DVPROC __glewUniformMatrix2x4dv;
extern __attribute__((dllimport)) PFNGLUNIFORMMATRIX3DVPROC __glewUniformMatrix3dv;
extern __attribute__((dllimport)) PFNGLUNIFORMMATRIX3X2DVPROC __glewUniformMatrix3x2dv;
extern __attribute__((dllimport)) PFNGLUNIFORMMATRIX3X4DVPROC __glewUniformMatrix3x4dv;
extern __attribute__((dllimport)) PFNGLUNIFORMMATRIX4DVPROC __glewUniformMatrix4dv;
extern __attribute__((dllimport)) PFNGLUNIFORMMATRIX4X2DVPROC __glewUniformMatrix4x2dv;
extern __attribute__((dllimport)) PFNGLUNIFORMMATRIX4X3DVPROC __glewUniformMatrix4x3dv;

extern __attribute__((dllimport)) PFNGLGETUNIFORMI64VARBPROC __glewGetUniformi64vARB;
extern __attribute__((dllimport)) PFNGLGETUNIFORMUI64VARBPROC __glewGetUniformui64vARB;
extern __attribute__((dllimport)) PFNGLGETNUNIFORMI64VARBPROC __glewGetnUniformi64vARB;
extern __attribute__((dllimport)) PFNGLGETNUNIFORMUI64VARBPROC __glewGetnUniformui64vARB;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM1I64ARBPROC __glewProgramUniform1i64ARB;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM1I64VARBPROC __glewProgramUniform1i64vARB;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM1UI64ARBPROC __glewProgramUniform1ui64ARB;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM1UI64VARBPROC __glewProgramUniform1ui64vARB;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM2I64ARBPROC __glewProgramUniform2i64ARB;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM2I64VARBPROC __glewProgramUniform2i64vARB;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM2UI64ARBPROC __glewProgramUniform2ui64ARB;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM2UI64VARBPROC __glewProgramUniform2ui64vARB;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM3I64ARBPROC __glewProgramUniform3i64ARB;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM3I64VARBPROC __glewProgramUniform3i64vARB;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM3UI64ARBPROC __glewProgramUniform3ui64ARB;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM3UI64VARBPROC __glewProgramUniform3ui64vARB;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM4I64ARBPROC __glewProgramUniform4i64ARB;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM4I64VARBPROC __glewProgramUniform4i64vARB;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM4UI64ARBPROC __glewProgramUniform4ui64ARB;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM4UI64VARBPROC __glewProgramUniform4ui64vARB;
extern __attribute__((dllimport)) PFNGLUNIFORM1I64ARBPROC __glewUniform1i64ARB;
extern __attribute__((dllimport)) PFNGLUNIFORM1I64VARBPROC __glewUniform1i64vARB;
extern __attribute__((dllimport)) PFNGLUNIFORM1UI64ARBPROC __glewUniform1ui64ARB;
extern __attribute__((dllimport)) PFNGLUNIFORM1UI64VARBPROC __glewUniform1ui64vARB;
extern __attribute__((dllimport)) PFNGLUNIFORM2I64ARBPROC __glewUniform2i64ARB;
extern __attribute__((dllimport)) PFNGLUNIFORM2I64VARBPROC __glewUniform2i64vARB;
extern __attribute__((dllimport)) PFNGLUNIFORM2UI64ARBPROC __glewUniform2ui64ARB;
extern __attribute__((dllimport)) PFNGLUNIFORM2UI64VARBPROC __glewUniform2ui64vARB;
extern __attribute__((dllimport)) PFNGLUNIFORM3I64ARBPROC __glewUniform3i64ARB;
extern __attribute__((dllimport)) PFNGLUNIFORM3I64VARBPROC __glewUniform3i64vARB;
extern __attribute__((dllimport)) PFNGLUNIFORM3UI64ARBPROC __glewUniform3ui64ARB;
extern __attribute__((dllimport)) PFNGLUNIFORM3UI64VARBPROC __glewUniform3ui64vARB;
extern __attribute__((dllimport)) PFNGLUNIFORM4I64ARBPROC __glewUniform4i64ARB;
extern __attribute__((dllimport)) PFNGLUNIFORM4I64VARBPROC __glewUniform4i64vARB;
extern __attribute__((dllimport)) PFNGLUNIFORM4UI64ARBPROC __glewUniform4ui64ARB;
extern __attribute__((dllimport)) PFNGLUNIFORM4UI64VARBPROC __glewUniform4ui64vARB;

extern __attribute__((dllimport)) PFNGLCOLORSUBTABLEPROC __glewColorSubTable;
extern __attribute__((dllimport)) PFNGLCOLORTABLEPROC __glewColorTable;
extern __attribute__((dllimport)) PFNGLCOLORTABLEPARAMETERFVPROC __glewColorTableParameterfv;
extern __attribute__((dllimport)) PFNGLCOLORTABLEPARAMETERIVPROC __glewColorTableParameteriv;
extern __attribute__((dllimport)) PFNGLCONVOLUTIONFILTER1DPROC __glewConvolutionFilter1D;
extern __attribute__((dllimport)) PFNGLCONVOLUTIONFILTER2DPROC __glewConvolutionFilter2D;
extern __attribute__((dllimport)) PFNGLCONVOLUTIONPARAMETERFPROC __glewConvolutionParameterf;
extern __attribute__((dllimport)) PFNGLCONVOLUTIONPARAMETERFVPROC __glewConvolutionParameterfv;
extern __attribute__((dllimport)) PFNGLCONVOLUTIONPARAMETERIPROC __glewConvolutionParameteri;
extern __attribute__((dllimport)) PFNGLCONVOLUTIONPARAMETERIVPROC __glewConvolutionParameteriv;
extern __attribute__((dllimport)) PFNGLCOPYCOLORSUBTABLEPROC __glewCopyColorSubTable;
extern __attribute__((dllimport)) PFNGLCOPYCOLORTABLEPROC __glewCopyColorTable;
extern __attribute__((dllimport)) PFNGLCOPYCONVOLUTIONFILTER1DPROC __glewCopyConvolutionFilter1D;
extern __attribute__((dllimport)) PFNGLCOPYCONVOLUTIONFILTER2DPROC __glewCopyConvolutionFilter2D;
extern __attribute__((dllimport)) PFNGLGETCOLORTABLEPROC __glewGetColorTable;
extern __attribute__((dllimport)) PFNGLGETCOLORTABLEPARAMETERFVPROC __glewGetColorTableParameterfv;
extern __attribute__((dllimport)) PFNGLGETCOLORTABLEPARAMETERIVPROC __glewGetColorTableParameteriv;
extern __attribute__((dllimport)) PFNGLGETCONVOLUTIONFILTERPROC __glewGetConvolutionFilter;
extern __attribute__((dllimport)) PFNGLGETCONVOLUTIONPARAMETERFVPROC __glewGetConvolutionParameterfv;
extern __attribute__((dllimport)) PFNGLGETCONVOLUTIONPARAMETERIVPROC __glewGetConvolutionParameteriv;
extern __attribute__((dllimport)) PFNGLGETHISTOGRAMPROC __glewGetHistogram;
extern __attribute__((dllimport)) PFNGLGETHISTOGRAMPARAMETERFVPROC __glewGetHistogramParameterfv;
extern __attribute__((dllimport)) PFNGLGETHISTOGRAMPARAMETERIVPROC __glewGetHistogramParameteriv;
extern __attribute__((dllimport)) PFNGLGETMINMAXPROC __glewGetMinmax;
extern __attribute__((dllimport)) PFNGLGETMINMAXPARAMETERFVPROC __glewGetMinmaxParameterfv;
extern __attribute__((dllimport)) PFNGLGETMINMAXPARAMETERIVPROC __glewGetMinmaxParameteriv;
extern __attribute__((dllimport)) PFNGLGETSEPARABLEFILTERPROC __glewGetSeparableFilter;
extern __attribute__((dllimport)) PFNGLHISTOGRAMPROC __glewHistogram;
extern __attribute__((dllimport)) PFNGLMINMAXPROC __glewMinmax;
extern __attribute__((dllimport)) PFNGLRESETHISTOGRAMPROC __glewResetHistogram;
extern __attribute__((dllimport)) PFNGLRESETMINMAXPROC __glewResetMinmax;
extern __attribute__((dllimport)) PFNGLSEPARABLEFILTER2DPROC __glewSeparableFilter2D;

extern __attribute__((dllimport)) PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC __glewMultiDrawArraysIndirectCountARB;
extern __attribute__((dllimport)) PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC __glewMultiDrawElementsIndirectCountARB;

extern __attribute__((dllimport)) PFNGLDRAWARRAYSINSTANCEDARBPROC __glewDrawArraysInstancedARB;
extern __attribute__((dllimport)) PFNGLDRAWELEMENTSINSTANCEDARBPROC __glewDrawElementsInstancedARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBDIVISORARBPROC __glewVertexAttribDivisorARB;

extern __attribute__((dllimport)) PFNGLGETINTERNALFORMATIVPROC __glewGetInternalformativ;

extern __attribute__((dllimport)) PFNGLGETINTERNALFORMATI64VPROC __glewGetInternalformati64v;

extern __attribute__((dllimport)) PFNGLINVALIDATEBUFFERDATAPROC __glewInvalidateBufferData;
extern __attribute__((dllimport)) PFNGLINVALIDATEBUFFERSUBDATAPROC __glewInvalidateBufferSubData;
extern __attribute__((dllimport)) PFNGLINVALIDATEFRAMEBUFFERPROC __glewInvalidateFramebuffer;
extern __attribute__((dllimport)) PFNGLINVALIDATESUBFRAMEBUFFERPROC __glewInvalidateSubFramebuffer;
extern __attribute__((dllimport)) PFNGLINVALIDATETEXIMAGEPROC __glewInvalidateTexImage;
extern __attribute__((dllimport)) PFNGLINVALIDATETEXSUBIMAGEPROC __glewInvalidateTexSubImage;

extern __attribute__((dllimport)) PFNGLFLUSHMAPPEDBUFFERRANGEPROC __glewFlushMappedBufferRange;
extern __attribute__((dllimport)) PFNGLMAPBUFFERRANGEPROC __glewMapBufferRange;

extern __attribute__((dllimport)) PFNGLCURRENTPALETTEMATRIXARBPROC __glewCurrentPaletteMatrixARB;
extern __attribute__((dllimport)) PFNGLMATRIXINDEXPOINTERARBPROC __glewMatrixIndexPointerARB;
extern __attribute__((dllimport)) PFNGLMATRIXINDEXUBVARBPROC __glewMatrixIndexubvARB;
extern __attribute__((dllimport)) PFNGLMATRIXINDEXUIVARBPROC __glewMatrixIndexuivARB;
extern __attribute__((dllimport)) PFNGLMATRIXINDEXUSVARBPROC __glewMatrixIndexusvARB;

extern __attribute__((dllimport)) PFNGLBINDBUFFERSBASEPROC __glewBindBuffersBase;
extern __attribute__((dllimport)) PFNGLBINDBUFFERSRANGEPROC __glewBindBuffersRange;
extern __attribute__((dllimport)) PFNGLBINDIMAGETEXTURESPROC __glewBindImageTextures;
extern __attribute__((dllimport)) PFNGLBINDSAMPLERSPROC __glewBindSamplers;
extern __attribute__((dllimport)) PFNGLBINDTEXTURESPROC __glewBindTextures;
extern __attribute__((dllimport)) PFNGLBINDVERTEXBUFFERSPROC __glewBindVertexBuffers;

extern __attribute__((dllimport)) PFNGLMULTIDRAWARRAYSINDIRECTPROC __glewMultiDrawArraysIndirect;
extern __attribute__((dllimport)) PFNGLMULTIDRAWELEMENTSINDIRECTPROC __glewMultiDrawElementsIndirect;

extern __attribute__((dllimport)) PFNGLSAMPLECOVERAGEARBPROC __glewSampleCoverageARB;

extern __attribute__((dllimport)) PFNGLACTIVETEXTUREARBPROC __glewActiveTextureARB;
extern __attribute__((dllimport)) PFNGLCLIENTACTIVETEXTUREARBPROC __glewClientActiveTextureARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD1DARBPROC __glewMultiTexCoord1dARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD1DVARBPROC __glewMultiTexCoord1dvARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD1FARBPROC __glewMultiTexCoord1fARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD1FVARBPROC __glewMultiTexCoord1fvARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD1IARBPROC __glewMultiTexCoord1iARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD1IVARBPROC __glewMultiTexCoord1ivARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD1SARBPROC __glewMultiTexCoord1sARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD1SVARBPROC __glewMultiTexCoord1svARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD2DARBPROC __glewMultiTexCoord2dARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD2DVARBPROC __glewMultiTexCoord2dvARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD2FARBPROC __glewMultiTexCoord2fARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD2FVARBPROC __glewMultiTexCoord2fvARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD2IARBPROC __glewMultiTexCoord2iARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD2IVARBPROC __glewMultiTexCoord2ivARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD2SARBPROC __glewMultiTexCoord2sARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD2SVARBPROC __glewMultiTexCoord2svARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD3DARBPROC __glewMultiTexCoord3dARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD3DVARBPROC __glewMultiTexCoord3dvARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD3FARBPROC __glewMultiTexCoord3fARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD3FVARBPROC __glewMultiTexCoord3fvARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD3IARBPROC __glewMultiTexCoord3iARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD3IVARBPROC __glewMultiTexCoord3ivARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD3SARBPROC __glewMultiTexCoord3sARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD3SVARBPROC __glewMultiTexCoord3svARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD4DARBPROC __glewMultiTexCoord4dARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD4DVARBPROC __glewMultiTexCoord4dvARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD4FARBPROC __glewMultiTexCoord4fARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD4FVARBPROC __glewMultiTexCoord4fvARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD4IARBPROC __glewMultiTexCoord4iARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD4IVARBPROC __glewMultiTexCoord4ivARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD4SARBPROC __glewMultiTexCoord4sARB;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD4SVARBPROC __glewMultiTexCoord4svARB;

extern __attribute__((dllimport)) PFNGLBEGINQUERYARBPROC __glewBeginQueryARB;
extern __attribute__((dllimport)) PFNGLDELETEQUERIESARBPROC __glewDeleteQueriesARB;
extern __attribute__((dllimport)) PFNGLENDQUERYARBPROC __glewEndQueryARB;
extern __attribute__((dllimport)) PFNGLGENQUERIESARBPROC __glewGenQueriesARB;
extern __attribute__((dllimport)) PFNGLGETQUERYOBJECTIVARBPROC __glewGetQueryObjectivARB;
extern __attribute__((dllimport)) PFNGLGETQUERYOBJECTUIVARBPROC __glewGetQueryObjectuivARB;
extern __attribute__((dllimport)) PFNGLGETQUERYIVARBPROC __glewGetQueryivARB;
extern __attribute__((dllimport)) PFNGLISQUERYARBPROC __glewIsQueryARB;

extern __attribute__((dllimport)) PFNGLMAXSHADERCOMPILERTHREADSARBPROC __glewMaxShaderCompilerThreadsARB;

extern __attribute__((dllimport)) PFNGLPOINTPARAMETERFARBPROC __glewPointParameterfARB;
extern __attribute__((dllimport)) PFNGLPOINTPARAMETERFVARBPROC __glewPointParameterfvARB;

extern __attribute__((dllimport)) PFNGLGETPROGRAMINTERFACEIVPROC __glewGetProgramInterfaceiv;
extern __attribute__((dllimport)) PFNGLGETPROGRAMRESOURCEINDEXPROC __glewGetProgramResourceIndex;
extern __attribute__((dllimport)) PFNGLGETPROGRAMRESOURCELOCATIONPROC __glewGetProgramResourceLocation;
extern __attribute__((dllimport)) PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC __glewGetProgramResourceLocationIndex;
extern __attribute__((dllimport)) PFNGLGETPROGRAMRESOURCENAMEPROC __glewGetProgramResourceName;
extern __attribute__((dllimport)) PFNGLGETPROGRAMRESOURCEIVPROC __glewGetProgramResourceiv;

extern __attribute__((dllimport)) PFNGLPROVOKINGVERTEXPROC __glewProvokingVertex;

extern __attribute__((dllimport)) PFNGLGETGRAPHICSRESETSTATUSARBPROC __glewGetGraphicsResetStatusARB;
extern __attribute__((dllimport)) PFNGLGETNCOLORTABLEARBPROC __glewGetnColorTableARB;
extern __attribute__((dllimport)) PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC __glewGetnCompressedTexImageARB;
extern __attribute__((dllimport)) PFNGLGETNCONVOLUTIONFILTERARBPROC __glewGetnConvolutionFilterARB;
extern __attribute__((dllimport)) PFNGLGETNHISTOGRAMARBPROC __glewGetnHistogramARB;
extern __attribute__((dllimport)) PFNGLGETNMAPDVARBPROC __glewGetnMapdvARB;
extern __attribute__((dllimport)) PFNGLGETNMAPFVARBPROC __glewGetnMapfvARB;
extern __attribute__((dllimport)) PFNGLGETNMAPIVARBPROC __glewGetnMapivARB;
extern __attribute__((dllimport)) PFNGLGETNMINMAXARBPROC __glewGetnMinmaxARB;
extern __attribute__((dllimport)) PFNGLGETNPIXELMAPFVARBPROC __glewGetnPixelMapfvARB;
extern __attribute__((dllimport)) PFNGLGETNPIXELMAPUIVARBPROC __glewGetnPixelMapuivARB;
extern __attribute__((dllimport)) PFNGLGETNPIXELMAPUSVARBPROC __glewGetnPixelMapusvARB;
extern __attribute__((dllimport)) PFNGLGETNPOLYGONSTIPPLEARBPROC __glewGetnPolygonStippleARB;
extern __attribute__((dllimport)) PFNGLGETNSEPARABLEFILTERARBPROC __glewGetnSeparableFilterARB;
extern __attribute__((dllimport)) PFNGLGETNTEXIMAGEARBPROC __glewGetnTexImageARB;
extern __attribute__((dllimport)) PFNGLGETNUNIFORMDVARBPROC __glewGetnUniformdvARB;
extern __attribute__((dllimport)) PFNGLGETNUNIFORMFVARBPROC __glewGetnUniformfvARB;
extern __attribute__((dllimport)) PFNGLGETNUNIFORMIVARBPROC __glewGetnUniformivARB;
extern __attribute__((dllimport)) PFNGLGETNUNIFORMUIVARBPROC __glewGetnUniformuivARB;
extern __attribute__((dllimport)) PFNGLREADNPIXELSARBPROC __glewReadnPixelsARB;

extern __attribute__((dllimport)) PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC __glewFramebufferSampleLocationsfvARB;
extern __attribute__((dllimport)) PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC __glewNamedFramebufferSampleLocationsfvARB;

extern __attribute__((dllimport)) PFNGLMINSAMPLESHADINGARBPROC __glewMinSampleShadingARB;

extern __attribute__((dllimport)) PFNGLBINDSAMPLERPROC __glewBindSampler;
extern __attribute__((dllimport)) PFNGLDELETESAMPLERSPROC __glewDeleteSamplers;
extern __attribute__((dllimport)) PFNGLGENSAMPLERSPROC __glewGenSamplers;
extern __attribute__((dllimport)) PFNGLGETSAMPLERPARAMETERIIVPROC __glewGetSamplerParameterIiv;
extern __attribute__((dllimport)) PFNGLGETSAMPLERPARAMETERIUIVPROC __glewGetSamplerParameterIuiv;
extern __attribute__((dllimport)) PFNGLGETSAMPLERPARAMETERFVPROC __glewGetSamplerParameterfv;
extern __attribute__((dllimport)) PFNGLGETSAMPLERPARAMETERIVPROC __glewGetSamplerParameteriv;
extern __attribute__((dllimport)) PFNGLISSAMPLERPROC __glewIsSampler;
extern __attribute__((dllimport)) PFNGLSAMPLERPARAMETERIIVPROC __glewSamplerParameterIiv;
extern __attribute__((dllimport)) PFNGLSAMPLERPARAMETERIUIVPROC __glewSamplerParameterIuiv;
extern __attribute__((dllimport)) PFNGLSAMPLERPARAMETERFPROC __glewSamplerParameterf;
extern __attribute__((dllimport)) PFNGLSAMPLERPARAMETERFVPROC __glewSamplerParameterfv;
extern __attribute__((dllimport)) PFNGLSAMPLERPARAMETERIPROC __glewSamplerParameteri;
extern __attribute__((dllimport)) PFNGLSAMPLERPARAMETERIVPROC __glewSamplerParameteriv;

extern __attribute__((dllimport)) PFNGLACTIVESHADERPROGRAMPROC __glewActiveShaderProgram;
extern __attribute__((dllimport)) PFNGLBINDPROGRAMPIPELINEPROC __glewBindProgramPipeline;
extern __attribute__((dllimport)) PFNGLCREATESHADERPROGRAMVPROC __glewCreateShaderProgramv;
extern __attribute__((dllimport)) PFNGLDELETEPROGRAMPIPELINESPROC __glewDeleteProgramPipelines;
extern __attribute__((dllimport)) PFNGLGENPROGRAMPIPELINESPROC __glewGenProgramPipelines;
extern __attribute__((dllimport)) PFNGLGETPROGRAMPIPELINEINFOLOGPROC __glewGetProgramPipelineInfoLog;
extern __attribute__((dllimport)) PFNGLGETPROGRAMPIPELINEIVPROC __glewGetProgramPipelineiv;
extern __attribute__((dllimport)) PFNGLISPROGRAMPIPELINEPROC __glewIsProgramPipeline;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM1DPROC __glewProgramUniform1d;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM1DVPROC __glewProgramUniform1dv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM1FPROC __glewProgramUniform1f;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM1FVPROC __glewProgramUniform1fv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM1IPROC __glewProgramUniform1i;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM1IVPROC __glewProgramUniform1iv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM1UIPROC __glewProgramUniform1ui;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM1UIVPROC __glewProgramUniform1uiv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM2DPROC __glewProgramUniform2d;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM2DVPROC __glewProgramUniform2dv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM2FPROC __glewProgramUniform2f;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM2FVPROC __glewProgramUniform2fv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM2IPROC __glewProgramUniform2i;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM2IVPROC __glewProgramUniform2iv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM2UIPROC __glewProgramUniform2ui;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM2UIVPROC __glewProgramUniform2uiv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM3DPROC __glewProgramUniform3d;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM3DVPROC __glewProgramUniform3dv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM3FPROC __glewProgramUniform3f;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM3FVPROC __glewProgramUniform3fv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM3IPROC __glewProgramUniform3i;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM3IVPROC __glewProgramUniform3iv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM3UIPROC __glewProgramUniform3ui;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM3UIVPROC __glewProgramUniform3uiv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM4DPROC __glewProgramUniform4d;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM4DVPROC __glewProgramUniform4dv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM4FPROC __glewProgramUniform4f;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM4FVPROC __glewProgramUniform4fv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM4IPROC __glewProgramUniform4i;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM4IVPROC __glewProgramUniform4iv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM4UIPROC __glewProgramUniform4ui;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM4UIVPROC __glewProgramUniform4uiv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX2DVPROC __glewProgramUniformMatrix2dv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX2FVPROC __glewProgramUniformMatrix2fv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC __glewProgramUniformMatrix2x3dv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC __glewProgramUniformMatrix2x3fv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC __glewProgramUniformMatrix2x4dv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC __glewProgramUniformMatrix2x4fv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX3DVPROC __glewProgramUniformMatrix3dv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX3FVPROC __glewProgramUniformMatrix3fv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC __glewProgramUniformMatrix3x2dv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC __glewProgramUniformMatrix3x2fv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC __glewProgramUniformMatrix3x4dv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC __glewProgramUniformMatrix3x4fv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX4DVPROC __glewProgramUniformMatrix4dv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX4FVPROC __glewProgramUniformMatrix4fv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC __glewProgramUniformMatrix4x2dv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC __glewProgramUniformMatrix4x2fv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC __glewProgramUniformMatrix4x3dv;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC __glewProgramUniformMatrix4x3fv;
extern __attribute__((dllimport)) PFNGLUSEPROGRAMSTAGESPROC __glewUseProgramStages;
extern __attribute__((dllimport)) PFNGLVALIDATEPROGRAMPIPELINEPROC __glewValidateProgramPipeline;

extern __attribute__((dllimport)) PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC __glewGetActiveAtomicCounterBufferiv;

extern __attribute__((dllimport)) PFNGLBINDIMAGETEXTUREPROC __glewBindImageTexture;
extern __attribute__((dllimport)) PFNGLMEMORYBARRIERPROC __glewMemoryBarrier;

extern __attribute__((dllimport)) PFNGLATTACHOBJECTARBPROC __glewAttachObjectARB;
extern __attribute__((dllimport)) PFNGLCOMPILESHADERARBPROC __glewCompileShaderARB;
extern __attribute__((dllimport)) PFNGLCREATEPROGRAMOBJECTARBPROC __glewCreateProgramObjectARB;
extern __attribute__((dllimport)) PFNGLCREATESHADEROBJECTARBPROC __glewCreateShaderObjectARB;
extern __attribute__((dllimport)) PFNGLDELETEOBJECTARBPROC __glewDeleteObjectARB;
extern __attribute__((dllimport)) PFNGLDETACHOBJECTARBPROC __glewDetachObjectARB;
extern __attribute__((dllimport)) PFNGLGETACTIVEUNIFORMARBPROC __glewGetActiveUniformARB;
extern __attribute__((dllimport)) PFNGLGETATTACHEDOBJECTSARBPROC __glewGetAttachedObjectsARB;
extern __attribute__((dllimport)) PFNGLGETHANDLEARBPROC __glewGetHandleARB;
extern __attribute__((dllimport)) PFNGLGETINFOLOGARBPROC __glewGetInfoLogARB;
extern __attribute__((dllimport)) PFNGLGETOBJECTPARAMETERFVARBPROC __glewGetObjectParameterfvARB;
extern __attribute__((dllimport)) PFNGLGETOBJECTPARAMETERIVARBPROC __glewGetObjectParameterivARB;
extern __attribute__((dllimport)) PFNGLGETSHADERSOURCEARBPROC __glewGetShaderSourceARB;
extern __attribute__((dllimport)) PFNGLGETUNIFORMLOCATIONARBPROC __glewGetUniformLocationARB;
extern __attribute__((dllimport)) PFNGLGETUNIFORMFVARBPROC __glewGetUniformfvARB;
extern __attribute__((dllimport)) PFNGLGETUNIFORMIVARBPROC __glewGetUniformivARB;
extern __attribute__((dllimport)) PFNGLLINKPROGRAMARBPROC __glewLinkProgramARB;
extern __attribute__((dllimport)) PFNGLSHADERSOURCEARBPROC __glewShaderSourceARB;
extern __attribute__((dllimport)) PFNGLUNIFORM1FARBPROC __glewUniform1fARB;
extern __attribute__((dllimport)) PFNGLUNIFORM1FVARBPROC __glewUniform1fvARB;
extern __attribute__((dllimport)) PFNGLUNIFORM1IARBPROC __glewUniform1iARB;
extern __attribute__((dllimport)) PFNGLUNIFORM1IVARBPROC __glewUniform1ivARB;
extern __attribute__((dllimport)) PFNGLUNIFORM2FARBPROC __glewUniform2fARB;
extern __attribute__((dllimport)) PFNGLUNIFORM2FVARBPROC __glewUniform2fvARB;
extern __attribute__((dllimport)) PFNGLUNIFORM2IARBPROC __glewUniform2iARB;
extern __attribute__((dllimport)) PFNGLUNIFORM2IVARBPROC __glewUniform2ivARB;
extern __attribute__((dllimport)) PFNGLUNIFORM3FARBPROC __glewUniform3fARB;
extern __attribute__((dllimport)) PFNGLUNIFORM3FVARBPROC __glewUniform3fvARB;
extern __attribute__((dllimport)) PFNGLUNIFORM3IARBPROC __glewUniform3iARB;
extern __attribute__((dllimport)) PFNGLUNIFORM3IVARBPROC __glewUniform3ivARB;
extern __attribute__((dllimport)) PFNGLUNIFORM4FARBPROC __glewUniform4fARB;
extern __attribute__((dllimport)) PFNGLUNIFORM4FVARBPROC __glewUniform4fvARB;
extern __attribute__((dllimport)) PFNGLUNIFORM4IARBPROC __glewUniform4iARB;
extern __attribute__((dllimport)) PFNGLUNIFORM4IVARBPROC __glewUniform4ivARB;
extern __attribute__((dllimport)) PFNGLUNIFORMMATRIX2FVARBPROC __glewUniformMatrix2fvARB;
extern __attribute__((dllimport)) PFNGLUNIFORMMATRIX3FVARBPROC __glewUniformMatrix3fvARB;
extern __attribute__((dllimport)) PFNGLUNIFORMMATRIX4FVARBPROC __glewUniformMatrix4fvARB;
extern __attribute__((dllimport)) PFNGLUSEPROGRAMOBJECTARBPROC __glewUseProgramObjectARB;
extern __attribute__((dllimport)) PFNGLVALIDATEPROGRAMARBPROC __glewValidateProgramARB;

extern __attribute__((dllimport)) PFNGLSHADERSTORAGEBLOCKBINDINGPROC __glewShaderStorageBlockBinding;

extern __attribute__((dllimport)) PFNGLGETACTIVESUBROUTINENAMEPROC __glewGetActiveSubroutineName;
extern __attribute__((dllimport)) PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC __glewGetActiveSubroutineUniformName;
extern __attribute__((dllimport)) PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC __glewGetActiveSubroutineUniformiv;
extern __attribute__((dllimport)) PFNGLGETPROGRAMSTAGEIVPROC __glewGetProgramStageiv;
extern __attribute__((dllimport)) PFNGLGETSUBROUTINEINDEXPROC __glewGetSubroutineIndex;
extern __attribute__((dllimport)) PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC __glewGetSubroutineUniformLocation;
extern __attribute__((dllimport)) PFNGLGETUNIFORMSUBROUTINEUIVPROC __glewGetUniformSubroutineuiv;
extern __attribute__((dllimport)) PFNGLUNIFORMSUBROUTINESUIVPROC __glewUniformSubroutinesuiv;

extern __attribute__((dllimport)) PFNGLCOMPILESHADERINCLUDEARBPROC __glewCompileShaderIncludeARB;
extern __attribute__((dllimport)) PFNGLDELETENAMEDSTRINGARBPROC __glewDeleteNamedStringARB;
extern __attribute__((dllimport)) PFNGLGETNAMEDSTRINGARBPROC __glewGetNamedStringARB;
extern __attribute__((dllimport)) PFNGLGETNAMEDSTRINGIVARBPROC __glewGetNamedStringivARB;
extern __attribute__((dllimport)) PFNGLISNAMEDSTRINGARBPROC __glewIsNamedStringARB;
extern __attribute__((dllimport)) PFNGLNAMEDSTRINGARBPROC __glewNamedStringARB;

extern __attribute__((dllimport)) PFNGLBUFFERPAGECOMMITMENTARBPROC __glewBufferPageCommitmentARB;

extern __attribute__((dllimport)) PFNGLTEXPAGECOMMITMENTARBPROC __glewTexPageCommitmentARB;
extern __attribute__((dllimport)) PFNGLTEXTUREPAGECOMMITMENTEXTPROC __glewTexturePageCommitmentEXT;

extern __attribute__((dllimport)) PFNGLCLIENTWAITSYNCPROC __glewClientWaitSync;
extern __attribute__((dllimport)) PFNGLDELETESYNCPROC __glewDeleteSync;
extern __attribute__((dllimport)) PFNGLFENCESYNCPROC __glewFenceSync;
extern __attribute__((dllimport)) PFNGLGETINTEGER64VPROC __glewGetInteger64v;
extern __attribute__((dllimport)) PFNGLGETSYNCIVPROC __glewGetSynciv;
extern __attribute__((dllimport)) PFNGLISSYNCPROC __glewIsSync;
extern __attribute__((dllimport)) PFNGLWAITSYNCPROC __glewWaitSync;

extern __attribute__((dllimport)) PFNGLPATCHPARAMETERFVPROC __glewPatchParameterfv;
extern __attribute__((dllimport)) PFNGLPATCHPARAMETERIPROC __glewPatchParameteri;

extern __attribute__((dllimport)) PFNGLTEXTUREBARRIERPROC __glewTextureBarrier;

extern __attribute__((dllimport)) PFNGLTEXBUFFERARBPROC __glewTexBufferARB;

extern __attribute__((dllimport)) PFNGLTEXBUFFERRANGEPROC __glewTexBufferRange;
extern __attribute__((dllimport)) PFNGLTEXTUREBUFFERRANGEEXTPROC __glewTextureBufferRangeEXT;

extern __attribute__((dllimport)) PFNGLCOMPRESSEDTEXIMAGE1DARBPROC __glewCompressedTexImage1DARB;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDTEXIMAGE2DARBPROC __glewCompressedTexImage2DARB;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDTEXIMAGE3DARBPROC __glewCompressedTexImage3DARB;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC __glewCompressedTexSubImage1DARB;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC __glewCompressedTexSubImage2DARB;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC __glewCompressedTexSubImage3DARB;
extern __attribute__((dllimport)) PFNGLGETCOMPRESSEDTEXIMAGEARBPROC __glewGetCompressedTexImageARB;

extern __attribute__((dllimport)) PFNGLGETMULTISAMPLEFVPROC __glewGetMultisamplefv;
extern __attribute__((dllimport)) PFNGLSAMPLEMASKIPROC __glewSampleMaski;
extern __attribute__((dllimport)) PFNGLTEXIMAGE2DMULTISAMPLEPROC __glewTexImage2DMultisample;
extern __attribute__((dllimport)) PFNGLTEXIMAGE3DMULTISAMPLEPROC __glewTexImage3DMultisample;

extern __attribute__((dllimport)) PFNGLTEXSTORAGE1DPROC __glewTexStorage1D;
extern __attribute__((dllimport)) PFNGLTEXSTORAGE2DPROC __glewTexStorage2D;
extern __attribute__((dllimport)) PFNGLTEXSTORAGE3DPROC __glewTexStorage3D;
extern __attribute__((dllimport)) PFNGLTEXTURESTORAGE1DEXTPROC __glewTextureStorage1DEXT;
extern __attribute__((dllimport)) PFNGLTEXTURESTORAGE2DEXTPROC __glewTextureStorage2DEXT;
extern __attribute__((dllimport)) PFNGLTEXTURESTORAGE3DEXTPROC __glewTextureStorage3DEXT;

extern __attribute__((dllimport)) PFNGLTEXSTORAGE2DMULTISAMPLEPROC __glewTexStorage2DMultisample;
extern __attribute__((dllimport)) PFNGLTEXSTORAGE3DMULTISAMPLEPROC __glewTexStorage3DMultisample;
extern __attribute__((dllimport)) PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC __glewTextureStorage2DMultisampleEXT;
extern __attribute__((dllimport)) PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC __glewTextureStorage3DMultisampleEXT;

extern __attribute__((dllimport)) PFNGLTEXTUREVIEWPROC __glewTextureView;

extern __attribute__((dllimport)) PFNGLGETQUERYOBJECTI64VPROC __glewGetQueryObjecti64v;
extern __attribute__((dllimport)) PFNGLGETQUERYOBJECTUI64VPROC __glewGetQueryObjectui64v;
extern __attribute__((dllimport)) PFNGLQUERYCOUNTERPROC __glewQueryCounter;

extern __attribute__((dllimport)) PFNGLBINDTRANSFORMFEEDBACKPROC __glewBindTransformFeedback;
extern __attribute__((dllimport)) PFNGLDELETETRANSFORMFEEDBACKSPROC __glewDeleteTransformFeedbacks;
extern __attribute__((dllimport)) PFNGLDRAWTRANSFORMFEEDBACKPROC __glewDrawTransformFeedback;
extern __attribute__((dllimport)) PFNGLGENTRANSFORMFEEDBACKSPROC __glewGenTransformFeedbacks;
extern __attribute__((dllimport)) PFNGLISTRANSFORMFEEDBACKPROC __glewIsTransformFeedback;
extern __attribute__((dllimport)) PFNGLPAUSETRANSFORMFEEDBACKPROC __glewPauseTransformFeedback;
extern __attribute__((dllimport)) PFNGLRESUMETRANSFORMFEEDBACKPROC __glewResumeTransformFeedback;

extern __attribute__((dllimport)) PFNGLBEGINQUERYINDEXEDPROC __glewBeginQueryIndexed;
extern __attribute__((dllimport)) PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC __glewDrawTransformFeedbackStream;
extern __attribute__((dllimport)) PFNGLENDQUERYINDEXEDPROC __glewEndQueryIndexed;
extern __attribute__((dllimport)) PFNGLGETQUERYINDEXEDIVPROC __glewGetQueryIndexediv;

extern __attribute__((dllimport)) PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC __glewDrawTransformFeedbackInstanced;
extern __attribute__((dllimport)) PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC __glewDrawTransformFeedbackStreamInstanced;

extern __attribute__((dllimport)) PFNGLLOADTRANSPOSEMATRIXDARBPROC __glewLoadTransposeMatrixdARB;
extern __attribute__((dllimport)) PFNGLLOADTRANSPOSEMATRIXFARBPROC __glewLoadTransposeMatrixfARB;
extern __attribute__((dllimport)) PFNGLMULTTRANSPOSEMATRIXDARBPROC __glewMultTransposeMatrixdARB;
extern __attribute__((dllimport)) PFNGLMULTTRANSPOSEMATRIXFARBPROC __glewMultTransposeMatrixfARB;

extern __attribute__((dllimport)) PFNGLBINDBUFFERBASEPROC __glewBindBufferBase;
extern __attribute__((dllimport)) PFNGLBINDBUFFERRANGEPROC __glewBindBufferRange;
extern __attribute__((dllimport)) PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC __glewGetActiveUniformBlockName;
extern __attribute__((dllimport)) PFNGLGETACTIVEUNIFORMBLOCKIVPROC __glewGetActiveUniformBlockiv;
extern __attribute__((dllimport)) PFNGLGETACTIVEUNIFORMNAMEPROC __glewGetActiveUniformName;
extern __attribute__((dllimport)) PFNGLGETACTIVEUNIFORMSIVPROC __glewGetActiveUniformsiv;
extern __attribute__((dllimport)) PFNGLGETINTEGERI_VPROC __glewGetIntegeri_v;
extern __attribute__((dllimport)) PFNGLGETUNIFORMBLOCKINDEXPROC __glewGetUniformBlockIndex;
extern __attribute__((dllimport)) PFNGLGETUNIFORMINDICESPROC __glewGetUniformIndices;
extern __attribute__((dllimport)) PFNGLUNIFORMBLOCKBINDINGPROC __glewUniformBlockBinding;

extern __attribute__((dllimport)) PFNGLBINDVERTEXARRAYPROC __glewBindVertexArray;
extern __attribute__((dllimport)) PFNGLDELETEVERTEXARRAYSPROC __glewDeleteVertexArrays;
extern __attribute__((dllimport)) PFNGLGENVERTEXARRAYSPROC __glewGenVertexArrays;
extern __attribute__((dllimport)) PFNGLISVERTEXARRAYPROC __glewIsVertexArray;

extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBLDVPROC __glewGetVertexAttribLdv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL1DPROC __glewVertexAttribL1d;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL1DVPROC __glewVertexAttribL1dv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL2DPROC __glewVertexAttribL2d;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL2DVPROC __glewVertexAttribL2dv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL3DPROC __glewVertexAttribL3d;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL3DVPROC __glewVertexAttribL3dv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL4DPROC __glewVertexAttribL4d;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL4DVPROC __glewVertexAttribL4dv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBLPOINTERPROC __glewVertexAttribLPointer;

extern __attribute__((dllimport)) PFNGLBINDVERTEXBUFFERPROC __glewBindVertexBuffer;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC __glewVertexArrayBindVertexBufferEXT;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC __glewVertexArrayVertexAttribBindingEXT;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC __glewVertexArrayVertexAttribFormatEXT;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC __glewVertexArrayVertexAttribIFormatEXT;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC __glewVertexArrayVertexAttribLFormatEXT;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC __glewVertexArrayVertexBindingDivisorEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBBINDINGPROC __glewVertexAttribBinding;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBFORMATPROC __glewVertexAttribFormat;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBIFORMATPROC __glewVertexAttribIFormat;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBLFORMATPROC __glewVertexAttribLFormat;
extern __attribute__((dllimport)) PFNGLVERTEXBINDINGDIVISORPROC __glewVertexBindingDivisor;

extern __attribute__((dllimport)) PFNGLVERTEXBLENDARBPROC __glewVertexBlendARB;
extern __attribute__((dllimport)) PFNGLWEIGHTPOINTERARBPROC __glewWeightPointerARB;
extern __attribute__((dllimport)) PFNGLWEIGHTBVARBPROC __glewWeightbvARB;
extern __attribute__((dllimport)) PFNGLWEIGHTDVARBPROC __glewWeightdvARB;
extern __attribute__((dllimport)) PFNGLWEIGHTFVARBPROC __glewWeightfvARB;
extern __attribute__((dllimport)) PFNGLWEIGHTIVARBPROC __glewWeightivARB;
extern __attribute__((dllimport)) PFNGLWEIGHTSVARBPROC __glewWeightsvARB;
extern __attribute__((dllimport)) PFNGLWEIGHTUBVARBPROC __glewWeightubvARB;
extern __attribute__((dllimport)) PFNGLWEIGHTUIVARBPROC __glewWeightuivARB;
extern __attribute__((dllimport)) PFNGLWEIGHTUSVARBPROC __glewWeightusvARB;

extern __attribute__((dllimport)) PFNGLBINDBUFFERARBPROC __glewBindBufferARB;
extern __attribute__((dllimport)) PFNGLBUFFERDATAARBPROC __glewBufferDataARB;
extern __attribute__((dllimport)) PFNGLBUFFERSUBDATAARBPROC __glewBufferSubDataARB;
extern __attribute__((dllimport)) PFNGLDELETEBUFFERSARBPROC __glewDeleteBuffersARB;
extern __attribute__((dllimport)) PFNGLGENBUFFERSARBPROC __glewGenBuffersARB;
extern __attribute__((dllimport)) PFNGLGETBUFFERPARAMETERIVARBPROC __glewGetBufferParameterivARB;
extern __attribute__((dllimport)) PFNGLGETBUFFERPOINTERVARBPROC __glewGetBufferPointervARB;
extern __attribute__((dllimport)) PFNGLGETBUFFERSUBDATAARBPROC __glewGetBufferSubDataARB;
extern __attribute__((dllimport)) PFNGLISBUFFERARBPROC __glewIsBufferARB;
extern __attribute__((dllimport)) PFNGLMAPBUFFERARBPROC __glewMapBufferARB;
extern __attribute__((dllimport)) PFNGLUNMAPBUFFERARBPROC __glewUnmapBufferARB;

extern __attribute__((dllimport)) PFNGLBINDPROGRAMARBPROC __glewBindProgramARB;
extern __attribute__((dllimport)) PFNGLDELETEPROGRAMSARBPROC __glewDeleteProgramsARB;
extern __attribute__((dllimport)) PFNGLDISABLEVERTEXATTRIBARRAYARBPROC __glewDisableVertexAttribArrayARB;
extern __attribute__((dllimport)) PFNGLENABLEVERTEXATTRIBARRAYARBPROC __glewEnableVertexAttribArrayARB;
extern __attribute__((dllimport)) PFNGLGENPROGRAMSARBPROC __glewGenProgramsARB;
extern __attribute__((dllimport)) PFNGLGETPROGRAMENVPARAMETERDVARBPROC __glewGetProgramEnvParameterdvARB;
extern __attribute__((dllimport)) PFNGLGETPROGRAMENVPARAMETERFVARBPROC __glewGetProgramEnvParameterfvARB;
extern __attribute__((dllimport)) PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC __glewGetProgramLocalParameterdvARB;
extern __attribute__((dllimport)) PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC __glewGetProgramLocalParameterfvARB;
extern __attribute__((dllimport)) PFNGLGETPROGRAMSTRINGARBPROC __glewGetProgramStringARB;
extern __attribute__((dllimport)) PFNGLGETPROGRAMIVARBPROC __glewGetProgramivARB;
extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBPOINTERVARBPROC __glewGetVertexAttribPointervARB;
extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBDVARBPROC __glewGetVertexAttribdvARB;
extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBFVARBPROC __glewGetVertexAttribfvARB;
extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBIVARBPROC __glewGetVertexAttribivARB;
extern __attribute__((dllimport)) PFNGLISPROGRAMARBPROC __glewIsProgramARB;
extern __attribute__((dllimport)) PFNGLPROGRAMENVPARAMETER4DARBPROC __glewProgramEnvParameter4dARB;
extern __attribute__((dllimport)) PFNGLPROGRAMENVPARAMETER4DVARBPROC __glewProgramEnvParameter4dvARB;
extern __attribute__((dllimport)) PFNGLPROGRAMENVPARAMETER4FARBPROC __glewProgramEnvParameter4fARB;
extern __attribute__((dllimport)) PFNGLPROGRAMENVPARAMETER4FVARBPROC __glewProgramEnvParameter4fvARB;
extern __attribute__((dllimport)) PFNGLPROGRAMLOCALPARAMETER4DARBPROC __glewProgramLocalParameter4dARB;
extern __attribute__((dllimport)) PFNGLPROGRAMLOCALPARAMETER4DVARBPROC __glewProgramLocalParameter4dvARB;
extern __attribute__((dllimport)) PFNGLPROGRAMLOCALPARAMETER4FARBPROC __glewProgramLocalParameter4fARB;
extern __attribute__((dllimport)) PFNGLPROGRAMLOCALPARAMETER4FVARBPROC __glewProgramLocalParameter4fvARB;
extern __attribute__((dllimport)) PFNGLPROGRAMSTRINGARBPROC __glewProgramStringARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB1DARBPROC __glewVertexAttrib1dARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB1DVARBPROC __glewVertexAttrib1dvARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB1FARBPROC __glewVertexAttrib1fARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB1FVARBPROC __glewVertexAttrib1fvARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB1SARBPROC __glewVertexAttrib1sARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB1SVARBPROC __glewVertexAttrib1svARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB2DARBPROC __glewVertexAttrib2dARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB2DVARBPROC __glewVertexAttrib2dvARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB2FARBPROC __glewVertexAttrib2fARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB2FVARBPROC __glewVertexAttrib2fvARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB2SARBPROC __glewVertexAttrib2sARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB2SVARBPROC __glewVertexAttrib2svARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB3DARBPROC __glewVertexAttrib3dARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB3DVARBPROC __glewVertexAttrib3dvARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB3FARBPROC __glewVertexAttrib3fARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB3FVARBPROC __glewVertexAttrib3fvARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB3SARBPROC __glewVertexAttrib3sARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB3SVARBPROC __glewVertexAttrib3svARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4NBVARBPROC __glewVertexAttrib4NbvARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4NIVARBPROC __glewVertexAttrib4NivARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4NSVARBPROC __glewVertexAttrib4NsvARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4NUBARBPROC __glewVertexAttrib4NubARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4NUBVARBPROC __glewVertexAttrib4NubvARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4NUIVARBPROC __glewVertexAttrib4NuivARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4NUSVARBPROC __glewVertexAttrib4NusvARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4BVARBPROC __glewVertexAttrib4bvARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4DARBPROC __glewVertexAttrib4dARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4DVARBPROC __glewVertexAttrib4dvARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4FARBPROC __glewVertexAttrib4fARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4FVARBPROC __glewVertexAttrib4fvARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4IVARBPROC __glewVertexAttrib4ivARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4SARBPROC __glewVertexAttrib4sARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4SVARBPROC __glewVertexAttrib4svARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4UBVARBPROC __glewVertexAttrib4ubvARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4UIVARBPROC __glewVertexAttrib4uivARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4USVARBPROC __glewVertexAttrib4usvARB;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBPOINTERARBPROC __glewVertexAttribPointerARB;

extern __attribute__((dllimport)) PFNGLBINDATTRIBLOCATIONARBPROC __glewBindAttribLocationARB;
extern __attribute__((dllimport)) PFNGLGETACTIVEATTRIBARBPROC __glewGetActiveAttribARB;
extern __attribute__((dllimport)) PFNGLGETATTRIBLOCATIONARBPROC __glewGetAttribLocationARB;

extern __attribute__((dllimport)) PFNGLCOLORP3UIPROC __glewColorP3ui;
extern __attribute__((dllimport)) PFNGLCOLORP3UIVPROC __glewColorP3uiv;
extern __attribute__((dllimport)) PFNGLCOLORP4UIPROC __glewColorP4ui;
extern __attribute__((dllimport)) PFNGLCOLORP4UIVPROC __glewColorP4uiv;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORDP1UIPROC __glewMultiTexCoordP1ui;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORDP1UIVPROC __glewMultiTexCoordP1uiv;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORDP2UIPROC __glewMultiTexCoordP2ui;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORDP2UIVPROC __glewMultiTexCoordP2uiv;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORDP3UIPROC __glewMultiTexCoordP3ui;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORDP3UIVPROC __glewMultiTexCoordP3uiv;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORDP4UIPROC __glewMultiTexCoordP4ui;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORDP4UIVPROC __glewMultiTexCoordP4uiv;
extern __attribute__((dllimport)) PFNGLNORMALP3UIPROC __glewNormalP3ui;
extern __attribute__((dllimport)) PFNGLNORMALP3UIVPROC __glewNormalP3uiv;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLORP3UIPROC __glewSecondaryColorP3ui;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLORP3UIVPROC __glewSecondaryColorP3uiv;
extern __attribute__((dllimport)) PFNGLTEXCOORDP1UIPROC __glewTexCoordP1ui;
extern __attribute__((dllimport)) PFNGLTEXCOORDP1UIVPROC __glewTexCoordP1uiv;
extern __attribute__((dllimport)) PFNGLTEXCOORDP2UIPROC __glewTexCoordP2ui;
extern __attribute__((dllimport)) PFNGLTEXCOORDP2UIVPROC __glewTexCoordP2uiv;
extern __attribute__((dllimport)) PFNGLTEXCOORDP3UIPROC __glewTexCoordP3ui;
extern __attribute__((dllimport)) PFNGLTEXCOORDP3UIVPROC __glewTexCoordP3uiv;
extern __attribute__((dllimport)) PFNGLTEXCOORDP4UIPROC __glewTexCoordP4ui;
extern __attribute__((dllimport)) PFNGLTEXCOORDP4UIVPROC __glewTexCoordP4uiv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBP1UIPROC __glewVertexAttribP1ui;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBP1UIVPROC __glewVertexAttribP1uiv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBP2UIPROC __glewVertexAttribP2ui;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBP2UIVPROC __glewVertexAttribP2uiv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBP3UIPROC __glewVertexAttribP3ui;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBP3UIVPROC __glewVertexAttribP3uiv;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBP4UIPROC __glewVertexAttribP4ui;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBP4UIVPROC __glewVertexAttribP4uiv;
extern __attribute__((dllimport)) PFNGLVERTEXP2UIPROC __glewVertexP2ui;
extern __attribute__((dllimport)) PFNGLVERTEXP2UIVPROC __glewVertexP2uiv;
extern __attribute__((dllimport)) PFNGLVERTEXP3UIPROC __glewVertexP3ui;
extern __attribute__((dllimport)) PFNGLVERTEXP3UIVPROC __glewVertexP3uiv;
extern __attribute__((dllimport)) PFNGLVERTEXP4UIPROC __glewVertexP4ui;
extern __attribute__((dllimport)) PFNGLVERTEXP4UIVPROC __glewVertexP4uiv;

extern __attribute__((dllimport)) PFNGLDEPTHRANGEARRAYVPROC __glewDepthRangeArrayv;
extern __attribute__((dllimport)) PFNGLDEPTHRANGEINDEXEDPROC __glewDepthRangeIndexed;
extern __attribute__((dllimport)) PFNGLGETDOUBLEI_VPROC __glewGetDoublei_v;
extern __attribute__((dllimport)) PFNGLGETFLOATI_VPROC __glewGetFloati_v;
extern __attribute__((dllimport)) PFNGLSCISSORARRAYVPROC __glewScissorArrayv;
extern __attribute__((dllimport)) PFNGLSCISSORINDEXEDPROC __glewScissorIndexed;
extern __attribute__((dllimport)) PFNGLSCISSORINDEXEDVPROC __glewScissorIndexedv;
extern __attribute__((dllimport)) PFNGLVIEWPORTARRAYVPROC __glewViewportArrayv;
extern __attribute__((dllimport)) PFNGLVIEWPORTINDEXEDFPROC __glewViewportIndexedf;
extern __attribute__((dllimport)) PFNGLVIEWPORTINDEXEDFVPROC __glewViewportIndexedfv;

extern __attribute__((dllimport)) PFNGLWINDOWPOS2DARBPROC __glewWindowPos2dARB;
extern __attribute__((dllimport)) PFNGLWINDOWPOS2DVARBPROC __glewWindowPos2dvARB;
extern __attribute__((dllimport)) PFNGLWINDOWPOS2FARBPROC __glewWindowPos2fARB;
extern __attribute__((dllimport)) PFNGLWINDOWPOS2FVARBPROC __glewWindowPos2fvARB;
extern __attribute__((dllimport)) PFNGLWINDOWPOS2IARBPROC __glewWindowPos2iARB;
extern __attribute__((dllimport)) PFNGLWINDOWPOS2IVARBPROC __glewWindowPos2ivARB;
extern __attribute__((dllimport)) PFNGLWINDOWPOS2SARBPROC __glewWindowPos2sARB;
extern __attribute__((dllimport)) PFNGLWINDOWPOS2SVARBPROC __glewWindowPos2svARB;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3DARBPROC __glewWindowPos3dARB;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3DVARBPROC __glewWindowPos3dvARB;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3FARBPROC __glewWindowPos3fARB;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3FVARBPROC __glewWindowPos3fvARB;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3IARBPROC __glewWindowPos3iARB;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3IVARBPROC __glewWindowPos3ivARB;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3SARBPROC __glewWindowPos3sARB;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3SVARBPROC __glewWindowPos3svARB;

extern __attribute__((dllimport)) PFNGLDRAWBUFFERSATIPROC __glewDrawBuffersATI;

extern __attribute__((dllimport)) PFNGLDRAWELEMENTARRAYATIPROC __glewDrawElementArrayATI;
extern __attribute__((dllimport)) PFNGLDRAWRANGEELEMENTARRAYATIPROC __glewDrawRangeElementArrayATI;
extern __attribute__((dllimport)) PFNGLELEMENTPOINTERATIPROC __glewElementPointerATI;

extern __attribute__((dllimport)) PFNGLGETTEXBUMPPARAMETERFVATIPROC __glewGetTexBumpParameterfvATI;
extern __attribute__((dllimport)) PFNGLGETTEXBUMPPARAMETERIVATIPROC __glewGetTexBumpParameterivATI;
extern __attribute__((dllimport)) PFNGLTEXBUMPPARAMETERFVATIPROC __glewTexBumpParameterfvATI;
extern __attribute__((dllimport)) PFNGLTEXBUMPPARAMETERIVATIPROC __glewTexBumpParameterivATI;

extern __attribute__((dllimport)) PFNGLALPHAFRAGMENTOP1ATIPROC __glewAlphaFragmentOp1ATI;
extern __attribute__((dllimport)) PFNGLALPHAFRAGMENTOP2ATIPROC __glewAlphaFragmentOp2ATI;
extern __attribute__((dllimport)) PFNGLALPHAFRAGMENTOP3ATIPROC __glewAlphaFragmentOp3ATI;
extern __attribute__((dllimport)) PFNGLBEGINFRAGMENTSHADERATIPROC __glewBeginFragmentShaderATI;
extern __attribute__((dllimport)) PFNGLBINDFRAGMENTSHADERATIPROC __glewBindFragmentShaderATI;
extern __attribute__((dllimport)) PFNGLCOLORFRAGMENTOP1ATIPROC __glewColorFragmentOp1ATI;
extern __attribute__((dllimport)) PFNGLCOLORFRAGMENTOP2ATIPROC __glewColorFragmentOp2ATI;
extern __attribute__((dllimport)) PFNGLCOLORFRAGMENTOP3ATIPROC __glewColorFragmentOp3ATI;
extern __attribute__((dllimport)) PFNGLDELETEFRAGMENTSHADERATIPROC __glewDeleteFragmentShaderATI;
extern __attribute__((dllimport)) PFNGLENDFRAGMENTSHADERATIPROC __glewEndFragmentShaderATI;
extern __attribute__((dllimport)) PFNGLGENFRAGMENTSHADERSATIPROC __glewGenFragmentShadersATI;
extern __attribute__((dllimport)) PFNGLPASSTEXCOORDATIPROC __glewPassTexCoordATI;
extern __attribute__((dllimport)) PFNGLSAMPLEMAPATIPROC __glewSampleMapATI;
extern __attribute__((dllimport)) PFNGLSETFRAGMENTSHADERCONSTANTATIPROC __glewSetFragmentShaderConstantATI;

extern __attribute__((dllimport)) PFNGLMAPOBJECTBUFFERATIPROC __glewMapObjectBufferATI;
extern __attribute__((dllimport)) PFNGLUNMAPOBJECTBUFFERATIPROC __glewUnmapObjectBufferATI;

extern __attribute__((dllimport)) PFNGLPNTRIANGLESFATIPROC __glewPNTrianglesfATI;
extern __attribute__((dllimport)) PFNGLPNTRIANGLESIATIPROC __glewPNTrianglesiATI;

extern __attribute__((dllimport)) PFNGLSTENCILFUNCSEPARATEATIPROC __glewStencilFuncSeparateATI;
extern __attribute__((dllimport)) PFNGLSTENCILOPSEPARATEATIPROC __glewStencilOpSeparateATI;

extern __attribute__((dllimport)) PFNGLARRAYOBJECTATIPROC __glewArrayObjectATI;
extern __attribute__((dllimport)) PFNGLFREEOBJECTBUFFERATIPROC __glewFreeObjectBufferATI;
extern __attribute__((dllimport)) PFNGLGETARRAYOBJECTFVATIPROC __glewGetArrayObjectfvATI;
extern __attribute__((dllimport)) PFNGLGETARRAYOBJECTIVATIPROC __glewGetArrayObjectivATI;
extern __attribute__((dllimport)) PFNGLGETOBJECTBUFFERFVATIPROC __glewGetObjectBufferfvATI;
extern __attribute__((dllimport)) PFNGLGETOBJECTBUFFERIVATIPROC __glewGetObjectBufferivATI;
extern __attribute__((dllimport)) PFNGLGETVARIANTARRAYOBJECTFVATIPROC __glewGetVariantArrayObjectfvATI;
extern __attribute__((dllimport)) PFNGLGETVARIANTARRAYOBJECTIVATIPROC __glewGetVariantArrayObjectivATI;
extern __attribute__((dllimport)) PFNGLISOBJECTBUFFERATIPROC __glewIsObjectBufferATI;
extern __attribute__((dllimport)) PFNGLNEWOBJECTBUFFERATIPROC __glewNewObjectBufferATI;
extern __attribute__((dllimport)) PFNGLUPDATEOBJECTBUFFERATIPROC __glewUpdateObjectBufferATI;
extern __attribute__((dllimport)) PFNGLVARIANTARRAYOBJECTATIPROC __glewVariantArrayObjectATI;

extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC __glewGetVertexAttribArrayObjectfvATI;
extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC __glewGetVertexAttribArrayObjectivATI;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBARRAYOBJECTATIPROC __glewVertexAttribArrayObjectATI;

extern __attribute__((dllimport)) PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC __glewClientActiveVertexStreamATI;
extern __attribute__((dllimport)) PFNGLNORMALSTREAM3BATIPROC __glewNormalStream3bATI;
extern __attribute__((dllimport)) PFNGLNORMALSTREAM3BVATIPROC __glewNormalStream3bvATI;
extern __attribute__((dllimport)) PFNGLNORMALSTREAM3DATIPROC __glewNormalStream3dATI;
extern __attribute__((dllimport)) PFNGLNORMALSTREAM3DVATIPROC __glewNormalStream3dvATI;
extern __attribute__((dllimport)) PFNGLNORMALSTREAM3FATIPROC __glewNormalStream3fATI;
extern __attribute__((dllimport)) PFNGLNORMALSTREAM3FVATIPROC __glewNormalStream3fvATI;
extern __attribute__((dllimport)) PFNGLNORMALSTREAM3IATIPROC __glewNormalStream3iATI;
extern __attribute__((dllimport)) PFNGLNORMALSTREAM3IVATIPROC __glewNormalStream3ivATI;
extern __attribute__((dllimport)) PFNGLNORMALSTREAM3SATIPROC __glewNormalStream3sATI;
extern __attribute__((dllimport)) PFNGLNORMALSTREAM3SVATIPROC __glewNormalStream3svATI;
extern __attribute__((dllimport)) PFNGLVERTEXBLENDENVFATIPROC __glewVertexBlendEnvfATI;
extern __attribute__((dllimport)) PFNGLVERTEXBLENDENVIATIPROC __glewVertexBlendEnviATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM1DATIPROC __glewVertexStream1dATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM1DVATIPROC __glewVertexStream1dvATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM1FATIPROC __glewVertexStream1fATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM1FVATIPROC __glewVertexStream1fvATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM1IATIPROC __glewVertexStream1iATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM1IVATIPROC __glewVertexStream1ivATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM1SATIPROC __glewVertexStream1sATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM1SVATIPROC __glewVertexStream1svATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM2DATIPROC __glewVertexStream2dATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM2DVATIPROC __glewVertexStream2dvATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM2FATIPROC __glewVertexStream2fATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM2FVATIPROC __glewVertexStream2fvATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM2IATIPROC __glewVertexStream2iATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM2IVATIPROC __glewVertexStream2ivATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM2SATIPROC __glewVertexStream2sATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM2SVATIPROC __glewVertexStream2svATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM3DATIPROC __glewVertexStream3dATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM3DVATIPROC __glewVertexStream3dvATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM3FATIPROC __glewVertexStream3fATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM3FVATIPROC __glewVertexStream3fvATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM3IATIPROC __glewVertexStream3iATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM3IVATIPROC __glewVertexStream3ivATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM3SATIPROC __glewVertexStream3sATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM3SVATIPROC __glewVertexStream3svATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM4DATIPROC __glewVertexStream4dATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM4DVATIPROC __glewVertexStream4dvATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM4FATIPROC __glewVertexStream4fATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM4FVATIPROC __glewVertexStream4fvATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM4IATIPROC __glewVertexStream4iATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM4IVATIPROC __glewVertexStream4ivATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM4SATIPROC __glewVertexStream4sATI;
extern __attribute__((dllimport)) PFNGLVERTEXSTREAM4SVATIPROC __glewVertexStream4svATI;

extern __attribute__((dllimport)) PFNGLGETUNIFORMBUFFERSIZEEXTPROC __glewGetUniformBufferSizeEXT;
extern __attribute__((dllimport)) PFNGLGETUNIFORMOFFSETEXTPROC __glewGetUniformOffsetEXT;
extern __attribute__((dllimport)) PFNGLUNIFORMBUFFEREXTPROC __glewUniformBufferEXT;

extern __attribute__((dllimport)) PFNGLBLENDCOLOREXTPROC __glewBlendColorEXT;

extern __attribute__((dllimport)) PFNGLBLENDEQUATIONSEPARATEEXTPROC __glewBlendEquationSeparateEXT;

extern __attribute__((dllimport)) PFNGLBLENDFUNCSEPARATEEXTPROC __glewBlendFuncSeparateEXT;

extern __attribute__((dllimport)) PFNGLBLENDEQUATIONEXTPROC __glewBlendEquationEXT;

extern __attribute__((dllimport)) PFNGLCOLORSUBTABLEEXTPROC __glewColorSubTableEXT;
extern __attribute__((dllimport)) PFNGLCOPYCOLORSUBTABLEEXTPROC __glewCopyColorSubTableEXT;

extern __attribute__((dllimport)) PFNGLLOCKARRAYSEXTPROC __glewLockArraysEXT;
extern __attribute__((dllimport)) PFNGLUNLOCKARRAYSEXTPROC __glewUnlockArraysEXT;

extern __attribute__((dllimport)) PFNGLCONVOLUTIONFILTER1DEXTPROC __glewConvolutionFilter1DEXT;
extern __attribute__((dllimport)) PFNGLCONVOLUTIONFILTER2DEXTPROC __glewConvolutionFilter2DEXT;
extern __attribute__((dllimport)) PFNGLCONVOLUTIONPARAMETERFEXTPROC __glewConvolutionParameterfEXT;
extern __attribute__((dllimport)) PFNGLCONVOLUTIONPARAMETERFVEXTPROC __glewConvolutionParameterfvEXT;
extern __attribute__((dllimport)) PFNGLCONVOLUTIONPARAMETERIEXTPROC __glewConvolutionParameteriEXT;
extern __attribute__((dllimport)) PFNGLCONVOLUTIONPARAMETERIVEXTPROC __glewConvolutionParameterivEXT;
extern __attribute__((dllimport)) PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC __glewCopyConvolutionFilter1DEXT;
extern __attribute__((dllimport)) PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC __glewCopyConvolutionFilter2DEXT;
extern __attribute__((dllimport)) PFNGLGETCONVOLUTIONFILTEREXTPROC __glewGetConvolutionFilterEXT;
extern __attribute__((dllimport)) PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC __glewGetConvolutionParameterfvEXT;
extern __attribute__((dllimport)) PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC __glewGetConvolutionParameterivEXT;
extern __attribute__((dllimport)) PFNGLGETSEPARABLEFILTEREXTPROC __glewGetSeparableFilterEXT;
extern __attribute__((dllimport)) PFNGLSEPARABLEFILTER2DEXTPROC __glewSeparableFilter2DEXT;

extern __attribute__((dllimport)) PFNGLBINORMALPOINTEREXTPROC __glewBinormalPointerEXT;
extern __attribute__((dllimport)) PFNGLTANGENTPOINTEREXTPROC __glewTangentPointerEXT;

extern __attribute__((dllimport)) PFNGLCOPYTEXIMAGE1DEXTPROC __glewCopyTexImage1DEXT;
extern __attribute__((dllimport)) PFNGLCOPYTEXIMAGE2DEXTPROC __glewCopyTexImage2DEXT;
extern __attribute__((dllimport)) PFNGLCOPYTEXSUBIMAGE1DEXTPROC __glewCopyTexSubImage1DEXT;
extern __attribute__((dllimport)) PFNGLCOPYTEXSUBIMAGE2DEXTPROC __glewCopyTexSubImage2DEXT;
extern __attribute__((dllimport)) PFNGLCOPYTEXSUBIMAGE3DEXTPROC __glewCopyTexSubImage3DEXT;

extern __attribute__((dllimport)) PFNGLCULLPARAMETERDVEXTPROC __glewCullParameterdvEXT;
extern __attribute__((dllimport)) PFNGLCULLPARAMETERFVEXTPROC __glewCullParameterfvEXT;

extern __attribute__((dllimport)) PFNGLGETOBJECTLABELEXTPROC __glewGetObjectLabelEXT;
extern __attribute__((dllimport)) PFNGLLABELOBJECTEXTPROC __glewLabelObjectEXT;

extern __attribute__((dllimport)) PFNGLINSERTEVENTMARKEREXTPROC __glewInsertEventMarkerEXT;
extern __attribute__((dllimport)) PFNGLPOPGROUPMARKEREXTPROC __glewPopGroupMarkerEXT;
extern __attribute__((dllimport)) PFNGLPUSHGROUPMARKEREXTPROC __glewPushGroupMarkerEXT;

extern __attribute__((dllimport)) PFNGLDEPTHBOUNDSEXTPROC __glewDepthBoundsEXT;

extern __attribute__((dllimport)) PFNGLBINDMULTITEXTUREEXTPROC __glewBindMultiTextureEXT;
extern __attribute__((dllimport)) PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC __glewCheckNamedFramebufferStatusEXT;
extern __attribute__((dllimport)) PFNGLCLIENTATTRIBDEFAULTEXTPROC __glewClientAttribDefaultEXT;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC __glewCompressedMultiTexImage1DEXT;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC __glewCompressedMultiTexImage2DEXT;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC __glewCompressedMultiTexImage3DEXT;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC __glewCompressedMultiTexSubImage1DEXT;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC __glewCompressedMultiTexSubImage2DEXT;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC __glewCompressedMultiTexSubImage3DEXT;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC __glewCompressedTextureImage1DEXT;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC __glewCompressedTextureImage2DEXT;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC __glewCompressedTextureImage3DEXT;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC __glewCompressedTextureSubImage1DEXT;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC __glewCompressedTextureSubImage2DEXT;
extern __attribute__((dllimport)) PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC __glewCompressedTextureSubImage3DEXT;
extern __attribute__((dllimport)) PFNGLCOPYMULTITEXIMAGE1DEXTPROC __glewCopyMultiTexImage1DEXT;
extern __attribute__((dllimport)) PFNGLCOPYMULTITEXIMAGE2DEXTPROC __glewCopyMultiTexImage2DEXT;
extern __attribute__((dllimport)) PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC __glewCopyMultiTexSubImage1DEXT;
extern __attribute__((dllimport)) PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC __glewCopyMultiTexSubImage2DEXT;
extern __attribute__((dllimport)) PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC __glewCopyMultiTexSubImage3DEXT;
extern __attribute__((dllimport)) PFNGLCOPYTEXTUREIMAGE1DEXTPROC __glewCopyTextureImage1DEXT;
extern __attribute__((dllimport)) PFNGLCOPYTEXTUREIMAGE2DEXTPROC __glewCopyTextureImage2DEXT;
extern __attribute__((dllimport)) PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC __glewCopyTextureSubImage1DEXT;
extern __attribute__((dllimport)) PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC __glewCopyTextureSubImage2DEXT;
extern __attribute__((dllimport)) PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC __glewCopyTextureSubImage3DEXT;
extern __attribute__((dllimport)) PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC __glewDisableClientStateIndexedEXT;
extern __attribute__((dllimport)) PFNGLDISABLECLIENTSTATEIEXTPROC __glewDisableClientStateiEXT;
extern __attribute__((dllimport)) PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC __glewDisableVertexArrayAttribEXT;
extern __attribute__((dllimport)) PFNGLDISABLEVERTEXARRAYEXTPROC __glewDisableVertexArrayEXT;
extern __attribute__((dllimport)) PFNGLENABLECLIENTSTATEINDEXEDEXTPROC __glewEnableClientStateIndexedEXT;
extern __attribute__((dllimport)) PFNGLENABLECLIENTSTATEIEXTPROC __glewEnableClientStateiEXT;
extern __attribute__((dllimport)) PFNGLENABLEVERTEXARRAYATTRIBEXTPROC __glewEnableVertexArrayAttribEXT;
extern __attribute__((dllimport)) PFNGLENABLEVERTEXARRAYEXTPROC __glewEnableVertexArrayEXT;
extern __attribute__((dllimport)) PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC __glewFlushMappedNamedBufferRangeEXT;
extern __attribute__((dllimport)) PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC __glewFramebufferDrawBufferEXT;
extern __attribute__((dllimport)) PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC __glewFramebufferDrawBuffersEXT;
extern __attribute__((dllimport)) PFNGLFRAMEBUFFERREADBUFFEREXTPROC __glewFramebufferReadBufferEXT;
extern __attribute__((dllimport)) PFNGLGENERATEMULTITEXMIPMAPEXTPROC __glewGenerateMultiTexMipmapEXT;
extern __attribute__((dllimport)) PFNGLGENERATETEXTUREMIPMAPEXTPROC __glewGenerateTextureMipmapEXT;
extern __attribute__((dllimport)) PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC __glewGetCompressedMultiTexImageEXT;
extern __attribute__((dllimport)) PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC __glewGetCompressedTextureImageEXT;
extern __attribute__((dllimport)) PFNGLGETDOUBLEINDEXEDVEXTPROC __glewGetDoubleIndexedvEXT;
extern __attribute__((dllimport)) PFNGLGETDOUBLEI_VEXTPROC __glewGetDoublei_vEXT;
extern __attribute__((dllimport)) PFNGLGETFLOATINDEXEDVEXTPROC __glewGetFloatIndexedvEXT;
extern __attribute__((dllimport)) PFNGLGETFLOATI_VEXTPROC __glewGetFloati_vEXT;
extern __attribute__((dllimport)) PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC __glewGetFramebufferParameterivEXT;
extern __attribute__((dllimport)) PFNGLGETMULTITEXENVFVEXTPROC __glewGetMultiTexEnvfvEXT;
extern __attribute__((dllimport)) PFNGLGETMULTITEXENVIVEXTPROC __glewGetMultiTexEnvivEXT;
extern __attribute__((dllimport)) PFNGLGETMULTITEXGENDVEXTPROC __glewGetMultiTexGendvEXT;
extern __attribute__((dllimport)) PFNGLGETMULTITEXGENFVEXTPROC __glewGetMultiTexGenfvEXT;
extern __attribute__((dllimport)) PFNGLGETMULTITEXGENIVEXTPROC __glewGetMultiTexGenivEXT;
extern __attribute__((dllimport)) PFNGLGETMULTITEXIMAGEEXTPROC __glewGetMultiTexImageEXT;
extern __attribute__((dllimport)) PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC __glewGetMultiTexLevelParameterfvEXT;
extern __attribute__((dllimport)) PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC __glewGetMultiTexLevelParameterivEXT;
extern __attribute__((dllimport)) PFNGLGETMULTITEXPARAMETERIIVEXTPROC __glewGetMultiTexParameterIivEXT;
extern __attribute__((dllimport)) PFNGLGETMULTITEXPARAMETERIUIVEXTPROC __glewGetMultiTexParameterIuivEXT;
extern __attribute__((dllimport)) PFNGLGETMULTITEXPARAMETERFVEXTPROC __glewGetMultiTexParameterfvEXT;
extern __attribute__((dllimport)) PFNGLGETMULTITEXPARAMETERIVEXTPROC __glewGetMultiTexParameterivEXT;
extern __attribute__((dllimport)) PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC __glewGetNamedBufferParameterivEXT;
extern __attribute__((dllimport)) PFNGLGETNAMEDBUFFERPOINTERVEXTPROC __glewGetNamedBufferPointervEXT;
extern __attribute__((dllimport)) PFNGLGETNAMEDBUFFERSUBDATAEXTPROC __glewGetNamedBufferSubDataEXT;
extern __attribute__((dllimport)) PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC __glewGetNamedFramebufferAttachmentParameterivEXT;
extern __attribute__((dllimport)) PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC __glewGetNamedProgramLocalParameterIivEXT;
extern __attribute__((dllimport)) PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC __glewGetNamedProgramLocalParameterIuivEXT;
extern __attribute__((dllimport)) PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC __glewGetNamedProgramLocalParameterdvEXT;
extern __attribute__((dllimport)) PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC __glewGetNamedProgramLocalParameterfvEXT;
extern __attribute__((dllimport)) PFNGLGETNAMEDPROGRAMSTRINGEXTPROC __glewGetNamedProgramStringEXT;
extern __attribute__((dllimport)) PFNGLGETNAMEDPROGRAMIVEXTPROC __glewGetNamedProgramivEXT;
extern __attribute__((dllimport)) PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC __glewGetNamedRenderbufferParameterivEXT;
extern __attribute__((dllimport)) PFNGLGETPOINTERINDEXEDVEXTPROC __glewGetPointerIndexedvEXT;
extern __attribute__((dllimport)) PFNGLGETPOINTERI_VEXTPROC __glewGetPointeri_vEXT;
extern __attribute__((dllimport)) PFNGLGETTEXTUREIMAGEEXTPROC __glewGetTextureImageEXT;
extern __attribute__((dllimport)) PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC __glewGetTextureLevelParameterfvEXT;
extern __attribute__((dllimport)) PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC __glewGetTextureLevelParameterivEXT;
extern __attribute__((dllimport)) PFNGLGETTEXTUREPARAMETERIIVEXTPROC __glewGetTextureParameterIivEXT;
extern __attribute__((dllimport)) PFNGLGETTEXTUREPARAMETERIUIVEXTPROC __glewGetTextureParameterIuivEXT;
extern __attribute__((dllimport)) PFNGLGETTEXTUREPARAMETERFVEXTPROC __glewGetTextureParameterfvEXT;
extern __attribute__((dllimport)) PFNGLGETTEXTUREPARAMETERIVEXTPROC __glewGetTextureParameterivEXT;
extern __attribute__((dllimport)) PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC __glewGetVertexArrayIntegeri_vEXT;
extern __attribute__((dllimport)) PFNGLGETVERTEXARRAYINTEGERVEXTPROC __glewGetVertexArrayIntegervEXT;
extern __attribute__((dllimport)) PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC __glewGetVertexArrayPointeri_vEXT;
extern __attribute__((dllimport)) PFNGLGETVERTEXARRAYPOINTERVEXTPROC __glewGetVertexArrayPointervEXT;
extern __attribute__((dllimport)) PFNGLMAPNAMEDBUFFEREXTPROC __glewMapNamedBufferEXT;
extern __attribute__((dllimport)) PFNGLMAPNAMEDBUFFERRANGEEXTPROC __glewMapNamedBufferRangeEXT;
extern __attribute__((dllimport)) PFNGLMATRIXFRUSTUMEXTPROC __glewMatrixFrustumEXT;
extern __attribute__((dllimport)) PFNGLMATRIXLOADIDENTITYEXTPROC __glewMatrixLoadIdentityEXT;
extern __attribute__((dllimport)) PFNGLMATRIXLOADTRANSPOSEDEXTPROC __glewMatrixLoadTransposedEXT;
extern __attribute__((dllimport)) PFNGLMATRIXLOADTRANSPOSEFEXTPROC __glewMatrixLoadTransposefEXT;
extern __attribute__((dllimport)) PFNGLMATRIXLOADDEXTPROC __glewMatrixLoaddEXT;
extern __attribute__((dllimport)) PFNGLMATRIXLOADFEXTPROC __glewMatrixLoadfEXT;
extern __attribute__((dllimport)) PFNGLMATRIXMULTTRANSPOSEDEXTPROC __glewMatrixMultTransposedEXT;
extern __attribute__((dllimport)) PFNGLMATRIXMULTTRANSPOSEFEXTPROC __glewMatrixMultTransposefEXT;
extern __attribute__((dllimport)) PFNGLMATRIXMULTDEXTPROC __glewMatrixMultdEXT;
extern __attribute__((dllimport)) PFNGLMATRIXMULTFEXTPROC __glewMatrixMultfEXT;
extern __attribute__((dllimport)) PFNGLMATRIXORTHOEXTPROC __glewMatrixOrthoEXT;
extern __attribute__((dllimport)) PFNGLMATRIXPOPEXTPROC __glewMatrixPopEXT;
extern __attribute__((dllimport)) PFNGLMATRIXPUSHEXTPROC __glewMatrixPushEXT;
extern __attribute__((dllimport)) PFNGLMATRIXROTATEDEXTPROC __glewMatrixRotatedEXT;
extern __attribute__((dllimport)) PFNGLMATRIXROTATEFEXTPROC __glewMatrixRotatefEXT;
extern __attribute__((dllimport)) PFNGLMATRIXSCALEDEXTPROC __glewMatrixScaledEXT;
extern __attribute__((dllimport)) PFNGLMATRIXSCALEFEXTPROC __glewMatrixScalefEXT;
extern __attribute__((dllimport)) PFNGLMATRIXTRANSLATEDEXTPROC __glewMatrixTranslatedEXT;
extern __attribute__((dllimport)) PFNGLMATRIXTRANSLATEFEXTPROC __glewMatrixTranslatefEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXBUFFEREXTPROC __glewMultiTexBufferEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORDPOINTEREXTPROC __glewMultiTexCoordPointerEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXENVFEXTPROC __glewMultiTexEnvfEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXENVFVEXTPROC __glewMultiTexEnvfvEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXENVIEXTPROC __glewMultiTexEnviEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXENVIVEXTPROC __glewMultiTexEnvivEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXGENDEXTPROC __glewMultiTexGendEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXGENDVEXTPROC __glewMultiTexGendvEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXGENFEXTPROC __glewMultiTexGenfEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXGENFVEXTPROC __glewMultiTexGenfvEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXGENIEXTPROC __glewMultiTexGeniEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXGENIVEXTPROC __glewMultiTexGenivEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXIMAGE1DEXTPROC __glewMultiTexImage1DEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXIMAGE2DEXTPROC __glewMultiTexImage2DEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXIMAGE3DEXTPROC __glewMultiTexImage3DEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXPARAMETERIIVEXTPROC __glewMultiTexParameterIivEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXPARAMETERIUIVEXTPROC __glewMultiTexParameterIuivEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXPARAMETERFEXTPROC __glewMultiTexParameterfEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXPARAMETERFVEXTPROC __glewMultiTexParameterfvEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXPARAMETERIEXTPROC __glewMultiTexParameteriEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXPARAMETERIVEXTPROC __glewMultiTexParameterivEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXRENDERBUFFEREXTPROC __glewMultiTexRenderbufferEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXSUBIMAGE1DEXTPROC __glewMultiTexSubImage1DEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXSUBIMAGE2DEXTPROC __glewMultiTexSubImage2DEXT;
extern __attribute__((dllimport)) PFNGLMULTITEXSUBIMAGE3DEXTPROC __glewMultiTexSubImage3DEXT;
extern __attribute__((dllimport)) PFNGLNAMEDBUFFERDATAEXTPROC __glewNamedBufferDataEXT;
extern __attribute__((dllimport)) PFNGLNAMEDBUFFERSUBDATAEXTPROC __glewNamedBufferSubDataEXT;
extern __attribute__((dllimport)) PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC __glewNamedCopyBufferSubDataEXT;
extern __attribute__((dllimport)) PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC __glewNamedFramebufferRenderbufferEXT;
extern __attribute__((dllimport)) PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC __glewNamedFramebufferTexture1DEXT;
extern __attribute__((dllimport)) PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC __glewNamedFramebufferTexture2DEXT;
extern __attribute__((dllimport)) PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC __glewNamedFramebufferTexture3DEXT;
extern __attribute__((dllimport)) PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC __glewNamedFramebufferTextureEXT;
extern __attribute__((dllimport)) PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC __glewNamedFramebufferTextureFaceEXT;
extern __attribute__((dllimport)) PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC __glewNamedFramebufferTextureLayerEXT;
extern __attribute__((dllimport)) PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC __glewNamedProgramLocalParameter4dEXT;
extern __attribute__((dllimport)) PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC __glewNamedProgramLocalParameter4dvEXT;
extern __attribute__((dllimport)) PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC __glewNamedProgramLocalParameter4fEXT;
extern __attribute__((dllimport)) PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC __glewNamedProgramLocalParameter4fvEXT;
extern __attribute__((dllimport)) PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC __glewNamedProgramLocalParameterI4iEXT;
extern __attribute__((dllimport)) PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC __glewNamedProgramLocalParameterI4ivEXT;
extern __attribute__((dllimport)) PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC __glewNamedProgramLocalParameterI4uiEXT;
extern __attribute__((dllimport)) PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC __glewNamedProgramLocalParameterI4uivEXT;
extern __attribute__((dllimport)) PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC __glewNamedProgramLocalParameters4fvEXT;
extern __attribute__((dllimport)) PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC __glewNamedProgramLocalParametersI4ivEXT;
extern __attribute__((dllimport)) PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC __glewNamedProgramLocalParametersI4uivEXT;
extern __attribute__((dllimport)) PFNGLNAMEDPROGRAMSTRINGEXTPROC __glewNamedProgramStringEXT;
extern __attribute__((dllimport)) PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC __glewNamedRenderbufferStorageEXT;
extern __attribute__((dllimport)) PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC __glewNamedRenderbufferStorageMultisampleCoverageEXT;
extern __attribute__((dllimport)) PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC __glewNamedRenderbufferStorageMultisampleEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM1FEXTPROC __glewProgramUniform1fEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM1FVEXTPROC __glewProgramUniform1fvEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM1IEXTPROC __glewProgramUniform1iEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM1IVEXTPROC __glewProgramUniform1ivEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM1UIEXTPROC __glewProgramUniform1uiEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM1UIVEXTPROC __glewProgramUniform1uivEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM2FEXTPROC __glewProgramUniform2fEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM2FVEXTPROC __glewProgramUniform2fvEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM2IEXTPROC __glewProgramUniform2iEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM2IVEXTPROC __glewProgramUniform2ivEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM2UIEXTPROC __glewProgramUniform2uiEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM2UIVEXTPROC __glewProgramUniform2uivEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM3FEXTPROC __glewProgramUniform3fEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM3FVEXTPROC __glewProgramUniform3fvEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM3IEXTPROC __glewProgramUniform3iEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM3IVEXTPROC __glewProgramUniform3ivEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM3UIEXTPROC __glewProgramUniform3uiEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM3UIVEXTPROC __glewProgramUniform3uivEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM4FEXTPROC __glewProgramUniform4fEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM4FVEXTPROC __glewProgramUniform4fvEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM4IEXTPROC __glewProgramUniform4iEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM4IVEXTPROC __glewProgramUniform4ivEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM4UIEXTPROC __glewProgramUniform4uiEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM4UIVEXTPROC __glewProgramUniform4uivEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC __glewProgramUniformMatrix2fvEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC __glewProgramUniformMatrix2x3fvEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC __glewProgramUniformMatrix2x4fvEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC __glewProgramUniformMatrix3fvEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC __glewProgramUniformMatrix3x2fvEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC __glewProgramUniformMatrix3x4fvEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC __glewProgramUniformMatrix4fvEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC __glewProgramUniformMatrix4x2fvEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC __glewProgramUniformMatrix4x3fvEXT;
extern __attribute__((dllimport)) PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC __glewPushClientAttribDefaultEXT;
extern __attribute__((dllimport)) PFNGLTEXTUREBUFFEREXTPROC __glewTextureBufferEXT;
extern __attribute__((dllimport)) PFNGLTEXTUREIMAGE1DEXTPROC __glewTextureImage1DEXT;
extern __attribute__((dllimport)) PFNGLTEXTUREIMAGE2DEXTPROC __glewTextureImage2DEXT;
extern __attribute__((dllimport)) PFNGLTEXTUREIMAGE3DEXTPROC __glewTextureImage3DEXT;
extern __attribute__((dllimport)) PFNGLTEXTUREPARAMETERIIVEXTPROC __glewTextureParameterIivEXT;
extern __attribute__((dllimport)) PFNGLTEXTUREPARAMETERIUIVEXTPROC __glewTextureParameterIuivEXT;
extern __attribute__((dllimport)) PFNGLTEXTUREPARAMETERFEXTPROC __glewTextureParameterfEXT;
extern __attribute__((dllimport)) PFNGLTEXTUREPARAMETERFVEXTPROC __glewTextureParameterfvEXT;
extern __attribute__((dllimport)) PFNGLTEXTUREPARAMETERIEXTPROC __glewTextureParameteriEXT;
extern __attribute__((dllimport)) PFNGLTEXTUREPARAMETERIVEXTPROC __glewTextureParameterivEXT;
extern __attribute__((dllimport)) PFNGLTEXTURERENDERBUFFEREXTPROC __glewTextureRenderbufferEXT;
extern __attribute__((dllimport)) PFNGLTEXTURESUBIMAGE1DEXTPROC __glewTextureSubImage1DEXT;
extern __attribute__((dllimport)) PFNGLTEXTURESUBIMAGE2DEXTPROC __glewTextureSubImage2DEXT;
extern __attribute__((dllimport)) PFNGLTEXTURESUBIMAGE3DEXTPROC __glewTextureSubImage3DEXT;
extern __attribute__((dllimport)) PFNGLUNMAPNAMEDBUFFEREXTPROC __glewUnmapNamedBufferEXT;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYCOLOROFFSETEXTPROC __glewVertexArrayColorOffsetEXT;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC __glewVertexArrayEdgeFlagOffsetEXT;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC __glewVertexArrayFogCoordOffsetEXT;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYINDEXOFFSETEXTPROC __glewVertexArrayIndexOffsetEXT;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC __glewVertexArrayMultiTexCoordOffsetEXT;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYNORMALOFFSETEXTPROC __glewVertexArrayNormalOffsetEXT;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC __glewVertexArraySecondaryColorOffsetEXT;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC __glewVertexArrayTexCoordOffsetEXT;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC __glewVertexArrayVertexAttribDivisorEXT;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC __glewVertexArrayVertexAttribIOffsetEXT;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC __glewVertexArrayVertexAttribOffsetEXT;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC __glewVertexArrayVertexOffsetEXT;

extern __attribute__((dllimport)) PFNGLCOLORMASKINDEXEDEXTPROC __glewColorMaskIndexedEXT;
extern __attribute__((dllimport)) PFNGLDISABLEINDEXEDEXTPROC __glewDisableIndexedEXT;
extern __attribute__((dllimport)) PFNGLENABLEINDEXEDEXTPROC __glewEnableIndexedEXT;
extern __attribute__((dllimport)) PFNGLGETBOOLEANINDEXEDVEXTPROC __glewGetBooleanIndexedvEXT;
extern __attribute__((dllimport)) PFNGLGETINTEGERINDEXEDVEXTPROC __glewGetIntegerIndexedvEXT;
extern __attribute__((dllimport)) PFNGLISENABLEDINDEXEDEXTPROC __glewIsEnabledIndexedEXT;

extern __attribute__((dllimport)) PFNGLDRAWARRAYSINSTANCEDEXTPROC __glewDrawArraysInstancedEXT;
extern __attribute__((dllimport)) PFNGLDRAWELEMENTSINSTANCEDEXTPROC __glewDrawElementsInstancedEXT;

extern __attribute__((dllimport)) PFNGLDRAWRANGEELEMENTSEXTPROC __glewDrawRangeElementsEXT;

extern __attribute__((dllimport)) PFNGLFOGCOORDPOINTEREXTPROC __glewFogCoordPointerEXT;
extern __attribute__((dllimport)) PFNGLFOGCOORDDEXTPROC __glewFogCoorddEXT;
extern __attribute__((dllimport)) PFNGLFOGCOORDDVEXTPROC __glewFogCoorddvEXT;
extern __attribute__((dllimport)) PFNGLFOGCOORDFEXTPROC __glewFogCoordfEXT;
extern __attribute__((dllimport)) PFNGLFOGCOORDFVEXTPROC __glewFogCoordfvEXT;

extern __attribute__((dllimport)) PFNGLFRAGMENTCOLORMATERIALEXTPROC __glewFragmentColorMaterialEXT;
extern __attribute__((dllimport)) PFNGLFRAGMENTLIGHTMODELFEXTPROC __glewFragmentLightModelfEXT;
extern __attribute__((dllimport)) PFNGLFRAGMENTLIGHTMODELFVEXTPROC __glewFragmentLightModelfvEXT;
extern __attribute__((dllimport)) PFNGLFRAGMENTLIGHTMODELIEXTPROC __glewFragmentLightModeliEXT;
extern __attribute__((dllimport)) PFNGLFRAGMENTLIGHTMODELIVEXTPROC __glewFragmentLightModelivEXT;
extern __attribute__((dllimport)) PFNGLFRAGMENTLIGHTFEXTPROC __glewFragmentLightfEXT;
extern __attribute__((dllimport)) PFNGLFRAGMENTLIGHTFVEXTPROC __glewFragmentLightfvEXT;
extern __attribute__((dllimport)) PFNGLFRAGMENTLIGHTIEXTPROC __glewFragmentLightiEXT;
extern __attribute__((dllimport)) PFNGLFRAGMENTLIGHTIVEXTPROC __glewFragmentLightivEXT;
extern __attribute__((dllimport)) PFNGLFRAGMENTMATERIALFEXTPROC __glewFragmentMaterialfEXT;
extern __attribute__((dllimport)) PFNGLFRAGMENTMATERIALFVEXTPROC __glewFragmentMaterialfvEXT;
extern __attribute__((dllimport)) PFNGLFRAGMENTMATERIALIEXTPROC __glewFragmentMaterialiEXT;
extern __attribute__((dllimport)) PFNGLFRAGMENTMATERIALIVEXTPROC __glewFragmentMaterialivEXT;
extern __attribute__((dllimport)) PFNGLGETFRAGMENTLIGHTFVEXTPROC __glewGetFragmentLightfvEXT;
extern __attribute__((dllimport)) PFNGLGETFRAGMENTLIGHTIVEXTPROC __glewGetFragmentLightivEXT;
extern __attribute__((dllimport)) PFNGLGETFRAGMENTMATERIALFVEXTPROC __glewGetFragmentMaterialfvEXT;
extern __attribute__((dllimport)) PFNGLGETFRAGMENTMATERIALIVEXTPROC __glewGetFragmentMaterialivEXT;
extern __attribute__((dllimport)) PFNGLLIGHTENVIEXTPROC __glewLightEnviEXT;

extern __attribute__((dllimport)) PFNGLBLITFRAMEBUFFEREXTPROC __glewBlitFramebufferEXT;

extern __attribute__((dllimport)) PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC __glewRenderbufferStorageMultisampleEXT;

extern __attribute__((dllimport)) PFNGLBINDFRAMEBUFFEREXTPROC __glewBindFramebufferEXT;
extern __attribute__((dllimport)) PFNGLBINDRENDERBUFFEREXTPROC __glewBindRenderbufferEXT;
extern __attribute__((dllimport)) PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC __glewCheckFramebufferStatusEXT;
extern __attribute__((dllimport)) PFNGLDELETEFRAMEBUFFERSEXTPROC __glewDeleteFramebuffersEXT;
extern __attribute__((dllimport)) PFNGLDELETERENDERBUFFERSEXTPROC __glewDeleteRenderbuffersEXT;
extern __attribute__((dllimport)) PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC __glewFramebufferRenderbufferEXT;
extern __attribute__((dllimport)) PFNGLFRAMEBUFFERTEXTURE1DEXTPROC __glewFramebufferTexture1DEXT;
extern __attribute__((dllimport)) PFNGLFRAMEBUFFERTEXTURE2DEXTPROC __glewFramebufferTexture2DEXT;
extern __attribute__((dllimport)) PFNGLFRAMEBUFFERTEXTURE3DEXTPROC __glewFramebufferTexture3DEXT;
extern __attribute__((dllimport)) PFNGLGENFRAMEBUFFERSEXTPROC __glewGenFramebuffersEXT;
extern __attribute__((dllimport)) PFNGLGENRENDERBUFFERSEXTPROC __glewGenRenderbuffersEXT;
extern __attribute__((dllimport)) PFNGLGENERATEMIPMAPEXTPROC __glewGenerateMipmapEXT;
extern __attribute__((dllimport)) PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC __glewGetFramebufferAttachmentParameterivEXT;
extern __attribute__((dllimport)) PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC __glewGetRenderbufferParameterivEXT;
extern __attribute__((dllimport)) PFNGLISFRAMEBUFFEREXTPROC __glewIsFramebufferEXT;
extern __attribute__((dllimport)) PFNGLISRENDERBUFFEREXTPROC __glewIsRenderbufferEXT;
extern __attribute__((dllimport)) PFNGLRENDERBUFFERSTORAGEEXTPROC __glewRenderbufferStorageEXT;

extern __attribute__((dllimport)) PFNGLFRAMEBUFFERTEXTUREEXTPROC __glewFramebufferTextureEXT;
extern __attribute__((dllimport)) PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC __glewFramebufferTextureFaceEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMPARAMETERIEXTPROC __glewProgramParameteriEXT;

extern __attribute__((dllimport)) PFNGLPROGRAMENVPARAMETERS4FVEXTPROC __glewProgramEnvParameters4fvEXT;
extern __attribute__((dllimport)) PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC __glewProgramLocalParameters4fvEXT;

extern __attribute__((dllimport)) PFNGLBINDFRAGDATALOCATIONEXTPROC __glewBindFragDataLocationEXT;
extern __attribute__((dllimport)) PFNGLGETFRAGDATALOCATIONEXTPROC __glewGetFragDataLocationEXT;
extern __attribute__((dllimport)) PFNGLGETUNIFORMUIVEXTPROC __glewGetUniformuivEXT;
extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBIIVEXTPROC __glewGetVertexAttribIivEXT;
extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBIUIVEXTPROC __glewGetVertexAttribIuivEXT;
extern __attribute__((dllimport)) PFNGLUNIFORM1UIEXTPROC __glewUniform1uiEXT;
extern __attribute__((dllimport)) PFNGLUNIFORM1UIVEXTPROC __glewUniform1uivEXT;
extern __attribute__((dllimport)) PFNGLUNIFORM2UIEXTPROC __glewUniform2uiEXT;
extern __attribute__((dllimport)) PFNGLUNIFORM2UIVEXTPROC __glewUniform2uivEXT;
extern __attribute__((dllimport)) PFNGLUNIFORM3UIEXTPROC __glewUniform3uiEXT;
extern __attribute__((dllimport)) PFNGLUNIFORM3UIVEXTPROC __glewUniform3uivEXT;
extern __attribute__((dllimport)) PFNGLUNIFORM4UIEXTPROC __glewUniform4uiEXT;
extern __attribute__((dllimport)) PFNGLUNIFORM4UIVEXTPROC __glewUniform4uivEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI1IEXTPROC __glewVertexAttribI1iEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI1IVEXTPROC __glewVertexAttribI1ivEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI1UIEXTPROC __glewVertexAttribI1uiEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI1UIVEXTPROC __glewVertexAttribI1uivEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI2IEXTPROC __glewVertexAttribI2iEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI2IVEXTPROC __glewVertexAttribI2ivEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI2UIEXTPROC __glewVertexAttribI2uiEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI2UIVEXTPROC __glewVertexAttribI2uivEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI3IEXTPROC __glewVertexAttribI3iEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI3IVEXTPROC __glewVertexAttribI3ivEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI3UIEXTPROC __glewVertexAttribI3uiEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI3UIVEXTPROC __glewVertexAttribI3uivEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI4BVEXTPROC __glewVertexAttribI4bvEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI4IEXTPROC __glewVertexAttribI4iEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI4IVEXTPROC __glewVertexAttribI4ivEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI4SVEXTPROC __glewVertexAttribI4svEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI4UBVEXTPROC __glewVertexAttribI4ubvEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI4UIEXTPROC __glewVertexAttribI4uiEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI4UIVEXTPROC __glewVertexAttribI4uivEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBI4USVEXTPROC __glewVertexAttribI4usvEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBIPOINTEREXTPROC __glewVertexAttribIPointerEXT;

extern __attribute__((dllimport)) PFNGLGETHISTOGRAMEXTPROC __glewGetHistogramEXT;
extern __attribute__((dllimport)) PFNGLGETHISTOGRAMPARAMETERFVEXTPROC __glewGetHistogramParameterfvEXT;
extern __attribute__((dllimport)) PFNGLGETHISTOGRAMPARAMETERIVEXTPROC __glewGetHistogramParameterivEXT;
extern __attribute__((dllimport)) PFNGLGETMINMAXEXTPROC __glewGetMinmaxEXT;
extern __attribute__((dllimport)) PFNGLGETMINMAXPARAMETERFVEXTPROC __glewGetMinmaxParameterfvEXT;
extern __attribute__((dllimport)) PFNGLGETMINMAXPARAMETERIVEXTPROC __glewGetMinmaxParameterivEXT;
extern __attribute__((dllimport)) PFNGLHISTOGRAMEXTPROC __glewHistogramEXT;
extern __attribute__((dllimport)) PFNGLMINMAXEXTPROC __glewMinmaxEXT;
extern __attribute__((dllimport)) PFNGLRESETHISTOGRAMEXTPROC __glewResetHistogramEXT;
extern __attribute__((dllimport)) PFNGLRESETMINMAXEXTPROC __glewResetMinmaxEXT;

extern __attribute__((dllimport)) PFNGLINDEXFUNCEXTPROC __glewIndexFuncEXT;

extern __attribute__((dllimport)) PFNGLINDEXMATERIALEXTPROC __glewIndexMaterialEXT;

extern __attribute__((dllimport)) PFNGLAPPLYTEXTUREEXTPROC __glewApplyTextureEXT;
extern __attribute__((dllimport)) PFNGLTEXTURELIGHTEXTPROC __glewTextureLightEXT;
extern __attribute__((dllimport)) PFNGLTEXTUREMATERIALEXTPROC __glewTextureMaterialEXT;

extern __attribute__((dllimport)) PFNGLMULTIDRAWARRAYSEXTPROC __glewMultiDrawArraysEXT;
extern __attribute__((dllimport)) PFNGLMULTIDRAWELEMENTSEXTPROC __glewMultiDrawElementsEXT;

extern __attribute__((dllimport)) PFNGLSAMPLEMASKEXTPROC __glewSampleMaskEXT;
extern __attribute__((dllimport)) PFNGLSAMPLEPATTERNEXTPROC __glewSamplePatternEXT;

extern __attribute__((dllimport)) PFNGLCOLORTABLEEXTPROC __glewColorTableEXT;
extern __attribute__((dllimport)) PFNGLGETCOLORTABLEEXTPROC __glewGetColorTableEXT;
extern __attribute__((dllimport)) PFNGLGETCOLORTABLEPARAMETERFVEXTPROC __glewGetColorTableParameterfvEXT;
extern __attribute__((dllimport)) PFNGLGETCOLORTABLEPARAMETERIVEXTPROC __glewGetColorTableParameterivEXT;

extern __attribute__((dllimport)) PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC __glewGetPixelTransformParameterfvEXT;
extern __attribute__((dllimport)) PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC __glewGetPixelTransformParameterivEXT;
extern __attribute__((dllimport)) PFNGLPIXELTRANSFORMPARAMETERFEXTPROC __glewPixelTransformParameterfEXT;
extern __attribute__((dllimport)) PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC __glewPixelTransformParameterfvEXT;
extern __attribute__((dllimport)) PFNGLPIXELTRANSFORMPARAMETERIEXTPROC __glewPixelTransformParameteriEXT;
extern __attribute__((dllimport)) PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC __glewPixelTransformParameterivEXT;

extern __attribute__((dllimport)) PFNGLPOINTPARAMETERFEXTPROC __glewPointParameterfEXT;
extern __attribute__((dllimport)) PFNGLPOINTPARAMETERFVEXTPROC __glewPointParameterfvEXT;

extern __attribute__((dllimport)) PFNGLPOLYGONOFFSETEXTPROC __glewPolygonOffsetEXT;

extern __attribute__((dllimport)) PFNGLPOLYGONOFFSETCLAMPEXTPROC __glewPolygonOffsetClampEXT;

extern __attribute__((dllimport)) PFNGLPROVOKINGVERTEXEXTPROC __glewProvokingVertexEXT;

extern __attribute__((dllimport)) PFNGLCOVERAGEMODULATIONNVPROC __glewCoverageModulationNV;
extern __attribute__((dllimport)) PFNGLCOVERAGEMODULATIONTABLENVPROC __glewCoverageModulationTableNV;
extern __attribute__((dllimport)) PFNGLGETCOVERAGEMODULATIONTABLENVPROC __glewGetCoverageModulationTableNV;
extern __attribute__((dllimport)) PFNGLRASTERSAMPLESEXTPROC __glewRasterSamplesEXT;

extern __attribute__((dllimport)) PFNGLBEGINSCENEEXTPROC __glewBeginSceneEXT;
extern __attribute__((dllimport)) PFNGLENDSCENEEXTPROC __glewEndSceneEXT;

extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3BEXTPROC __glewSecondaryColor3bEXT;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3BVEXTPROC __glewSecondaryColor3bvEXT;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3DEXTPROC __glewSecondaryColor3dEXT;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3DVEXTPROC __glewSecondaryColor3dvEXT;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3FEXTPROC __glewSecondaryColor3fEXT;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3FVEXTPROC __glewSecondaryColor3fvEXT;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3IEXTPROC __glewSecondaryColor3iEXT;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3IVEXTPROC __glewSecondaryColor3ivEXT;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3SEXTPROC __glewSecondaryColor3sEXT;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3SVEXTPROC __glewSecondaryColor3svEXT;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3UBEXTPROC __glewSecondaryColor3ubEXT;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3UBVEXTPROC __glewSecondaryColor3ubvEXT;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3UIEXTPROC __glewSecondaryColor3uiEXT;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3UIVEXTPROC __glewSecondaryColor3uivEXT;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3USEXTPROC __glewSecondaryColor3usEXT;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3USVEXTPROC __glewSecondaryColor3usvEXT;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLORPOINTEREXTPROC __glewSecondaryColorPointerEXT;

extern __attribute__((dllimport)) PFNGLACTIVEPROGRAMEXTPROC __glewActiveProgramEXT;
extern __attribute__((dllimport)) PFNGLCREATESHADERPROGRAMEXTPROC __glewCreateShaderProgramEXT;
extern __attribute__((dllimport)) PFNGLUSESHADERPROGRAMEXTPROC __glewUseShaderProgramEXT;

extern __attribute__((dllimport)) PFNGLBINDIMAGETEXTUREEXTPROC __glewBindImageTextureEXT;
extern __attribute__((dllimport)) PFNGLMEMORYBARRIEREXTPROC __glewMemoryBarrierEXT;

extern __attribute__((dllimport)) PFNGLACTIVESTENCILFACEEXTPROC __glewActiveStencilFaceEXT;

extern __attribute__((dllimport)) PFNGLTEXSUBIMAGE1DEXTPROC __glewTexSubImage1DEXT;
extern __attribute__((dllimport)) PFNGLTEXSUBIMAGE2DEXTPROC __glewTexSubImage2DEXT;
extern __attribute__((dllimport)) PFNGLTEXSUBIMAGE3DEXTPROC __glewTexSubImage3DEXT;

extern __attribute__((dllimport)) PFNGLTEXIMAGE3DEXTPROC __glewTexImage3DEXT;

extern __attribute__((dllimport)) PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC __glewFramebufferTextureLayerEXT;

extern __attribute__((dllimport)) PFNGLTEXBUFFEREXTPROC __glewTexBufferEXT;

extern __attribute__((dllimport)) PFNGLCLEARCOLORIIEXTPROC __glewClearColorIiEXT;
extern __attribute__((dllimport)) PFNGLCLEARCOLORIUIEXTPROC __glewClearColorIuiEXT;
extern __attribute__((dllimport)) PFNGLGETTEXPARAMETERIIVEXTPROC __glewGetTexParameterIivEXT;
extern __attribute__((dllimport)) PFNGLGETTEXPARAMETERIUIVEXTPROC __glewGetTexParameterIuivEXT;
extern __attribute__((dllimport)) PFNGLTEXPARAMETERIIVEXTPROC __glewTexParameterIivEXT;
extern __attribute__((dllimport)) PFNGLTEXPARAMETERIUIVEXTPROC __glewTexParameterIuivEXT;

extern __attribute__((dllimport)) PFNGLARETEXTURESRESIDENTEXTPROC __glewAreTexturesResidentEXT;
extern __attribute__((dllimport)) PFNGLBINDTEXTUREEXTPROC __glewBindTextureEXT;
extern __attribute__((dllimport)) PFNGLDELETETEXTURESEXTPROC __glewDeleteTexturesEXT;
extern __attribute__((dllimport)) PFNGLGENTEXTURESEXTPROC __glewGenTexturesEXT;
extern __attribute__((dllimport)) PFNGLISTEXTUREEXTPROC __glewIsTextureEXT;
extern __attribute__((dllimport)) PFNGLPRIORITIZETEXTURESEXTPROC __glewPrioritizeTexturesEXT;

extern __attribute__((dllimport)) PFNGLTEXTURENORMALEXTPROC __glewTextureNormalEXT;

extern __attribute__((dllimport)) PFNGLGETQUERYOBJECTI64VEXTPROC __glewGetQueryObjecti64vEXT;
extern __attribute__((dllimport)) PFNGLGETQUERYOBJECTUI64VEXTPROC __glewGetQueryObjectui64vEXT;

extern __attribute__((dllimport)) PFNGLBEGINTRANSFORMFEEDBACKEXTPROC __glewBeginTransformFeedbackEXT;
extern __attribute__((dllimport)) PFNGLBINDBUFFERBASEEXTPROC __glewBindBufferBaseEXT;
extern __attribute__((dllimport)) PFNGLBINDBUFFEROFFSETEXTPROC __glewBindBufferOffsetEXT;
extern __attribute__((dllimport)) PFNGLBINDBUFFERRANGEEXTPROC __glewBindBufferRangeEXT;
extern __attribute__((dllimport)) PFNGLENDTRANSFORMFEEDBACKEXTPROC __glewEndTransformFeedbackEXT;
extern __attribute__((dllimport)) PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC __glewGetTransformFeedbackVaryingEXT;
extern __attribute__((dllimport)) PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC __glewTransformFeedbackVaryingsEXT;

extern __attribute__((dllimport)) PFNGLARRAYELEMENTEXTPROC __glewArrayElementEXT;
extern __attribute__((dllimport)) PFNGLCOLORPOINTEREXTPROC __glewColorPointerEXT;
extern __attribute__((dllimport)) PFNGLDRAWARRAYSEXTPROC __glewDrawArraysEXT;
extern __attribute__((dllimport)) PFNGLEDGEFLAGPOINTEREXTPROC __glewEdgeFlagPointerEXT;
extern __attribute__((dllimport)) PFNGLINDEXPOINTEREXTPROC __glewIndexPointerEXT;
extern __attribute__((dllimport)) PFNGLNORMALPOINTEREXTPROC __glewNormalPointerEXT;
extern __attribute__((dllimport)) PFNGLTEXCOORDPOINTEREXTPROC __glewTexCoordPointerEXT;
extern __attribute__((dllimport)) PFNGLVERTEXPOINTEREXTPROC __glewVertexPointerEXT;

extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBLDVEXTPROC __glewGetVertexAttribLdvEXT;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC __glewVertexArrayVertexAttribLOffsetEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL1DEXTPROC __glewVertexAttribL1dEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL1DVEXTPROC __glewVertexAttribL1dvEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL2DEXTPROC __glewVertexAttribL2dEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL2DVEXTPROC __glewVertexAttribL2dvEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL3DEXTPROC __glewVertexAttribL3dEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL3DVEXTPROC __glewVertexAttribL3dvEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL4DEXTPROC __glewVertexAttribL4dEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL4DVEXTPROC __glewVertexAttribL4dvEXT;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBLPOINTEREXTPROC __glewVertexAttribLPointerEXT;

extern __attribute__((dllimport)) PFNGLBEGINVERTEXSHADEREXTPROC __glewBeginVertexShaderEXT;
extern __attribute__((dllimport)) PFNGLBINDLIGHTPARAMETEREXTPROC __glewBindLightParameterEXT;
extern __attribute__((dllimport)) PFNGLBINDMATERIALPARAMETEREXTPROC __glewBindMaterialParameterEXT;
extern __attribute__((dllimport)) PFNGLBINDPARAMETEREXTPROC __glewBindParameterEXT;
extern __attribute__((dllimport)) PFNGLBINDTEXGENPARAMETEREXTPROC __glewBindTexGenParameterEXT;
extern __attribute__((dllimport)) PFNGLBINDTEXTUREUNITPARAMETEREXTPROC __glewBindTextureUnitParameterEXT;
extern __attribute__((dllimport)) PFNGLBINDVERTEXSHADEREXTPROC __glewBindVertexShaderEXT;
extern __attribute__((dllimport)) PFNGLDELETEVERTEXSHADEREXTPROC __glewDeleteVertexShaderEXT;
extern __attribute__((dllimport)) PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC __glewDisableVariantClientStateEXT;
extern __attribute__((dllimport)) PFNGLENABLEVARIANTCLIENTSTATEEXTPROC __glewEnableVariantClientStateEXT;
extern __attribute__((dllimport)) PFNGLENDVERTEXSHADEREXTPROC __glewEndVertexShaderEXT;
extern __attribute__((dllimport)) PFNGLEXTRACTCOMPONENTEXTPROC __glewExtractComponentEXT;
extern __attribute__((dllimport)) PFNGLGENSYMBOLSEXTPROC __glewGenSymbolsEXT;
extern __attribute__((dllimport)) PFNGLGENVERTEXSHADERSEXTPROC __glewGenVertexShadersEXT;
extern __attribute__((dllimport)) PFNGLGETINVARIANTBOOLEANVEXTPROC __glewGetInvariantBooleanvEXT;
extern __attribute__((dllimport)) PFNGLGETINVARIANTFLOATVEXTPROC __glewGetInvariantFloatvEXT;
extern __attribute__((dllimport)) PFNGLGETINVARIANTINTEGERVEXTPROC __glewGetInvariantIntegervEXT;
extern __attribute__((dllimport)) PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC __glewGetLocalConstantBooleanvEXT;
extern __attribute__((dllimport)) PFNGLGETLOCALCONSTANTFLOATVEXTPROC __glewGetLocalConstantFloatvEXT;
extern __attribute__((dllimport)) PFNGLGETLOCALCONSTANTINTEGERVEXTPROC __glewGetLocalConstantIntegervEXT;
extern __attribute__((dllimport)) PFNGLGETVARIANTBOOLEANVEXTPROC __glewGetVariantBooleanvEXT;
extern __attribute__((dllimport)) PFNGLGETVARIANTFLOATVEXTPROC __glewGetVariantFloatvEXT;
extern __attribute__((dllimport)) PFNGLGETVARIANTINTEGERVEXTPROC __glewGetVariantIntegervEXT;
extern __attribute__((dllimport)) PFNGLGETVARIANTPOINTERVEXTPROC __glewGetVariantPointervEXT;
extern __attribute__((dllimport)) PFNGLINSERTCOMPONENTEXTPROC __glewInsertComponentEXT;
extern __attribute__((dllimport)) PFNGLISVARIANTENABLEDEXTPROC __glewIsVariantEnabledEXT;
extern __attribute__((dllimport)) PFNGLSETINVARIANTEXTPROC __glewSetInvariantEXT;
extern __attribute__((dllimport)) PFNGLSETLOCALCONSTANTEXTPROC __glewSetLocalConstantEXT;
extern __attribute__((dllimport)) PFNGLSHADEROP1EXTPROC __glewShaderOp1EXT;
extern __attribute__((dllimport)) PFNGLSHADEROP2EXTPROC __glewShaderOp2EXT;
extern __attribute__((dllimport)) PFNGLSHADEROP3EXTPROC __glewShaderOp3EXT;
extern __attribute__((dllimport)) PFNGLSWIZZLEEXTPROC __glewSwizzleEXT;
extern __attribute__((dllimport)) PFNGLVARIANTPOINTEREXTPROC __glewVariantPointerEXT;
extern __attribute__((dllimport)) PFNGLVARIANTBVEXTPROC __glewVariantbvEXT;
extern __attribute__((dllimport)) PFNGLVARIANTDVEXTPROC __glewVariantdvEXT;
extern __attribute__((dllimport)) PFNGLVARIANTFVEXTPROC __glewVariantfvEXT;
extern __attribute__((dllimport)) PFNGLVARIANTIVEXTPROC __glewVariantivEXT;
extern __attribute__((dllimport)) PFNGLVARIANTSVEXTPROC __glewVariantsvEXT;
extern __attribute__((dllimport)) PFNGLVARIANTUBVEXTPROC __glewVariantubvEXT;
extern __attribute__((dllimport)) PFNGLVARIANTUIVEXTPROC __glewVariantuivEXT;
extern __attribute__((dllimport)) PFNGLVARIANTUSVEXTPROC __glewVariantusvEXT;
extern __attribute__((dllimport)) PFNGLWRITEMASKEXTPROC __glewWriteMaskEXT;

extern __attribute__((dllimport)) PFNGLVERTEXWEIGHTPOINTEREXTPROC __glewVertexWeightPointerEXT;
extern __attribute__((dllimport)) PFNGLVERTEXWEIGHTFEXTPROC __glewVertexWeightfEXT;
extern __attribute__((dllimport)) PFNGLVERTEXWEIGHTFVEXTPROC __glewVertexWeightfvEXT;

extern __attribute__((dllimport)) PFNGLIMPORTSYNCEXTPROC __glewImportSyncEXT;

extern __attribute__((dllimport)) PFNGLFRAMETERMINATORGREMEDYPROC __glewFrameTerminatorGREMEDY;

extern __attribute__((dllimport)) PFNGLSTRINGMARKERGREMEDYPROC __glewStringMarkerGREMEDY;

extern __attribute__((dllimport)) PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC __glewGetImageTransformParameterfvHP;
extern __attribute__((dllimport)) PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC __glewGetImageTransformParameterivHP;
extern __attribute__((dllimport)) PFNGLIMAGETRANSFORMPARAMETERFHPPROC __glewImageTransformParameterfHP;
extern __attribute__((dllimport)) PFNGLIMAGETRANSFORMPARAMETERFVHPPROC __glewImageTransformParameterfvHP;
extern __attribute__((dllimport)) PFNGLIMAGETRANSFORMPARAMETERIHPPROC __glewImageTransformParameteriHP;
extern __attribute__((dllimport)) PFNGLIMAGETRANSFORMPARAMETERIVHPPROC __glewImageTransformParameterivHP;

extern __attribute__((dllimport)) PFNGLMULTIMODEDRAWARRAYSIBMPROC __glewMultiModeDrawArraysIBM;
extern __attribute__((dllimport)) PFNGLMULTIMODEDRAWELEMENTSIBMPROC __glewMultiModeDrawElementsIBM;

extern __attribute__((dllimport)) PFNGLCOLORPOINTERLISTIBMPROC __glewColorPointerListIBM;
extern __attribute__((dllimport)) PFNGLEDGEFLAGPOINTERLISTIBMPROC __glewEdgeFlagPointerListIBM;
extern __attribute__((dllimport)) PFNGLFOGCOORDPOINTERLISTIBMPROC __glewFogCoordPointerListIBM;
extern __attribute__((dllimport)) PFNGLINDEXPOINTERLISTIBMPROC __glewIndexPointerListIBM;
extern __attribute__((dllimport)) PFNGLNORMALPOINTERLISTIBMPROC __glewNormalPointerListIBM;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLORPOINTERLISTIBMPROC __glewSecondaryColorPointerListIBM;
extern __attribute__((dllimport)) PFNGLTEXCOORDPOINTERLISTIBMPROC __glewTexCoordPointerListIBM;
extern __attribute__((dllimport)) PFNGLVERTEXPOINTERLISTIBMPROC __glewVertexPointerListIBM;

extern __attribute__((dllimport)) PFNGLMAPTEXTURE2DINTELPROC __glewMapTexture2DINTEL;
extern __attribute__((dllimport)) PFNGLSYNCTEXTUREINTELPROC __glewSyncTextureINTEL;
extern __attribute__((dllimport)) PFNGLUNMAPTEXTURE2DINTELPROC __glewUnmapTexture2DINTEL;

extern __attribute__((dllimport)) PFNGLCOLORPOINTERVINTELPROC __glewColorPointervINTEL;
extern __attribute__((dllimport)) PFNGLNORMALPOINTERVINTELPROC __glewNormalPointervINTEL;
extern __attribute__((dllimport)) PFNGLTEXCOORDPOINTERVINTELPROC __glewTexCoordPointervINTEL;
extern __attribute__((dllimport)) PFNGLVERTEXPOINTERVINTELPROC __glewVertexPointervINTEL;

extern __attribute__((dllimport)) PFNGLBEGINPERFQUERYINTELPROC __glewBeginPerfQueryINTEL;
extern __attribute__((dllimport)) PFNGLCREATEPERFQUERYINTELPROC __glewCreatePerfQueryINTEL;
extern __attribute__((dllimport)) PFNGLDELETEPERFQUERYINTELPROC __glewDeletePerfQueryINTEL;
extern __attribute__((dllimport)) PFNGLENDPERFQUERYINTELPROC __glewEndPerfQueryINTEL;
extern __attribute__((dllimport)) PFNGLGETFIRSTPERFQUERYIDINTELPROC __glewGetFirstPerfQueryIdINTEL;
extern __attribute__((dllimport)) PFNGLGETNEXTPERFQUERYIDINTELPROC __glewGetNextPerfQueryIdINTEL;
extern __attribute__((dllimport)) PFNGLGETPERFCOUNTERINFOINTELPROC __glewGetPerfCounterInfoINTEL;
extern __attribute__((dllimport)) PFNGLGETPERFQUERYDATAINTELPROC __glewGetPerfQueryDataINTEL;
extern __attribute__((dllimport)) PFNGLGETPERFQUERYIDBYNAMEINTELPROC __glewGetPerfQueryIdByNameINTEL;
extern __attribute__((dllimport)) PFNGLGETPERFQUERYINFOINTELPROC __glewGetPerfQueryInfoINTEL;

extern __attribute__((dllimport)) PFNGLTEXSCISSORFUNCINTELPROC __glewTexScissorFuncINTEL;
extern __attribute__((dllimport)) PFNGLTEXSCISSORINTELPROC __glewTexScissorINTEL;

extern __attribute__((dllimport)) PFNGLBLENDBARRIERKHRPROC __glewBlendBarrierKHR;

extern __attribute__((dllimport)) PFNGLDEBUGMESSAGECALLBACKPROC __glewDebugMessageCallback;
extern __attribute__((dllimport)) PFNGLDEBUGMESSAGECONTROLPROC __glewDebugMessageControl;
extern __attribute__((dllimport)) PFNGLDEBUGMESSAGEINSERTPROC __glewDebugMessageInsert;
extern __attribute__((dllimport)) PFNGLGETDEBUGMESSAGELOGPROC __glewGetDebugMessageLog;
extern __attribute__((dllimport)) PFNGLGETOBJECTLABELPROC __glewGetObjectLabel;
extern __attribute__((dllimport)) PFNGLGETOBJECTPTRLABELPROC __glewGetObjectPtrLabel;
extern __attribute__((dllimport)) PFNGLOBJECTLABELPROC __glewObjectLabel;
extern __attribute__((dllimport)) PFNGLOBJECTPTRLABELPROC __glewObjectPtrLabel;
extern __attribute__((dllimport)) PFNGLPOPDEBUGGROUPPROC __glewPopDebugGroup;
extern __attribute__((dllimport)) PFNGLPUSHDEBUGGROUPPROC __glewPushDebugGroup;

extern __attribute__((dllimport)) PFNGLGETNUNIFORMFVPROC __glewGetnUniformfv;
extern __attribute__((dllimport)) PFNGLGETNUNIFORMIVPROC __glewGetnUniformiv;
extern __attribute__((dllimport)) PFNGLGETNUNIFORMUIVPROC __glewGetnUniformuiv;
extern __attribute__((dllimport)) PFNGLREADNPIXELSPROC __glewReadnPixels;

extern __attribute__((dllimport)) PFNGLBUFFERREGIONENABLEDPROC __glewBufferRegionEnabled;
extern __attribute__((dllimport)) PFNGLDELETEBUFFERREGIONPROC __glewDeleteBufferRegion;
extern __attribute__((dllimport)) PFNGLDRAWBUFFERREGIONPROC __glewDrawBufferRegion;
extern __attribute__((dllimport)) PFNGLNEWBUFFERREGIONPROC __glewNewBufferRegion;
extern __attribute__((dllimport)) PFNGLREADBUFFERREGIONPROC __glewReadBufferRegion;

extern __attribute__((dllimport)) PFNGLRESIZEBUFFERSMESAPROC __glewResizeBuffersMESA;

extern __attribute__((dllimport)) PFNGLWINDOWPOS2DMESAPROC __glewWindowPos2dMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS2DVMESAPROC __glewWindowPos2dvMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS2FMESAPROC __glewWindowPos2fMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS2FVMESAPROC __glewWindowPos2fvMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS2IMESAPROC __glewWindowPos2iMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS2IVMESAPROC __glewWindowPos2ivMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS2SMESAPROC __glewWindowPos2sMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS2SVMESAPROC __glewWindowPos2svMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3DMESAPROC __glewWindowPos3dMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3DVMESAPROC __glewWindowPos3dvMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3FMESAPROC __glewWindowPos3fMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3FVMESAPROC __glewWindowPos3fvMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3IMESAPROC __glewWindowPos3iMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3IVMESAPROC __glewWindowPos3ivMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3SMESAPROC __glewWindowPos3sMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS3SVMESAPROC __glewWindowPos3svMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS4DMESAPROC __glewWindowPos4dMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS4DVMESAPROC __glewWindowPos4dvMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS4FMESAPROC __glewWindowPos4fMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS4FVMESAPROC __glewWindowPos4fvMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS4IMESAPROC __glewWindowPos4iMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS4IVMESAPROC __glewWindowPos4ivMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS4SMESAPROC __glewWindowPos4sMESA;
extern __attribute__((dllimport)) PFNGLWINDOWPOS4SVMESAPROC __glewWindowPos4svMESA;

extern __attribute__((dllimport)) PFNGLBEGINCONDITIONALRENDERNVXPROC __glewBeginConditionalRenderNVX;
extern __attribute__((dllimport)) PFNGLENDCONDITIONALRENDERNVXPROC __glewEndConditionalRenderNVX;

extern __attribute__((dllimport)) PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC __glewMultiDrawArraysIndirectBindlessNV;
extern __attribute__((dllimport)) PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC __glewMultiDrawElementsIndirectBindlessNV;

extern __attribute__((dllimport)) PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC __glewMultiDrawArraysIndirectBindlessCountNV;
extern __attribute__((dllimport)) PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC __glewMultiDrawElementsIndirectBindlessCountNV;

extern __attribute__((dllimport)) PFNGLGETIMAGEHANDLENVPROC __glewGetImageHandleNV;
extern __attribute__((dllimport)) PFNGLGETTEXTUREHANDLENVPROC __glewGetTextureHandleNV;
extern __attribute__((dllimport)) PFNGLGETTEXTURESAMPLERHANDLENVPROC __glewGetTextureSamplerHandleNV;
extern __attribute__((dllimport)) PFNGLISIMAGEHANDLERESIDENTNVPROC __glewIsImageHandleResidentNV;
extern __attribute__((dllimport)) PFNGLISTEXTUREHANDLERESIDENTNVPROC __glewIsTextureHandleResidentNV;
extern __attribute__((dllimport)) PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC __glewMakeImageHandleNonResidentNV;
extern __attribute__((dllimport)) PFNGLMAKEIMAGEHANDLERESIDENTNVPROC __glewMakeImageHandleResidentNV;
extern __attribute__((dllimport)) PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC __glewMakeTextureHandleNonResidentNV;
extern __attribute__((dllimport)) PFNGLMAKETEXTUREHANDLERESIDENTNVPROC __glewMakeTextureHandleResidentNV;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC __glewProgramUniformHandleui64NV;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC __glewProgramUniformHandleui64vNV;
extern __attribute__((dllimport)) PFNGLUNIFORMHANDLEUI64NVPROC __glewUniformHandleui64NV;
extern __attribute__((dllimport)) PFNGLUNIFORMHANDLEUI64VNVPROC __glewUniformHandleui64vNV;

extern __attribute__((dllimport)) PFNGLBLENDBARRIERNVPROC __glewBlendBarrierNV;
extern __attribute__((dllimport)) PFNGLBLENDPARAMETERINVPROC __glewBlendParameteriNV;

extern __attribute__((dllimport)) PFNGLBEGINCONDITIONALRENDERNVPROC __glewBeginConditionalRenderNV;
extern __attribute__((dllimport)) PFNGLENDCONDITIONALRENDERNVPROC __glewEndConditionalRenderNV;

extern __attribute__((dllimport)) PFNGLSUBPIXELPRECISIONBIASNVPROC __glewSubpixelPrecisionBiasNV;

extern __attribute__((dllimport)) PFNGLCONSERVATIVERASTERPARAMETERFNVPROC __glewConservativeRasterParameterfNV;

extern __attribute__((dllimport)) PFNGLCOPYIMAGESUBDATANVPROC __glewCopyImageSubDataNV;

extern __attribute__((dllimport)) PFNGLCLEARDEPTHDNVPROC __glewClearDepthdNV;
extern __attribute__((dllimport)) PFNGLDEPTHBOUNDSDNVPROC __glewDepthBoundsdNV;
extern __attribute__((dllimport)) PFNGLDEPTHRANGEDNVPROC __glewDepthRangedNV;

extern __attribute__((dllimport)) PFNGLDRAWTEXTURENVPROC __glewDrawTextureNV;

extern __attribute__((dllimport)) PFNGLEVALMAPSNVPROC __glewEvalMapsNV;
extern __attribute__((dllimport)) PFNGLGETMAPATTRIBPARAMETERFVNVPROC __glewGetMapAttribParameterfvNV;
extern __attribute__((dllimport)) PFNGLGETMAPATTRIBPARAMETERIVNVPROC __glewGetMapAttribParameterivNV;
extern __attribute__((dllimport)) PFNGLGETMAPCONTROLPOINTSNVPROC __glewGetMapControlPointsNV;
extern __attribute__((dllimport)) PFNGLGETMAPPARAMETERFVNVPROC __glewGetMapParameterfvNV;
extern __attribute__((dllimport)) PFNGLGETMAPPARAMETERIVNVPROC __glewGetMapParameterivNV;
extern __attribute__((dllimport)) PFNGLMAPCONTROLPOINTSNVPROC __glewMapControlPointsNV;
extern __attribute__((dllimport)) PFNGLMAPPARAMETERFVNVPROC __glewMapParameterfvNV;
extern __attribute__((dllimport)) PFNGLMAPPARAMETERIVNVPROC __glewMapParameterivNV;

extern __attribute__((dllimport)) PFNGLGETMULTISAMPLEFVNVPROC __glewGetMultisamplefvNV;
extern __attribute__((dllimport)) PFNGLSAMPLEMASKINDEXEDNVPROC __glewSampleMaskIndexedNV;
extern __attribute__((dllimport)) PFNGLTEXRENDERBUFFERNVPROC __glewTexRenderbufferNV;

extern __attribute__((dllimport)) PFNGLDELETEFENCESNVPROC __glewDeleteFencesNV;
extern __attribute__((dllimport)) PFNGLFINISHFENCENVPROC __glewFinishFenceNV;
extern __attribute__((dllimport)) PFNGLGENFENCESNVPROC __glewGenFencesNV;
extern __attribute__((dllimport)) PFNGLGETFENCEIVNVPROC __glewGetFenceivNV;
extern __attribute__((dllimport)) PFNGLISFENCENVPROC __glewIsFenceNV;
extern __attribute__((dllimport)) PFNGLSETFENCENVPROC __glewSetFenceNV;
extern __attribute__((dllimport)) PFNGLTESTFENCENVPROC __glewTestFenceNV;

extern __attribute__((dllimport)) PFNGLFRAGMENTCOVERAGECOLORNVPROC __glewFragmentCoverageColorNV;

extern __attribute__((dllimport)) PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC __glewGetProgramNamedParameterdvNV;
extern __attribute__((dllimport)) PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC __glewGetProgramNamedParameterfvNV;
extern __attribute__((dllimport)) PFNGLPROGRAMNAMEDPARAMETER4DNVPROC __glewProgramNamedParameter4dNV;
extern __attribute__((dllimport)) PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC __glewProgramNamedParameter4dvNV;
extern __attribute__((dllimport)) PFNGLPROGRAMNAMEDPARAMETER4FNVPROC __glewProgramNamedParameter4fNV;
extern __attribute__((dllimport)) PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC __glewProgramNamedParameter4fvNV;

extern __attribute__((dllimport)) PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC __glewRenderbufferStorageMultisampleCoverageNV;

extern __attribute__((dllimport)) PFNGLPROGRAMVERTEXLIMITNVPROC __glewProgramVertexLimitNV;

extern __attribute__((dllimport)) PFNGLPROGRAMENVPARAMETERI4INVPROC __glewProgramEnvParameterI4iNV;
extern __attribute__((dllimport)) PFNGLPROGRAMENVPARAMETERI4IVNVPROC __glewProgramEnvParameterI4ivNV;
extern __attribute__((dllimport)) PFNGLPROGRAMENVPARAMETERI4UINVPROC __glewProgramEnvParameterI4uiNV;
extern __attribute__((dllimport)) PFNGLPROGRAMENVPARAMETERI4UIVNVPROC __glewProgramEnvParameterI4uivNV;
extern __attribute__((dllimport)) PFNGLPROGRAMENVPARAMETERSI4IVNVPROC __glewProgramEnvParametersI4ivNV;
extern __attribute__((dllimport)) PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC __glewProgramEnvParametersI4uivNV;
extern __attribute__((dllimport)) PFNGLPROGRAMLOCALPARAMETERI4INVPROC __glewProgramLocalParameterI4iNV;
extern __attribute__((dllimport)) PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC __glewProgramLocalParameterI4ivNV;
extern __attribute__((dllimport)) PFNGLPROGRAMLOCALPARAMETERI4UINVPROC __glewProgramLocalParameterI4uiNV;
extern __attribute__((dllimport)) PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC __glewProgramLocalParameterI4uivNV;
extern __attribute__((dllimport)) PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC __glewProgramLocalParametersI4ivNV;
extern __attribute__((dllimport)) PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC __glewProgramLocalParametersI4uivNV;

extern __attribute__((dllimport)) PFNGLGETUNIFORMI64VNVPROC __glewGetUniformi64vNV;
extern __attribute__((dllimport)) PFNGLGETUNIFORMUI64VNVPROC __glewGetUniformui64vNV;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM1I64NVPROC __glewProgramUniform1i64NV;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM1I64VNVPROC __glewProgramUniform1i64vNV;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM1UI64NVPROC __glewProgramUniform1ui64NV;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM1UI64VNVPROC __glewProgramUniform1ui64vNV;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM2I64NVPROC __glewProgramUniform2i64NV;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM2I64VNVPROC __glewProgramUniform2i64vNV;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM2UI64NVPROC __glewProgramUniform2ui64NV;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM2UI64VNVPROC __glewProgramUniform2ui64vNV;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM3I64NVPROC __glewProgramUniform3i64NV;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM3I64VNVPROC __glewProgramUniform3i64vNV;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM3UI64NVPROC __glewProgramUniform3ui64NV;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM3UI64VNVPROC __glewProgramUniform3ui64vNV;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM4I64NVPROC __glewProgramUniform4i64NV;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM4I64VNVPROC __glewProgramUniform4i64vNV;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM4UI64NVPROC __glewProgramUniform4ui64NV;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORM4UI64VNVPROC __glewProgramUniform4ui64vNV;
extern __attribute__((dllimport)) PFNGLUNIFORM1I64NVPROC __glewUniform1i64NV;
extern __attribute__((dllimport)) PFNGLUNIFORM1I64VNVPROC __glewUniform1i64vNV;
extern __attribute__((dllimport)) PFNGLUNIFORM1UI64NVPROC __glewUniform1ui64NV;
extern __attribute__((dllimport)) PFNGLUNIFORM1UI64VNVPROC __glewUniform1ui64vNV;
extern __attribute__((dllimport)) PFNGLUNIFORM2I64NVPROC __glewUniform2i64NV;
extern __attribute__((dllimport)) PFNGLUNIFORM2I64VNVPROC __glewUniform2i64vNV;
extern __attribute__((dllimport)) PFNGLUNIFORM2UI64NVPROC __glewUniform2ui64NV;
extern __attribute__((dllimport)) PFNGLUNIFORM2UI64VNVPROC __glewUniform2ui64vNV;
extern __attribute__((dllimport)) PFNGLUNIFORM3I64NVPROC __glewUniform3i64NV;
extern __attribute__((dllimport)) PFNGLUNIFORM3I64VNVPROC __glewUniform3i64vNV;
extern __attribute__((dllimport)) PFNGLUNIFORM3UI64NVPROC __glewUniform3ui64NV;
extern __attribute__((dllimport)) PFNGLUNIFORM3UI64VNVPROC __glewUniform3ui64vNV;
extern __attribute__((dllimport)) PFNGLUNIFORM4I64NVPROC __glewUniform4i64NV;
extern __attribute__((dllimport)) PFNGLUNIFORM4I64VNVPROC __glewUniform4i64vNV;
extern __attribute__((dllimport)) PFNGLUNIFORM4UI64NVPROC __glewUniform4ui64NV;
extern __attribute__((dllimport)) PFNGLUNIFORM4UI64VNVPROC __glewUniform4ui64vNV;

extern __attribute__((dllimport)) PFNGLCOLOR3HNVPROC __glewColor3hNV;
extern __attribute__((dllimport)) PFNGLCOLOR3HVNVPROC __glewColor3hvNV;
extern __attribute__((dllimport)) PFNGLCOLOR4HNVPROC __glewColor4hNV;
extern __attribute__((dllimport)) PFNGLCOLOR4HVNVPROC __glewColor4hvNV;
extern __attribute__((dllimport)) PFNGLFOGCOORDHNVPROC __glewFogCoordhNV;
extern __attribute__((dllimport)) PFNGLFOGCOORDHVNVPROC __glewFogCoordhvNV;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD1HNVPROC __glewMultiTexCoord1hNV;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD1HVNVPROC __glewMultiTexCoord1hvNV;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD2HNVPROC __glewMultiTexCoord2hNV;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD2HVNVPROC __glewMultiTexCoord2hvNV;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD3HNVPROC __glewMultiTexCoord3hNV;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD3HVNVPROC __glewMultiTexCoord3hvNV;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD4HNVPROC __glewMultiTexCoord4hNV;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD4HVNVPROC __glewMultiTexCoord4hvNV;
extern __attribute__((dllimport)) PFNGLNORMAL3HNVPROC __glewNormal3hNV;
extern __attribute__((dllimport)) PFNGLNORMAL3HVNVPROC __glewNormal3hvNV;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3HNVPROC __glewSecondaryColor3hNV;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLOR3HVNVPROC __glewSecondaryColor3hvNV;
extern __attribute__((dllimport)) PFNGLTEXCOORD1HNVPROC __glewTexCoord1hNV;
extern __attribute__((dllimport)) PFNGLTEXCOORD1HVNVPROC __glewTexCoord1hvNV;
extern __attribute__((dllimport)) PFNGLTEXCOORD2HNVPROC __glewTexCoord2hNV;
extern __attribute__((dllimport)) PFNGLTEXCOORD2HVNVPROC __glewTexCoord2hvNV;
extern __attribute__((dllimport)) PFNGLTEXCOORD3HNVPROC __glewTexCoord3hNV;
extern __attribute__((dllimport)) PFNGLTEXCOORD3HVNVPROC __glewTexCoord3hvNV;
extern __attribute__((dllimport)) PFNGLTEXCOORD4HNVPROC __glewTexCoord4hNV;
extern __attribute__((dllimport)) PFNGLTEXCOORD4HVNVPROC __glewTexCoord4hvNV;
extern __attribute__((dllimport)) PFNGLVERTEX2HNVPROC __glewVertex2hNV;
extern __attribute__((dllimport)) PFNGLVERTEX2HVNVPROC __glewVertex2hvNV;
extern __attribute__((dllimport)) PFNGLVERTEX3HNVPROC __glewVertex3hNV;
extern __attribute__((dllimport)) PFNGLVERTEX3HVNVPROC __glewVertex3hvNV;
extern __attribute__((dllimport)) PFNGLVERTEX4HNVPROC __glewVertex4hNV;
extern __attribute__((dllimport)) PFNGLVERTEX4HVNVPROC __glewVertex4hvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB1HNVPROC __glewVertexAttrib1hNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB1HVNVPROC __glewVertexAttrib1hvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB2HNVPROC __glewVertexAttrib2hNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB2HVNVPROC __glewVertexAttrib2hvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB3HNVPROC __glewVertexAttrib3hNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB3HVNVPROC __glewVertexAttrib3hvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4HNVPROC __glewVertexAttrib4hNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4HVNVPROC __glewVertexAttrib4hvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBS1HVNVPROC __glewVertexAttribs1hvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBS2HVNVPROC __glewVertexAttribs2hvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBS3HVNVPROC __glewVertexAttribs3hvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBS4HVNVPROC __glewVertexAttribs4hvNV;
extern __attribute__((dllimport)) PFNGLVERTEXWEIGHTHNVPROC __glewVertexWeighthNV;
extern __attribute__((dllimport)) PFNGLVERTEXWEIGHTHVNVPROC __glewVertexWeighthvNV;

extern __attribute__((dllimport)) PFNGLGETINTERNALFORMATSAMPLEIVNVPROC __glewGetInternalformatSampleivNV;

extern __attribute__((dllimport)) PFNGLBEGINOCCLUSIONQUERYNVPROC __glewBeginOcclusionQueryNV;
extern __attribute__((dllimport)) PFNGLDELETEOCCLUSIONQUERIESNVPROC __glewDeleteOcclusionQueriesNV;
extern __attribute__((dllimport)) PFNGLENDOCCLUSIONQUERYNVPROC __glewEndOcclusionQueryNV;
extern __attribute__((dllimport)) PFNGLGENOCCLUSIONQUERIESNVPROC __glewGenOcclusionQueriesNV;
extern __attribute__((dllimport)) PFNGLGETOCCLUSIONQUERYIVNVPROC __glewGetOcclusionQueryivNV;
extern __attribute__((dllimport)) PFNGLGETOCCLUSIONQUERYUIVNVPROC __glewGetOcclusionQueryuivNV;
extern __attribute__((dllimport)) PFNGLISOCCLUSIONQUERYNVPROC __glewIsOcclusionQueryNV;

extern __attribute__((dllimport)) PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC __glewProgramBufferParametersIivNV;
extern __attribute__((dllimport)) PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC __glewProgramBufferParametersIuivNV;
extern __attribute__((dllimport)) PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC __glewProgramBufferParametersfvNV;

extern __attribute__((dllimport)) PFNGLCOPYPATHNVPROC __glewCopyPathNV;
extern __attribute__((dllimport)) PFNGLCOVERFILLPATHINSTANCEDNVPROC __glewCoverFillPathInstancedNV;
extern __attribute__((dllimport)) PFNGLCOVERFILLPATHNVPROC __glewCoverFillPathNV;
extern __attribute__((dllimport)) PFNGLCOVERSTROKEPATHINSTANCEDNVPROC __glewCoverStrokePathInstancedNV;
extern __attribute__((dllimport)) PFNGLCOVERSTROKEPATHNVPROC __glewCoverStrokePathNV;
extern __attribute__((dllimport)) PFNGLDELETEPATHSNVPROC __glewDeletePathsNV;
extern __attribute__((dllimport)) PFNGLGENPATHSNVPROC __glewGenPathsNV;
extern __attribute__((dllimport)) PFNGLGETPATHCOLORGENFVNVPROC __glewGetPathColorGenfvNV;
extern __attribute__((dllimport)) PFNGLGETPATHCOLORGENIVNVPROC __glewGetPathColorGenivNV;
extern __attribute__((dllimport)) PFNGLGETPATHCOMMANDSNVPROC __glewGetPathCommandsNV;
extern __attribute__((dllimport)) PFNGLGETPATHCOORDSNVPROC __glewGetPathCoordsNV;
extern __attribute__((dllimport)) PFNGLGETPATHDASHARRAYNVPROC __glewGetPathDashArrayNV;
extern __attribute__((dllimport)) PFNGLGETPATHLENGTHNVPROC __glewGetPathLengthNV;
extern __attribute__((dllimport)) PFNGLGETPATHMETRICRANGENVPROC __glewGetPathMetricRangeNV;
extern __attribute__((dllimport)) PFNGLGETPATHMETRICSNVPROC __glewGetPathMetricsNV;
extern __attribute__((dllimport)) PFNGLGETPATHPARAMETERFVNVPROC __glewGetPathParameterfvNV;
extern __attribute__((dllimport)) PFNGLGETPATHPARAMETERIVNVPROC __glewGetPathParameterivNV;
extern __attribute__((dllimport)) PFNGLGETPATHSPACINGNVPROC __glewGetPathSpacingNV;
extern __attribute__((dllimport)) PFNGLGETPATHTEXGENFVNVPROC __glewGetPathTexGenfvNV;
extern __attribute__((dllimport)) PFNGLGETPATHTEXGENIVNVPROC __glewGetPathTexGenivNV;
extern __attribute__((dllimport)) PFNGLGETPROGRAMRESOURCEFVNVPROC __glewGetProgramResourcefvNV;
extern __attribute__((dllimport)) PFNGLINTERPOLATEPATHSNVPROC __glewInterpolatePathsNV;
extern __attribute__((dllimport)) PFNGLISPATHNVPROC __glewIsPathNV;
extern __attribute__((dllimport)) PFNGLISPOINTINFILLPATHNVPROC __glewIsPointInFillPathNV;
extern __attribute__((dllimport)) PFNGLISPOINTINSTROKEPATHNVPROC __glewIsPointInStrokePathNV;
extern __attribute__((dllimport)) PFNGLMATRIXLOAD3X2FNVPROC __glewMatrixLoad3x2fNV;
extern __attribute__((dllimport)) PFNGLMATRIXLOAD3X3FNVPROC __glewMatrixLoad3x3fNV;
extern __attribute__((dllimport)) PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC __glewMatrixLoadTranspose3x3fNV;
extern __attribute__((dllimport)) PFNGLMATRIXMULT3X2FNVPROC __glewMatrixMult3x2fNV;
extern __attribute__((dllimport)) PFNGLMATRIXMULT3X3FNVPROC __glewMatrixMult3x3fNV;
extern __attribute__((dllimport)) PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC __glewMatrixMultTranspose3x3fNV;
extern __attribute__((dllimport)) PFNGLPATHCOLORGENNVPROC __glewPathColorGenNV;
extern __attribute__((dllimport)) PFNGLPATHCOMMANDSNVPROC __glewPathCommandsNV;
extern __attribute__((dllimport)) PFNGLPATHCOORDSNVPROC __glewPathCoordsNV;
extern __attribute__((dllimport)) PFNGLPATHCOVERDEPTHFUNCNVPROC __glewPathCoverDepthFuncNV;
extern __attribute__((dllimport)) PFNGLPATHDASHARRAYNVPROC __glewPathDashArrayNV;
extern __attribute__((dllimport)) PFNGLPATHFOGGENNVPROC __glewPathFogGenNV;
extern __attribute__((dllimport)) PFNGLPATHGLYPHINDEXARRAYNVPROC __glewPathGlyphIndexArrayNV;
extern __attribute__((dllimport)) PFNGLPATHGLYPHINDEXRANGENVPROC __glewPathGlyphIndexRangeNV;
extern __attribute__((dllimport)) PFNGLPATHGLYPHRANGENVPROC __glewPathGlyphRangeNV;
extern __attribute__((dllimport)) PFNGLPATHGLYPHSNVPROC __glewPathGlyphsNV;
extern __attribute__((dllimport)) PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC __glewPathMemoryGlyphIndexArrayNV;
extern __attribute__((dllimport)) PFNGLPATHPARAMETERFNVPROC __glewPathParameterfNV;
extern __attribute__((dllimport)) PFNGLPATHPARAMETERFVNVPROC __glewPathParameterfvNV;
extern __attribute__((dllimport)) PFNGLPATHPARAMETERINVPROC __glewPathParameteriNV;
extern __attribute__((dllimport)) PFNGLPATHPARAMETERIVNVPROC __glewPathParameterivNV;
extern __attribute__((dllimport)) PFNGLPATHSTENCILDEPTHOFFSETNVPROC __glewPathStencilDepthOffsetNV;
extern __attribute__((dllimport)) PFNGLPATHSTENCILFUNCNVPROC __glewPathStencilFuncNV;
extern __attribute__((dllimport)) PFNGLPATHSTRINGNVPROC __glewPathStringNV;
extern __attribute__((dllimport)) PFNGLPATHSUBCOMMANDSNVPROC __glewPathSubCommandsNV;
extern __attribute__((dllimport)) PFNGLPATHSUBCOORDSNVPROC __glewPathSubCoordsNV;
extern __attribute__((dllimport)) PFNGLPATHTEXGENNVPROC __glewPathTexGenNV;
extern __attribute__((dllimport)) PFNGLPOINTALONGPATHNVPROC __glewPointAlongPathNV;
extern __attribute__((dllimport)) PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC __glewProgramPathFragmentInputGenNV;
extern __attribute__((dllimport)) PFNGLSTENCILFILLPATHINSTANCEDNVPROC __glewStencilFillPathInstancedNV;
extern __attribute__((dllimport)) PFNGLSTENCILFILLPATHNVPROC __glewStencilFillPathNV;
extern __attribute__((dllimport)) PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC __glewStencilStrokePathInstancedNV;
extern __attribute__((dllimport)) PFNGLSTENCILSTROKEPATHNVPROC __glewStencilStrokePathNV;
extern __attribute__((dllimport)) PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC __glewStencilThenCoverFillPathInstancedNV;
extern __attribute__((dllimport)) PFNGLSTENCILTHENCOVERFILLPATHNVPROC __glewStencilThenCoverFillPathNV;
extern __attribute__((dllimport)) PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC __glewStencilThenCoverStrokePathInstancedNV;
extern __attribute__((dllimport)) PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC __glewStencilThenCoverStrokePathNV;
extern __attribute__((dllimport)) PFNGLTRANSFORMPATHNVPROC __glewTransformPathNV;
extern __attribute__((dllimport)) PFNGLWEIGHTPATHSNVPROC __glewWeightPathsNV;

extern __attribute__((dllimport)) PFNGLFLUSHPIXELDATARANGENVPROC __glewFlushPixelDataRangeNV;
extern __attribute__((dllimport)) PFNGLPIXELDATARANGENVPROC __glewPixelDataRangeNV;

extern __attribute__((dllimport)) PFNGLPOINTPARAMETERINVPROC __glewPointParameteriNV;
extern __attribute__((dllimport)) PFNGLPOINTPARAMETERIVNVPROC __glewPointParameterivNV;

extern __attribute__((dllimport)) PFNGLGETVIDEOI64VNVPROC __glewGetVideoi64vNV;
extern __attribute__((dllimport)) PFNGLGETVIDEOIVNVPROC __glewGetVideoivNV;
extern __attribute__((dllimport)) PFNGLGETVIDEOUI64VNVPROC __glewGetVideoui64vNV;
extern __attribute__((dllimport)) PFNGLGETVIDEOUIVNVPROC __glewGetVideouivNV;
extern __attribute__((dllimport)) PFNGLPRESENTFRAMEDUALFILLNVPROC __glewPresentFrameDualFillNV;
extern __attribute__((dllimport)) PFNGLPRESENTFRAMEKEYEDNVPROC __glewPresentFrameKeyedNV;

extern __attribute__((dllimport)) PFNGLPRIMITIVERESTARTINDEXNVPROC __glewPrimitiveRestartIndexNV;
extern __attribute__((dllimport)) PFNGLPRIMITIVERESTARTNVPROC __glewPrimitiveRestartNV;

extern __attribute__((dllimport)) PFNGLCOMBINERINPUTNVPROC __glewCombinerInputNV;
extern __attribute__((dllimport)) PFNGLCOMBINEROUTPUTNVPROC __glewCombinerOutputNV;
extern __attribute__((dllimport)) PFNGLCOMBINERPARAMETERFNVPROC __glewCombinerParameterfNV;
extern __attribute__((dllimport)) PFNGLCOMBINERPARAMETERFVNVPROC __glewCombinerParameterfvNV;
extern __attribute__((dllimport)) PFNGLCOMBINERPARAMETERINVPROC __glewCombinerParameteriNV;
extern __attribute__((dllimport)) PFNGLCOMBINERPARAMETERIVNVPROC __glewCombinerParameterivNV;
extern __attribute__((dllimport)) PFNGLFINALCOMBINERINPUTNVPROC __glewFinalCombinerInputNV;
extern __attribute__((dllimport)) PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC __glewGetCombinerInputParameterfvNV;
extern __attribute__((dllimport)) PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC __glewGetCombinerInputParameterivNV;
extern __attribute__((dllimport)) PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC __glewGetCombinerOutputParameterfvNV;
extern __attribute__((dllimport)) PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC __glewGetCombinerOutputParameterivNV;
extern __attribute__((dllimport)) PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC __glewGetFinalCombinerInputParameterfvNV;
extern __attribute__((dllimport)) PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC __glewGetFinalCombinerInputParameterivNV;

extern __attribute__((dllimport)) PFNGLCOMBINERSTAGEPARAMETERFVNVPROC __glewCombinerStageParameterfvNV;
extern __attribute__((dllimport)) PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC __glewGetCombinerStageParameterfvNV;

extern __attribute__((dllimport)) PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC __glewFramebufferSampleLocationsfvNV;
extern __attribute__((dllimport)) PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC __glewNamedFramebufferSampleLocationsfvNV;

extern __attribute__((dllimport)) PFNGLGETBUFFERPARAMETERUI64VNVPROC __glewGetBufferParameterui64vNV;
extern __attribute__((dllimport)) PFNGLGETINTEGERUI64VNVPROC __glewGetIntegerui64vNV;
extern __attribute__((dllimport)) PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC __glewGetNamedBufferParameterui64vNV;
extern __attribute__((dllimport)) PFNGLISBUFFERRESIDENTNVPROC __glewIsBufferResidentNV;
extern __attribute__((dllimport)) PFNGLISNAMEDBUFFERRESIDENTNVPROC __glewIsNamedBufferResidentNV;
extern __attribute__((dllimport)) PFNGLMAKEBUFFERNONRESIDENTNVPROC __glewMakeBufferNonResidentNV;
extern __attribute__((dllimport)) PFNGLMAKEBUFFERRESIDENTNVPROC __glewMakeBufferResidentNV;
extern __attribute__((dllimport)) PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC __glewMakeNamedBufferNonResidentNV;
extern __attribute__((dllimport)) PFNGLMAKENAMEDBUFFERRESIDENTNVPROC __glewMakeNamedBufferResidentNV;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMUI64NVPROC __glewProgramUniformui64NV;
extern __attribute__((dllimport)) PFNGLPROGRAMUNIFORMUI64VNVPROC __glewProgramUniformui64vNV;
extern __attribute__((dllimport)) PFNGLUNIFORMUI64NVPROC __glewUniformui64NV;
extern __attribute__((dllimport)) PFNGLUNIFORMUI64VNVPROC __glewUniformui64vNV;

extern __attribute__((dllimport)) PFNGLTEXTUREBARRIERNVPROC __glewTextureBarrierNV;

extern __attribute__((dllimport)) PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC __glewTexImage2DMultisampleCoverageNV;
extern __attribute__((dllimport)) PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC __glewTexImage3DMultisampleCoverageNV;
extern __attribute__((dllimport)) PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC __glewTextureImage2DMultisampleCoverageNV;
extern __attribute__((dllimport)) PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC __glewTextureImage2DMultisampleNV;
extern __attribute__((dllimport)) PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC __glewTextureImage3DMultisampleCoverageNV;
extern __attribute__((dllimport)) PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC __glewTextureImage3DMultisampleNV;

extern __attribute__((dllimport)) PFNGLACTIVEVARYINGNVPROC __glewActiveVaryingNV;
extern __attribute__((dllimport)) PFNGLBEGINTRANSFORMFEEDBACKNVPROC __glewBeginTransformFeedbackNV;
extern __attribute__((dllimport)) PFNGLBINDBUFFERBASENVPROC __glewBindBufferBaseNV;
extern __attribute__((dllimport)) PFNGLBINDBUFFEROFFSETNVPROC __glewBindBufferOffsetNV;
extern __attribute__((dllimport)) PFNGLBINDBUFFERRANGENVPROC __glewBindBufferRangeNV;
extern __attribute__((dllimport)) PFNGLENDTRANSFORMFEEDBACKNVPROC __glewEndTransformFeedbackNV;
extern __attribute__((dllimport)) PFNGLGETACTIVEVARYINGNVPROC __glewGetActiveVaryingNV;
extern __attribute__((dllimport)) PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC __glewGetTransformFeedbackVaryingNV;
extern __attribute__((dllimport)) PFNGLGETVARYINGLOCATIONNVPROC __glewGetVaryingLocationNV;
extern __attribute__((dllimport)) PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC __glewTransformFeedbackAttribsNV;
extern __attribute__((dllimport)) PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC __glewTransformFeedbackVaryingsNV;

extern __attribute__((dllimport)) PFNGLBINDTRANSFORMFEEDBACKNVPROC __glewBindTransformFeedbackNV;
extern __attribute__((dllimport)) PFNGLDELETETRANSFORMFEEDBACKSNVPROC __glewDeleteTransformFeedbacksNV;
extern __attribute__((dllimport)) PFNGLDRAWTRANSFORMFEEDBACKNVPROC __glewDrawTransformFeedbackNV;
extern __attribute__((dllimport)) PFNGLGENTRANSFORMFEEDBACKSNVPROC __glewGenTransformFeedbacksNV;
extern __attribute__((dllimport)) PFNGLISTRANSFORMFEEDBACKNVPROC __glewIsTransformFeedbackNV;
extern __attribute__((dllimport)) PFNGLPAUSETRANSFORMFEEDBACKNVPROC __glewPauseTransformFeedbackNV;
extern __attribute__((dllimport)) PFNGLRESUMETRANSFORMFEEDBACKNVPROC __glewResumeTransformFeedbackNV;

extern __attribute__((dllimport)) PFNGLVDPAUFININVPROC __glewVDPAUFiniNV;
extern __attribute__((dllimport)) PFNGLVDPAUGETSURFACEIVNVPROC __glewVDPAUGetSurfaceivNV;
extern __attribute__((dllimport)) PFNGLVDPAUINITNVPROC __glewVDPAUInitNV;
extern __attribute__((dllimport)) PFNGLVDPAUISSURFACENVPROC __glewVDPAUIsSurfaceNV;
extern __attribute__((dllimport)) PFNGLVDPAUMAPSURFACESNVPROC __glewVDPAUMapSurfacesNV;
extern __attribute__((dllimport)) PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC __glewVDPAURegisterOutputSurfaceNV;
extern __attribute__((dllimport)) PFNGLVDPAUREGISTERVIDEOSURFACENVPROC __glewVDPAURegisterVideoSurfaceNV;
extern __attribute__((dllimport)) PFNGLVDPAUSURFACEACCESSNVPROC __glewVDPAUSurfaceAccessNV;
extern __attribute__((dllimport)) PFNGLVDPAUUNMAPSURFACESNVPROC __glewVDPAUUnmapSurfacesNV;
extern __attribute__((dllimport)) PFNGLVDPAUUNREGISTERSURFACENVPROC __glewVDPAUUnregisterSurfaceNV;

extern __attribute__((dllimport)) PFNGLFLUSHVERTEXARRAYRANGENVPROC __glewFlushVertexArrayRangeNV;
extern __attribute__((dllimport)) PFNGLVERTEXARRAYRANGENVPROC __glewVertexArrayRangeNV;

extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBLI64VNVPROC __glewGetVertexAttribLi64vNV;
extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBLUI64VNVPROC __glewGetVertexAttribLui64vNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL1I64NVPROC __glewVertexAttribL1i64NV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL1I64VNVPROC __glewVertexAttribL1i64vNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL1UI64NVPROC __glewVertexAttribL1ui64NV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL1UI64VNVPROC __glewVertexAttribL1ui64vNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL2I64NVPROC __glewVertexAttribL2i64NV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL2I64VNVPROC __glewVertexAttribL2i64vNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL2UI64NVPROC __glewVertexAttribL2ui64NV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL2UI64VNVPROC __glewVertexAttribL2ui64vNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL3I64NVPROC __glewVertexAttribL3i64NV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL3I64VNVPROC __glewVertexAttribL3i64vNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL3UI64NVPROC __glewVertexAttribL3ui64NV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL3UI64VNVPROC __glewVertexAttribL3ui64vNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL4I64NVPROC __glewVertexAttribL4i64NV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL4I64VNVPROC __glewVertexAttribL4i64vNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL4UI64NVPROC __glewVertexAttribL4ui64NV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBL4UI64VNVPROC __glewVertexAttribL4ui64vNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBLFORMATNVPROC __glewVertexAttribLFormatNV;

extern __attribute__((dllimport)) PFNGLBUFFERADDRESSRANGENVPROC __glewBufferAddressRangeNV;
extern __attribute__((dllimport)) PFNGLCOLORFORMATNVPROC __glewColorFormatNV;
extern __attribute__((dllimport)) PFNGLEDGEFLAGFORMATNVPROC __glewEdgeFlagFormatNV;
extern __attribute__((dllimport)) PFNGLFOGCOORDFORMATNVPROC __glewFogCoordFormatNV;
extern __attribute__((dllimport)) PFNGLGETINTEGERUI64I_VNVPROC __glewGetIntegerui64i_vNV;
extern __attribute__((dllimport)) PFNGLINDEXFORMATNVPROC __glewIndexFormatNV;
extern __attribute__((dllimport)) PFNGLNORMALFORMATNVPROC __glewNormalFormatNV;
extern __attribute__((dllimport)) PFNGLSECONDARYCOLORFORMATNVPROC __glewSecondaryColorFormatNV;
extern __attribute__((dllimport)) PFNGLTEXCOORDFORMATNVPROC __glewTexCoordFormatNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBFORMATNVPROC __glewVertexAttribFormatNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBIFORMATNVPROC __glewVertexAttribIFormatNV;
extern __attribute__((dllimport)) PFNGLVERTEXFORMATNVPROC __glewVertexFormatNV;

extern __attribute__((dllimport)) PFNGLAREPROGRAMSRESIDENTNVPROC __glewAreProgramsResidentNV;
extern __attribute__((dllimport)) PFNGLBINDPROGRAMNVPROC __glewBindProgramNV;
extern __attribute__((dllimport)) PFNGLDELETEPROGRAMSNVPROC __glewDeleteProgramsNV;
extern __attribute__((dllimport)) PFNGLEXECUTEPROGRAMNVPROC __glewExecuteProgramNV;
extern __attribute__((dllimport)) PFNGLGENPROGRAMSNVPROC __glewGenProgramsNV;
extern __attribute__((dllimport)) PFNGLGETPROGRAMPARAMETERDVNVPROC __glewGetProgramParameterdvNV;
extern __attribute__((dllimport)) PFNGLGETPROGRAMPARAMETERFVNVPROC __glewGetProgramParameterfvNV;
extern __attribute__((dllimport)) PFNGLGETPROGRAMSTRINGNVPROC __glewGetProgramStringNV;
extern __attribute__((dllimport)) PFNGLGETPROGRAMIVNVPROC __glewGetProgramivNV;
extern __attribute__((dllimport)) PFNGLGETTRACKMATRIXIVNVPROC __glewGetTrackMatrixivNV;
extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBPOINTERVNVPROC __glewGetVertexAttribPointervNV;
extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBDVNVPROC __glewGetVertexAttribdvNV;
extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBFVNVPROC __glewGetVertexAttribfvNV;
extern __attribute__((dllimport)) PFNGLGETVERTEXATTRIBIVNVPROC __glewGetVertexAttribivNV;
extern __attribute__((dllimport)) PFNGLISPROGRAMNVPROC __glewIsProgramNV;
extern __attribute__((dllimport)) PFNGLLOADPROGRAMNVPROC __glewLoadProgramNV;
extern __attribute__((dllimport)) PFNGLPROGRAMPARAMETER4DNVPROC __glewProgramParameter4dNV;
extern __attribute__((dllimport)) PFNGLPROGRAMPARAMETER4DVNVPROC __glewProgramParameter4dvNV;
extern __attribute__((dllimport)) PFNGLPROGRAMPARAMETER4FNVPROC __glewProgramParameter4fNV;
extern __attribute__((dllimport)) PFNGLPROGRAMPARAMETER4FVNVPROC __glewProgramParameter4fvNV;
extern __attribute__((dllimport)) PFNGLPROGRAMPARAMETERS4DVNVPROC __glewProgramParameters4dvNV;
extern __attribute__((dllimport)) PFNGLPROGRAMPARAMETERS4FVNVPROC __glewProgramParameters4fvNV;
extern __attribute__((dllimport)) PFNGLREQUESTRESIDENTPROGRAMSNVPROC __glewRequestResidentProgramsNV;
extern __attribute__((dllimport)) PFNGLTRACKMATRIXNVPROC __glewTrackMatrixNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB1DNVPROC __glewVertexAttrib1dNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB1DVNVPROC __glewVertexAttrib1dvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB1FNVPROC __glewVertexAttrib1fNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB1FVNVPROC __glewVertexAttrib1fvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB1SNVPROC __glewVertexAttrib1sNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB1SVNVPROC __glewVertexAttrib1svNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB2DNVPROC __glewVertexAttrib2dNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB2DVNVPROC __glewVertexAttrib2dvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB2FNVPROC __glewVertexAttrib2fNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB2FVNVPROC __glewVertexAttrib2fvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB2SNVPROC __glewVertexAttrib2sNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB2SVNVPROC __glewVertexAttrib2svNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB3DNVPROC __glewVertexAttrib3dNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB3DVNVPROC __glewVertexAttrib3dvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB3FNVPROC __glewVertexAttrib3fNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB3FVNVPROC __glewVertexAttrib3fvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB3SNVPROC __glewVertexAttrib3sNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB3SVNVPROC __glewVertexAttrib3svNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4DNVPROC __glewVertexAttrib4dNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4DVNVPROC __glewVertexAttrib4dvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4FNVPROC __glewVertexAttrib4fNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4FVNVPROC __glewVertexAttrib4fvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4SNVPROC __glewVertexAttrib4sNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4SVNVPROC __glewVertexAttrib4svNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4UBNVPROC __glewVertexAttrib4ubNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIB4UBVNVPROC __glewVertexAttrib4ubvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBPOINTERNVPROC __glewVertexAttribPointerNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBS1DVNVPROC __glewVertexAttribs1dvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBS1FVNVPROC __glewVertexAttribs1fvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBS1SVNVPROC __glewVertexAttribs1svNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBS2DVNVPROC __glewVertexAttribs2dvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBS2FVNVPROC __glewVertexAttribs2fvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBS2SVNVPROC __glewVertexAttribs2svNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBS3DVNVPROC __glewVertexAttribs3dvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBS3FVNVPROC __glewVertexAttribs3fvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBS3SVNVPROC __glewVertexAttribs3svNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBS4DVNVPROC __glewVertexAttribs4dvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBS4FVNVPROC __glewVertexAttribs4fvNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBS4SVNVPROC __glewVertexAttribs4svNV;
extern __attribute__((dllimport)) PFNGLVERTEXATTRIBS4UBVNVPROC __glewVertexAttribs4ubvNV;

extern __attribute__((dllimport)) PFNGLBEGINVIDEOCAPTURENVPROC __glewBeginVideoCaptureNV;
extern __attribute__((dllimport)) PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC __glewBindVideoCaptureStreamBufferNV;
extern __attribute__((dllimport)) PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC __glewBindVideoCaptureStreamTextureNV;
extern __attribute__((dllimport)) PFNGLENDVIDEOCAPTURENVPROC __glewEndVideoCaptureNV;
extern __attribute__((dllimport)) PFNGLGETVIDEOCAPTURESTREAMDVNVPROC __glewGetVideoCaptureStreamdvNV;
extern __attribute__((dllimport)) PFNGLGETVIDEOCAPTURESTREAMFVNVPROC __glewGetVideoCaptureStreamfvNV;
extern __attribute__((dllimport)) PFNGLGETVIDEOCAPTURESTREAMIVNVPROC __glewGetVideoCaptureStreamivNV;
extern __attribute__((dllimport)) PFNGLGETVIDEOCAPTUREIVNVPROC __glewGetVideoCaptureivNV;
extern __attribute__((dllimport)) PFNGLVIDEOCAPTURENVPROC __glewVideoCaptureNV;
extern __attribute__((dllimport)) PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC __glewVideoCaptureStreamParameterdvNV;
extern __attribute__((dllimport)) PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC __glewVideoCaptureStreamParameterfvNV;
extern __attribute__((dllimport)) PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC __glewVideoCaptureStreamParameterivNV;

extern __attribute__((dllimport)) PFNGLCLEARDEPTHFOESPROC __glewClearDepthfOES;
extern __attribute__((dllimport)) PFNGLCLIPPLANEFOESPROC __glewClipPlanefOES;
extern __attribute__((dllimport)) PFNGLDEPTHRANGEFOESPROC __glewDepthRangefOES;
extern __attribute__((dllimport)) PFNGLFRUSTUMFOESPROC __glewFrustumfOES;
extern __attribute__((dllimport)) PFNGLGETCLIPPLANEFOESPROC __glewGetClipPlanefOES;
extern __attribute__((dllimport)) PFNGLORTHOFOESPROC __glewOrthofOES;

extern __attribute__((dllimport)) PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC __glewFramebufferTextureMultiviewOVR;

extern __attribute__((dllimport)) PFNGLALPHAFUNCXPROC __glewAlphaFuncx;
extern __attribute__((dllimport)) PFNGLCLEARCOLORXPROC __glewClearColorx;
extern __attribute__((dllimport)) PFNGLCLEARDEPTHXPROC __glewClearDepthx;
extern __attribute__((dllimport)) PFNGLCOLOR4XPROC __glewColor4x;
extern __attribute__((dllimport)) PFNGLDEPTHRANGEXPROC __glewDepthRangex;
extern __attribute__((dllimport)) PFNGLFOGXPROC __glewFogx;
extern __attribute__((dllimport)) PFNGLFOGXVPROC __glewFogxv;
extern __attribute__((dllimport)) PFNGLFRUSTUMFPROC __glewFrustumf;
extern __attribute__((dllimport)) PFNGLFRUSTUMXPROC __glewFrustumx;
extern __attribute__((dllimport)) PFNGLLIGHTMODELXPROC __glewLightModelx;
extern __attribute__((dllimport)) PFNGLLIGHTMODELXVPROC __glewLightModelxv;
extern __attribute__((dllimport)) PFNGLLIGHTXPROC __glewLightx;
extern __attribute__((dllimport)) PFNGLLIGHTXVPROC __glewLightxv;
extern __attribute__((dllimport)) PFNGLLINEWIDTHXPROC __glewLineWidthx;
extern __attribute__((dllimport)) PFNGLLOADMATRIXXPROC __glewLoadMatrixx;
extern __attribute__((dllimport)) PFNGLMATERIALXPROC __glewMaterialx;
extern __attribute__((dllimport)) PFNGLMATERIALXVPROC __glewMaterialxv;
extern __attribute__((dllimport)) PFNGLMULTMATRIXXPROC __glewMultMatrixx;
extern __attribute__((dllimport)) PFNGLMULTITEXCOORD4XPROC __glewMultiTexCoord4x;
extern __attribute__((dllimport)) PFNGLNORMAL3XPROC __glewNormal3x;
extern __attribute__((dllimport)) PFNGLORTHOFPROC __glewOrthof;
extern __attribute__((dllimport)) PFNGLORTHOXPROC __glewOrthox;
extern __attribute__((dllimport)) PFNGLPOINTSIZEXPROC __glewPointSizex;
extern __attribute__((dllimport)) PFNGLPOLYGONOFFSETXPROC __glewPolygonOffsetx;
extern __attribute__((dllimport)) PFNGLROTATEXPROC __glewRotatex;
extern __attribute__((dllimport)) PFNGLSAMPLECOVERAGEXPROC __glewSampleCoveragex;
extern __attribute__((dllimport)) PFNGLSCALEXPROC __glewScalex;
extern __attribute__((dllimport)) PFNGLTEXENVXPROC __glewTexEnvx;
extern __attribute__((dllimport)) PFNGLTEXENVXVPROC __glewTexEnvxv;
extern __attribute__((dllimport)) PFNGLTEXPARAMETERXPROC __glewTexParameterx;
extern __attribute__((dllimport)) PFNGLTRANSLATEXPROC __glewTranslatex;

extern __attribute__((dllimport)) PFNGLCLIPPLANEFPROC __glewClipPlanef;
extern __attribute__((dllimport)) PFNGLCLIPPLANEXPROC __glewClipPlanex;
extern __attribute__((dllimport)) PFNGLGETCLIPPLANEFPROC __glewGetClipPlanef;
extern __attribute__((dllimport)) PFNGLGETCLIPPLANEXPROC __glewGetClipPlanex;
extern __attribute__((dllimport)) PFNGLGETFIXEDVPROC __glewGetFixedv;
extern __attribute__((dllimport)) PFNGLGETLIGHTXVPROC __glewGetLightxv;
extern __attribute__((dllimport)) PFNGLGETMATERIALXVPROC __glewGetMaterialxv;
extern __attribute__((dllimport)) PFNGLGETTEXENVXVPROC __glewGetTexEnvxv;
extern __attribute__((dllimport)) PFNGLGETTEXPARAMETERXVPROC __glewGetTexParameterxv;
extern __attribute__((dllimport)) PFNGLPOINTPARAMETERXPROC __glewPointParameterx;
extern __attribute__((dllimport)) PFNGLPOINTPARAMETERXVPROC __glewPointParameterxv;
extern __attribute__((dllimport)) PFNGLPOINTSIZEPOINTEROESPROC __glewPointSizePointerOES;
extern __attribute__((dllimport)) PFNGLTEXPARAMETERXVPROC __glewTexParameterxv;

extern __attribute__((dllimport)) PFNGLERRORSTRINGREGALPROC __glewErrorStringREGAL;

extern __attribute__((dllimport)) PFNGLGETEXTENSIONREGALPROC __glewGetExtensionREGAL;
extern __attribute__((dllimport)) PFNGLISSUPPORTEDREGALPROC __glewIsSupportedREGAL;

extern __attribute__((dllimport)) PFNGLLOGMESSAGECALLBACKREGALPROC __glewLogMessageCallbackREGAL;

extern __attribute__((dllimport)) PFNGLGETPROCADDRESSREGALPROC __glewGetProcAddressREGAL;

extern __attribute__((dllimport)) PFNGLDETAILTEXFUNCSGISPROC __glewDetailTexFuncSGIS;
extern __attribute__((dllimport)) PFNGLGETDETAILTEXFUNCSGISPROC __glewGetDetailTexFuncSGIS;

extern __attribute__((dllimport)) PFNGLFOGFUNCSGISPROC __glewFogFuncSGIS;
extern __attribute__((dllimport)) PFNGLGETFOGFUNCSGISPROC __glewGetFogFuncSGIS;

extern __attribute__((dllimport)) PFNGLSAMPLEMASKSGISPROC __glewSampleMaskSGIS;
extern __attribute__((dllimport)) PFNGLSAMPLEPATTERNSGISPROC __glewSamplePatternSGIS;

extern __attribute__((dllimport)) PFNGLGETSHARPENTEXFUNCSGISPROC __glewGetSharpenTexFuncSGIS;
extern __attribute__((dllimport)) PFNGLSHARPENTEXFUNCSGISPROC __glewSharpenTexFuncSGIS;

extern __attribute__((dllimport)) PFNGLTEXIMAGE4DSGISPROC __glewTexImage4DSGIS;
extern __attribute__((dllimport)) PFNGLTEXSUBIMAGE4DSGISPROC __glewTexSubImage4DSGIS;

extern __attribute__((dllimport)) PFNGLGETTEXFILTERFUNCSGISPROC __glewGetTexFilterFuncSGIS;
extern __attribute__((dllimport)) PFNGLTEXFILTERFUNCSGISPROC __glewTexFilterFuncSGIS;

extern __attribute__((dllimport)) PFNGLASYNCMARKERSGIXPROC __glewAsyncMarkerSGIX;
extern __attribute__((dllimport)) PFNGLDELETEASYNCMARKERSSGIXPROC __glewDeleteAsyncMarkersSGIX;
extern __attribute__((dllimport)) PFNGLFINISHASYNCSGIXPROC __glewFinishAsyncSGIX;
extern __attribute__((dllimport)) PFNGLGENASYNCMARKERSSGIXPROC __glewGenAsyncMarkersSGIX;
extern __attribute__((dllimport)) PFNGLISASYNCMARKERSGIXPROC __glewIsAsyncMarkerSGIX;
extern __attribute__((dllimport)) PFNGLPOLLASYNCSGIXPROC __glewPollAsyncSGIX;

extern __attribute__((dllimport)) PFNGLFLUSHRASTERSGIXPROC __glewFlushRasterSGIX;

extern __attribute__((dllimport)) PFNGLTEXTUREFOGSGIXPROC __glewTextureFogSGIX;

extern __attribute__((dllimport)) PFNGLFRAGMENTCOLORMATERIALSGIXPROC __glewFragmentColorMaterialSGIX;
extern __attribute__((dllimport)) PFNGLFRAGMENTLIGHTMODELFSGIXPROC __glewFragmentLightModelfSGIX;
extern __attribute__((dllimport)) PFNGLFRAGMENTLIGHTMODELFVSGIXPROC __glewFragmentLightModelfvSGIX;
extern __attribute__((dllimport)) PFNGLFRAGMENTLIGHTMODELISGIXPROC __glewFragmentLightModeliSGIX;
extern __attribute__((dllimport)) PFNGLFRAGMENTLIGHTMODELIVSGIXPROC __glewFragmentLightModelivSGIX;
extern __attribute__((dllimport)) PFNGLFRAGMENTLIGHTFSGIXPROC __glewFragmentLightfSGIX;
extern __attribute__((dllimport)) PFNGLFRAGMENTLIGHTFVSGIXPROC __glewFragmentLightfvSGIX;
extern __attribute__((dllimport)) PFNGLFRAGMENTLIGHTISGIXPROC __glewFragmentLightiSGIX;
extern __attribute__((dllimport)) PFNGLFRAGMENTLIGHTIVSGIXPROC __glewFragmentLightivSGIX;
extern __attribute__((dllimport)) PFNGLFRAGMENTMATERIALFSGIXPROC __glewFragmentMaterialfSGIX;
extern __attribute__((dllimport)) PFNGLFRAGMENTMATERIALFVSGIXPROC __glewFragmentMaterialfvSGIX;
extern __attribute__((dllimport)) PFNGLFRAGMENTMATERIALISGIXPROC __glewFragmentMaterialiSGIX;
extern __attribute__((dllimport)) PFNGLFRAGMENTMATERIALIVSGIXPROC __glewFragmentMaterialivSGIX;
extern __attribute__((dllimport)) PFNGLGETFRAGMENTLIGHTFVSGIXPROC __glewGetFragmentLightfvSGIX;
extern __attribute__((dllimport)) PFNGLGETFRAGMENTLIGHTIVSGIXPROC __glewGetFragmentLightivSGIX;
extern __attribute__((dllimport)) PFNGLGETFRAGMENTMATERIALFVSGIXPROC __glewGetFragmentMaterialfvSGIX;
extern __attribute__((dllimport)) PFNGLGETFRAGMENTMATERIALIVSGIXPROC __glewGetFragmentMaterialivSGIX;

extern __attribute__((dllimport)) PFNGLFRAMEZOOMSGIXPROC __glewFrameZoomSGIX;

extern __attribute__((dllimport)) PFNGLPIXELTEXGENSGIXPROC __glewPixelTexGenSGIX;

extern __attribute__((dllimport)) PFNGLREFERENCEPLANESGIXPROC __glewReferencePlaneSGIX;

extern __attribute__((dllimport)) PFNGLSPRITEPARAMETERFSGIXPROC __glewSpriteParameterfSGIX;
extern __attribute__((dllimport)) PFNGLSPRITEPARAMETERFVSGIXPROC __glewSpriteParameterfvSGIX;
extern __attribute__((dllimport)) PFNGLSPRITEPARAMETERISGIXPROC __glewSpriteParameteriSGIX;
extern __attribute__((dllimport)) PFNGLSPRITEPARAMETERIVSGIXPROC __glewSpriteParameterivSGIX;

extern __attribute__((dllimport)) PFNGLTAGSAMPLEBUFFERSGIXPROC __glewTagSampleBufferSGIX;

extern __attribute__((dllimport)) PFNGLCOLORTABLEPARAMETERFVSGIPROC __glewColorTableParameterfvSGI;
extern __attribute__((dllimport)) PFNGLCOLORTABLEPARAMETERIVSGIPROC __glewColorTableParameterivSGI;
extern __attribute__((dllimport)) PFNGLCOLORTABLESGIPROC __glewColorTableSGI;
extern __attribute__((dllimport)) PFNGLCOPYCOLORTABLESGIPROC __glewCopyColorTableSGI;
extern __attribute__((dllimport)) PFNGLGETCOLORTABLEPARAMETERFVSGIPROC __glewGetColorTableParameterfvSGI;
extern __attribute__((dllimport)) PFNGLGETCOLORTABLEPARAMETERIVSGIPROC __glewGetColorTableParameterivSGI;
extern __attribute__((dllimport)) PFNGLGETCOLORTABLESGIPROC __glewGetColorTableSGI;

extern __attribute__((dllimport)) PFNGLFINISHTEXTURESUNXPROC __glewFinishTextureSUNX;

extern __attribute__((dllimport)) PFNGLGLOBALALPHAFACTORBSUNPROC __glewGlobalAlphaFactorbSUN;
extern __attribute__((dllimport)) PFNGLGLOBALALPHAFACTORDSUNPROC __glewGlobalAlphaFactordSUN;
extern __attribute__((dllimport)) PFNGLGLOBALALPHAFACTORFSUNPROC __glewGlobalAlphaFactorfSUN;
extern __attribute__((dllimport)) PFNGLGLOBALALPHAFACTORISUNPROC __glewGlobalAlphaFactoriSUN;
extern __attribute__((dllimport)) PFNGLGLOBALALPHAFACTORSSUNPROC __glewGlobalAlphaFactorsSUN;
extern __attribute__((dllimport)) PFNGLGLOBALALPHAFACTORUBSUNPROC __glewGlobalAlphaFactorubSUN;
extern __attribute__((dllimport)) PFNGLGLOBALALPHAFACTORUISUNPROC __glewGlobalAlphaFactoruiSUN;
extern __attribute__((dllimport)) PFNGLGLOBALALPHAFACTORUSSUNPROC __glewGlobalAlphaFactorusSUN;

extern __attribute__((dllimport)) PFNGLREADVIDEOPIXELSSUNPROC __glewReadVideoPixelsSUN;

extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEPOINTERSUNPROC __glewReplacementCodePointerSUN;
extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEUBSUNPROC __glewReplacementCodeubSUN;
extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEUBVSUNPROC __glewReplacementCodeubvSUN;
extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEUISUNPROC __glewReplacementCodeuiSUN;
extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEUIVSUNPROC __glewReplacementCodeuivSUN;
extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEUSSUNPROC __glewReplacementCodeusSUN;
extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEUSVSUNPROC __glewReplacementCodeusvSUN;

extern __attribute__((dllimport)) PFNGLCOLOR3FVERTEX3FSUNPROC __glewColor3fVertex3fSUN;
extern __attribute__((dllimport)) PFNGLCOLOR3FVERTEX3FVSUNPROC __glewColor3fVertex3fvSUN;
extern __attribute__((dllimport)) PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC __glewColor4fNormal3fVertex3fSUN;
extern __attribute__((dllimport)) PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewColor4fNormal3fVertex3fvSUN;
extern __attribute__((dllimport)) PFNGLCOLOR4UBVERTEX2FSUNPROC __glewColor4ubVertex2fSUN;
extern __attribute__((dllimport)) PFNGLCOLOR4UBVERTEX2FVSUNPROC __glewColor4ubVertex2fvSUN;
extern __attribute__((dllimport)) PFNGLCOLOR4UBVERTEX3FSUNPROC __glewColor4ubVertex3fSUN;
extern __attribute__((dllimport)) PFNGLCOLOR4UBVERTEX3FVSUNPROC __glewColor4ubVertex3fvSUN;
extern __attribute__((dllimport)) PFNGLNORMAL3FVERTEX3FSUNPROC __glewNormal3fVertex3fSUN;
extern __attribute__((dllimport)) PFNGLNORMAL3FVERTEX3FVSUNPROC __glewNormal3fVertex3fvSUN;
extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC __glewReplacementCodeuiColor3fVertex3fSUN;
extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC __glewReplacementCodeuiColor3fVertex3fvSUN;
extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiColor4fNormal3fVertex3fSUN;
extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiColor4fNormal3fVertex3fvSUN;
extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC __glewReplacementCodeuiColor4ubVertex3fSUN;
extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC __glewReplacementCodeuiColor4ubVertex3fvSUN;
extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiNormal3fVertex3fSUN;
extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiNormal3fVertex3fvSUN;
extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC __glewReplacementCodeuiTexCoord2fVertex3fSUN;
extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC __glewReplacementCodeuiTexCoord2fVertex3fvSUN;
extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC __glewReplacementCodeuiVertex3fSUN;
extern __attribute__((dllimport)) PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC __glewReplacementCodeuiVertex3fvSUN;
extern __attribute__((dllimport)) PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC __glewTexCoord2fColor3fVertex3fSUN;
extern __attribute__((dllimport)) PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC __glewTexCoord2fColor3fVertex3fvSUN;
extern __attribute__((dllimport)) PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC __glewTexCoord2fColor4fNormal3fVertex3fSUN;
extern __attribute__((dllimport)) PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewTexCoord2fColor4fNormal3fVertex3fvSUN;
extern __attribute__((dllimport)) PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC __glewTexCoord2fColor4ubVertex3fSUN;
extern __attribute__((dllimport)) PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC __glewTexCoord2fColor4ubVertex3fvSUN;
extern __attribute__((dllimport)) PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC __glewTexCoord2fNormal3fVertex3fSUN;
extern __attribute__((dllimport)) PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC __glewTexCoord2fNormal3fVertex3fvSUN;
extern __attribute__((dllimport)) PFNGLTEXCOORD2FVERTEX3FSUNPROC __glewTexCoord2fVertex3fSUN;
extern __attribute__((dllimport)) PFNGLTEXCOORD2FVERTEX3FVSUNPROC __glewTexCoord2fVertex3fvSUN;
extern __attribute__((dllimport)) PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC __glewTexCoord4fColor4fNormal3fVertex4fSUN;
extern __attribute__((dllimport)) PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC __glewTexCoord4fColor4fNormal3fVertex4fvSUN;
extern __attribute__((dllimport)) PFNGLTEXCOORD4FVERTEX4FSUNPROC __glewTexCoord4fVertex4fSUN;
extern __attribute__((dllimport)) PFNGLTEXCOORD4FVERTEX4FVSUNPROC __glewTexCoord4fVertex4fvSUN;

extern __attribute__((dllimport)) PFNGLADDSWAPHINTRECTWINPROC __glewAddSwapHintRectWIN;






extern __attribute__((dllimport)) GLboolean __GLEW_VERSION_1_1;
extern __attribute__((dllimport)) GLboolean __GLEW_VERSION_1_2;
extern __attribute__((dllimport)) GLboolean __GLEW_VERSION_1_2_1;
extern __attribute__((dllimport)) GLboolean __GLEW_VERSION_1_3;
extern __attribute__((dllimport)) GLboolean __GLEW_VERSION_1_4;
extern __attribute__((dllimport)) GLboolean __GLEW_VERSION_1_5;
extern __attribute__((dllimport)) GLboolean __GLEW_VERSION_2_0;
extern __attribute__((dllimport)) GLboolean __GLEW_VERSION_2_1;
extern __attribute__((dllimport)) GLboolean __GLEW_VERSION_3_0;
extern __attribute__((dllimport)) GLboolean __GLEW_VERSION_3_1;
extern __attribute__((dllimport)) GLboolean __GLEW_VERSION_3_2;
extern __attribute__((dllimport)) GLboolean __GLEW_VERSION_3_3;
extern __attribute__((dllimport)) GLboolean __GLEW_VERSION_4_0;
extern __attribute__((dllimport)) GLboolean __GLEW_VERSION_4_1;
extern __attribute__((dllimport)) GLboolean __GLEW_VERSION_4_2;
extern __attribute__((dllimport)) GLboolean __GLEW_VERSION_4_3;
extern __attribute__((dllimport)) GLboolean __GLEW_VERSION_4_4;
extern __attribute__((dllimport)) GLboolean __GLEW_VERSION_4_5;
extern __attribute__((dllimport)) GLboolean __GLEW_3DFX_multisample;
extern __attribute__((dllimport)) GLboolean __GLEW_3DFX_tbuffer;
extern __attribute__((dllimport)) GLboolean __GLEW_3DFX_texture_compression_FXT1;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_blend_minmax_factor;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_conservative_depth;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_debug_output;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_depth_clamp_separate;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_draw_buffers_blend;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_gcn_shader;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_gpu_shader_int64;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_interleaved_elements;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_multi_draw_indirect;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_name_gen_delete;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_occlusion_query_event;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_performance_monitor;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_pinned_memory;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_query_buffer_object;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_sample_positions;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_seamless_cubemap_per_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_shader_atomic_counter_ops;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_shader_stencil_export;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_shader_stencil_value_export;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_shader_trinary_minmax;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_sparse_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_stencil_operation_extended;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_texture_texture4;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_transform_feedback3_lines_triangles;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_transform_feedback4;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_vertex_shader_layer;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_vertex_shader_tessellator;
extern __attribute__((dllimport)) GLboolean __GLEW_AMD_vertex_shader_viewport_index;
extern __attribute__((dllimport)) GLboolean __GLEW_ANGLE_depth_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_ANGLE_framebuffer_blit;
extern __attribute__((dllimport)) GLboolean __GLEW_ANGLE_framebuffer_multisample;
extern __attribute__((dllimport)) GLboolean __GLEW_ANGLE_instanced_arrays;
extern __attribute__((dllimport)) GLboolean __GLEW_ANGLE_pack_reverse_row_order;
extern __attribute__((dllimport)) GLboolean __GLEW_ANGLE_program_binary;
extern __attribute__((dllimport)) GLboolean __GLEW_ANGLE_texture_compression_dxt1;
extern __attribute__((dllimport)) GLboolean __GLEW_ANGLE_texture_compression_dxt3;
extern __attribute__((dllimport)) GLboolean __GLEW_ANGLE_texture_compression_dxt5;
extern __attribute__((dllimport)) GLboolean __GLEW_ANGLE_texture_usage;
extern __attribute__((dllimport)) GLboolean __GLEW_ANGLE_timer_query;
extern __attribute__((dllimport)) GLboolean __GLEW_ANGLE_translated_shader_source;
extern __attribute__((dllimport)) GLboolean __GLEW_APPLE_aux_depth_stencil;
extern __attribute__((dllimport)) GLboolean __GLEW_APPLE_client_storage;
extern __attribute__((dllimport)) GLboolean __GLEW_APPLE_element_array;
extern __attribute__((dllimport)) GLboolean __GLEW_APPLE_fence;
extern __attribute__((dllimport)) GLboolean __GLEW_APPLE_float_pixels;
extern __attribute__((dllimport)) GLboolean __GLEW_APPLE_flush_buffer_range;
extern __attribute__((dllimport)) GLboolean __GLEW_APPLE_object_purgeable;
extern __attribute__((dllimport)) GLboolean __GLEW_APPLE_pixel_buffer;
extern __attribute__((dllimport)) GLboolean __GLEW_APPLE_rgb_422;
extern __attribute__((dllimport)) GLboolean __GLEW_APPLE_row_bytes;
extern __attribute__((dllimport)) GLboolean __GLEW_APPLE_specular_vector;
extern __attribute__((dllimport)) GLboolean __GLEW_APPLE_texture_range;
extern __attribute__((dllimport)) GLboolean __GLEW_APPLE_transform_hint;
extern __attribute__((dllimport)) GLboolean __GLEW_APPLE_vertex_array_object;
extern __attribute__((dllimport)) GLboolean __GLEW_APPLE_vertex_array_range;
extern __attribute__((dllimport)) GLboolean __GLEW_APPLE_vertex_program_evaluators;
extern __attribute__((dllimport)) GLboolean __GLEW_APPLE_ycbcr_422;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_ES2_compatibility;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_ES3_1_compatibility;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_ES3_2_compatibility;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_ES3_compatibility;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_arrays_of_arrays;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_base_instance;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_bindless_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_blend_func_extended;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_buffer_storage;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_cl_event;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_clear_buffer_object;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_clear_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_clip_control;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_color_buffer_float;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_compatibility;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_compressed_texture_pixel_storage;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_compute_shader;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_compute_variable_group_size;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_conditional_render_inverted;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_conservative_depth;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_copy_buffer;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_copy_image;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_cull_distance;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_debug_output;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_depth_buffer_float;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_depth_clamp;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_depth_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_derivative_control;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_direct_state_access;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_draw_buffers;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_draw_buffers_blend;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_draw_elements_base_vertex;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_draw_indirect;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_draw_instanced;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_enhanced_layouts;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_explicit_attrib_location;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_explicit_uniform_location;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_fragment_coord_conventions;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_fragment_layer_viewport;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_fragment_program;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_fragment_program_shadow;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_fragment_shader;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_fragment_shader_interlock;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_framebuffer_no_attachments;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_framebuffer_object;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_framebuffer_sRGB;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_geometry_shader4;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_get_program_binary;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_get_texture_sub_image;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_gpu_shader5;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_gpu_shader_fp64;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_gpu_shader_int64;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_half_float_pixel;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_half_float_vertex;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_imaging;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_indirect_parameters;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_instanced_arrays;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_internalformat_query;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_internalformat_query2;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_invalidate_subdata;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_map_buffer_alignment;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_map_buffer_range;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_matrix_palette;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_multi_bind;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_multi_draw_indirect;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_multisample;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_multitexture;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_occlusion_query;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_occlusion_query2;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_parallel_shader_compile;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_pipeline_statistics_query;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_pixel_buffer_object;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_point_parameters;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_point_sprite;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_post_depth_coverage;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_program_interface_query;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_provoking_vertex;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_query_buffer_object;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_robust_buffer_access_behavior;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_robustness;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_robustness_application_isolation;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_robustness_share_group_isolation;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_sample_locations;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_sample_shading;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_sampler_objects;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_seamless_cube_map;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_seamless_cubemap_per_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_separate_shader_objects;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shader_atomic_counter_ops;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shader_atomic_counters;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shader_ballot;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shader_bit_encoding;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shader_clock;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shader_draw_parameters;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shader_group_vote;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shader_image_load_store;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shader_image_size;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shader_objects;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shader_precision;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shader_stencil_export;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shader_storage_buffer_object;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shader_subroutine;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shader_texture_image_samples;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shader_texture_lod;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shader_viewport_layer_array;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shading_language_100;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shading_language_420pack;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shading_language_include;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shading_language_packing;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shadow;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_shadow_ambient;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_sparse_buffer;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_sparse_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_sparse_texture2;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_sparse_texture_clamp;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_stencil_texturing;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_sync;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_tessellation_shader;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_barrier;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_border_clamp;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_buffer_object;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_buffer_object_rgb32;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_buffer_range;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_compression;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_compression_bptc;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_compression_rgtc;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_cube_map;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_cube_map_array;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_env_add;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_env_combine;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_env_crossbar;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_env_dot3;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_filter_minmax;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_float;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_gather;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_mirror_clamp_to_edge;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_mirrored_repeat;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_multisample;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_non_power_of_two;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_query_levels;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_query_lod;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_rectangle;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_rg;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_rgb10_a2ui;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_stencil8;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_storage;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_storage_multisample;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_swizzle;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_texture_view;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_timer_query;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_transform_feedback2;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_transform_feedback3;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_transform_feedback_instanced;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_transform_feedback_overflow_query;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_transpose_matrix;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_uniform_buffer_object;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_vertex_array_bgra;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_vertex_array_object;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_vertex_attrib_64bit;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_vertex_attrib_binding;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_vertex_blend;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_vertex_buffer_object;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_vertex_program;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_vertex_shader;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_vertex_type_10f_11f_11f_rev;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_vertex_type_2_10_10_10_rev;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_viewport_array;
extern __attribute__((dllimport)) GLboolean __GLEW_ARB_window_pos;
extern __attribute__((dllimport)) GLboolean __GLEW_ATIX_point_sprites;
extern __attribute__((dllimport)) GLboolean __GLEW_ATIX_texture_env_combine3;
extern __attribute__((dllimport)) GLboolean __GLEW_ATIX_texture_env_route;
extern __attribute__((dllimport)) GLboolean __GLEW_ATIX_vertex_shader_output_point_size;
extern __attribute__((dllimport)) GLboolean __GLEW_ATI_draw_buffers;
extern __attribute__((dllimport)) GLboolean __GLEW_ATI_element_array;
extern __attribute__((dllimport)) GLboolean __GLEW_ATI_envmap_bumpmap;
extern __attribute__((dllimport)) GLboolean __GLEW_ATI_fragment_shader;
extern __attribute__((dllimport)) GLboolean __GLEW_ATI_map_object_buffer;
extern __attribute__((dllimport)) GLboolean __GLEW_ATI_meminfo;
extern __attribute__((dllimport)) GLboolean __GLEW_ATI_pn_triangles;
extern __attribute__((dllimport)) GLboolean __GLEW_ATI_separate_stencil;
extern __attribute__((dllimport)) GLboolean __GLEW_ATI_shader_texture_lod;
extern __attribute__((dllimport)) GLboolean __GLEW_ATI_text_fragment_shader;
extern __attribute__((dllimport)) GLboolean __GLEW_ATI_texture_compression_3dc;
extern __attribute__((dllimport)) GLboolean __GLEW_ATI_texture_env_combine3;
extern __attribute__((dllimport)) GLboolean __GLEW_ATI_texture_float;
extern __attribute__((dllimport)) GLboolean __GLEW_ATI_texture_mirror_once;
extern __attribute__((dllimport)) GLboolean __GLEW_ATI_vertex_array_object;
extern __attribute__((dllimport)) GLboolean __GLEW_ATI_vertex_attrib_array_object;
extern __attribute__((dllimport)) GLboolean __GLEW_ATI_vertex_streams;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_422_pixels;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_Cg_shader;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_abgr;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_bgra;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_bindable_uniform;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_blend_color;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_blend_equation_separate;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_blend_func_separate;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_blend_logic_op;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_blend_minmax;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_blend_subtract;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_clip_volume_hint;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_cmyka;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_color_subtable;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_compiled_vertex_array;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_convolution;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_coordinate_frame;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_copy_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_cull_vertex;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_debug_label;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_debug_marker;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_depth_bounds_test;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_direct_state_access;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_draw_buffers2;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_draw_instanced;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_draw_range_elements;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_fog_coord;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_fragment_lighting;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_framebuffer_blit;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_framebuffer_multisample;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_framebuffer_multisample_blit_scaled;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_framebuffer_object;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_framebuffer_sRGB;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_geometry_shader4;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_gpu_program_parameters;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_gpu_shader4;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_histogram;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_index_array_formats;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_index_func;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_index_material;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_index_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_light_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_misc_attribute;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_multi_draw_arrays;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_multisample;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_packed_depth_stencil;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_packed_float;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_packed_pixels;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_paletted_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_pixel_buffer_object;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_pixel_transform;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_pixel_transform_color_table;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_point_parameters;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_polygon_offset;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_polygon_offset_clamp;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_post_depth_coverage;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_provoking_vertex;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_raster_multisample;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_rescale_normal;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_scene_marker;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_secondary_color;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_separate_shader_objects;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_separate_specular_color;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_shader_image_load_formatted;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_shader_image_load_store;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_shader_integer_mix;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_shadow_funcs;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_shared_texture_palette;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_sparse_texture2;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_stencil_clear_tag;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_stencil_two_side;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_stencil_wrap;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_subtexture;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture3D;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_array;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_buffer_object;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_compression_dxt1;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_compression_latc;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_compression_rgtc;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_compression_s3tc;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_cube_map;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_edge_clamp;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_env;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_env_add;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_env_combine;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_env_dot3;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_filter_anisotropic;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_filter_minmax;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_integer;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_lod_bias;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_mirror_clamp;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_object;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_perturb_normal;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_rectangle;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_sRGB;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_sRGB_decode;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_shared_exponent;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_snorm;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_texture_swizzle;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_timer_query;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_transform_feedback;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_vertex_array;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_vertex_array_bgra;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_vertex_attrib_64bit;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_vertex_shader;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_vertex_weighting;
extern __attribute__((dllimport)) GLboolean __GLEW_EXT_x11_sync_object;
extern __attribute__((dllimport)) GLboolean __GLEW_GREMEDY_frame_terminator;
extern __attribute__((dllimport)) GLboolean __GLEW_GREMEDY_string_marker;
extern __attribute__((dllimport)) GLboolean __GLEW_HP_convolution_border_modes;
extern __attribute__((dllimport)) GLboolean __GLEW_HP_image_transform;
extern __attribute__((dllimport)) GLboolean __GLEW_HP_occlusion_test;
extern __attribute__((dllimport)) GLboolean __GLEW_HP_texture_lighting;
extern __attribute__((dllimport)) GLboolean __GLEW_IBM_cull_vertex;
extern __attribute__((dllimport)) GLboolean __GLEW_IBM_multimode_draw_arrays;
extern __attribute__((dllimport)) GLboolean __GLEW_IBM_rasterpos_clip;
extern __attribute__((dllimport)) GLboolean __GLEW_IBM_static_data;
extern __attribute__((dllimport)) GLboolean __GLEW_IBM_texture_mirrored_repeat;
extern __attribute__((dllimport)) GLboolean __GLEW_IBM_vertex_array_lists;
extern __attribute__((dllimport)) GLboolean __GLEW_INGR_color_clamp;
extern __attribute__((dllimport)) GLboolean __GLEW_INGR_interlace_read;
extern __attribute__((dllimport)) GLboolean __GLEW_INTEL_fragment_shader_ordering;
extern __attribute__((dllimport)) GLboolean __GLEW_INTEL_framebuffer_CMAA;
extern __attribute__((dllimport)) GLboolean __GLEW_INTEL_map_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_INTEL_parallel_arrays;
extern __attribute__((dllimport)) GLboolean __GLEW_INTEL_performance_query;
extern __attribute__((dllimport)) GLboolean __GLEW_INTEL_texture_scissor;
extern __attribute__((dllimport)) GLboolean __GLEW_KHR_blend_equation_advanced;
extern __attribute__((dllimport)) GLboolean __GLEW_KHR_blend_equation_advanced_coherent;
extern __attribute__((dllimport)) GLboolean __GLEW_KHR_context_flush_control;
extern __attribute__((dllimport)) GLboolean __GLEW_KHR_debug;
extern __attribute__((dllimport)) GLboolean __GLEW_KHR_no_error;
extern __attribute__((dllimport)) GLboolean __GLEW_KHR_robust_buffer_access_behavior;
extern __attribute__((dllimport)) GLboolean __GLEW_KHR_robustness;
extern __attribute__((dllimport)) GLboolean __GLEW_KHR_texture_compression_astc_hdr;
extern __attribute__((dllimport)) GLboolean __GLEW_KHR_texture_compression_astc_ldr;
extern __attribute__((dllimport)) GLboolean __GLEW_KTX_buffer_region;
extern __attribute__((dllimport)) GLboolean __GLEW_MESAX_texture_stack;
extern __attribute__((dllimport)) GLboolean __GLEW_MESA_pack_invert;
extern __attribute__((dllimport)) GLboolean __GLEW_MESA_resize_buffers;
extern __attribute__((dllimport)) GLboolean __GLEW_MESA_window_pos;
extern __attribute__((dllimport)) GLboolean __GLEW_MESA_ycbcr_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_NVX_conditional_render;
extern __attribute__((dllimport)) GLboolean __GLEW_NVX_gpu_memory_info;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_bindless_multi_draw_indirect;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_bindless_multi_draw_indirect_count;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_bindless_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_blend_equation_advanced;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_blend_equation_advanced_coherent;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_blend_square;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_compute_program5;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_conditional_render;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_conservative_raster;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_conservative_raster_dilate;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_copy_depth_to_color;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_copy_image;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_deep_texture3D;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_depth_buffer_float;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_depth_clamp;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_depth_range_unclamped;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_draw_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_evaluators;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_explicit_multisample;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_fence;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_fill_rectangle;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_float_buffer;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_fog_distance;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_fragment_coverage_to_color;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_fragment_program;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_fragment_program2;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_fragment_program4;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_fragment_program_option;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_fragment_shader_interlock;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_framebuffer_mixed_samples;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_framebuffer_multisample_coverage;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_geometry_program4;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_geometry_shader4;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_geometry_shader_passthrough;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_gpu_program4;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_gpu_program5;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_gpu_program5_mem_extended;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_gpu_program_fp64;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_gpu_shader5;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_half_float;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_internalformat_sample_query;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_light_max_exponent;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_multisample_coverage;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_multisample_filter_hint;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_occlusion_query;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_packed_depth_stencil;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_parameter_buffer_object;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_parameter_buffer_object2;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_path_rendering;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_path_rendering_shared_edge;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_pixel_data_range;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_point_sprite;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_present_video;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_primitive_restart;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_register_combiners;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_register_combiners2;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_sample_locations;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_sample_mask_override_coverage;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_shader_atomic_counters;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_shader_atomic_float;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_shader_atomic_fp16_vector;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_shader_atomic_int64;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_shader_buffer_load;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_shader_storage_buffer_object;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_shader_thread_group;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_shader_thread_shuffle;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_tessellation_program5;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_texgen_emboss;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_texgen_reflection;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_texture_barrier;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_texture_compression_vtc;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_texture_env_combine4;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_texture_expand_normal;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_texture_multisample;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_texture_rectangle;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_texture_shader;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_texture_shader2;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_texture_shader3;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_transform_feedback;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_transform_feedback2;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_uniform_buffer_unified_memory;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_vdpau_interop;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_vertex_array_range;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_vertex_array_range2;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_vertex_attrib_integer_64bit;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_vertex_buffer_unified_memory;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_vertex_program;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_vertex_program1_1;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_vertex_program2;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_vertex_program2_option;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_vertex_program3;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_vertex_program4;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_video_capture;
extern __attribute__((dllimport)) GLboolean __GLEW_NV_viewport_array2;
extern __attribute__((dllimport)) GLboolean __GLEW_OES_byte_coordinates;
extern __attribute__((dllimport)) GLboolean __GLEW_OES_compressed_paletted_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_OES_read_format;
extern __attribute__((dllimport)) GLboolean __GLEW_OES_single_precision;
extern __attribute__((dllimport)) GLboolean __GLEW_OML_interlace;
extern __attribute__((dllimport)) GLboolean __GLEW_OML_resample;
extern __attribute__((dllimport)) GLboolean __GLEW_OML_subsample;
extern __attribute__((dllimport)) GLboolean __GLEW_OVR_multiview;
extern __attribute__((dllimport)) GLboolean __GLEW_OVR_multiview2;
extern __attribute__((dllimport)) GLboolean __GLEW_PGI_misc_hints;
extern __attribute__((dllimport)) GLboolean __GLEW_PGI_vertex_hints;
extern __attribute__((dllimport)) GLboolean __GLEW_REGAL_ES1_0_compatibility;
extern __attribute__((dllimport)) GLboolean __GLEW_REGAL_ES1_1_compatibility;
extern __attribute__((dllimport)) GLboolean __GLEW_REGAL_enable;
extern __attribute__((dllimport)) GLboolean __GLEW_REGAL_error_string;
extern __attribute__((dllimport)) GLboolean __GLEW_REGAL_extension_query;
extern __attribute__((dllimport)) GLboolean __GLEW_REGAL_log;
extern __attribute__((dllimport)) GLboolean __GLEW_REGAL_proc_address;
extern __attribute__((dllimport)) GLboolean __GLEW_REND_screen_coordinates;
extern __attribute__((dllimport)) GLboolean __GLEW_S3_s3tc;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIS_color_range;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIS_detail_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIS_fog_function;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIS_generate_mipmap;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIS_multisample;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIS_pixel_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIS_point_line_texgen;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIS_sharpen_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIS_texture4D;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIS_texture_border_clamp;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIS_texture_edge_clamp;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIS_texture_filter4;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIS_texture_lod;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIS_texture_select;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_async;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_async_histogram;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_async_pixel;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_blend_alpha_minmax;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_clipmap;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_convolution_accuracy;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_depth_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_flush_raster;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_fog_offset;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_fog_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_fragment_specular_lighting;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_framezoom;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_interlace;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_ir_instrument1;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_list_priority;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_pixel_texture;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_pixel_texture_bits;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_reference_plane;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_resample;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_shadow;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_shadow_ambient;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_sprite;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_tag_sample_buffer;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_texture_add_env;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_texture_coordinate_clamp;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_texture_lod_bias;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_texture_multi_buffer;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_texture_range;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_texture_scale_bias;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_vertex_preclip;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_vertex_preclip_hint;
extern __attribute__((dllimport)) GLboolean __GLEW_SGIX_ycrcb;
extern __attribute__((dllimport)) GLboolean __GLEW_SGI_color_matrix;
extern __attribute__((dllimport)) GLboolean __GLEW_SGI_color_table;
extern __attribute__((dllimport)) GLboolean __GLEW_SGI_texture_color_table;
extern __attribute__((dllimport)) GLboolean __GLEW_SUNX_constant_data;
extern __attribute__((dllimport)) GLboolean __GLEW_SUN_convolution_border_modes;
extern __attribute__((dllimport)) GLboolean __GLEW_SUN_global_alpha;
extern __attribute__((dllimport)) GLboolean __GLEW_SUN_mesh_array;
extern __attribute__((dllimport)) GLboolean __GLEW_SUN_read_video_pixels;
extern __attribute__((dllimport)) GLboolean __GLEW_SUN_slice_accum;
extern __attribute__((dllimport)) GLboolean __GLEW_SUN_triangle_list;
extern __attribute__((dllimport)) GLboolean __GLEW_SUN_vertex;
extern __attribute__((dllimport)) GLboolean __GLEW_WIN_phong_shading;
extern __attribute__((dllimport)) GLboolean __GLEW_WIN_specular_fog;
extern __attribute__((dllimport)) GLboolean __GLEW_WIN_swap_hint;
# 19717 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/glew.h" 3 4
extern __attribute__((dllimport)) GLenum __attribute__((__stdcall__)) glewInit (void);
extern __attribute__((dllimport)) GLboolean __attribute__((__stdcall__)) glewIsSupported (const char *name);







extern __attribute__((dllimport)) GLboolean glewExperimental;
extern __attribute__((dllimport)) GLboolean __attribute__((__stdcall__)) glewGetExtension (const char *name);
extern __attribute__((dllimport)) const GLubyte * __attribute__((__stdcall__)) glewGetErrorString (GLenum error);
extern __attribute__((dllimport)) const GLubyte * __attribute__((__stdcall__)) glewGetString (GLenum name);
# 7 "JCEBA.LoadLibs.h" 2
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/freeglut.h" 1 3 4
# 17 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/freeglut.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/freeglut_std.h" 1 3 4
# 63 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/freeglut_std.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/windows.h" 1 3 4
# 9 "/usr/i686-w64-mingw32/sys-root/mingw/include/windows.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw.h" 1 3 4
# 10 "/usr/i686-w64-mingw32/sys-root/mingw/include/windows.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/sdkddkver.h" 1 3 4
# 11 "/usr/i686-w64-mingw32/sys-root/mingw/include/windows.h" 2 3 4
# 65 "/usr/i686-w64-mingw32/sys-root/mingw/include/windows.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/excpt.h" 1 3 4
# 11 "/usr/i686-w64-mingw32/sys-root/mingw/include/excpt.h" 3 4
#pragma pack(push,_CRT_PACKING)





  struct _EXCEPTION_POINTERS;
# 29 "/usr/i686-w64-mingw32/sys-root/mingw/include/excpt.h" 3 4
  struct _EXCEPTION_RECORD;
  struct _CONTEXT;

  int __attribute__((__cdecl__)) _except_handler(struct _EXCEPTION_RECORD *_ExceptionRecord,void *_EstablisherFrame,struct _CONTEXT *_ContextRecord,void *_DispatcherContext);
# 54 "/usr/i686-w64-mingw32/sys-root/mingw/include/excpt.h" 3 4
  unsigned long __attribute__((__cdecl__)) _exception_code(void);
  void *__attribute__((__cdecl__)) _exception_info(void);
  int __attribute__((__cdecl__)) _abnormal_termination(void);






  typedef void (__attribute__((__cdecl__)) * _PHNDLR)(int);

  struct _XCPT_ACTION {
    unsigned long XcptNum;
    int SigNum;
    _PHNDLR XcptAction;
  };

  extern struct _XCPT_ACTION _XcptActTab[];
  extern int _XcptActTabCount;
  extern int _XcptActTabSize;
  extern int _First_FPE_Indx;
  extern int _Num_FPE;

  int __attribute__((__cdecl__)) __CppXcptFilter(unsigned long _ExceptionNum,struct _EXCEPTION_POINTERS * _ExceptionPtr);
  int __attribute__((__cdecl__)) _XcptFilter(unsigned long _ExceptionNum,struct _EXCEPTION_POINTERS * _ExceptionPtr);





  typedef int (*PEXCEPTION_HANDLER)(struct _EXCEPTION_RECORD*, void*, struct _CONTEXT*, void*);
# 128 "/usr/i686-w64-mingw32/sys-root/mingw/include/excpt.h" 3 4
#pragma pack(pop)
# 66 "/usr/i686-w64-mingw32/sys-root/mingw/include/windows.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdarg.h" 1 3 4
# 140 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdarg.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw_stdarg.h" 1 3 4
# 141 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdarg.h" 2 3 4
# 67 "/usr/i686-w64-mingw32/sys-root/mingw/include/windows.h" 2 3 4


# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/windef.h" 1 3 4







# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/minwindef.h" 1 3 4



# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw.h" 1 3 4
# 5 "/usr/i686-w64-mingw32/sys-root/mingw/include/minwindef.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/winapifamily.h" 1 3 4
# 6 "/usr/i686-w64-mingw32/sys-root/mingw/include/minwindef.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/specstrings.h" 1 3 4







# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/sal.h" 1 3 4
# 9 "/usr/i686-w64-mingw32/sys-root/mingw/include/specstrings.h" 2 3 4
# 7 "/usr/i686-w64-mingw32/sys-root/mingw/include/minwindef.h" 2 3 4
# 24 "/usr/i686-w64-mingw32/sys-root/mingw/include/minwindef.h" 3 4
  typedef unsigned long ULONG;
  typedef ULONG *PULONG;
  typedef unsigned short USHORT;
  typedef USHORT *PUSHORT;
  typedef unsigned char UCHAR;
  typedef UCHAR *PUCHAR;
  typedef char *PSZ;
# 127 "/usr/i686-w64-mingw32/sys-root/mingw/include/minwindef.h" 3 4
typedef int WINBOOL;
       


  typedef int BOOL;


typedef WINBOOL *PBOOL;
typedef WINBOOL *LPBOOL;
       


  typedef unsigned char BYTE;
  typedef unsigned short WORD;
  typedef unsigned long DWORD;
  typedef float FLOAT;
  typedef FLOAT *PFLOAT;
  typedef BYTE *PBYTE;
  typedef BYTE *LPBYTE;
  typedef int *PINT;
  typedef int *LPINT;
  typedef WORD *PWORD;
  typedef WORD *LPWORD;
  typedef long *LPLONG;
  typedef DWORD *PDWORD;
  typedef DWORD *LPDWORD;
  typedef void *LPVOID;


  typedef const void *LPCVOID;

  typedef int INT;
  typedef unsigned int UINT;
  typedef unsigned int *PUINT;


# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 1 3 4
# 9 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw_unicode.h" 1 3 4
# 10 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4





# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw.h" 1 3 4
# 16 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/ctype.h" 1 3 4
# 36 "/usr/i686-w64-mingw32/sys-root/mingw/include/ctype.h" 3 4
  extern unsigned short ** _imp___pctype;
# 51 "/usr/i686-w64-mingw32/sys-root/mingw/include/ctype.h" 3 4
  extern unsigned short ** _imp___wctype;
# 63 "/usr/i686-w64-mingw32/sys-root/mingw/include/ctype.h" 3 4
  extern unsigned short ** _imp___pwctype;
# 72 "/usr/i686-w64-mingw32/sys-root/mingw/include/ctype.h" 3 4
  extern const unsigned char __newclmap[];
  extern const unsigned char __newcumap[];
  extern pthreadlocinfo __ptlocinfo;
  extern pthreadmbcinfo __ptmbcinfo;
  extern int __globallocalestatus;
  extern int __locale_changed;
  extern struct threadlocaleinfostruct __initiallocinfo;
  extern _locale_tstruct __initiallocalestructinfo;
  pthreadlocinfo __attribute__((__cdecl__)) __updatetlocinfo(void);
  pthreadmbcinfo __attribute__((__cdecl__)) __updatetmbcinfo(void);
# 100 "/usr/i686-w64-mingw32/sys-root/mingw/include/ctype.h" 3 4
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isctype(int _C,int _Type);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isctype_l(int _C,int _Type,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isalpha(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isalpha_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isupper(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isupper_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) islower(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _islower_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isdigit(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isdigit_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isxdigit(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isxdigit_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isspace(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isspace_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) ispunct(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _ispunct_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isalnum(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isalnum_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isprint(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isprint_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isgraph(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isgraph_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) iscntrl(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iscntrl_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) toupper(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) tolower(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _tolower(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _tolower_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _toupper(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _toupper_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __isascii(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __toascii(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iscsymf(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iscsym(int _C);


int __attribute__((__cdecl__)) isblank(int _C);






  int __attribute__((__cdecl__)) iswalpha(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswalpha_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswupper(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswupper_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswlower(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswlower_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswdigit(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswdigit_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswxdigit(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswxdigit_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswspace(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswspace_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswpunct(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswpunct_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswalnum(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswalnum_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswprint(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswprint_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswgraph(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswgraph_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswcntrl(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswcntrl_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswascii(wint_t _C);
  int __attribute__((__cdecl__)) isleadbyte(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isleadbyte_l(int _C,_locale_t _Locale);
  wint_t __attribute__((__cdecl__)) towupper(wint_t _C);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _towupper_l(wint_t _C,_locale_t _Locale);
  wint_t __attribute__((__cdecl__)) towlower(wint_t _C);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _towlower_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswctype(wint_t _C,wctype_t _Type);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswctype_l(wint_t _C,wctype_t _Type,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iswcsymf(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswcsymf_l(wint_t _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iswcsym(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswcsym_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) is_wctype(wint_t _C,wctype_t _Type);


int __attribute__((__cdecl__)) iswblank(wint_t _C);
# 17 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4


# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/apiset.h" 1 3 4
# 9 "/usr/i686-w64-mingw32/sys-root/mingw/include/apiset.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw.h" 1 3 4
# 10 "/usr/i686-w64-mingw32/sys-root/mingw/include/apiset.h" 2 3 4
# 20 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4



# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/specstrings.h" 1 3 4
# 24 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4



# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/psdk_inc/intrin-impl.h" 1 3 4
# 974 "/usr/i686-w64-mingw32/sys-root/mingw/include/psdk_inc/intrin-impl.h" 3 4
long _InterlockedAnd(long volatile *, long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedAnd(volatile long *Destination, long Value) { return __sync_fetch_and_and(Destination, Value); }




long _InterlockedOr(long volatile *, long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedOr(volatile long *Destination, long Value) { return __sync_fetch_and_or(Destination, Value); }




long _InterlockedXor(long volatile *, long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedXor(volatile long *Destination, long Value) { return __sync_fetch_and_xor(Destination, Value); }




short _InterlockedIncrement16(short volatile *Addend);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
short _InterlockedIncrement16(short volatile *Addend) {
    return __sync_add_and_fetch(Addend, 1);
}




short _InterlockedDecrement16(short volatile *Addend);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
short _InterlockedDecrement16(short volatile *Addend) {
    return __sync_sub_and_fetch(Addend, 1);
}




short _InterlockedCompareExchange16(short volatile *Destination, short ExChange, short Comperand);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
short _InterlockedCompareExchange16(short volatile *Destination, short ExChange, short Comperand) {
    return __sync_val_compare_and_swap(Destination, Comperand, ExChange);
}




long _InterlockedExchangeAdd(long volatile *Addend, long Value);

extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedExchangeAdd(long volatile *Addend, long Value) {
    return __sync_fetch_and_add(Addend, Value);
}





long _InterlockedCompareExchange(long volatile *Destination, long ExChange, long Comperand);

extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedCompareExchange(long volatile *Destination, long ExChange, long Comperand) {
    return __sync_val_compare_and_swap(Destination, Comperand, ExChange);
}





long _InterlockedIncrement(long volatile *Addend);

extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedIncrement(long volatile *Addend) {
   return __sync_add_and_fetch(Addend, 1);
}





long _InterlockedDecrement(long volatile *Addend);

extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedDecrement(long volatile *Addend) {
   return __sync_sub_and_fetch(Addend, 1);
}





long _InterlockedAdd(long volatile *Addend, long Value);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedAdd(long volatile *Addend, long Value) {
    return __sync_add_and_fetch(Addend, Value);
}




__extension__ long long _InterlockedAdd64(long long volatile *Addend, long long Value);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long long _InterlockedAdd64(long long volatile *Addend, long long Value) {
    return __sync_add_and_fetch(Addend, Value);
}




long _InterlockedExchange(long volatile *Target, long Value);

extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedExchange(long volatile *Target, long Value) {
    return __sync_lock_test_and_set(Target, Value);
}





__extension__ long long _InterlockedCompareExchange64(long long volatile *Destination, long long ExChange, long long Comperand);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long long _InterlockedCompareExchange64(long long volatile *Destination, long long ExChange, long long Comperand) {
    return __sync_val_compare_and_swap(Destination, Comperand, ExChange);
}




void *_InterlockedCompareExchangePointer(void * volatile *Destination, void *ExChange, void *Comperand);

extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void *_InterlockedCompareExchangePointer(void *volatile *Destination, void *ExChange, void *Comperand) {
    return __sync_val_compare_and_swap(Destination, Comperand, ExChange);
}





void *_InterlockedExchangePointer(void *volatile *Target,void *Value);

extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void *_InterlockedExchangePointer(void *volatile *Target,void *Value) {
    return __sync_lock_test_and_set(Target, Value);
}
# 1130 "/usr/i686-w64-mingw32/sys-root/mingw/include/psdk_inc/intrin-impl.h" 3 4
void __int2c(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __int2c(void) {
    __asm__ __volatile__("int {$}" "0x2c" :);
}




void __stosb(unsigned char *, unsigned char, size_t);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __stosb(unsigned char *Dest, unsigned char Data, size_t Count) { __asm__ __volatile__ ("rep stos{" "b|b" "}" : "+D" (Dest), "+c" (Count) : [Data] "a" (Data) : "memory"); }




void __stosw(unsigned short *, unsigned short, size_t);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __stosw(unsigned short *Dest, unsigned short Data, size_t Count) { __asm__ __volatile__ ("rep stos{" "w|w" "}" : "+D" (Dest), "+c" (Count) : [Data] "a" (Data) : "memory"); }




void __stosd(unsigned long *, unsigned long, size_t);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __stosd(unsigned long *Dest, unsigned long Data, size_t Count) { __asm__ __volatile__ ("rep stos{" "l|d" "}" : "+D" (Dest), "+c" (Count) : [Data] "a" (Data) : "memory"); }




unsigned char _interlockedbittestandset(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _interlockedbittestandset(long *Base, long Offset) { unsigned char old; __asm__ __volatile__ ("lock bts{l %[Offset],%[Base] | %[Base],%[Offset]}" : [old] "=@ccc" (old), [Base] "+m" (*Base) : [Offset] "I" "r" (Offset) : "memory" ); return old; }




unsigned char _interlockedbittestandreset(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _interlockedbittestandreset(long *Base, long Offset) { unsigned char old; __asm__ __volatile__ ("lock btr{l %[Offset],%[Base] | %[Base],%[Offset]}" : [old] "=@ccc" (old), [Base] "+m" (*Base) : [Offset] "I" "r" (Offset) : "memory" ); return old; }




unsigned char _interlockedbittestandcomplement(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _interlockedbittestandcomplement(long *Base, long Offset) { unsigned char old; __asm__ __volatile__ ("lock btc{l %[Offset],%[Base] | %[Base],%[Offset]}" : [old] "=@ccc" (old), [Base] "+m" (*Base) : [Offset] "I" "r" (Offset) : "memory" ); return old; }




unsigned char InterlockedBitTestAndSet(volatile long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char InterlockedBitTestAndSet(volatile long *Base, long Offset) { unsigned char old; __asm__ __volatile__ ("lock bts{l %[Offset],%[Base] | %[Base],%[Offset]}" : [old] "=@ccc" (old), [Base] "+m" (*Base) : [Offset] "I" "r" (Offset) : "memory" ); return old; }




unsigned char InterlockedBitTestAndReset(volatile long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char InterlockedBitTestAndReset(volatile long *Base, long Offset) { unsigned char old; __asm__ __volatile__ ("lock btr{l %[Offset],%[Base] | %[Base],%[Offset]}" : [old] "=@ccc" (old), [Base] "+m" (*Base) : [Offset] "I" "r" (Offset) : "memory" ); return old; }




unsigned char InterlockedBitTestAndComplement(volatile long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char InterlockedBitTestAndComplement(volatile long *Base, long Offset) { unsigned char old; __asm__ __volatile__ ("lock btc{l %[Offset],%[Base] | %[Base],%[Offset]}" : [old] "=@ccc" (old), [Base] "+m" (*Base) : [Offset] "I" "r" (Offset) : "memory" ); return old; }




unsigned char _BitScanForward(unsigned long *Index, unsigned long Mask);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _BitScanForward(unsigned long *Index, unsigned long Mask) { unsigned long n; unsigned char old; __asm__ ("bsf{l %[Mask],%[Index] | %[Index],%[Mask]}" : "=@ccnz" (old), [Index] "=r" (n) : [Mask] "r" (Mask)); *Index = n; return old; }




unsigned char _BitScanReverse(unsigned long *Index, unsigned long Mask);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _BitScanReverse(unsigned long *Index, unsigned long Mask) { unsigned long n; unsigned char old; __asm__ ("bsr{l %[Mask],%[Index] | %[Index],%[Mask]}" : "=@ccnz" (old), [Index] "=r" (n) : [Mask] "r" (Mask)); *Index = n; return old; }




unsigned char _bittest(long const *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittest(const long *Base, long Offset) { unsigned char old; __asm__ ("bt{" "l" " %[Offset],%[Base] | %[Base],%[Offset]}" : [old] "=@ccc" (old) : [Offset] "I" "r" (Offset), [Base] "rm" (*Base) : ); return old; }




unsigned char _bittestandset(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittestandset(long *Base, long Offset) { unsigned char old; __asm__ ("bts" "{" "l" " %[Offset],%[Base] | %[Base],%[Offset]}" : [old] "=@ccc" (old), [Base] "+rm" (*Base) : [Offset] "I" "r" (Offset) : ); return old; }




unsigned char _bittestandreset(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittestandreset(long *Base, long Offset) { unsigned char old; __asm__ ("btr" "{" "l" " %[Offset],%[Base] | %[Base],%[Offset]}" : [old] "=@ccc" (old), [Base] "+rm" (*Base) : [Offset] "I" "r" (Offset) : ); return old; }




unsigned char _bittestandcomplement(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittestandcomplement(long *Base, long Offset) { unsigned char old; __asm__ ("btc" "{" "l" " %[Offset],%[Base] | %[Base],%[Offset]}" : [old] "=@ccc" (old), [Base] "+rm" (*Base) : [Offset] "I" "r" (Offset) : ); return old; }
# 1387 "/usr/i686-w64-mingw32/sys-root/mingw/include/psdk_inc/intrin-impl.h" 3 4
void __movsb(unsigned char *Destination, unsigned char const *Source, size_t Count);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __movsb(unsigned char *Destination, unsigned char const *Source, size_t Count) { __asm__ __volatile__ ( "rep movs" "b" : "=D" (Destination), "=S" (Source), "=c" (Count) : "0" (Destination), "1" (Source), "2" (Count) : "memory"); }




void __movsw(unsigned short *Dest, unsigned short const *Source, size_t Count);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __movsw(unsigned short *Destination, unsigned short const *Source, size_t Count) { __asm__ __volatile__ ( "rep movs" "w" : "=D" (Destination), "=S" (Source), "=c" (Count) : "0" (Destination), "1" (Source), "2" (Count) : "memory"); }




void __movsd(unsigned long *Dest, unsigned long const *Source, size_t Count);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __movsd(unsigned long *Destination, unsigned long const *Source, size_t Count) { __asm__ __volatile__ ( "rep movs" "d" : "=D" (Destination), "=S" (Source), "=c" (Count) : "0" (Destination), "1" (Source), "2" (Count) : "memory"); }
# 1436 "/usr/i686-w64-mingw32/sys-root/mingw/include/psdk_inc/intrin-impl.h" 3 4
unsigned char __readfsbyte(unsigned long Offset);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char __readfsbyte(unsigned long Offset) { unsigned char ret; __asm__ ("mov{" "b" " %%" "fs" ":%[offset], %[ret] | %[ret], %%" "fs" ":%[offset]}" : [ret] "=r" (ret) : [offset] "m" ((*(unsigned char *) (size_t) Offset))); return ret; }




unsigned short __readfsword(unsigned long Offset);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned short __readfsword(unsigned long Offset) { unsigned short ret; __asm__ ("mov{" "w" " %%" "fs" ":%[offset], %[ret] | %[ret], %%" "fs" ":%[offset]}" : [ret] "=r" (ret) : [offset] "m" ((*(unsigned short *) (size_t) Offset))); return ret; }




unsigned long __readfsdword(unsigned long Offset);

extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned long __readfsdword(unsigned long Offset) { unsigned long ret; __asm__ ("mov{" "l" " %%" "fs" ":%[offset], %[ret] | %[ret], %%" "fs" ":%[offset]}" : [ret] "=r" (ret) : [offset] "m" ((*(unsigned long *) (size_t) Offset))); return ret; }





void __writefsbyte(unsigned long Offset,unsigned char Data);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __writefsbyte(unsigned long Offset, unsigned char Data) { __asm__ ("mov{" "b" " %[Data], %%" "fs" ":%[offset] | %%" "fs" ":%[offset], %[Data]}" : [offset] "=m" ((*(unsigned char *) (size_t) Offset)) : [Data] "ri" (Data)); }




void __writefsword(unsigned long Offset,unsigned short Data);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __writefsword(unsigned long Offset, unsigned short Data) { __asm__ ("mov{" "w" " %[Data], %%" "fs" ":%[offset] | %%" "fs" ":%[offset], %[Data]}" : [offset] "=m" ((*(unsigned short *) (size_t) Offset)) : [Data] "ri" (Data)); }




void __writefsdword(unsigned long Offset,unsigned long Data);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __writefsdword(unsigned long Offset, unsigned long Data) { __asm__ ("mov{" "l" " %[Data], %%" "fs" ":%[offset] | %%" "fs" ":%[offset], %[Data]}" : [offset] "=m" ((*(unsigned long *) (size_t) Offset)) : [Data] "ri" (Data)); }
# 28 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4
# 143 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/basetsd.h" 1 3 4




# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw.h" 1 3 4
# 6 "/usr/i686-w64-mingw32/sys-root/mingw/include/basetsd.h" 2 3 4







typedef unsigned long POINTER_64_INT;
# 29 "/usr/i686-w64-mingw32/sys-root/mingw/include/basetsd.h" 3 4
  typedef signed char INT8,*PINT8;
  typedef signed short INT16,*PINT16;
  typedef signed int INT32,*PINT32;
  __extension__ typedef signed long long INT64,*PINT64;
  typedef unsigned char UINT8,*PUINT8;
  typedef unsigned short UINT16,*PUINT16;
  typedef unsigned int UINT32,*PUINT32;
  __extension__ typedef unsigned long long UINT64,*PUINT64;
  typedef signed int LONG32,*PLONG32;
  typedef unsigned int ULONG32,*PULONG32;
  typedef unsigned int DWORD32,*PDWORD32;
# 52 "/usr/i686-w64-mingw32/sys-root/mingw/include/basetsd.h" 3 4
  typedef int INT_PTR,*PINT_PTR;
  typedef unsigned int UINT_PTR,*PUINT_PTR;
  typedef long LONG_PTR,*PLONG_PTR;
  typedef unsigned long ULONG_PTR,*PULONG_PTR;
# 97 "/usr/i686-w64-mingw32/sys-root/mingw/include/basetsd.h" 3 4
  typedef unsigned short UHALF_PTR,*PUHALF_PTR;
  typedef short HALF_PTR,*PHALF_PTR;
  typedef long SHANDLE_PTR;
  typedef unsigned long HANDLE_PTR;
# 118 "/usr/i686-w64-mingw32/sys-root/mingw/include/basetsd.h" 3 4
  static __inline void * PtrToPtr64 (const void *p) { return ((void *) (ULONG_PTR) p); }
  static __inline void *Ptr64ToPtr (const void * p) { return ((void *) (ULONG_PTR) p); }
  static __inline void * HandleToHandle64 (const void *h) { return ((void *) (LONG_PTR) h); }
  static __inline void *Handle64ToHandle (const void * h) { return ((void *) (ULONG_PTR) h); }
# 147 "/usr/i686-w64-mingw32/sys-root/mingw/include/basetsd.h" 3 4
  __extension__ typedef ULONG_PTR SIZE_T,*PSIZE_T;
  __extension__ typedef LONG_PTR SSIZE_T,*PSSIZE_T;
# 191 "/usr/i686-w64-mingw32/sys-root/mingw/include/basetsd.h" 3 4
  __extension__ typedef ULONG_PTR DWORD_PTR,*PDWORD_PTR;
  __extension__ typedef long long LONG64,*PLONG64;
  __extension__ typedef unsigned long long ULONG64,*PULONG64;
  __extension__ typedef unsigned long long DWORD64,*PDWORD64;
  __extension__ typedef ULONG_PTR KAFFINITY;
  __extension__ typedef KAFFINITY *PKAFFINITY;
# 144 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4
# 250 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
  typedef void *PVOID;
  typedef void *PVOID64;
# 278 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
  typedef char CHAR;
  typedef short SHORT;
  typedef long LONG;

  typedef int INT;





  typedef wchar_t WCHAR;

  typedef WCHAR *PWCHAR,*LPWCH,*PWCH;
  typedef const WCHAR *LPCWCH,*PCWCH;
  typedef WCHAR *NWPSTR,*LPWSTR,*PWSTR;
  typedef PWSTR *PZPWSTR;
  typedef const PWSTR *PCZPWSTR;
  typedef WCHAR *LPUWSTR,*PUWSTR;
  typedef const WCHAR *LPCWSTR,*PCWSTR;
  typedef PCWSTR *PZPCWSTR;
  typedef const WCHAR *LPCUWSTR,*PCUWSTR;
  typedef WCHAR *PZZWSTR;
  typedef const WCHAR *PCZZWSTR;
  typedef WCHAR *PUZZWSTR;
  typedef const WCHAR *PCUZZWSTR;
  typedef WCHAR *PNZWCH;
  typedef const WCHAR *PCNZWCH;
  typedef WCHAR *PUNZWCH;
  typedef const WCHAR *PCUNZWCH;
# 327 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
  typedef CHAR *PCHAR,*LPCH,*PCH;
  typedef const CHAR *LPCCH,*PCCH;
  typedef CHAR *NPSTR,*LPSTR,*PSTR;
  typedef PSTR *PZPSTR;
  typedef const PSTR *PCZPSTR;
  typedef const CHAR *LPCSTR,*PCSTR;
  typedef PCSTR *PZPCSTR;
  typedef CHAR *PZZSTR;
  typedef const CHAR *PCZZSTR;
  typedef CHAR *PNZCH;
  typedef const CHAR *PCNZCH;
# 366 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
  typedef char TCHAR, *PTCHAR;
  typedef unsigned char TBYTE, *PTBYTE;


  typedef LPSTR LPTCH,PTCH;
  typedef LPCCH LPCTCH,PCTCH;
  typedef LPSTR PTSTR,LPTSTR,PUTSTR,LPUTSTR;
  typedef LPCSTR PCTSTR,LPCTSTR,PCUTSTR,LPCUTSTR;
  typedef PZZSTR PZZTSTR, PUZZTSTR;
  typedef PCZZSTR PCZZTSTR, PCUZZTSTR;
  typedef PZPSTR PZPTSTR;
  typedef PNZCH PNZTCH, PUNZTCH;
  typedef PCNZCH PCNZTCH, PCUNZTCH;






  typedef SHORT *PSHORT;
  typedef LONG *PLONG;



typedef struct _GROUP_AFFINITY {
  KAFFINITY Mask;
  WORD Group;
  WORD Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY;



  typedef void *HANDLE;






  typedef HANDLE *PHANDLE;
  typedef BYTE FCHAR;
  typedef WORD FSHORT;
  typedef DWORD FLONG;



  typedef LONG HRESULT;
# 446 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
  typedef char CCHAR;


typedef DWORD LCID;

  typedef PDWORD PLCID;


  typedef WORD LANGID;





typedef enum {
  UNSPECIFIED_COMPARTMENT_ID = 0,
  DEFAULT_COMPARTMENT_ID
} COMPARTMENT_ID,*PCOMPARTMENT_ID;
# 475 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _FLOAT128 {
      __extension__ long long LowPart;
      __extension__ long long HighPart;
  } FLOAT128;

  typedef FLOAT128 *PFLOAT128;


  __extension__ typedef long long LONGLONG;
  __extension__ typedef unsigned long long ULONGLONG;



  typedef LONGLONG *PLONGLONG;
  typedef ULONGLONG *PULONGLONG;
  typedef LONGLONG USN;







  typedef union _LARGE_INTEGER {
    __extension__ struct {
      DWORD LowPart;
      LONG HighPart;
    } ;
    struct {
      DWORD LowPart;
      LONG HighPart;
    } u;

    LONGLONG QuadPart;
  } LARGE_INTEGER;

  typedef LARGE_INTEGER *PLARGE_INTEGER;




  typedef union _ULARGE_INTEGER {
    __extension__ struct {
      DWORD LowPart;
      DWORD HighPart;
    } ;
    struct {
      DWORD LowPart;
      DWORD HighPart;
    } u;

    ULONGLONG QuadPart;
  } ULARGE_INTEGER;

  typedef ULARGE_INTEGER *PULARGE_INTEGER;

  typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
  } LUID,*PLUID;




  typedef ULONGLONG DWORDLONG;
  typedef DWORDLONG *PDWORDLONG;
# 570 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
       
       


    unsigned int __attribute__((__cdecl__)) _rotl(unsigned int Value,int Shift);
    unsigned int __attribute__((__cdecl__)) _rotr(unsigned int Value,int Shift);
       
       
       
       


    __extension__ unsigned long long __attribute__((__cdecl__)) _rotl64(unsigned long long Value,int Shift);
    __extension__ unsigned long long __attribute__((__cdecl__)) _rotr64(unsigned long long Value,int Shift);
       
       
# 598 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
  typedef BYTE BOOLEAN;

  typedef BOOLEAN *PBOOLEAN;




  typedef struct _LIST_ENTRY {
    struct _LIST_ENTRY *Flink;
    struct _LIST_ENTRY *Blink;
  } LIST_ENTRY,*PLIST_ENTRY,* PRLIST_ENTRY;

  typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
  } SINGLE_LIST_ENTRY,*PSINGLE_LIST_ENTRY;

  typedef struct LIST_ENTRY32 {
    DWORD Flink;
    DWORD Blink;
  } LIST_ENTRY32;
  typedef LIST_ENTRY32 *PLIST_ENTRY32;

  typedef struct LIST_ENTRY64 {
    ULONGLONG Flink;
    ULONGLONG Blink;
  } LIST_ENTRY64;
  typedef LIST_ENTRY64 *PLIST_ENTRY64;



# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/guiddef.h" 1 3 4
# 9 "/usr/i686-w64-mingw32/sys-root/mingw/include/guiddef.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw.h" 1 3 4
# 10 "/usr/i686-w64-mingw32/sys-root/mingw/include/guiddef.h" 2 3 4
# 19 "/usr/i686-w64-mingw32/sys-root/mingw/include/guiddef.h" 3 4
typedef struct _GUID {
  unsigned long Data1;
  unsigned short Data2;
  unsigned short Data3;
  unsigned char Data4[8];
} GUID;
# 71 "/usr/i686-w64-mingw32/sys-root/mingw/include/guiddef.h" 3 4
typedef GUID *LPGUID;




typedef const GUID *LPCGUID;





typedef GUID IID;
typedef IID *LPIID;






typedef GUID CLSID;


typedef CLSID *LPCLSID;



typedef GUID FMTID;
typedef FMTID *LPFMTID;
# 629 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4



  typedef struct _OBJECTID {
    GUID Lineage;
    DWORD Uniquifier;
  } OBJECTID;
# 699 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef int __attribute__((__stdcall__)) EXCEPTION_ROUTINE (struct _EXCEPTION_RECORD *ExceptionRecord, PVOID EstablisherFrame, struct _CONTEXT *ContextRecord, PVOID DispatcherContext);


    typedef EXCEPTION_ROUTINE *PEXCEPTION_ROUTINE;
# 1348 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
  typedef ULONG_PTR KSPIN_LOCK;
  typedef KSPIN_LOCK *PKSPIN_LOCK;

    typedef struct __attribute__ ((__aligned__ (16))) _M128A {
      ULONGLONG Low;
      LONGLONG High;
    } M128A,*PM128A;

    typedef struct __attribute__ ((__aligned__ (16))) _XSAVE_FORMAT {
      WORD ControlWord;
      WORD StatusWord;
      BYTE TagWord;
      BYTE Reserved1;
      WORD ErrorOpcode;
      DWORD ErrorOffset;
      WORD ErrorSelector;
      WORD Reserved2;
      DWORD DataOffset;
      WORD DataSelector;
      WORD Reserved3;
      DWORD MxCsr;
      DWORD MxCsr_Mask;
      M128A FloatRegisters[8];




      M128A XmmRegisters[8];
      BYTE Reserved4[220];
      DWORD Cr0NpxState;

    } XSAVE_FORMAT,*PXSAVE_FORMAT;

    typedef struct __attribute__ ((__aligned__ (8))) _XSAVE_AREA_HEADER {
      DWORD64 Mask;
      DWORD64 Reserved[7];
    } XSAVE_AREA_HEADER,*PXSAVE_AREA_HEADER;

    typedef struct __attribute__ ((__aligned__ (16))) _XSAVE_AREA {
      XSAVE_FORMAT LegacyState;
      XSAVE_AREA_HEADER Header;
    } XSAVE_AREA,*PXSAVE_AREA;

    typedef struct _XSTATE_CONTEXT {
      DWORD64 Mask;
      DWORD Length;
      DWORD Reserved1;
      PXSAVE_AREA Area;

      DWORD Reserved2;

      PVOID Buffer;

      DWORD Reserved3;

    } XSTATE_CONTEXT,*PXSTATE_CONTEXT;

    typedef struct _SCOPE_TABLE_AMD64 {
      DWORD Count;
      struct {
 DWORD BeginAddress;
 DWORD EndAddress;
 DWORD HandlerAddress;
 DWORD JumpTarget;
      } ScopeRecord[1];
    } SCOPE_TABLE_AMD64,*PSCOPE_TABLE_AMD64;
# 1983 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
void MemoryBarrier(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void MemoryBarrier(void)
{ unsigned char Barrier; __asm__ __volatile__("xchg{b %%| }al, %0" :"=m" (Barrier) : : "eax", "memory"); }
# 1995 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
  struct _TEB *NtCurrentTeb(void);
  PVOID GetCurrentFiber(void);
  PVOID GetFiberData(void);



  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) struct _TEB *NtCurrentTeb(void)
  {
    return (struct _TEB *)__readfsdword(0x18);
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) PVOID GetCurrentFiber(void)
  {
    return(PVOID)__readfsdword(0x10);
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) PVOID GetFiberData(void)
  {
      return *(PVOID *)GetCurrentFiber();
  }
# 2040 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _FLOATING_SAVE_AREA {
      DWORD ControlWord;
      DWORD StatusWord;
      DWORD TagWord;
      DWORD ErrorOffset;
      DWORD ErrorSelector;
      DWORD DataOffset;
      DWORD DataSelector;
      BYTE RegisterArea[80];
      DWORD Cr0NpxState;
    } FLOATING_SAVE_AREA;

    typedef FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA;

    typedef struct _CONTEXT {
      DWORD ContextFlags;
      DWORD Dr0;
      DWORD Dr1;
      DWORD Dr2;
      DWORD Dr3;
      DWORD Dr6;
      DWORD Dr7;
      FLOATING_SAVE_AREA FloatSave;
      DWORD SegGs;
      DWORD SegFs;
      DWORD SegEs;
      DWORD SegDs;

      DWORD Edi;
      DWORD Esi;
      DWORD Ebx;
      DWORD Edx;
      DWORD Ecx;
      DWORD Eax;
      DWORD Ebp;
      DWORD Eip;
      DWORD SegCs;
      DWORD EFlags;
      DWORD Esp;
      DWORD SegSs;
      BYTE ExtendedRegisters[512];
    } CONTEXT;

    typedef CONTEXT *PCONTEXT;
# 2094 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _LDT_ENTRY {
      WORD LimitLow;
      WORD BaseLow;
      union {
 struct {
   BYTE BaseMid;
   BYTE Flags1;
   BYTE Flags2;
   BYTE BaseHi;
 } Bytes;
 struct {
   DWORD BaseMid : 8;
   DWORD Type : 5;
   DWORD Dpl : 2;
   DWORD Pres : 1;
   DWORD LimitHi : 4;
   DWORD Sys : 1;
   DWORD Reserved_0 : 1;
   DWORD Default_Big : 1;
   DWORD Granularity : 1;
   DWORD BaseHi : 8;
 } Bits;
      } HighWord;
    } LDT_ENTRY,*PLDT_ENTRY;
# 2455 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _EXCEPTION_RECORD {
      DWORD ExceptionCode;
      DWORD ExceptionFlags;
      struct _EXCEPTION_RECORD *ExceptionRecord;
      PVOID ExceptionAddress;
      DWORD NumberParameters;
      ULONG_PTR ExceptionInformation[15];
    } EXCEPTION_RECORD;

    typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

    typedef struct _EXCEPTION_RECORD32 {
      DWORD ExceptionCode;
      DWORD ExceptionFlags;
      DWORD ExceptionRecord;
      DWORD ExceptionAddress;
      DWORD NumberParameters;
      DWORD ExceptionInformation[15];
    } EXCEPTION_RECORD32,*PEXCEPTION_RECORD32;

    typedef struct _EXCEPTION_RECORD64 {
      DWORD ExceptionCode;
      DWORD ExceptionFlags;
      DWORD64 ExceptionRecord;
      DWORD64 ExceptionAddress;
      DWORD NumberParameters;
      DWORD __unusedAlignment;
      DWORD64 ExceptionInformation[15];
    } EXCEPTION_RECORD64,*PEXCEPTION_RECORD64;

    typedef struct _EXCEPTION_POINTERS {
      PEXCEPTION_RECORD ExceptionRecord;
      PCONTEXT ContextRecord;
    } EXCEPTION_POINTERS,*PEXCEPTION_POINTERS;
# 2547 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef PVOID PACCESS_TOKEN;
    typedef PVOID PSECURITY_DESCRIPTOR;
    typedef PVOID PSID;
    typedef PVOID PCLAIMS_BLOB;
    typedef DWORD ACCESS_MASK;
    typedef ACCESS_MASK *PACCESS_MASK;
# 2578 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _GENERIC_MAPPING {
      ACCESS_MASK GenericRead;
      ACCESS_MASK GenericWrite;
      ACCESS_MASK GenericExecute;
      ACCESS_MASK GenericAll;
    } GENERIC_MAPPING;
    typedef GENERIC_MAPPING *PGENERIC_MAPPING;

# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/pshpack4.h" 1 3 4






#pragma pack(push,4)
# 2587 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4
    typedef struct _LUID_AND_ATTRIBUTES {
      LUID Luid;
      DWORD Attributes;
    } LUID_AND_ATTRIBUTES,*PLUID_AND_ATTRIBUTES;
    typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
    typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/poppack.h" 1 3 4






#pragma pack(pop)
# 2594 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4



    typedef struct _SID_IDENTIFIER_AUTHORITY {
      BYTE Value[6];
    } SID_IDENTIFIER_AUTHORITY,*PSID_IDENTIFIER_AUTHORITY;




    typedef struct _SID {
      BYTE Revision;
      BYTE SubAuthorityCount;
      SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
      DWORD SubAuthority[1];
    } SID,*PISID;
# 2621 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef enum _SID_NAME_USE {
      SidTypeUser = 1,SidTypeGroup,SidTypeDomain,SidTypeAlias,SidTypeWellKnownGroup,SidTypeDeletedAccount,SidTypeInvalid,SidTypeUnknown,SidTypeComputer,SidTypeLabel
    } SID_NAME_USE,*PSID_NAME_USE;

    typedef struct _SID_AND_ATTRIBUTES {



      PSID Sid;

      DWORD Attributes;
    } SID_AND_ATTRIBUTES,*PSID_AND_ATTRIBUTES;

    typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
    typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;

    typedef ULONG_PTR SID_HASH_ENTRY, *PSID_HASH_ENTRY;

    typedef struct _SID_AND_ATTRIBUTES_HASH {
      DWORD SidCount;
      PSID_AND_ATTRIBUTES SidAttr;
      SID_HASH_ENTRY Hash[32];
    } SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH;
# 2860 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef enum {
      WinNullSid = 0,WinWorldSid = 1,WinLocalSid = 2,WinCreatorOwnerSid = 3,
      WinCreatorGroupSid = 4,WinCreatorOwnerServerSid = 5,
      WinCreatorGroupServerSid = 6,WinNtAuthoritySid = 7,WinDialupSid = 8,
      WinNetworkSid = 9,WinBatchSid = 10,WinInteractiveSid = 11,
      WinServiceSid = 12,WinAnonymousSid = 13,WinProxySid = 14,
      WinEnterpriseControllersSid = 15,WinSelfSid = 16,
      WinAuthenticatedUserSid = 17,WinRestrictedCodeSid = 18,
      WinTerminalServerSid = 19,WinRemoteLogonIdSid = 20,WinLogonIdsSid = 21,
      WinLocalSystemSid = 22,WinLocalServiceSid = 23,WinNetworkServiceSid = 24,
      WinBuiltinDomainSid = 25,WinBuiltinAdministratorsSid = 26,
      WinBuiltinUsersSid = 27,WinBuiltinGuestsSid = 28,
      WinBuiltinPowerUsersSid = 29,WinBuiltinAccountOperatorsSid = 30,
      WinBuiltinSystemOperatorsSid = 31,WinBuiltinPrintOperatorsSid = 32,
      WinBuiltinBackupOperatorsSid = 33,WinBuiltinReplicatorSid = 34,
      WinBuiltinPreWindows2000CompatibleAccessSid = 35,
      WinBuiltinRemoteDesktopUsersSid = 36,
      WinBuiltinNetworkConfigurationOperatorsSid = 37,
      WinAccountAdministratorSid = 38,WinAccountGuestSid = 39,
      WinAccountKrbtgtSid = 40,WinAccountDomainAdminsSid = 41,
      WinAccountDomainUsersSid = 42,WinAccountDomainGuestsSid = 43,
      WinAccountComputersSid = 44,WinAccountControllersSid = 45,
      WinAccountCertAdminsSid = 46,WinAccountSchemaAdminsSid = 47,
      WinAccountEnterpriseAdminsSid = 48,WinAccountPolicyAdminsSid = 49,
      WinAccountRasAndIasServersSid = 50,WinNTLMAuthenticationSid = 51,
      WinDigestAuthenticationSid = 52,WinSChannelAuthenticationSid = 53,
      WinThisOrganizationSid = 54,WinOtherOrganizationSid = 55,
      WinBuiltinIncomingForestTrustBuildersSid = 56,
      WinBuiltinPerfMonitoringUsersSid = 57,WinBuiltinPerfLoggingUsersSid = 58,
      WinBuiltinAuthorizationAccessSid = 59,
      WinBuiltinTerminalServerLicenseServersSid = 60,
      WinBuiltinDCOMUsersSid = 61,WinBuiltinIUsersSid = 62,
      WinIUserSid = 63, WinBuiltinCryptoOperatorsSid = 64,
      WinUntrustedLabelSid = 65, WinLowLabelSid = 66, WinMediumLabelSid = 67,
      WinHighLabelSid = 68, WinSystemLabelSid = 69, WinWriteRestrictedCodeSid = 70,
      WinCreatorOwnerRightsSid = 71, WinCacheablePrincipalsGroupSid = 72,
      WinNonCacheablePrincipalsGroupSid = 73, WinEnterpriseReadonlyControllersSid = 74,
      WinAccountReadonlyControllersSid = 75, WinBuiltinEventLogReadersGroup = 76,
      WinNewEnterpriseReadonlyControllersSid = 77, WinBuiltinCertSvcDComAccessGroup = 78,
      WinMediumPlusLabelSid = 79, WinLocalLogonSid = 80, WinConsoleLogonSid = 81,
      WinThisOrganizationCertificateSid = 82, WinApplicationPackageAuthoritySid = 83,
      WinBuiltinAnyPackageSid = 84, WinCapabilityInternetClientSid = 85,
      WinCapabilityInternetClientServerSid = 86,
      WinCapabilityPrivateNetworkClientServerSid = 87,
      WinCapabilityPicturesLibrarySid = 88, WinCapabilityVideosLibrarySid = 89,
      WinCapabilityMusicLibrarySid = 90, WinCapabilityDocumentsLibrarySid = 91,
      WinCapabilitySharedUserCertificatesSid = 92, WinCapabilityEnterpriseAuthenticationSid = 93,
      WinCapabilityRemovableStorageSid = 94, WinBuiltinRDSRemoteAccessServersSid = 95,
      WinBuiltinRDSEndpointServersSid = 96, WinBuiltinRDSManagementServersSid = 97,
      WinUserModeDriversSid = 98, WinBuiltinHyperVAdminsSid = 99,
      WinAccountCloneableControllersSid = 100,
      WinBuiltinAccessControlAssistanceOperatorsSid = 101,
      WinBuiltinRemoteManagementUsersSid = 102, WinAuthenticationAuthorityAssertedSid = 103,
      WinAuthenticationServiceAssertedSid = 104
} WELL_KNOWN_SID_TYPE;
# 2944 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _ACL {
      BYTE AclRevision;
      BYTE Sbz1;
      WORD AclSize;
      WORD AceCount;
      WORD Sbz2;
    } ACL;
    typedef ACL *PACL;

    typedef struct _ACE_HEADER {
      BYTE AceType;
      BYTE AceFlags;
      WORD AceSize;
    } ACE_HEADER;
    typedef ACE_HEADER *PACE_HEADER;
# 3004 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _ACCESS_ALLOWED_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } ACCESS_ALLOWED_ACE;

    typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

    typedef struct _ACCESS_DENIED_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } ACCESS_DENIED_ACE;
    typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

    typedef struct _SYSTEM_AUDIT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } SYSTEM_AUDIT_ACE;
    typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

    typedef struct _SYSTEM_ALARM_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } SYSTEM_ALARM_ACE;
    typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;

    typedef struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } SYSTEM_RESOURCE_ATTRIBUTE_ACE,*PSYSTEM_RESOURCE_ATTRIBUTE_ACE;

    typedef struct _SYSTEM_SCOPED_POLICY_ID_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } SYSTEM_SCOPED_POLICY_ID_ACE,*PSYSTEM_SCOPED_POLICY_ID_ACE;

    typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } SYSTEM_MANDATORY_LABEL_ACE, *PSYSTEM_MANDATORY_LABEL_ACE;







    typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;
    } ACCESS_ALLOWED_OBJECT_ACE,*PACCESS_ALLOWED_OBJECT_ACE;

    typedef struct _ACCESS_DENIED_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;
    } ACCESS_DENIED_OBJECT_ACE,*PACCESS_DENIED_OBJECT_ACE;

    typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;
    } SYSTEM_AUDIT_OBJECT_ACE,*PSYSTEM_AUDIT_OBJECT_ACE;

    typedef struct _SYSTEM_ALARM_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;
    } SYSTEM_ALARM_OBJECT_ACE,*PSYSTEM_ALARM_OBJECT_ACE;

    typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } ACCESS_ALLOWED_CALLBACK_ACE,*PACCESS_ALLOWED_CALLBACK_ACE;

    typedef struct _ACCESS_DENIED_CALLBACK_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } ACCESS_DENIED_CALLBACK_ACE,*PACCESS_DENIED_CALLBACK_ACE;

    typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } SYSTEM_AUDIT_CALLBACK_ACE,*PSYSTEM_AUDIT_CALLBACK_ACE;

    typedef struct _SYSTEM_ALARM_CALLBACK_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } SYSTEM_ALARM_CALLBACK_ACE,*PSYSTEM_ALARM_CALLBACK_ACE;

    typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;

    } ACCESS_ALLOWED_CALLBACK_OBJECT_ACE,*PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;

    typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;
    } ACCESS_DENIED_CALLBACK_OBJECT_ACE,*PACCESS_DENIED_CALLBACK_OBJECT_ACE;

    typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;
    } SYSTEM_AUDIT_CALLBACK_OBJECT_ACE,*PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;

    typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;

    } SYSTEM_ALARM_CALLBACK_OBJECT_ACE,*PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;




    typedef enum _ACL_INFORMATION_CLASS {
      AclRevisionInformation = 1,AclSizeInformation
    } ACL_INFORMATION_CLASS;

    typedef struct _ACL_REVISION_INFORMATION {
      DWORD AclRevision;
    } ACL_REVISION_INFORMATION;
    typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;

    typedef struct _ACL_SIZE_INFORMATION {
      DWORD AceCount;
      DWORD AclBytesInUse;
      DWORD AclBytesFree;
    } ACL_SIZE_INFORMATION;
    typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;






    typedef WORD SECURITY_DESCRIPTOR_CONTROL,*PSECURITY_DESCRIPTOR_CONTROL;
# 3196 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
      BYTE Revision;
      BYTE Sbz1;
      SECURITY_DESCRIPTOR_CONTROL Control;
      DWORD Owner;
      DWORD Group;
      DWORD Sacl;
      DWORD Dacl;
    } SECURITY_DESCRIPTOR_RELATIVE,*PISECURITY_DESCRIPTOR_RELATIVE;

    typedef struct _SECURITY_DESCRIPTOR {
      BYTE Revision;
      BYTE Sbz1;
      SECURITY_DESCRIPTOR_CONTROL Control;
      PSID Owner;
      PSID Group;
      PACL Sacl;
      PACL Dacl;
    } SECURITY_DESCRIPTOR,*PISECURITY_DESCRIPTOR;

    typedef struct _OBJECT_TYPE_LIST {
      WORD Level;
      WORD Sbz;
      GUID *ObjectType;
    } OBJECT_TYPE_LIST,*POBJECT_TYPE_LIST;







    typedef enum _AUDIT_EVENT_TYPE {
      AuditEventObjectAccess,AuditEventDirectoryServiceAccess
    } AUDIT_EVENT_TYPE,*PAUDIT_EVENT_TYPE;
# 3248 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _PRIVILEGE_SET {
      DWORD PrivilegeCount;
      DWORD Control;
      LUID_AND_ATTRIBUTES Privilege[1];
    } PRIVILEGE_SET,*PPRIVILEGE_SET;







    typedef enum _ACCESS_REASON_TYPE {
      AccessReasonNone = 0x00000000,
      AccessReasonAllowedAce = 0x00010000,
      AccessReasonDeniedAce = 0x00020000,
      AccessReasonAllowedParentAce = 0x00030000,
      AccessReasonDeniedParentAce = 0x00040000,
      AccessReasonNotGrantedByCape = 0x00050000,
      AccessReasonNotGrantedByParentCape = 0x00060000,
      AccessReasonNotGrantedToAppContainer = 0x00070000,
      AccessReasonMissingPrivilege = 0x00100000,
      AccessReasonFromPrivilege = 0x00200000,
      AccessReasonIntegrityLevel = 0x00300000,
      AccessReasonOwnership = 0x00400000,
      AccessReasonNullDacl = 0x00500000,
      AccessReasonEmptyDacl = 0x00600000,
      AccessReasonNoSD = 0x00700000,
      AccessReasonNoGrant = 0x00800000
    } ACCESS_REASON_TYPE;
    typedef DWORD ACCESS_REASON;

    typedef struct _ACCESS_REASONS {
      ACCESS_REASON Data[32];
    } ACCESS_REASONS,*PACCESS_REASONS;





    typedef struct _SE_SECURITY_DESCRIPTOR {
      DWORD Size;
      DWORD Flags;
      PSECURITY_DESCRIPTOR SecurityDescriptor;
    } SE_SECURITY_DESCRIPTOR,*PSE_SECURITY_DESCRIPTOR;

    typedef struct _SE_ACCESS_REQUEST {
      DWORD Size;
      PSE_SECURITY_DESCRIPTOR SeSecurityDescriptor;
      ACCESS_MASK DesiredAccess;
      ACCESS_MASK PreviouslyGrantedAccess;
      PSID PrincipalSelfSid;
      PGENERIC_MAPPING GenericMapping;
      DWORD ObjectTypeListCount;
      POBJECT_TYPE_LIST ObjectTypeList;
    } SE_ACCESS_REQUEST,*PSE_ACCESS_REQUEST;

    typedef struct _SE_ACCESS_REPLY {
      DWORD Size;
      DWORD ResultListCount;
      PACCESS_MASK GrantedAccess;
      PDWORD AccessStatus;
      PACCESS_REASONS AccessReason;
      PPRIVILEGE_SET *Privileges;
    } SE_ACCESS_REPLY,*PSE_ACCESS_REPLY;
# 3350 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef enum _SECURITY_IMPERSONATION_LEVEL {
      SecurityAnonymous,SecurityIdentification,SecurityImpersonation,SecurityDelegation
    } SECURITY_IMPERSONATION_LEVEL,*PSECURITY_IMPERSONATION_LEVEL;
# 3377 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef enum _TOKEN_TYPE {
      TokenPrimary = 1,TokenImpersonation
    } TOKEN_TYPE;
    typedef TOKEN_TYPE *PTOKEN_TYPE;

    typedef enum _TOKEN_ELEVATION_TYPE {
      TokenElevationTypeDefault = 1,
      TokenElevationTypeFull,
      TokenElevationTypeLimited
    } TOKEN_ELEVATION_TYPE, *PTOKEN_ELEVATION_TYPE;

    typedef enum _TOKEN_INFORMATION_CLASS {
      TokenUser = 1,
      TokenGroups,
      TokenPrivileges,
      TokenOwner,
      TokenPrimaryGroup,
      TokenDefaultDacl,
      TokenSource,
      TokenType,
      TokenImpersonationLevel,
      TokenStatistics,
      TokenRestrictedSids,
      TokenSessionId,
      TokenGroupsAndPrivileges,
      TokenSessionReference,
      TokenSandBoxInert,
      TokenAuditPolicy,
      TokenOrigin,
      TokenElevationType,
      TokenLinkedToken,
      TokenElevation,
      TokenHasRestrictions,
      TokenAccessInformation,
      TokenVirtualizationAllowed,
      TokenVirtualizationEnabled,
      TokenIntegrityLevel,
      TokenUIAccess,
      TokenMandatoryPolicy,
      TokenLogonSid,
      TokenIsAppContainer,
      TokenCapabilities,
      TokenAppContainerSid,
      TokenAppContainerNumber,
      TokenUserClaimAttributes,
      TokenDeviceClaimAttributes,
      TokenRestrictedUserClaimAttributes,
      TokenRestrictedDeviceClaimAttributes,
      TokenDeviceGroups,
      TokenRestrictedDeviceGroups,
      TokenSecurityAttributes,
      TokenIsRestricted,
      MaxTokenInfoClass
    } TOKEN_INFORMATION_CLASS,*PTOKEN_INFORMATION_CLASS;

    typedef struct _TOKEN_USER {
      SID_AND_ATTRIBUTES User;
    } TOKEN_USER,*PTOKEN_USER;

    typedef struct _TOKEN_GROUPS {
      DWORD GroupCount;



      SID_AND_ATTRIBUTES Groups[1];

    } TOKEN_GROUPS,*PTOKEN_GROUPS;

    typedef struct _TOKEN_PRIVILEGES {
      DWORD PrivilegeCount;
      LUID_AND_ATTRIBUTES Privileges[1];
    } TOKEN_PRIVILEGES,*PTOKEN_PRIVILEGES;

    typedef struct _TOKEN_OWNER {
      PSID Owner;
    } TOKEN_OWNER,*PTOKEN_OWNER;

    typedef struct _TOKEN_PRIMARY_GROUP {
      PSID PrimaryGroup;
    } TOKEN_PRIMARY_GROUP,*PTOKEN_PRIMARY_GROUP;

    typedef struct _TOKEN_DEFAULT_DACL {
      PACL DefaultDacl;
    } TOKEN_DEFAULT_DACL,*PTOKEN_DEFAULT_DACL;

    typedef struct _TOKEN_USER_CLAIMS {
      PCLAIMS_BLOB UserClaims;
    } TOKEN_USER_CLAIMS,*PTOKEN_USER_CLAIMS;

    typedef struct _TOKEN_DEVICE_CLAIMS {
      PCLAIMS_BLOB DeviceClaims;
    } TOKEN_DEVICE_CLAIMS,*PTOKEN_DEVICE_CLAIMS;

    typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
      DWORD SidCount;
      DWORD SidLength;
      PSID_AND_ATTRIBUTES Sids;
      DWORD RestrictedSidCount;
      DWORD RestrictedSidLength;
      PSID_AND_ATTRIBUTES RestrictedSids;
      DWORD PrivilegeCount;
      DWORD PrivilegeLength;
      PLUID_AND_ATTRIBUTES Privileges;
      LUID AuthenticationId;
    } TOKEN_GROUPS_AND_PRIVILEGES,*PTOKEN_GROUPS_AND_PRIVILEGES;

    typedef struct _TOKEN_LINKED_TOKEN {
      HANDLE LinkedToken;
    } TOKEN_LINKED_TOKEN,*PTOKEN_LINKED_TOKEN;

    typedef struct _TOKEN_ELEVATION {
      DWORD TokenIsElevated;
    } TOKEN_ELEVATION,*PTOKEN_ELEVATION;

    typedef struct _TOKEN_MANDATORY_LABEL {
      SID_AND_ATTRIBUTES Label;
    } TOKEN_MANDATORY_LABEL,*PTOKEN_MANDATORY_LABEL;







    typedef struct _TOKEN_MANDATORY_POLICY {
      DWORD Policy;
    } TOKEN_MANDATORY_POLICY,*PTOKEN_MANDATORY_POLICY;

    typedef struct _TOKEN_ACCESS_INFORMATION {
      PSID_AND_ATTRIBUTES_HASH SidHash;
      PSID_AND_ATTRIBUTES_HASH RestrictedSidHash;
      PTOKEN_PRIVILEGES Privileges;
      LUID AuthenticationId;
      TOKEN_TYPE TokenType;
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
      TOKEN_MANDATORY_POLICY MandatoryPolicy;
      DWORD Flags;
      DWORD AppContainerNumber;
      PSID PackageSid;
      PSID_AND_ATTRIBUTES_HASH CapabilitiesHash;
    } TOKEN_ACCESS_INFORMATION,*PTOKEN_ACCESS_INFORMATION;



    typedef struct _TOKEN_AUDIT_POLICY {
      UCHAR PerUserPolicy[(((56)) >> 1) + 1];
    } TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY;



    typedef struct _TOKEN_SOURCE {
      CHAR SourceName[8];
      LUID SourceIdentifier;
    } TOKEN_SOURCE,*PTOKEN_SOURCE;

    typedef struct _TOKEN_STATISTICS {
      LUID TokenId;
      LUID AuthenticationId;
      LARGE_INTEGER ExpirationTime;
      TOKEN_TYPE TokenType;
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
      DWORD DynamicCharged;
      DWORD DynamicAvailable;
      DWORD GroupCount;
      DWORD PrivilegeCount;
      LUID ModifiedId;
    } TOKEN_STATISTICS,*PTOKEN_STATISTICS;

    typedef struct _TOKEN_CONTROL {
      LUID TokenId;
      LUID AuthenticationId;
      LUID ModifiedId;
      TOKEN_SOURCE TokenSource;
    } TOKEN_CONTROL,*PTOKEN_CONTROL;

    typedef struct _TOKEN_ORIGIN {
      LUID OriginatingLogonSession;
    } TOKEN_ORIGIN,*PTOKEN_ORIGIN;

    typedef enum _MANDATORY_LEVEL {
      MandatoryLevelUntrusted = 0,
      MandatoryLevelLow,
      MandatoryLevelMedium,
      MandatoryLevelHigh,
      MandatoryLevelSystem,
      MandatoryLevelSecureProcess,
      MandatoryLevelCount
    } MANDATORY_LEVEL,*PMANDATORY_LEVEL;

    typedef struct _TOKEN_APPCONTAINER_INFORMATION {
      PSID TokenAppContainer;
    } TOKEN_APPCONTAINER_INFORMATION,*PTOKEN_APPCONTAINER_INFORMATION;
# 3578 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {
      DWORD64 Version;
      PWSTR Name;
    } CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE,*PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;

    typedef struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
      PVOID pValue;
      DWORD ValueLength;
    } CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE, *PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
# 3599 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _CLAIM_SECURITY_ATTRIBUTE_V1 {
      PWSTR Name;
      WORD ValueType;
      WORD Reserved;
      DWORD Flags;
      DWORD ValueCount;
      union {
 PLONG64 pInt64;
 PDWORD64 pUint64;
 PWSTR *ppString;
 PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE pFqbn;
 PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE pOctetString;
      } Values;
    } CLAIM_SECURITY_ATTRIBUTE_V1,*PCLAIM_SECURITY_ATTRIBUTE_V1;

    typedef struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {
      DWORD Name;
      WORD ValueType;
      WORD Reserved;
      DWORD Flags;
      DWORD ValueCount;
      union {
 DWORD pInt64[1];
 DWORD pUint64[1];
 DWORD ppString[1];
 DWORD pFqbn[1];
 DWORD pOctetString[1];
      } Values;
    } CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1,*PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;





    typedef struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {
      WORD Version;
      WORD Reserved;
      DWORD AttributeCount;
      union {
 PCLAIM_SECURITY_ATTRIBUTE_V1 pAttributeV1;
      } Attribute;
    } CLAIM_SECURITY_ATTRIBUTES_INFORMATION,*PCLAIM_SECURITY_ATTRIBUTES_INFORMATION;




    typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,*PSECURITY_CONTEXT_TRACKING_MODE;

    typedef struct _SECURITY_QUALITY_OF_SERVICE {
      DWORD Length;
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
      SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
      BOOLEAN EffectiveOnly;
    } SECURITY_QUALITY_OF_SERVICE,*PSECURITY_QUALITY_OF_SERVICE;

    typedef struct _SE_IMPERSONATION_STATE {
      PACCESS_TOKEN Token;
      BOOLEAN CopyOnOpen;
      BOOLEAN EffectiveOnly;
      SECURITY_IMPERSONATION_LEVEL Level;
    } SE_IMPERSONATION_STATE,*PSE_IMPERSONATION_STATE;






    typedef DWORD SECURITY_INFORMATION,*PSECURITY_INFORMATION;
# 3682 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef enum _SE_LEARNING_MODE_DATA_TYPE {
      SeLearningModeInvalidType = 0,
      SeLearningModeSettings,
      SeLearningModeMax
    } SE_LEARNING_MODE_DATA_TYPE;



    typedef struct _SECURITY_CAPABILITIES {
      PSID AppContainerSid;
      PSID_AND_ATTRIBUTES Capabilities;
      DWORD CapabilityCount;
      DWORD Reserved;
    } SECURITY_CAPABILITIES,*PSECURITY_CAPABILITIES,*LPSECURITY_CAPABILITIES;
# 3750 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _JOB_SET_ARRAY {
      HANDLE JobHandle;
      DWORD MemberLevel;
      DWORD Flags;
    } JOB_SET_ARRAY,*PJOB_SET_ARRAY;





    typedef struct _EXCEPTION_REGISTRATION_RECORD {
      __extension__ union {
        struct _EXCEPTION_REGISTRATION_RECORD *Next;
        struct _EXCEPTION_REGISTRATION_RECORD *prev;
      };
      __extension__ union {
        PEXCEPTION_ROUTINE Handler;
        PEXCEPTION_ROUTINE handler;
      };
    } EXCEPTION_REGISTRATION_RECORD;

    typedef EXCEPTION_REGISTRATION_RECORD *PEXCEPTION_REGISTRATION_RECORD;

    typedef EXCEPTION_REGISTRATION_RECORD EXCEPTION_REGISTRATION;
    typedef PEXCEPTION_REGISTRATION_RECORD PEXCEPTION_REGISTRATION;




    __extension__ typedef struct _NT_TIB {
      struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
      PVOID StackBase;
      PVOID StackLimit;
      PVOID SubSystemTib;
      __extension__ union {
 PVOID FiberData;
 DWORD Version;
      };
      PVOID ArbitraryUserPointer;
      struct _NT_TIB *Self;
    } NT_TIB;
    typedef NT_TIB *PNT_TIB;


    __extension__ typedef struct _NT_TIB32 {
      DWORD ExceptionList;
      DWORD StackBase;
      DWORD StackLimit;
      DWORD SubSystemTib;
      __extension__ union {
 DWORD FiberData;
 DWORD Version;
      };
      DWORD ArbitraryUserPointer;
      DWORD Self;
    } NT_TIB32,*PNT_TIB32;

    __extension__ typedef struct _NT_TIB64 {
      DWORD64 ExceptionList;
      DWORD64 StackBase;
      DWORD64 StackLimit;
      DWORD64 SubSystemTib;
      __extension__ union {
 DWORD64 FiberData;
 DWORD Version;
      };
      DWORD64 ArbitraryUserPointer;
      DWORD64 Self;
    } NT_TIB64,*PNT_TIB64;
# 3829 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _UMS_CREATE_THREAD_ATTRIBUTES {
      DWORD UmsVersion;
      PVOID UmsContext;
      PVOID UmsCompletionList;
    } UMS_CREATE_THREAD_ATTRIBUTES,*PUMS_CREATE_THREAD_ATTRIBUTES;

    typedef struct _QUOTA_LIMITS {
      SIZE_T PagedPoolLimit;
      SIZE_T NonPagedPoolLimit;
      SIZE_T MinimumWorkingSetSize;
      SIZE_T MaximumWorkingSetSize;
      SIZE_T PagefileLimit;
      LARGE_INTEGER TimeLimit;
    } QUOTA_LIMITS,*PQUOTA_LIMITS;







    typedef union _RATE_QUOTA_LIMIT {
      DWORD RateData;
      __extension__ struct {
        DWORD RatePercent : 7;
        DWORD Reserved0 : 25;
      } ;
    } RATE_QUOTA_LIMIT, *PRATE_QUOTA_LIMIT;

    typedef struct _QUOTA_LIMITS_EX {
      SIZE_T PagedPoolLimit;
      SIZE_T NonPagedPoolLimit;
      SIZE_T MinimumWorkingSetSize;
      SIZE_T MaximumWorkingSetSize;
      SIZE_T PagefileLimit;
      LARGE_INTEGER TimeLimit;
      SIZE_T WorkingSetLimit;
      SIZE_T Reserved2;
      SIZE_T Reserved3;
      SIZE_T Reserved4;
      DWORD Flags;
      RATE_QUOTA_LIMIT CpuRateLimit;
    } QUOTA_LIMITS_EX,*PQUOTA_LIMITS_EX;

    typedef struct _IO_COUNTERS {
      ULONGLONG ReadOperationCount;
      ULONGLONG WriteOperationCount;
      ULONGLONG OtherOperationCount;
      ULONGLONG ReadTransferCount;
      ULONGLONG WriteTransferCount;
      ULONGLONG OtherTransferCount;
    } IO_COUNTERS;
    typedef IO_COUNTERS *PIO_COUNTERS;




    typedef enum _HARDWARE_COUNTER_TYPE {
      PMCCounter,
      MaxHardwareCounterType
    } HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;

    typedef enum _PROCESS_MITIGATION_POLICY {
      ProcessDEPPolicy,
      ProcessASLRPolicy,
      ProcessReserved1MitigationPolicy,
      ProcessStrictHandleCheckPolicy,
      ProcessSystemCallDisablePolicy,
      ProcessMitigationOptionsMask,
      ProcessExtensionPointDisablePolicy,
      MaxProcessMitigationPolicy
    } PROCESS_MITIGATION_POLICY,*PPROCESS_MITIGATION_POLICY;

    typedef struct _PROCESS_MITIGATION_ASLR_POLICY {
      __extension__ union {
 DWORD Flags;
 __extension__ struct {
   DWORD EnableBottomUpRandomization : 1;
   DWORD EnableForceRelocateImages : 1;
   DWORD EnableHighEntropy : 1;
   DWORD DisallowStrippedImages : 1;
   DWORD ReservedFlags : 28;
 };
      };
    } PROCESS_MITIGATION_ASLR_POLICY,*PPROCESS_MITIGATION_ASLR_POLICY;

    typedef struct _PROCESS_MITIGATION_DEP_POLICY {
      __extension__ union {
 DWORD Flags;
 __extension__ struct {
   DWORD Enable : 1;
   DWORD DisableAtlThunkEmulation : 1;
   DWORD ReservedFlags : 30;
 };
      };
      BOOLEAN Permanent;
    } PROCESS_MITIGATION_DEP_POLICY,*PPROCESS_MITIGATION_DEP_POLICY;

    typedef struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
      __extension__ union {
 DWORD Flags;
 __extension__ struct {
   DWORD RaiseExceptionOnInvalidHandleReference : 1;
   DWORD HandleExceptionsPermanentlyEnabled : 1;
   DWORD ReservedFlags : 30;
 };
      };
    } PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY,*PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;

    typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
      __extension__ union {
 DWORD Flags;
 __extension__ struct {
   DWORD DisallowWin32kSystemCalls : 1;
   DWORD ReservedFlags : 31;
 };
      };
    } PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY,*PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;

    typedef struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
      __extension__ union {
 DWORD Flags;
 __extension__ struct {
   DWORD DisableExtensionPoints : 1;
   DWORD ReservedFlags : 31;
 };
      };
    } PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY,*PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;

    typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
      LARGE_INTEGER TotalUserTime;
      LARGE_INTEGER TotalKernelTime;
      LARGE_INTEGER ThisPeriodTotalUserTime;
      LARGE_INTEGER ThisPeriodTotalKernelTime;
      DWORD TotalPageFaultCount;
      DWORD TotalProcesses;
      DWORD ActiveProcesses;
      DWORD TotalTerminatedProcesses;
    } JOBOBJECT_BASIC_ACCOUNTING_INFORMATION,*PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

    typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
      LARGE_INTEGER PerProcessUserTimeLimit;
      LARGE_INTEGER PerJobUserTimeLimit;
      DWORD LimitFlags;
      SIZE_T MinimumWorkingSetSize;
      SIZE_T MaximumWorkingSetSize;
      DWORD ActiveProcessLimit;
      ULONG_PTR Affinity;
      DWORD PriorityClass;
      DWORD SchedulingClass;
    } JOBOBJECT_BASIC_LIMIT_INFORMATION,*PJOBOBJECT_BASIC_LIMIT_INFORMATION;

    typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
      JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
      IO_COUNTERS IoInfo;
      SIZE_T ProcessMemoryLimit;
      SIZE_T JobMemoryLimit;
      SIZE_T PeakProcessMemoryUsed;
      SIZE_T PeakJobMemoryUsed;
    } JOBOBJECT_EXTENDED_LIMIT_INFORMATION,*PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;

    typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
      DWORD NumberOfAssignedProcesses;
      DWORD NumberOfProcessIdsInList;
      ULONG_PTR ProcessIdList[1];
    } JOBOBJECT_BASIC_PROCESS_ID_LIST,*PJOBOBJECT_BASIC_PROCESS_ID_LIST;

    typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
      DWORD UIRestrictionsClass;
    } JOBOBJECT_BASIC_UI_RESTRICTIONS,*PJOBOBJECT_BASIC_UI_RESTRICTIONS;

    typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
      DWORD SecurityLimitFlags;
      HANDLE JobToken;
      PTOKEN_GROUPS SidsToDisable;
      PTOKEN_PRIVILEGES PrivilegesToDelete;
      PTOKEN_GROUPS RestrictedSids;
    } JOBOBJECT_SECURITY_LIMIT_INFORMATION,*PJOBOBJECT_SECURITY_LIMIT_INFORMATION;

    typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
      DWORD EndOfJobTimeAction;
    } JOBOBJECT_END_OF_JOB_TIME_INFORMATION,*PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

    typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
      PVOID CompletionKey;
      HANDLE CompletionPort;
    } JOBOBJECT_ASSOCIATE_COMPLETION_PORT,*PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;

    typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
      JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
      IO_COUNTERS IoInfo;
    } JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION,*PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

    typedef struct _JOBOBJECT_JOBSET_INFORMATION {
      DWORD MemberLevel;
    } JOBOBJECT_JOBSET_INFORMATION,*PJOBOBJECT_JOBSET_INFORMATION;

    typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE {
      ToleranceLow = 1,
      ToleranceMedium,
      ToleranceHigh
    } JOBOBJECT_RATE_CONTROL_TOLERANCE;

    typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL {
      ToleranceIntervalShort = 1,
      ToleranceIntervalMedium,
      ToleranceIntervalLong
    } JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;

    typedef struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION {
      DWORD64 IoReadBytesLimit;
      DWORD64 IoWriteBytesLimit;
      LARGE_INTEGER PerJobUserTimeLimit;
      DWORD64 JobMemoryLimit;
      JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
      JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
      DWORD LimitFlags;
    } JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION,*PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;

    typedef struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION {
      DWORD LimitFlags;
      DWORD ViolationLimitFlags;
      DWORD64 IoReadBytes;
      DWORD64 IoReadBytesLimit;
      DWORD64 IoWriteBytes;
      DWORD64 IoWriteBytesLimit;
      LARGE_INTEGER PerJobUserTime;
      LARGE_INTEGER PerJobUserTimeLimit;
      DWORD64 JobMemory;
      DWORD64 JobMemoryLimit;
      JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
      JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceLimit;
    } JOBOBJECT_LIMIT_VIOLATION_INFORMATION,*PJOBOBJECT_LIMIT_VIOLATION_INFORMATION;

    typedef struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {
      DWORD ControlFlags;
      __extension__ union {
 DWORD CpuRate;
 DWORD Weight;
      };
    } JOBOBJECT_CPU_RATE_CONTROL_INFORMATION,*PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION;
# 4151 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef enum _JOBOBJECTINFOCLASS {
      JobObjectBasicAccountingInformation = 1, JobObjectBasicLimitInformation,
      JobObjectBasicProcessIdList, JobObjectBasicUIRestrictions,
      JobObjectSecurityLimitInformation, JobObjectEndOfJobTimeInformation,
      JobObjectAssociateCompletionPortInformation, JobObjectBasicAndIoAccountingInformation,
      JobObjectExtendedLimitInformation, JobObjectJobSetInformation,
      JobObjectGroupInformation,
      JobObjectNotificationLimitInformation,
      JobObjectLimitViolationInformation,
      JobObjectGroupInformationEx,
      JobObjectCpuRateControlInformation,
      JobObjectCompletionFilter,
      JobObjectCompletionCounter,
      JobObjectReserved1Information = 18,
      JobObjectReserved2Information,
      JobObjectReserved3Information,
      JobObjectReserved4Information,
      JobObjectReserved5Information,
      JobObjectReserved6Information,
      JobObjectReserved7Information,
      JobObjectReserved8Information,
      MaxJobObjectInfoClass
    } JOBOBJECTINFOCLASS;

    typedef enum _FIRMWARE_TYPE {
      FirmwareTypeUnknown,
      FirmwareTypeBios,
      FirmwareTypeUefi,
      FirmwareTypeMax
    } FIRMWARE_TYPE,*PFIRMWARE_TYPE;
# 4200 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
      RelationProcessorCore,RelationNumaNode,RelationCache,
      RelationProcessorPackage,RelationGroup,RelationAll=0xffff
    } LOGICAL_PROCESSOR_RELATIONSHIP;



    typedef enum _PROCESSOR_CACHE_TYPE {
      CacheUnified,CacheInstruction,CacheData,CacheTrace
    } PROCESSOR_CACHE_TYPE;



    typedef struct _CACHE_DESCRIPTOR {
      BYTE Level;
      BYTE Associativity;
      WORD LineSize;
      DWORD Size;
      PROCESSOR_CACHE_TYPE Type;
    } CACHE_DESCRIPTOR,*PCACHE_DESCRIPTOR;

    typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
      ULONG_PTR ProcessorMask;
      LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
      __extension__ union {
 struct {
   BYTE Flags;
 } ProcessorCore;
 struct {
   DWORD NodeNumber;
 } NumaNode;
 CACHE_DESCRIPTOR Cache;
 ULONGLONG Reserved[2];
      } ;
    } SYSTEM_LOGICAL_PROCESSOR_INFORMATION,*PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;

    typedef struct _PROCESSOR_RELATIONSHIP {
      BYTE Flags;
      BYTE Reserved[21];
      WORD GroupCount;
      GROUP_AFFINITY GroupMask[1];
    } PROCESSOR_RELATIONSHIP,*PPROCESSOR_RELATIONSHIP;

    typedef struct _NUMA_NODE_RELATIONSHIP {
      DWORD NodeNumber;
      BYTE Reserved[20];
      GROUP_AFFINITY GroupMask;
    } NUMA_NODE_RELATIONSHIP,*PNUMA_NODE_RELATIONSHIP;

    typedef struct _CACHE_RELATIONSHIP {
      BYTE Level;
      BYTE Associativity;
      WORD LineSize;
      DWORD CacheSize;
      PROCESSOR_CACHE_TYPE Type;
      BYTE Reserved[20];
      GROUP_AFFINITY GroupMask;
    } CACHE_RELATIONSHIP,*PCACHE_RELATIONSHIP;

    typedef struct _PROCESSOR_GROUP_INFO {
      BYTE MaximumProcessorCount;
      BYTE ActiveProcessorCount;
      BYTE Reserved[38];
      KAFFINITY ActiveProcessorMask;
    } PROCESSOR_GROUP_INFO,*PPROCESSOR_GROUP_INFO;

    typedef struct _GROUP_RELATIONSHIP {
      WORD MaximumGroupCount;
      WORD ActiveGroupCount;
      BYTE Reserved[20];
      PROCESSOR_GROUP_INFO GroupInfo[1];
    } GROUP_RELATIONSHIP,*PGROUP_RELATIONSHIP;

    struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
      LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
      DWORD Size;
      __extension__ union {
 PROCESSOR_RELATIONSHIP Processor;
 NUMA_NODE_RELATIONSHIP NumaNode;
 CACHE_RELATIONSHIP Cache;
 GROUP_RELATIONSHIP Group;
      } ;
    };

    typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX,*PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;

    typedef struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
      DWORD64 CycleTime;
    } SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION,*PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
# 4371 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _XSTATE_FEATURE {
      DWORD Offset;
      DWORD Size;
    } XSTATE_FEATURE,*PXSTATE_FEATURE;

    typedef struct _XSTATE_CONFIGURATION {
      DWORD64 EnabledFeatures;
      DWORD64 EnabledVolatileFeatures;
      DWORD Size;
      DWORD OptimizedSave : 1;
      XSTATE_FEATURE Features[(64)];
    } XSTATE_CONFIGURATION,*PXSTATE_CONFIGURATION;

    typedef struct _MEMORY_BASIC_INFORMATION {
      PVOID BaseAddress;
      PVOID AllocationBase;
      DWORD AllocationProtect;
      SIZE_T RegionSize;
      DWORD State;
      DWORD Protect;
      DWORD Type;
    } MEMORY_BASIC_INFORMATION,*PMEMORY_BASIC_INFORMATION;

    typedef struct _MEMORY_BASIC_INFORMATION32 {
      DWORD BaseAddress;
      DWORD AllocationBase;
      DWORD AllocationProtect;
      DWORD RegionSize;
      DWORD State;
      DWORD Protect;
      DWORD Type;
    } MEMORY_BASIC_INFORMATION32,*PMEMORY_BASIC_INFORMATION32;

    typedef struct __attribute__ ((__aligned__ (16))) _MEMORY_BASIC_INFORMATION64 {
      ULONGLONG BaseAddress;
      ULONGLONG AllocationBase;
      DWORD AllocationProtect;
      DWORD __alignment1;
      ULONGLONG RegionSize;
      DWORD State;
      DWORD Protect;
      DWORD Type;
      DWORD __alignment2;
    } MEMORY_BASIC_INFORMATION64,*PMEMORY_BASIC_INFORMATION64;
# 4581 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct FILE_ID_128 {
      ULONGLONG LowPart;
      ULONGLONG HighPart;
    } FILE_ID_128, *PFILE_ID_128;

    typedef struct _FILE_NOTIFY_INFORMATION {
      DWORD NextEntryOffset;
      DWORD Action;
      DWORD FileNameLength;
      WCHAR FileName[1];
    } FILE_NOTIFY_INFORMATION,*PFILE_NOTIFY_INFORMATION;

    typedef union _FILE_SEGMENT_ELEMENT {
      PVOID64 Buffer;
      ULONGLONG Alignment;
    } FILE_SEGMENT_ELEMENT,*PFILE_SEGMENT_ELEMENT;

    typedef struct _REPARSE_GUID_DATA_BUFFER {
      DWORD ReparseTag;
      WORD ReparseDataLength;
      WORD Reserved;
      GUID ReparseGuid;
      struct {
 BYTE DataBuffer[1];
      } GenericReparseBuffer;
    } REPARSE_GUID_DATA_BUFFER,*PREPARSE_GUID_DATA_BUFFER;
# 4706 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    extern const GUID GUID_MAX_POWER_SAVINGS;
    extern const GUID GUID_MIN_POWER_SAVINGS;
    extern const GUID GUID_TYPICAL_POWER_SAVINGS;
    extern const GUID NO_SUBGROUP_GUID;
    extern const GUID ALL_POWERSCHEMES_GUID;
    extern const GUID GUID_POWERSCHEME_PERSONALITY;
    extern const GUID GUID_ACTIVE_POWERSCHEME;
    extern const GUID GUID_IDLE_RESILIENCY_SUBGROUP;
    extern const GUID GUID_IDLE_RESILIENCY_PERIOD;
    extern const GUID GUID_DISK_COALESCING_POWERDOWN_TIMEOUT;
    extern const GUID GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT;
    extern const GUID GUID_VIDEO_SUBGROUP;
    extern const GUID GUID_VIDEO_POWERDOWN_TIMEOUT;
    extern const GUID GUID_VIDEO_ANNOYANCE_TIMEOUT;
    extern const GUID GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE;
    extern const GUID GUID_VIDEO_DIM_TIMEOUT;
    extern const GUID GUID_VIDEO_ADAPTIVE_POWERDOWN;
    extern const GUID GUID_MONITOR_POWER_ON;
    extern const GUID GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;
    extern const GUID GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;
    extern const GUID GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;
    extern const GUID GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;
    extern const GUID GUID_CONSOLE_DISPLAY_STATE;
    extern const GUID GUID_ALLOW_DISPLAY_REQUIRED;
    extern const GUID GUID_VIDEO_CONSOLE_LOCK_TIMEOUT;
    extern const GUID GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP;
    extern const GUID GUID_NON_ADAPTIVE_INPUT_TIMEOUT;
    extern const GUID GUID_DISK_SUBGROUP;
    extern const GUID GUID_DISK_POWERDOWN_TIMEOUT;
    extern const GUID GUID_DISK_IDLE_TIMEOUT;
    extern const GUID GUID_DISK_BURST_IGNORE_THRESHOLD;
    extern const GUID GUID_DISK_ADAPTIVE_POWERDOWN;
    extern const GUID GUID_SLEEP_SUBGROUP;
    extern const GUID GUID_SLEEP_IDLE_THRESHOLD;
    extern const GUID GUID_STANDBY_TIMEOUT;
    extern const GUID GUID_UNATTEND_SLEEP_TIMEOUT;
    extern const GUID GUID_HIBERNATE_TIMEOUT;
    extern const GUID GUID_HIBERNATE_FASTS4_POLICY;
    extern const GUID GUID_CRITICAL_POWER_TRANSITION;
    extern const GUID GUID_SYSTEM_AWAYMODE;
    extern const GUID GUID_ALLOW_AWAYMODE;
    extern const GUID GUID_ALLOW_STANDBY_STATES;
    extern const GUID GUID_ALLOW_RTC_WAKE;
    extern const GUID GUID_ALLOW_SYSTEM_REQUIRED;
    extern const GUID GUID_SYSTEM_BUTTON_SUBGROUP;
    extern const GUID GUID_POWERBUTTON_ACTION;
    extern const GUID GUID_SLEEPBUTTON_ACTION;
    extern const GUID GUID_USERINTERFACEBUTTON_ACTION;
    extern const GUID GUID_LIDCLOSE_ACTION;
    extern const GUID GUID_LIDOPEN_POWERSTATE;
    extern const GUID GUID_BATTERY_SUBGROUP;
    extern const GUID GUID_BATTERY_DISCHARGE_ACTION_0;
    extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_0;
    extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_0;
    extern const GUID GUID_BATTERY_DISCHARGE_ACTION_1;
    extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_1;
    extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_1;
    extern const GUID GUID_BATTERY_DISCHARGE_ACTION_2;
    extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_2;
    extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_2;
    extern const GUID GUID_BATTERY_DISCHARGE_ACTION_3;
    extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_3;
    extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_3;
    extern const GUID GUID_PROCESSOR_SETTINGS_SUBGROUP;
    extern const GUID GUID_PROCESSOR_THROTTLE_POLICY;
    extern const GUID GUID_PROCESSOR_THROTTLE_MAXIMUM;
    extern const GUID GUID_PROCESSOR_THROTTLE_MINIMUM;
    extern const GUID GUID_PROCESSOR_ALLOW_THROTTLING;
    extern const GUID GUID_PROCESSOR_IDLESTATE_POLICY;
    extern const GUID GUID_PROCESSOR_PERFSTATE_POLICY;
    extern const GUID GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;
    extern const GUID GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;
    extern const GUID GUID_PROCESSOR_PERF_INCREASE_POLICY;
    extern const GUID GUID_PROCESSOR_PERF_DECREASE_POLICY;
    extern const GUID GUID_PROCESSOR_PERF_INCREASE_TIME;
    extern const GUID GUID_PROCESSOR_PERF_DECREASE_TIME;
    extern const GUID GUID_PROCESSOR_PERF_TIME_CHECK;
    extern const GUID GUID_PROCESSOR_PERF_BOOST_POLICY;
    extern const GUID GUID_PROCESSOR_PERF_BOOST_MODE;
    extern const GUID GUID_PROCESSOR_IDLE_ALLOW_SCALING;
    extern const GUID GUID_PROCESSOR_IDLE_DISABLE;
    extern const GUID GUID_PROCESSOR_IDLE_STATE_MAXIMUM;
    extern const GUID GUID_PROCESSOR_IDLE_TIME_CHECK;
    extern const GUID GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;
    extern const GUID GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_MAX_CORES;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_MIN_CORES;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING;
    extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;
    extern const GUID GUID_PROCESSOR_PARKING_CORE_OVERRIDE;
    extern const GUID GUID_PROCESSOR_PARKING_PERF_STATE;
    extern const GUID GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD;
    extern const GUID GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD;
    extern const GUID GUID_PROCESSOR_PERF_HISTORY;
    extern const GUID GUID_PROCESSOR_PERF_LATENCY_HINT;
    extern const GUID GUID_PROCESSOR_DISTRIBUTE_UTILITY;
    extern const GUID GUID_SYSTEM_COOLING_POLICY;
    extern const GUID GUID_LOCK_CONSOLE_ON_WAKE;
    extern const GUID GUID_DEVICE_IDLE_POLICY;
    extern const GUID GUID_ACDC_POWER_SOURCE;
    extern const GUID GUID_LIDSWITCH_STATE_CHANGE;
    extern const GUID GUID_BATTERY_PERCENTAGE_REMAINING;
    extern const GUID GUID_GLOBAL_USER_PRESENCE;
    extern const GUID GUID_SESSION_DISPLAY_STATUS;
    extern const GUID GUID_SESSION_USER_PRESENCE;
    extern const GUID GUID_IDLE_BACKGROUND_TASK;
    extern const GUID GUID_BACKGROUND_TASK_NOTIFICATION;
    extern const GUID GUID_APPLAUNCH_BUTTON;
    extern const GUID GUID_PCIEXPRESS_SETTINGS_SUBGROUP;
    extern const GUID GUID_PCIEXPRESS_ASPM_POLICY;
    extern const GUID GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;

  typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,PowerSystemWorking = 1,PowerSystemSleeping1 = 2,PowerSystemSleeping2 = 3,PowerSystemSleeping3 = 4,PowerSystemHibernate = 5,PowerSystemShutdown = 6,PowerSystemMaximum = 7
  } SYSTEM_POWER_STATE,*PSYSTEM_POWER_STATE;



  typedef enum {
    PowerActionNone = 0, PowerActionReserved, PowerActionSleep, PowerActionHibernate,
    PowerActionShutdown, PowerActionShutdownReset, PowerActionShutdownOff,
    PowerActionWarmEject
  } POWER_ACTION,*PPOWER_ACTION;

  typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0, PowerDeviceD0, PowerDeviceD1, PowerDeviceD2, PowerDeviceD3,
    PowerDeviceMaximum
  } DEVICE_POWER_STATE,*PDEVICE_POWER_STATE;

  typedef enum _MONITOR_DISPLAY_STATE {
    PowerMonitorOff = 0, PowerMonitorOn, PowerMonitorDim
  } MONITOR_DISPLAY_STATE, *PMONITOR_DISPLAY_STATE;

  typedef enum _USER_ACTIVITY_PRESENCE {
    PowerUserPresent = 0,
    PowerUserNotPresent,
    PowerUserInactive,
    PowerUserMaximum,
    PowerUserInvalid = PowerUserMaximum
  } USER_ACTIVITY_PRESENCE,*PUSER_ACTIVITY_PRESENCE;







  typedef DWORD EXECUTION_STATE, *PEXECUTION_STATE;

  typedef enum {
    LT_DONT_CARE,LT_LOWEST_LATENCY
  } LATENCY_TIME;
# 4881 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
  typedef enum _POWER_REQUEST_TYPE {
    PowerRequestDisplayRequired,
    PowerRequestSystemRequired,
    PowerRequestAwayModeRequired,
    PowerRequestExecutionRequired
  } POWER_REQUEST_TYPE,*PPOWER_REQUEST_TYPE;
# 4898 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct CM_Power_Data_s {
      DWORD PD_Size;
      DEVICE_POWER_STATE PD_MostRecentPowerState;
      DWORD PD_Capabilities;
      DWORD PD_D1Latency;
      DWORD PD_D2Latency;
      DWORD PD_D3Latency;
      DEVICE_POWER_STATE PD_PowerStateMapping[7];
      SYSTEM_POWER_STATE PD_DeepestSystemWake;
    } CM_POWER_DATA,*PCM_POWER_DATA;

    typedef enum {
      SystemPowerPolicyAc,
      SystemPowerPolicyDc,
      VerifySystemPolicyAc,
      VerifySystemPolicyDc,
      SystemPowerCapabilities,
      SystemBatteryState,
      SystemPowerStateHandler,
      ProcessorStateHandler,
      SystemPowerPolicyCurrent,
      AdministratorPowerPolicy,
      SystemReserveHiberFile,
      ProcessorInformation,
      SystemPowerInformation,
      ProcessorStateHandler2,
      LastWakeTime,
      LastSleepTime,
      SystemExecutionState,
      SystemPowerStateNotifyHandler,
      ProcessorPowerPolicyAc,
      ProcessorPowerPolicyDc,
      VerifyProcessorPowerPolicyAc,
      VerifyProcessorPowerPolicyDc,
      ProcessorPowerPolicyCurrent,
      SystemPowerStateLogging,
      SystemPowerLoggingEntry,
      SetPowerSettingValue,
      NotifyUserPowerSetting,
      PowerInformationLevelUnused0,
      SystemMonitorHiberBootPowerOff,
      SystemVideoState,
      TraceApplicationPowerMessage,
      TraceApplicationPowerMessageEnd,
      ProcessorPerfStates,
      ProcessorIdleStates,
      ProcessorCap,
      SystemWakeSource,
      SystemHiberFileInformation,
      TraceServicePowerMessage,
      ProcessorLoad,
      PowerShutdownNotification,
      MonitorCapabilities,
      SessionPowerInit,
      SessionDisplayState,
      PowerRequestCreate,
      PowerRequestAction,
      GetPowerRequestList,
      ProcessorInformationEx,
      NotifyUserModeLegacyPowerEvent,
      GroupPark,
      ProcessorIdleDomains,
      WakeTimerList,
      SystemHiberFileSize,
      ProcessorIdleStatesHv,
      ProcessorPerfStatesHv,
      ProcessorPerfCapHv,
      ProcessorSetIdle,
      LogicalProcessorIdling,
      UserPresence,
      PowerSettingNotificationName,
      GetPowerSettingValue,
      IdleResiliency,
      SessionRITState,
      SessionConnectNotification,
      SessionPowerCleanup,
      SessionLockState,
      SystemHiberbootState,
      PlatformInformation,
      PdcInvocation,
      MonitorInvocation,
      FirmwareTableInformationRegistered,
      SetShutdownSelectedTime,
      SuspendResumeInvocation,
      PlmPowerRequestCreate,
      ScreenOff,
      CsDeviceNotification,
      PlatformRole,
      LastResumePerformance,
      DisplayBurst,
      ExitLatencySamplingPercentage,
      ApplyLowPowerScenarioSettings,
      PowerInformationLevelMaximum
    } POWER_INFORMATION_LEVEL;

    typedef enum {
      UserNotPresent = 0,
      UserPresent = 1,
      UserUnknown = 0xff
    } POWER_USER_PRESENCE_TYPE,*PPOWER_USER_PRESENCE_TYPE;

    typedef struct _POWER_USER_PRESENCE {
      POWER_USER_PRESENCE_TYPE UserPresence;
    } POWER_USER_PRESENCE,*PPOWER_USER_PRESENCE;

    typedef struct _POWER_SESSION_CONNECT {
      BOOLEAN Connected;
      BOOLEAN Console;
    } POWER_SESSION_CONNECT,*PPOWER_SESSION_CONNECT;

    typedef struct _POWER_SESSION_TIMEOUTS {
      DWORD InputTimeout;
      DWORD DisplayTimeout;
    } POWER_SESSION_TIMEOUTS,*PPOWER_SESSION_TIMEOUTS;

    typedef struct _POWER_SESSION_RIT_STATE {
      BOOLEAN Active;
      DWORD LastInputTime;
    } POWER_SESSION_RIT_STATE,*PPOWER_SESSION_RIT_STATE;

    typedef struct _POWER_SESSION_WINLOGON {
      DWORD SessionId;
      BOOLEAN Console;
      BOOLEAN Locked;
    } POWER_SESSION_WINLOGON,*PPOWER_SESSION_WINLOGON;

    typedef struct _POWER_IDLE_RESILIENCY {
      DWORD CoalescingTimeout;
      DWORD IdleResiliencyPeriod;
    } POWER_IDLE_RESILIENCY,*PPOWER_IDLE_RESILIENCY;

    typedef enum {
      MonitorRequestReasonUnknown,
      MonitorRequestReasonPowerButton,
      MonitorRequestReasonRemoteConnection,
      MonitorRequestReasonScMonitorpower,
      MonitorRequestReasonUserInput,
      MonitorRequestReasonAcDcDisplayBurst,
      MonitorRequestReasonUserDisplayBurst,
      MonitorRequestReasonPoSetSystemState,
      MonitorRequestReasonSetThreadExecutionState,
      MonitorRequestReasonFullWake,
      MonitorRequestReasonSessionUnlock,
      MonitorRequestReasonScreenOffRequest,
      MonitorRequestReasonIdleTimeout,
      MonitorRequestReasonPolicyChange,
      MonitorRequestReasonMax
    } POWER_MONITOR_REQUEST_REASON;

    typedef struct _POWER_MONITOR_INVOCATION {
      BOOLEAN On;
      BOOLEAN Console;
      POWER_MONITOR_REQUEST_REASON RequestReason;
    } POWER_MONITOR_INVOCATION,*PPOWER_MONITOR_INVOCATION;

    typedef struct _RESUME_PERFORMANCE {
      DWORD PostTimeMs;
      ULONGLONG TotalResumeTimeMs;
      ULONGLONG ResumeCompleteTimestamp;
    } RESUME_PERFORMANCE,*PRESUME_PERFORMANCE;

    typedef enum {
      PoAc,
      PoDc,
      PoHot,
      PoConditionMaximum
    } SYSTEM_POWER_CONDITION;

    typedef struct {
      DWORD Version;
      GUID Guid;
      SYSTEM_POWER_CONDITION PowerCondition;
      DWORD DataLength;
      BYTE Data[1];
    } SET_POWER_SETTING_VALUE,*PSET_POWER_SETTING_VALUE;



    typedef struct {
      GUID Guid;
    } NOTIFY_USER_POWER_SETTING,*PNOTIFY_USER_POWER_SETTING;

    typedef struct _APPLICATIONLAUNCH_SETTING_VALUE {
      LARGE_INTEGER ActivationTime;
      DWORD Flags;
      DWORD ButtonInstanceID;
    } APPLICATIONLAUNCH_SETTING_VALUE,*PAPPLICATIONLAUNCH_SETTING_VALUE;

    typedef enum _POWER_PLATFORM_ROLE {
      PlatformRoleUnspecified = 0,
      PlatformRoleDesktop,
      PlatformRoleMobile,
      PlatformRoleWorkstation,
      PlatformRoleEnterpriseServer,
      PlatformRoleSOHOServer,
      PlatformRoleAppliancePC,
      PlatformRolePerformanceServer,
      PlatformRoleSlate,
      PlatformRoleMaximum
    } POWER_PLATFORM_ROLE,*PPOWER_PLATFORM_ROLE;

    typedef struct _POWER_PLATFORM_INFORMATION {
      BOOLEAN AoAc;
    } POWER_PLATFORM_INFORMATION,*PPOWER_PLATFORM_INFORMATION;
# 5117 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct {
      DWORD Granularity;
      DWORD Capacity;
    } BATTERY_REPORTING_SCALE,*PBATTERY_REPORTING_SCALE;

    typedef struct {
      DWORD Frequency;
      DWORD Flags;
      DWORD PercentFrequency;
    } PPM_WMI_LEGACY_PERFSTATE,*PPPM_WMI_LEGACY_PERFSTATE;

    typedef struct {
      DWORD Latency;
      DWORD Power;
      DWORD TimeCheck;
      BYTE PromotePercent;
      BYTE DemotePercent;
      BYTE StateType;
      BYTE Reserved;
      DWORD StateFlags;
      DWORD Context;
      DWORD IdleHandler;
      DWORD Reserved1;
    } PPM_WMI_IDLE_STATE,*PPPM_WMI_IDLE_STATE;

    typedef struct {
      DWORD Type;
      DWORD Count;
      DWORD TargetState;
      DWORD OldState;
      DWORD64 TargetProcessors;
      PPM_WMI_IDLE_STATE State[1];
    } PPM_WMI_IDLE_STATES,*PPPM_WMI_IDLE_STATES;

    typedef struct {
      DWORD Type;
      DWORD Count;
      DWORD TargetState;
      DWORD OldState;
      PVOID TargetProcessors;
      PPM_WMI_IDLE_STATE State[1];
    } PPM_WMI_IDLE_STATES_EX,*PPPM_WMI_IDLE_STATES_EX;

    typedef struct {
      DWORD Frequency;
      DWORD Power;
      BYTE PercentFrequency;
      BYTE IncreaseLevel;
      BYTE DecreaseLevel;
      BYTE Type;
      DWORD IncreaseTime;
      DWORD DecreaseTime;
      DWORD64 Control;
      DWORD64 Status;
      DWORD HitCount;
      DWORD Reserved1;
      DWORD64 Reserved2;
      DWORD64 Reserved3;
    } PPM_WMI_PERF_STATE,*PPPM_WMI_PERF_STATE;

    typedef struct {
      DWORD Count;
      DWORD MaxFrequency;
      DWORD CurrentState;
      DWORD MaxPerfState;
      DWORD MinPerfState;
      DWORD LowestPerfState;
      DWORD ThermalConstraint;
      BYTE BusyAdjThreshold;
      BYTE PolicyType;
      BYTE Type;
      BYTE Reserved;
      DWORD TimerInterval;
      DWORD64 TargetProcessors;
      DWORD PStateHandler;
      DWORD PStateContext;
      DWORD TStateHandler;
      DWORD TStateContext;
      DWORD FeedbackHandler;
      DWORD Reserved1;
      DWORD64 Reserved2;
      PPM_WMI_PERF_STATE State[1];
    } PPM_WMI_PERF_STATES,*PPPM_WMI_PERF_STATES;

    typedef struct {
      DWORD Count;
      DWORD MaxFrequency;
      DWORD CurrentState;
      DWORD MaxPerfState;
      DWORD MinPerfState;
      DWORD LowestPerfState;
      DWORD ThermalConstraint;
      BYTE BusyAdjThreshold;
      BYTE PolicyType;
      BYTE Type;
      BYTE Reserved;
      DWORD TimerInterval;
      PVOID TargetProcessors;
      DWORD PStateHandler;
      DWORD PStateContext;
      DWORD TStateHandler;
      DWORD TStateContext;
      DWORD FeedbackHandler;
      DWORD Reserved1;
      DWORD64 Reserved2;
      PPM_WMI_PERF_STATE State[1];
    } PPM_WMI_PERF_STATES_EX,*PPPM_WMI_PERF_STATES_EX;




    typedef struct {
      DWORD IdleTransitions;
      DWORD FailedTransitions;
      DWORD InvalidBucketIndex;
      DWORD64 TotalTime;
      DWORD IdleTimeBuckets[6];
    } PPM_IDLE_STATE_ACCOUNTING,*PPPM_IDLE_STATE_ACCOUNTING;

    typedef struct {
      DWORD StateCount;
      DWORD TotalTransitions;
      DWORD ResetCount;
      DWORD64 StartTime;
      PPM_IDLE_STATE_ACCOUNTING State[1];
    } PPM_IDLE_ACCOUNTING,*PPPM_IDLE_ACCOUNTING;

    typedef struct {
      DWORD64 TotalTimeUs;
      DWORD MinTimeUs;
      DWORD MaxTimeUs;
      DWORD Count;
    } PPM_IDLE_STATE_BUCKET_EX,*PPPM_IDLE_STATE_BUCKET_EX;

    typedef struct {
      DWORD64 TotalTime;
      DWORD IdleTransitions;
      DWORD FailedTransitions;
      DWORD InvalidBucketIndex;
      DWORD MinTimeUs;
      DWORD MaxTimeUs;
      DWORD CancelledTransitions;
      PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
    } PPM_IDLE_STATE_ACCOUNTING_EX,*PPPM_IDLE_STATE_ACCOUNTING_EX;

    typedef struct {
      DWORD StateCount;
      DWORD TotalTransitions;
      DWORD ResetCount;
      DWORD AbortCount;
      DWORD64 StartTime;
      PPM_IDLE_STATE_ACCOUNTING_EX State[1];
    } PPM_IDLE_ACCOUNTING_EX,*PPPM_IDLE_ACCOUNTING_EX;
# 5307 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct {
      DWORD State;
      DWORD Status;
      DWORD Latency;
      DWORD Speed;
      DWORD Processor;
    } PPM_PERFSTATE_EVENT,*PPPM_PERFSTATE_EVENT;

    typedef struct {
      DWORD State;
      DWORD Latency;
      DWORD Speed;
      DWORD64 Processors;
    } PPM_PERFSTATE_DOMAIN_EVENT,*PPPM_PERFSTATE_DOMAIN_EVENT;

    typedef struct {
      DWORD NewState;
      DWORD OldState;
      DWORD64 Processors;
    } PPM_IDLESTATE_EVENT,*PPPM_IDLESTATE_EVENT;

    typedef struct {
      DWORD ThermalConstraint;
      DWORD64 Processors;
    } PPM_THERMALCHANGE_EVENT,*PPPM_THERMALCHANGE_EVENT;
    typedef struct {
      BYTE Mode;
      DWORD64 Processors;
    } PPM_THERMAL_POLICY_EVENT,*PPPM_THERMAL_POLICY_EVENT;

    extern const GUID PPM_PERFSTATE_CHANGE_GUID;
    extern const GUID PPM_PERFSTATE_DOMAIN_CHANGE_GUID;
    extern const GUID PPM_IDLESTATE_CHANGE_GUID;
    extern const GUID PPM_PERFSTATES_DATA_GUID;
    extern const GUID PPM_IDLESTATES_DATA_GUID;
    extern const GUID PPM_IDLE_ACCOUNTING_GUID;
    extern const GUID PPM_IDLE_ACCOUNTING_EX_GUID;
    extern const GUID PPM_THERMALCONSTRAINT_GUID;
    extern const GUID PPM_PERFMON_PERFSTATE_GUID;
    extern const GUID PPM_THERMAL_POLICY_CHANGE_GUID;

    typedef struct {
      POWER_ACTION Action;
      DWORD Flags;
      DWORD EventCode;
    } POWER_ACTION_POLICY,*PPOWER_ACTION_POLICY;
# 5382 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct {
      DWORD TimeCheck;
      BYTE DemotePercent;
      BYTE PromotePercent;
      BYTE Spare[2];
    } PROCESSOR_IDLESTATE_INFO,*PPROCESSOR_IDLESTATE_INFO;

    typedef struct {
      BOOLEAN Enable;
      BYTE Spare[3];
      DWORD BatteryLevel;
      POWER_ACTION_POLICY PowerPolicy;
      SYSTEM_POWER_STATE MinSystemState;
    } SYSTEM_POWER_LEVEL,*PSYSTEM_POWER_LEVEL;

    typedef struct _SYSTEM_POWER_POLICY {
      DWORD Revision;
      POWER_ACTION_POLICY PowerButton;
      POWER_ACTION_POLICY SleepButton;
      POWER_ACTION_POLICY LidClose;
      SYSTEM_POWER_STATE LidOpenWake;
      DWORD Reserved;
      POWER_ACTION_POLICY Idle;
      DWORD IdleTimeout;
      BYTE IdleSensitivity;
      BYTE DynamicThrottle;
      BYTE Spare2[2];
      SYSTEM_POWER_STATE MinSleep;
      SYSTEM_POWER_STATE MaxSleep;
      SYSTEM_POWER_STATE ReducedLatencySleep;
      DWORD WinLogonFlags;
      DWORD Spare3;
      DWORD DozeS4Timeout;
      DWORD BroadcastCapacityResolution;
      SYSTEM_POWER_LEVEL DischargePolicy[4];
      DWORD VideoTimeout;
      BOOLEAN VideoDimDisplay;
      DWORD VideoReserved[3];
      DWORD SpindownTimeout;
      BOOLEAN OptimizeForPower;
      BYTE FanThrottleTolerance;
      BYTE ForcedThrottle;
      BYTE MinThrottle;
      POWER_ACTION_POLICY OverThrottled;
    } SYSTEM_POWER_POLICY,*PSYSTEM_POWER_POLICY;







    typedef struct {
      WORD Revision;
      union {
 WORD AsWORD;
 __extension__ struct {
   WORD AllowScaling : 1;
   WORD Disabled : 1;
   WORD Reserved : 14;
 } ;
      } Flags;
      DWORD PolicyCount;
      PROCESSOR_IDLESTATE_INFO Policy[0x3];
    } PROCESSOR_IDLESTATE_POLICY,*PPROCESSOR_IDLESTATE_POLICY;

    typedef struct _PROCESSOR_POWER_POLICY_INFO {
      DWORD TimeCheck;
      DWORD DemoteLimit;
      DWORD PromoteLimit;
      BYTE DemotePercent;
      BYTE PromotePercent;
      BYTE Spare[2];
      DWORD AllowDemotion:1;
      DWORD AllowPromotion:1;
      DWORD Reserved:30;
    } PROCESSOR_POWER_POLICY_INFO,*PPROCESSOR_POWER_POLICY_INFO;

    typedef struct _PROCESSOR_POWER_POLICY {
      DWORD Revision;
      BYTE DynamicThrottle;
      BYTE Spare[3];
      DWORD DisableCStates:1;
      DWORD Reserved:31;
      DWORD PolicyCount;
      PROCESSOR_POWER_POLICY_INFO Policy[3];
    } PROCESSOR_POWER_POLICY,*PPROCESSOR_POWER_POLICY;

    typedef struct {
      DWORD Revision;
      BYTE MaxThrottle;
      BYTE MinThrottle;
      BYTE BusyAdjThreshold;
      __extension__ union {
 BYTE Spare;
 union {
   BYTE AsBYTE;
   __extension__ struct {
     BYTE NoDomainAccounting : 1;
     BYTE IncreasePolicy: 2;
     BYTE DecreasePolicy: 2;
     BYTE Reserved : 3;
   } ;
 } Flags;
      } ;
      DWORD TimeCheck;
      DWORD IncreaseTime;
      DWORD DecreaseTime;
      DWORD IncreasePercent;
      DWORD DecreasePercent;
    } PROCESSOR_PERFSTATE_POLICY,*PPROCESSOR_PERFSTATE_POLICY;

    typedef struct _ADMINISTRATOR_POWER_POLICY {
      SYSTEM_POWER_STATE MinSleep;
      SYSTEM_POWER_STATE MaxSleep;
      DWORD MinVideoTimeout;
      DWORD MaxVideoTimeout;
      DWORD MinSpindownTimeout;
      DWORD MaxSpindownTimeout;
    } ADMINISTRATOR_POWER_POLICY,*PADMINISTRATOR_POWER_POLICY;

    typedef struct {
      BOOLEAN PowerButtonPresent;
      BOOLEAN SleepButtonPresent;
      BOOLEAN LidPresent;
      BOOLEAN SystemS1;
      BOOLEAN SystemS2;
      BOOLEAN SystemS3;
      BOOLEAN SystemS4;
      BOOLEAN SystemS5;
      BOOLEAN HiberFilePresent;
      BOOLEAN FullWake;
      BOOLEAN VideoDimPresent;
      BOOLEAN ApmPresent;
      BOOLEAN UpsPresent;
      BOOLEAN ThermalControl;
      BOOLEAN ProcessorThrottle;
      BYTE ProcessorMinThrottle;
      BYTE ProcessorMaxThrottle;
      BOOLEAN FastSystemS4;
      BYTE spare2[3];
      BOOLEAN DiskSpinDown;
      BYTE spare3[8];
      BOOLEAN SystemBatteriesPresent;
      BOOLEAN BatteriesAreShortTerm;
      BATTERY_REPORTING_SCALE BatteryScale[3];
      SYSTEM_POWER_STATE AcOnLineWake;
      SYSTEM_POWER_STATE SoftLidWake;
      SYSTEM_POWER_STATE RtcWake;
      SYSTEM_POWER_STATE MinDeviceWakeState;
      SYSTEM_POWER_STATE DefaultLowLatencyWake;
    } SYSTEM_POWER_CAPABILITIES,*PSYSTEM_POWER_CAPABILITIES;

    typedef struct {
      BOOLEAN AcOnLine;
      BOOLEAN BatteryPresent;
      BOOLEAN Charging;
      BOOLEAN Discharging;
      BOOLEAN Spare1[4];
      DWORD MaxCapacity;
      DWORD RemainingCapacity;
      DWORD Rate;
      DWORD EstimatedTime;
      DWORD DefaultAlert1;
      DWORD DefaultAlert2;
    } SYSTEM_BATTERY_STATE,*PSYSTEM_BATTERY_STATE;

# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/pshpack4.h" 1 3 4






#pragma pack(push,4)
# 5550 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4







# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/pshpack2.h" 1 3 4






#pragma pack(push,2)
# 5558 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4

    typedef struct _IMAGE_DOS_HEADER {
      WORD e_magic;
      WORD e_cblp;
      WORD e_cp;
      WORD e_crlc;
      WORD e_cparhdr;
      WORD e_minalloc;
      WORD e_maxalloc;
      WORD e_ss;
      WORD e_sp;
      WORD e_csum;
      WORD e_ip;
      WORD e_cs;
      WORD e_lfarlc;
      WORD e_ovno;
      WORD e_res[4];
      WORD e_oemid;
      WORD e_oeminfo;
      WORD e_res2[10];
      LONG e_lfanew;
    } IMAGE_DOS_HEADER,*PIMAGE_DOS_HEADER;

    typedef struct _IMAGE_OS2_HEADER {
      WORD ne_magic;
      CHAR ne_ver;
      CHAR ne_rev;
      WORD ne_enttab;
      WORD ne_cbenttab;
      LONG ne_crc;
      WORD ne_flags;
      WORD ne_autodata;
      WORD ne_heap;
      WORD ne_stack;
      LONG ne_csip;
      LONG ne_sssp;
      WORD ne_cseg;
      WORD ne_cmod;
      WORD ne_cbnrestab;
      WORD ne_segtab;
      WORD ne_rsrctab;
      WORD ne_restab;
      WORD ne_modtab;
      WORD ne_imptab;
      LONG ne_nrestab;
      WORD ne_cmovent;
      WORD ne_align;
      WORD ne_cres;
      BYTE ne_exetyp;
      BYTE ne_flagsothers;
      WORD ne_pretthunks;
      WORD ne_psegrefbytes;
      WORD ne_swaparea;
      WORD ne_expver;
    } IMAGE_OS2_HEADER,*PIMAGE_OS2_HEADER;

    typedef struct _IMAGE_VXD_HEADER {
      WORD e32_magic;
      BYTE e32_border;
      BYTE e32_worder;
      DWORD e32_level;
      WORD e32_cpu;
      WORD e32_os;
      DWORD e32_ver;
      DWORD e32_mflags;
      DWORD e32_mpages;
      DWORD e32_startobj;
      DWORD e32_eip;
      DWORD e32_stackobj;
      DWORD e32_esp;
      DWORD e32_pagesize;
      DWORD e32_lastpagesize;
      DWORD e32_fixupsize;
      DWORD e32_fixupsum;
      DWORD e32_ldrsize;
      DWORD e32_ldrsum;
      DWORD e32_objtab;
      DWORD e32_objcnt;
      DWORD e32_objmap;
      DWORD e32_itermap;
      DWORD e32_rsrctab;
      DWORD e32_rsrccnt;
      DWORD e32_restab;
      DWORD e32_enttab;
      DWORD e32_dirtab;
      DWORD e32_dircnt;
      DWORD e32_fpagetab;
      DWORD e32_frectab;
      DWORD e32_impmod;
      DWORD e32_impmodcnt;
      DWORD e32_impproc;
      DWORD e32_pagesum;
      DWORD e32_datapage;
      DWORD e32_preload;
      DWORD e32_nrestab;
      DWORD e32_cbnrestab;
      DWORD e32_nressum;
      DWORD e32_autodata;
      DWORD e32_debuginfo;
      DWORD e32_debuglen;
      DWORD e32_instpreload;
      DWORD e32_instdemand;
      DWORD e32_heapsize;
      BYTE e32_res3[12];
      DWORD e32_winresoff;
      DWORD e32_winreslen;
      WORD e32_devid;
      WORD e32_ddkver;
    } IMAGE_VXD_HEADER,*PIMAGE_VXD_HEADER;

# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/poppack.h" 1 3 4






#pragma pack(pop)
# 5669 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4

    typedef struct _IMAGE_FILE_HEADER {
      WORD Machine;
      WORD NumberOfSections;
      DWORD TimeDateStamp;
      DWORD PointerToSymbolTable;
      DWORD NumberOfSymbols;
      WORD SizeOfOptionalHeader;
      WORD Characteristics;
    } IMAGE_FILE_HEADER,*PIMAGE_FILE_HEADER;
# 5730 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _IMAGE_DATA_DIRECTORY {
      DWORD VirtualAddress;
      DWORD Size;
    } IMAGE_DATA_DIRECTORY,*PIMAGE_DATA_DIRECTORY;



    typedef struct _IMAGE_OPTIONAL_HEADER {

      WORD Magic;
      BYTE MajorLinkerVersion;
      BYTE MinorLinkerVersion;
      DWORD SizeOfCode;
      DWORD SizeOfInitializedData;
      DWORD SizeOfUninitializedData;
      DWORD AddressOfEntryPoint;
      DWORD BaseOfCode;
      DWORD BaseOfData;
      DWORD ImageBase;
      DWORD SectionAlignment;
      DWORD FileAlignment;
      WORD MajorOperatingSystemVersion;
      WORD MinorOperatingSystemVersion;
      WORD MajorImageVersion;
      WORD MinorImageVersion;
      WORD MajorSubsystemVersion;
      WORD MinorSubsystemVersion;
      DWORD Win32VersionValue;
      DWORD SizeOfImage;
      DWORD SizeOfHeaders;
      DWORD CheckSum;
      WORD Subsystem;
      WORD DllCharacteristics;
      DWORD SizeOfStackReserve;
      DWORD SizeOfStackCommit;
      DWORD SizeOfHeapReserve;
      DWORD SizeOfHeapCommit;
      DWORD LoaderFlags;
      DWORD NumberOfRvaAndSizes;
      IMAGE_DATA_DIRECTORY DataDirectory[16];
    } IMAGE_OPTIONAL_HEADER32,*PIMAGE_OPTIONAL_HEADER32;

    typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
      WORD Magic;
      BYTE MajorLinkerVersion;
      BYTE MinorLinkerVersion;
      DWORD SizeOfCode;
      DWORD SizeOfInitializedData;
      DWORD SizeOfUninitializedData;
      DWORD AddressOfEntryPoint;
      DWORD BaseOfCode;
      DWORD BaseOfData;
      DWORD BaseOfBss;
      DWORD GprMask;
      DWORD CprMask[4];
      DWORD GpValue;
    } IMAGE_ROM_OPTIONAL_HEADER,*PIMAGE_ROM_OPTIONAL_HEADER;

    typedef struct _IMAGE_OPTIONAL_HEADER64 {
      WORD Magic;
      BYTE MajorLinkerVersion;
      BYTE MinorLinkerVersion;
      DWORD SizeOfCode;
      DWORD SizeOfInitializedData;
      DWORD SizeOfUninitializedData;
      DWORD AddressOfEntryPoint;
      DWORD BaseOfCode;
      ULONGLONG ImageBase;
      DWORD SectionAlignment;
      DWORD FileAlignment;
      WORD MajorOperatingSystemVersion;
      WORD MinorOperatingSystemVersion;
      WORD MajorImageVersion;
      WORD MinorImageVersion;
      WORD MajorSubsystemVersion;
      WORD MinorSubsystemVersion;
      DWORD Win32VersionValue;
      DWORD SizeOfImage;
      DWORD SizeOfHeaders;
      DWORD CheckSum;
      WORD Subsystem;
      WORD DllCharacteristics;
      ULONGLONG SizeOfStackReserve;
      ULONGLONG SizeOfStackCommit;
      ULONGLONG SizeOfHeapReserve;
      ULONGLONG SizeOfHeapCommit;
      DWORD LoaderFlags;
      DWORD NumberOfRvaAndSizes;
      IMAGE_DATA_DIRECTORY DataDirectory[16];
    } IMAGE_OPTIONAL_HEADER64,*PIMAGE_OPTIONAL_HEADER64;
# 5836 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER;
    typedef PIMAGE_OPTIONAL_HEADER32 PIMAGE_OPTIONAL_HEADER;




    typedef struct _IMAGE_NT_HEADERS64 {
      DWORD Signature;
      IMAGE_FILE_HEADER FileHeader;
      IMAGE_OPTIONAL_HEADER64 OptionalHeader;
    } IMAGE_NT_HEADERS64,*PIMAGE_NT_HEADERS64;

    typedef struct _IMAGE_NT_HEADERS {
      DWORD Signature;
      IMAGE_FILE_HEADER FileHeader;
      IMAGE_OPTIONAL_HEADER32 OptionalHeader;
    } IMAGE_NT_HEADERS32,*PIMAGE_NT_HEADERS32;

    typedef struct _IMAGE_ROM_HEADERS {
      IMAGE_FILE_HEADER FileHeader;
      IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
    } IMAGE_ROM_HEADERS,*PIMAGE_ROM_HEADERS;





    typedef IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS;
    typedef PIMAGE_NT_HEADERS32 PIMAGE_NT_HEADERS;
# 5912 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct ANON_OBJECT_HEADER {
      WORD Sig1;
      WORD Sig2;
      WORD Version;
      WORD Machine;
      DWORD TimeDateStamp;
      CLSID ClassID;
      DWORD SizeOfData;
    } ANON_OBJECT_HEADER;

    typedef struct ANON_OBJECT_HEADER_V2 {
      WORD Sig1;
      WORD Sig2;
      WORD Version;
      WORD Machine;
      DWORD TimeDateStamp;
      CLSID ClassID;
      DWORD SizeOfData;
      DWORD Flags;
      DWORD MetaDataSize;
      DWORD MetaDataOffset;
    } ANON_OBJECT_HEADER_V2;

    typedef struct ANON_OBJECT_HEADER_BIGOBJ {
      WORD Sig1;
      WORD Sig2;
      WORD Version;
      WORD Machine;
      DWORD TimeDateStamp;
      CLSID ClassID;
      DWORD SizeOfData;
      DWORD Flags;
      DWORD MetaDataSize;
      DWORD MetaDataOffset;
      DWORD NumberOfSections;
      DWORD PointerToSymbolTable;
      DWORD NumberOfSymbols;
    } ANON_OBJECT_HEADER_BIGOBJ;



    typedef struct _IMAGE_SECTION_HEADER {
      BYTE Name[8];
      union {
 DWORD PhysicalAddress;
 DWORD VirtualSize;
      } Misc;
      DWORD VirtualAddress;
      DWORD SizeOfRawData;
      DWORD PointerToRawData;
      DWORD PointerToRelocations;
      DWORD PointerToLinenumbers;
      WORD NumberOfRelocations;
      WORD NumberOfLinenumbers;
      DWORD Characteristics;
    } IMAGE_SECTION_HEADER,*PIMAGE_SECTION_HEADER;
# 6016 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/pshpack2.h" 1 3 4






#pragma pack(push,2)
# 6017 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4
    typedef struct _IMAGE_SYMBOL {
      union {
 BYTE ShortName[8];
 struct {
   DWORD Short;
   DWORD Long;
 } Name;
 DWORD LongName[2];
      } N;
      DWORD Value;
      SHORT SectionNumber;
      WORD Type;
      BYTE StorageClass;
      BYTE NumberOfAuxSymbols;
    } IMAGE_SYMBOL;
    typedef IMAGE_SYMBOL *PIMAGE_SYMBOL;



    typedef struct _IMAGE_SYMBOL_EX {
      union {
 BYTE ShortName[8];
 struct {
   DWORD Short;
   DWORD Long;
 } Name;
 DWORD LongName[2];
      } N;
      DWORD Value;
      LONG SectionNumber;
      WORD Type;
      BYTE StorageClass;
      BYTE NumberOfAuxSymbols;
    } IMAGE_SYMBOL_EX, *PIMAGE_SYMBOL_EX;
# 6142 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/pshpack2.h" 1 3 4






#pragma pack(push,2)
# 6143 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4
    typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
      BYTE bAuxType;
      BYTE bReserved;
      DWORD SymbolTableIndex;
      BYTE rgbReserved[12];
    } IMAGE_AUX_SYMBOL_TOKEN_DEF, *PIMAGE_AUX_SYMBOL_TOKEN_DEF;
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/poppack.h" 1 3 4






#pragma pack(pop)
# 6150 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4

    typedef union _IMAGE_AUX_SYMBOL {
      struct {
 DWORD TagIndex;
 union {
   struct {
     WORD Linenumber;
     WORD Size;
   } LnSz;
   DWORD TotalSize;
 } Misc;
 union {
   struct {
     DWORD PointerToLinenumber;
     DWORD PointerToNextFunction;
   } Function;
   struct {
     WORD Dimension[4];
   } Array;
 } FcnAry;
 WORD TvIndex;
      } Sym;
      struct {
 BYTE Name[18];
      } File;
      struct {
 DWORD Length;
 WORD NumberOfRelocations;
 WORD NumberOfLinenumbers;
 DWORD CheckSum;
 SHORT Number;
 BYTE Selection;
      } Section;
      IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
      struct {
 DWORD crc;
 BYTE rgbReserved[14];
      } CRC;
    } IMAGE_AUX_SYMBOL, *PIMAGE_AUX_SYMBOL;

    typedef union _IMAGE_AUX_SYMBOL_EX {
      struct {
 DWORD WeakDefaultSymIndex;
 DWORD WeakSearchType;
 BYTE rgbReserved[12];
      } Sym;
      struct {
 BYTE Name[sizeof (IMAGE_SYMBOL_EX)];
      } File;
      struct {
 DWORD Length;
 WORD NumberOfRelocations;
 WORD NumberOfLinenumbers;
 DWORD CheckSum;
 SHORT Number;
 BYTE Selection;
 BYTE bReserved;
 SHORT HighNumber;
 BYTE rgbReserved[2];
      } Section;
      __extension__ struct {
 IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
 BYTE rgbReserved[2];
      };
      struct {
 DWORD crc;
 BYTE rgbReserved[16];
      } CRC;
    } IMAGE_AUX_SYMBOL_EX, *PIMAGE_AUX_SYMBOL_EX;



    typedef enum IMAGE_AUX_SYMBOL_TYPE {
      IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1
    } IMAGE_AUX_SYMBOL_TYPE;
# 6238 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _IMAGE_RELOCATION {
      __extension__ union {
 DWORD VirtualAddress;
 DWORD RelocCount;
      } ;
      DWORD SymbolTableIndex;
      WORD Type;
    } IMAGE_RELOCATION;
    typedef IMAGE_RELOCATION *PIMAGE_RELOCATION;
# 6576 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _IMAGE_LINENUMBER {
      union {
 DWORD SymbolTableIndex;
 DWORD VirtualAddress;
      } Type;
      WORD Linenumber;
    } IMAGE_LINENUMBER;
    typedef IMAGE_LINENUMBER *PIMAGE_LINENUMBER;



# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/poppack.h" 1 3 4






#pragma pack(pop)
# 6588 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4

    typedef struct _IMAGE_BASE_RELOCATION {
      DWORD VirtualAddress;
      DWORD SizeOfBlock;
    } IMAGE_BASE_RELOCATION;
    typedef IMAGE_BASE_RELOCATION *PIMAGE_BASE_RELOCATION;
# 6616 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
      BYTE Name[16];
      BYTE Date[12];
      BYTE UserID[6];
      BYTE GroupID[6];
      BYTE Mode[8];
      BYTE Size[10];
      BYTE EndHeader[2];
    } IMAGE_ARCHIVE_MEMBER_HEADER,*PIMAGE_ARCHIVE_MEMBER_HEADER;



    typedef struct _IMAGE_EXPORT_DIRECTORY {
      DWORD Characteristics;
      DWORD TimeDateStamp;
      WORD MajorVersion;
      WORD MinorVersion;
      DWORD Name;
      DWORD Base;
      DWORD NumberOfFunctions;
      DWORD NumberOfNames;
      DWORD AddressOfFunctions;
      DWORD AddressOfNames;
      DWORD AddressOfNameOrdinals;
    } IMAGE_EXPORT_DIRECTORY,*PIMAGE_EXPORT_DIRECTORY;

    typedef struct _IMAGE_IMPORT_BY_NAME {
      WORD Hint;
      BYTE Name[1];
    } IMAGE_IMPORT_BY_NAME,*PIMAGE_IMPORT_BY_NAME;

# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/pshpack8.h" 1 3 4






#pragma pack(push,8)
# 6648 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4

    typedef struct _IMAGE_THUNK_DATA64 {
      union {
 ULONGLONG ForwarderString;
 ULONGLONG Function;
 ULONGLONG Ordinal;
 ULONGLONG AddressOfData;
      } u1;
    } IMAGE_THUNK_DATA64;
    typedef IMAGE_THUNK_DATA64 *PIMAGE_THUNK_DATA64;

# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/poppack.h" 1 3 4






#pragma pack(pop)
# 6660 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4

    typedef struct _IMAGE_THUNK_DATA32 {
      union {
 DWORD ForwarderString;
 DWORD Function;
 DWORD Ordinal;
 DWORD AddressOfData;
      } u1;
    } IMAGE_THUNK_DATA32;
    typedef IMAGE_THUNK_DATA32 *PIMAGE_THUNK_DATA32;
# 6678 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef void (__attribute__((__stdcall__)) *PIMAGE_TLS_CALLBACK)(PVOID DllHandle,DWORD Reason,PVOID Reserved);

    typedef struct _IMAGE_TLS_DIRECTORY64 {
      ULONGLONG StartAddressOfRawData;
      ULONGLONG EndAddressOfRawData;
      ULONGLONG AddressOfIndex;
      ULONGLONG AddressOfCallBacks;
      DWORD SizeOfZeroFill;
      DWORD Characteristics;
    } IMAGE_TLS_DIRECTORY64;
    typedef IMAGE_TLS_DIRECTORY64 *PIMAGE_TLS_DIRECTORY64;

    typedef struct _IMAGE_TLS_DIRECTORY32 {
      DWORD StartAddressOfRawData;
      DWORD EndAddressOfRawData;
      DWORD AddressOfIndex;
      DWORD AddressOfCallBacks;
      DWORD SizeOfZeroFill;
      DWORD Characteristics;
    } IMAGE_TLS_DIRECTORY32;
    typedef IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY32;
# 6711 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA;
    typedef PIMAGE_THUNK_DATA32 PIMAGE_THUNK_DATA;

    typedef IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY;
    typedef PIMAGE_TLS_DIRECTORY32 PIMAGE_TLS_DIRECTORY;


    typedef struct _IMAGE_IMPORT_DESCRIPTOR {
      __extension__ union {
 DWORD Characteristics;
 DWORD OriginalFirstThunk;
      } ;
      DWORD TimeDateStamp;

      DWORD ForwarderChain;
      DWORD Name;
      DWORD FirstThunk;
    } IMAGE_IMPORT_DESCRIPTOR;
    typedef IMAGE_IMPORT_DESCRIPTOR *PIMAGE_IMPORT_DESCRIPTOR;

    typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
      DWORD TimeDateStamp;
      WORD OffsetModuleName;
      WORD NumberOfModuleForwarderRefs;
    } IMAGE_BOUND_IMPORT_DESCRIPTOR,*PIMAGE_BOUND_IMPORT_DESCRIPTOR;

    typedef struct _IMAGE_BOUND_FORWARDER_REF {
      DWORD TimeDateStamp;
      WORD OffsetModuleName;
      WORD Reserved;
    } IMAGE_BOUND_FORWARDER_REF,*PIMAGE_BOUND_FORWARDER_REF;

    typedef struct _IMAGE_DELAYLOAD_DESCRIPTOR {
      union {
 DWORD AllAttributes;
 __extension__ struct {
   DWORD RvaBased : 1;
   DWORD ReservedAttributes : 31;
 };
      } Attributes;
      DWORD DllNameRVA;
      DWORD ModuleHandleRVA;
      DWORD ImportAddressTableRVA;
      DWORD ImportNameTableRVA;
      DWORD BoundImportAddressTableRVA;
      DWORD UnloadInformationTableRVA;
      DWORD TimeDateStamp;
    } IMAGE_DELAYLOAD_DESCRIPTOR,*PIMAGE_DELAYLOAD_DESCRIPTOR;
    typedef const IMAGE_DELAYLOAD_DESCRIPTOR *PCIMAGE_DELAYLOAD_DESCRIPTOR;

    typedef struct _IMAGE_RESOURCE_DIRECTORY {
      DWORD Characteristics;
      DWORD TimeDateStamp;
      WORD MajorVersion;
      WORD MinorVersion;
      WORD NumberOfNamedEntries;
      WORD NumberOfIdEntries;
    } IMAGE_RESOURCE_DIRECTORY,*PIMAGE_RESOURCE_DIRECTORY;




    typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
      __extension__ union {
 __extension__ struct {
   DWORD NameOffset:31;
   DWORD NameIsString:1;
 } ;
 DWORD Name;
 WORD Id;
      } ;
      __extension__ union {
 DWORD OffsetToData;
 __extension__ struct {
   DWORD OffsetToDirectory:31;
   DWORD DataIsDirectory:1;
 } ;
      } ;
    } IMAGE_RESOURCE_DIRECTORY_ENTRY,*PIMAGE_RESOURCE_DIRECTORY_ENTRY;

    typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
      WORD Length;
      CHAR NameString[1];
    } IMAGE_RESOURCE_DIRECTORY_STRING,*PIMAGE_RESOURCE_DIRECTORY_STRING;

    typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
      WORD Length;
      WCHAR NameString[1];
    } IMAGE_RESOURCE_DIR_STRING_U,*PIMAGE_RESOURCE_DIR_STRING_U;

    typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
      DWORD OffsetToData;
      DWORD Size;
      DWORD CodePage;
      DWORD Reserved;
    } IMAGE_RESOURCE_DATA_ENTRY,*PIMAGE_RESOURCE_DATA_ENTRY;

    typedef struct {
      DWORD Size;
      DWORD TimeDateStamp;
      WORD MajorVersion;
      WORD MinorVersion;
      DWORD GlobalFlagsClear;
      DWORD GlobalFlagsSet;
      DWORD CriticalSectionDefaultTimeout;
      DWORD DeCommitFreeBlockThreshold;
      DWORD DeCommitTotalFreeThreshold;
      DWORD LockPrefixTable;
      DWORD MaximumAllocationSize;
      DWORD VirtualMemoryThreshold;
      DWORD ProcessHeapFlags;
      DWORD ProcessAffinityMask;
      WORD CSDVersion;
      WORD Reserved1;
      DWORD EditList;
      DWORD SecurityCookie;
      DWORD SEHandlerTable;
      DWORD SEHandlerCount;
    } IMAGE_LOAD_CONFIG_DIRECTORY32,*PIMAGE_LOAD_CONFIG_DIRECTORY32;

    typedef struct {
      DWORD Size;
      DWORD TimeDateStamp;
      WORD MajorVersion;
      WORD MinorVersion;
      DWORD GlobalFlagsClear;
      DWORD GlobalFlagsSet;
      DWORD CriticalSectionDefaultTimeout;
      ULONGLONG DeCommitFreeBlockThreshold;
      ULONGLONG DeCommitTotalFreeThreshold;
      ULONGLONG LockPrefixTable;
      ULONGLONG MaximumAllocationSize;
      ULONGLONG VirtualMemoryThreshold;
      ULONGLONG ProcessAffinityMask;
      DWORD ProcessHeapFlags;
      WORD CSDVersion;
      WORD Reserved1;
      ULONGLONG EditList;
      ULONGLONG SecurityCookie;
      ULONGLONG SEHandlerTable;
      ULONGLONG SEHandlerCount;
    } IMAGE_LOAD_CONFIG_DIRECTORY64,*PIMAGE_LOAD_CONFIG_DIRECTORY64;





    typedef IMAGE_LOAD_CONFIG_DIRECTORY32 IMAGE_LOAD_CONFIG_DIRECTORY;
    typedef PIMAGE_LOAD_CONFIG_DIRECTORY32 PIMAGE_LOAD_CONFIG_DIRECTORY;


    typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
      DWORD FuncStart;
      DWORD PrologLen : 8;
      DWORD FuncLen : 22;
      DWORD ThirtyTwoBit : 1;
      DWORD ExceptionFlag : 1;
    } IMAGE_CE_RUNTIME_FUNCTION_ENTRY,*PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

    typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
      ULONGLONG BeginAddress;
      ULONGLONG EndAddress;
      ULONGLONG ExceptionHandler;
      ULONGLONG HandlerData;
      ULONGLONG PrologEndAddress;
    } IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY,*PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

    typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
      DWORD BeginAddress;
      DWORD EndAddress;
      DWORD ExceptionHandler;
      DWORD HandlerData;
      DWORD PrologEndAddress;
    } IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY,*PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

    typedef struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {
      DWORD BeginAddress;
      __extension__ union {
 DWORD UnwindData;
 __extension__ struct {
   DWORD Flag : 2;
   DWORD FunctionLength : 11;
   DWORD Ret : 2;
   DWORD H : 1;
   DWORD Reg : 3;
   DWORD R : 1;
   DWORD L : 1;
   DWORD C : 1;
   DWORD StackAdjust : 10;
 } ;
      } ;
    } IMAGE_ARM_RUNTIME_FUNCTION_ENTRY,*PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY;

    typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
      DWORD BeginAddress;
      DWORD EndAddress;
      __extension__ union {
 DWORD UnwindInfoAddress;
 DWORD UnwindData;
      } ;
    } _IMAGE_RUNTIME_FUNCTION_ENTRY,*_PIMAGE_RUNTIME_FUNCTION_ENTRY;

    typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
    typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
# 6928 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
    typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;


    typedef struct _IMAGE_DEBUG_DIRECTORY {
      DWORD Characteristics;
      DWORD TimeDateStamp;
      WORD MajorVersion;
      WORD MinorVersion;
      DWORD Type;
      DWORD SizeOfData;
      DWORD AddressOfRawData;
      DWORD PointerToRawData;
    } IMAGE_DEBUG_DIRECTORY,*PIMAGE_DEBUG_DIRECTORY;
# 6956 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
      DWORD NumberOfSymbols;
      DWORD LvaToFirstSymbol;
      DWORD NumberOfLinenumbers;
      DWORD LvaToFirstLinenumber;
      DWORD RvaToFirstByteOfCode;
      DWORD RvaToLastByteOfCode;
      DWORD RvaToFirstByteOfData;
      DWORD RvaToLastByteOfData;
    } IMAGE_COFF_SYMBOLS_HEADER,*PIMAGE_COFF_SYMBOLS_HEADER;






    typedef struct _FPO_DATA {
      DWORD ulOffStart;
      DWORD cbProcSize;
      DWORD cdwLocals;
      WORD cdwParams;
      WORD cbProlog : 8;
      WORD cbRegs : 3;
      WORD fHasSEH : 1;
      WORD fUseBP : 1;
      WORD reserved : 1;
      WORD cbFrame : 2;
    } FPO_DATA,*PFPO_DATA;




    typedef struct _IMAGE_DEBUG_MISC {
      DWORD DataType;
      DWORD Length;
      BOOLEAN Unicode;
      BYTE Reserved[3];
      BYTE Data[1];
    } IMAGE_DEBUG_MISC,*PIMAGE_DEBUG_MISC;

    typedef struct _IMAGE_FUNCTION_ENTRY {
      DWORD StartingAddress;
      DWORD EndingAddress;
      DWORD EndOfPrologue;
    } IMAGE_FUNCTION_ENTRY,*PIMAGE_FUNCTION_ENTRY;

    typedef struct _IMAGE_FUNCTION_ENTRY64 {
      ULONGLONG StartingAddress;
      ULONGLONG EndingAddress;
      __extension__ union {
 ULONGLONG EndOfPrologue;
 ULONGLONG UnwindInfoAddress;
      } ;
    } IMAGE_FUNCTION_ENTRY64,*PIMAGE_FUNCTION_ENTRY64;

    typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
      WORD Signature;
      WORD Flags;
      WORD Machine;
      WORD Characteristics;
      DWORD TimeDateStamp;
      DWORD CheckSum;
      DWORD ImageBase;
      DWORD SizeOfImage;
      DWORD NumberOfSections;
      DWORD ExportedNamesSize;
      DWORD DebugDirectorySize;
      DWORD SectionAlignment;
      DWORD Reserved[2];
    } IMAGE_SEPARATE_DEBUG_HEADER,*PIMAGE_SEPARATE_DEBUG_HEADER;

    typedef struct _NON_PAGED_DEBUG_INFO {
      WORD Signature;
      WORD Flags;
      DWORD Size;
      WORD Machine;
      WORD Characteristics;
      DWORD TimeDateStamp;
      DWORD CheckSum;
      DWORD SizeOfImage;
      ULONGLONG ImageBase;
    } NON_PAGED_DEBUG_INFO,*PNON_PAGED_DEBUG_INFO;







    typedef struct _ImageArchitectureHeader {
      unsigned int AmaskValue: 1;
      int Adummy1 : 7;
      unsigned int AmaskShift : 8;
      int Adummy2 : 16;
      DWORD FirstEntryRVA;
    } IMAGE_ARCHITECTURE_HEADER,*PIMAGE_ARCHITECTURE_HEADER;

    typedef struct _ImageArchitectureEntry {
      DWORD FixupInstRVA;
      DWORD NewInst;
    } IMAGE_ARCHITECTURE_ENTRY,*PIMAGE_ARCHITECTURE_ENTRY;
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/poppack.h" 1 3 4






#pragma pack(pop)
# 7058 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4



    typedef struct IMPORT_OBJECT_HEADER {
      WORD Sig1;
      WORD Sig2;
      WORD Version;
      WORD Machine;
      DWORD TimeDateStamp;
      DWORD SizeOfData;
      __extension__ union {
 WORD Ordinal;
 WORD Hint;
      };
      WORD Type : 2;
      WORD NameType : 3;
      WORD Reserved : 11;
    } IMPORT_OBJECT_HEADER;

    typedef enum IMPORT_OBJECT_TYPE {
      IMPORT_OBJECT_CODE = 0,IMPORT_OBJECT_DATA = 1,IMPORT_OBJECT_CONST = 2
    } IMPORT_OBJECT_TYPE;

    typedef enum IMPORT_OBJECT_NAME_TYPE {
      IMPORT_OBJECT_ORDINAL = 0,IMPORT_OBJECT_NAME = 1,IMPORT_OBJECT_NAME_NO_PREFIX = 2,IMPORT_OBJECT_NAME_UNDECORATE = 3
    } IMPORT_OBJECT_NAME_TYPE;



    typedef enum ReplacesCorHdrNumericDefines {
      COMIMAGE_FLAGS_ILONLY = 0x00000001,COMIMAGE_FLAGS_32BITREQUIRED = 0x00000002,COMIMAGE_FLAGS_IL_LIBRARY = 0x00000004,
      COMIMAGE_FLAGS_STRONGNAMESIGNED = 0x00000008,COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x00010000,COR_VERSION_MAJOR_V2 = 2,
      COR_VERSION_MAJOR = COR_VERSION_MAJOR_V2,COR_VERSION_MINOR = 0,COR_DELETED_NAME_LENGTH = 8,COR_VTABLEGAP_NAME_LENGTH = 8,
      NATIVE_TYPE_MAX_CB = 1,COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE= 0xFF,IMAGE_COR_MIH_METHODRVA = 0x01,IMAGE_COR_MIH_EHRVA = 0x02,
      IMAGE_COR_MIH_BASICBLOCK = 0x08,COR_VTABLE_32BIT =0x01,COR_VTABLE_64BIT =0x02,COR_VTABLE_FROM_UNMANAGED = 0x04,
      COR_VTABLE_CALL_MOST_DERIVED = 0x10,IMAGE_COR_EATJ_THUNK_SIZE = 32,MAX_CLASS_NAME =1024,MAX_PACKAGE_NAME = 1024
    } ReplacesCorHdrNumericDefines;

    typedef struct IMAGE_COR20_HEADER {
      DWORD cb;
      WORD MajorRuntimeVersion;
      WORD MinorRuntimeVersion;
      IMAGE_DATA_DIRECTORY MetaData;
      DWORD Flags;
      __extension__ union {
 DWORD EntryPointToken;
 DWORD EntryPointRVA;
      } ;
      IMAGE_DATA_DIRECTORY Resources;
      IMAGE_DATA_DIRECTORY StrongNameSignature;
      IMAGE_DATA_DIRECTORY CodeManagerTable;
      IMAGE_DATA_DIRECTORY VTableFixups;
      IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
      IMAGE_DATA_DIRECTORY ManagedNativeHeader;
    } IMAGE_COR20_HEADER,*PIMAGE_COR20_HEADER;



    __attribute__((dllimport)) WORD __attribute__((__stdcall__)) RtlCaptureStackBackTrace (DWORD FramesToSkip, DWORD FramesToCapture, PVOID *BackTrace, PDWORD BackTraceHash);
    __attribute__((dllimport)) void __attribute__((__stdcall__)) RtlCaptureContext (PCONTEXT ContextRecord);
    __attribute__((dllimport)) SIZE_T __attribute__((__stdcall__)) RtlCompareMemory (const void *Source1, const void *Source2, SIZE_T Length);
# 7154 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    __attribute__((dllimport)) void __attribute__((__stdcall__)) RtlUnwind (PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue);
    __attribute__((dllimport)) PVOID __attribute__((__stdcall__)) RtlPcToFileHeader (PVOID PcValue, PVOID *BaseOfImage);
# 7203 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _SINGLE_LIST_ENTRY SLIST_ENTRY,*PSLIST_ENTRY;

    typedef union _SLIST_HEADER {
      ULONGLONG Alignment;
      __extension__ struct {
 SLIST_ENTRY Next;
 WORD Depth;
 WORD Sequence;
      } ;
    } SLIST_HEADER,*PSLIST_HEADER;





    __attribute__((dllimport)) void __attribute__((__stdcall__)) RtlInitializeSListHead (PSLIST_HEADER ListHead);
    __attribute__((dllimport)) PSLIST_ENTRY __attribute__((__stdcall__)) RtlFirstEntrySList (const SLIST_HEADER *ListHead);
    __attribute__((dllimport)) PSLIST_ENTRY __attribute__((__stdcall__)) RtlInterlockedPopEntrySList (PSLIST_HEADER ListHead);
    __attribute__((dllimport)) PSLIST_ENTRY __attribute__((__stdcall__)) RtlInterlockedPushEntrySList (PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry);
    __attribute__((dllimport)) PSLIST_ENTRY __attribute__((__stdcall__)) RtlInterlockedPushListSListEx (PSLIST_HEADER ListHead, PSLIST_ENTRY List, PSLIST_ENTRY ListEnd, DWORD Count);
    __attribute__((dllimport)) PSLIST_ENTRY __attribute__((__stdcall__)) RtlInterlockedFlushSList (PSLIST_HEADER ListHead);
    __attribute__((dllimport)) WORD __attribute__((__stdcall__)) RtlQueryDepthSList (PSLIST_HEADER ListHead);





typedef struct _RTL_RUN_ONCE { PVOID Ptr; } RTL_RUN_ONCE, *PRTL_RUN_ONCE;
typedef DWORD (__attribute__((__stdcall__)) *PRTL_RUN_ONCE_INIT_FN)(PRTL_RUN_ONCE, PVOID, PVOID *);
# 7240 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
  typedef struct _RTL_BARRIER {
    DWORD Reserved1;
    DWORD Reserved2;
    ULONG_PTR Reserved3[2];
    DWORD Reserved4;
    DWORD Reserved5;
  } RTL_BARRIER,*PRTL_BARRIER;
# 7332 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    PVOID __attribute__((__stdcall__)) RtlSecureZeroMemory(PVOID ptr,SIZE_T cnt);
# 7349 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _MESSAGE_RESOURCE_ENTRY {
      WORD Length;
      WORD Flags;
      BYTE Text[1];
    } MESSAGE_RESOURCE_ENTRY,*PMESSAGE_RESOURCE_ENTRY;
# 7371 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _MESSAGE_RESOURCE_BLOCK {
      DWORD LowId;
      DWORD HighId;
      DWORD OffsetToEntries;
    } MESSAGE_RESOURCE_BLOCK,*PMESSAGE_RESOURCE_BLOCK;

    typedef struct _MESSAGE_RESOURCE_DATA {
      DWORD NumberOfBlocks;
      MESSAGE_RESOURCE_BLOCK Blocks[1];
    } MESSAGE_RESOURCE_DATA,*PMESSAGE_RESOURCE_DATA;

    typedef struct _OSVERSIONINFOA {
      DWORD dwOSVersionInfoSize;
      DWORD dwMajorVersion;
      DWORD dwMinorVersion;
      DWORD dwBuildNumber;
      DWORD dwPlatformId;
      CHAR szCSDVersion[128];
    } OSVERSIONINFOA,*POSVERSIONINFOA,*LPOSVERSIONINFOA;

    typedef struct _OSVERSIONINFOW {
      DWORD dwOSVersionInfoSize;
      DWORD dwMajorVersion;
      DWORD dwMinorVersion;
      DWORD dwBuildNumber;
      DWORD dwPlatformId;
      WCHAR szCSDVersion[128];
    } OSVERSIONINFOW,*POSVERSIONINFOW,*LPOSVERSIONINFOW,RTL_OSVERSIONINFOW,*PRTL_OSVERSIONINFOW;

    typedef OSVERSIONINFOA OSVERSIONINFO;
    typedef POSVERSIONINFOA POSVERSIONINFO;
    typedef LPOSVERSIONINFOA LPOSVERSIONINFO;

    typedef struct _OSVERSIONINFOEXA {
      DWORD dwOSVersionInfoSize;
      DWORD dwMajorVersion;
      DWORD dwMinorVersion;
      DWORD dwBuildNumber;
      DWORD dwPlatformId;
      CHAR szCSDVersion[128];
      WORD wServicePackMajor;
      WORD wServicePackMinor;
      WORD wSuiteMask;
      BYTE wProductType;
      BYTE wReserved;
    } OSVERSIONINFOEXA,*POSVERSIONINFOEXA,*LPOSVERSIONINFOEXA;

    typedef struct _OSVERSIONINFOEXW {
      DWORD dwOSVersionInfoSize;
      DWORD dwMajorVersion;
      DWORD dwMinorVersion;
      DWORD dwBuildNumber;
      DWORD dwPlatformId;
      WCHAR szCSDVersion[128];
      WORD wServicePackMajor;
      WORD wServicePackMinor;
      WORD wSuiteMask;
      BYTE wProductType;
      BYTE wReserved;
    } OSVERSIONINFOEXW,*POSVERSIONINFOEXW,*LPOSVERSIONINFOEXW,RTL_OSVERSIONINFOEXW,*PRTL_OSVERSIONINFOEXW;

    typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
    typedef POSVERSIONINFOEXA POSVERSIONINFOEX;
    typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;
# 7466 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    __attribute__((dllimport)) ULONGLONG __attribute__((__stdcall__)) VerSetConditionMask (ULONGLONG ConditionMask, DWORD TypeMask, BYTE Condition);
# 7478 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef enum _RTL_UMS_THREAD_INFO_CLASS {
      UmsThreadInvalidInfoClass = 0,
      UmsThreadUserContext,
      UmsThreadPriority,
      UmsThreadAffinity,
      UmsThreadTeb,
      UmsThreadIsSuspended,
      UmsThreadIsTerminated,
      UmsThreadMaxInfoClass
    } RTL_UMS_THREAD_INFO_CLASS,*PRTL_UMS_THREAD_INFO_CLASS;

    typedef enum _RTL_UMS_SCHEDULER_REASON {
      UmsSchedulerStartup = 0,
      UmsSchedulerThreadBlocked,
      UmsSchedulerThreadYield,
    } RTL_UMS_SCHEDULER_REASON,*PRTL_UMS_SCHEDULER_REASON;

    typedef void __attribute__((__stdcall__)) RTL_UMS_SCHEDULER_ENTRY_POINT (RTL_UMS_SCHEDULER_REASON Reason, ULONG_PTR ActivationPayload, PVOID SchedulerParam);
    typedef RTL_UMS_SCHEDULER_ENTRY_POINT *PRTL_UMS_SCHEDULER_ENTRY_POINT;
# 7516 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _RTL_CRITICAL_SECTION_DEBUG {
      WORD Type;
      WORD CreatorBackTraceIndex;
      struct _RTL_CRITICAL_SECTION *CriticalSection;
      LIST_ENTRY ProcessLocksList;
      DWORD EntryCount;
      DWORD ContentionCount;
      DWORD Flags;
      WORD CreatorBackTraceIndexHigh;
      WORD SpareWORD;
    } RTL_CRITICAL_SECTION_DEBUG,*PRTL_CRITICAL_SECTION_DEBUG,RTL_RESOURCE_DEBUG,*PRTL_RESOURCE_DEBUG;
# 7542 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/pshpack8.h" 1 3 4






#pragma pack(push,8)
# 7543 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4
    typedef struct _RTL_CRITICAL_SECTION {
      PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
      LONG LockCount;
      LONG RecursionCount;
      HANDLE OwningThread;
      HANDLE LockSemaphore;
      ULONG_PTR SpinCount;
    } RTL_CRITICAL_SECTION,*PRTL_CRITICAL_SECTION;
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/poppack.h" 1 3 4






#pragma pack(pop)
# 7552 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4

    typedef struct _RTL_SRWLOCK { PVOID Ptr; } RTL_SRWLOCK,*PRTL_SRWLOCK;
    typedef struct _RTL_CONDITION_VARIABLE { PVOID Ptr; } RTL_CONDITION_VARIABLE,*PRTL_CONDITION_VARIABLE;






    typedef void (__attribute__((__stdcall__)) *PAPCFUNC) (ULONG_PTR Parameter);
    typedef LONG (__attribute__((__stdcall__)) *PVECTORED_EXCEPTION_HANDLER) (struct _EXCEPTION_POINTERS *ExceptionInfo);

    typedef enum _HEAP_INFORMATION_CLASS {
      HeapCompatibilityInformation,
      HeapEnableTerminationOnCorruption
    } HEAP_INFORMATION_CLASS;

    typedef void (__attribute__((__stdcall__)) *WORKERCALLBACKFUNC) (PVOID);
    typedef void (__attribute__((__stdcall__)) *APC_CALLBACK_FUNCTION) (DWORD, PVOID, PVOID);
    typedef void (__attribute__((__stdcall__)) *WAITORTIMERCALLBACKFUNC) (PVOID, BOOLEAN);
    typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK;
    typedef void (__attribute__((__stdcall__)) *PFLS_CALLBACK_FUNCTION) (PVOID lpFlsData);
    typedef BOOLEAN (__attribute__((__stdcall__)) *PSECURE_MEMORY_CACHE_CALLBACK) (PVOID Addr, SIZE_T Range);
# 7592 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef enum _ACTIVATION_CONTEXT_INFO_CLASS {
      ActivationContextBasicInformation = 1,
      ActivationContextDetailedInformation = 2,
      AssemblyDetailedInformationInActivationContext = 3,
      FileInformationInAssemblyOfAssemblyInActivationContext = 4,
      RunlevelInformationInActivationContext = 5,
      CompatibilityInformationInActivationContext = 6,
      ActivationContextManifestResourceName = 7,
      MaxActivationContextInfoClass,
      AssemblyDetailedInformationInActivationContxt = 3,
      FileInformationInAssemblyOfAssemblyInActivationContxt = 4
    } ACTIVATION_CONTEXT_INFO_CLASS;

    typedef enum {
      ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
      ACTCTX_RUN_LEVEL_AS_INVOKER,
      ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE,
      ACTCTX_RUN_LEVEL_REQUIRE_ADMIN,
      ACTCTX_RUN_LEVEL_NUMBERS
    } ACTCTX_REQUESTED_RUN_LEVEL;

    typedef enum {
      ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0,
      ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS,
      ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION
    } ACTCTX_COMPATIBILITY_ELEMENT_TYPE;

    typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX {
      DWORD ulAssemblyIndex;
      DWORD ulFileIndexInAssembly;
    } ACTIVATION_CONTEXT_QUERY_INDEX,*PACTIVATION_CONTEXT_QUERY_INDEX;

    typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
      DWORD ulFlags;
      DWORD ulFilenameLength;
      DWORD ulPathLength;
      PCWSTR lpFileName;
      PCWSTR lpFilePath;
    } ASSEMBLY_FILE_DETAILED_INFORMATION,*PASSEMBLY_FILE_DETAILED_INFORMATION;

    typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
      DWORD ulFlags;
      DWORD ulEncodedAssemblyIdentityLength;
      DWORD ulManifestPathType;
      DWORD ulManifestPathLength;
      LARGE_INTEGER liManifestLastWriteTime;
      DWORD ulPolicyPathType;
      DWORD ulPolicyPathLength;
      LARGE_INTEGER liPolicyLastWriteTime;
      DWORD ulMetadataSatelliteRosterIndex;
      DWORD ulManifestVersionMajor;
      DWORD ulManifestVersionMinor;
      DWORD ulPolicyVersionMajor;
      DWORD ulPolicyVersionMinor;
      DWORD ulAssemblyDirectoryNameLength;
      PCWSTR lpAssemblyEncodedAssemblyIdentity;
      PCWSTR lpAssemblyManifestPath;
      PCWSTR lpAssemblyPolicyPath;
      PCWSTR lpAssemblyDirectoryName;
      DWORD ulFileCount;
    } ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,*PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

    typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
      DWORD ulFlags;
      ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
      DWORD UiAccess;
    } ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION,*PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

    typedef struct _COMPATIBILITY_CONTEXT_ELEMENT {
      GUID Id;
      ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
    } COMPATIBILITY_CONTEXT_ELEMENT,*PCOMPATIBILITY_CONTEXT_ELEMENT;



    typedef struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
      DWORD ElementCount;
      COMPATIBILITY_CONTEXT_ELEMENT Elements[];
    } ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION,*PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;



    typedef struct _SUPPORTED_OS_INFO {
      WORD OsCount;
      WORD MitigationExist;
      WORD OsList[(4)];
    } SUPPORTED_OS_INFO,*PSUPPORTED_OS_INFO;

    typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
      DWORD dwFlags;
      DWORD ulFormatVersion;
      DWORD ulAssemblyCount;
      DWORD ulRootManifestPathType;
      DWORD ulRootManifestPathChars;
      DWORD ulRootConfigurationPathType;
      DWORD ulRootConfigurationPathChars;
      DWORD ulAppDirPathType;
      DWORD ulAppDirPathChars;
      PCWSTR lpRootManifestPath;
      PCWSTR lpRootConfigurationPath;
      PCWSTR lpAppDirPath;
    } ACTIVATION_CONTEXT_DETAILED_INFORMATION,*PACTIVATION_CONTEXT_DETAILED_INFORMATION;

    typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX *PCACTIVATION_CONTEXT_QUERY_INDEX;
    typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;
    typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
    typedef const struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION *PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
    typedef const struct _COMPATIBILITY_CONTEXT_ELEMENT *PCCOMPATIBILITY_CONTEXT_ELEMENT;
    typedef const struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION *PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
    typedef const struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;
# 7718 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef void (__attribute__((__stdcall__)) *RTL_VERIFIER_DLL_LOAD_CALLBACK) (PWSTR DllName,PVOID DllBase,SIZE_T DllSize,PVOID Reserved);
    typedef void (__attribute__((__stdcall__)) *RTL_VERIFIER_DLL_UNLOAD_CALLBACK) (PWSTR DllName,PVOID DllBase,SIZE_T DllSize,PVOID Reserved);
    typedef void (__attribute__((__stdcall__)) *RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK)(PVOID AllocationBase,SIZE_T AllocationSize);

    typedef struct _RTL_VERIFIER_THUNK_DESCRIPTOR {
      PCHAR ThunkName;
      PVOID ThunkOldAddress;
      PVOID ThunkNewAddress;
    } RTL_VERIFIER_THUNK_DESCRIPTOR,*PRTL_VERIFIER_THUNK_DESCRIPTOR;

    typedef struct _RTL_VERIFIER_DLL_DESCRIPTOR {
      PWCHAR DllName;
      DWORD DllFlags;
      PVOID DllAddress;
      PRTL_VERIFIER_THUNK_DESCRIPTOR DllThunks;
    } RTL_VERIFIER_DLL_DESCRIPTOR,*PRTL_VERIFIER_DLL_DESCRIPTOR;

    typedef struct _RTL_VERIFIER_PROVIDER_DESCRIPTOR {
      DWORD Length;
      PRTL_VERIFIER_DLL_DESCRIPTOR ProviderDlls;
      RTL_VERIFIER_DLL_LOAD_CALLBACK ProviderDllLoadCallback;
      RTL_VERIFIER_DLL_UNLOAD_CALLBACK ProviderDllUnloadCallback;
      PWSTR VerifierImage;
      DWORD VerifierFlags;
      DWORD VerifierDebug;
      PVOID RtlpGetStackTraceAddress;
      PVOID RtlpDebugPageHeapCreate;
      PVOID RtlpDebugPageHeapDestroy;
      RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK ProviderNtdllHeapFreeCallback;
    } RTL_VERIFIER_PROVIDER_DESCRIPTOR,*PRTL_VERIFIER_PROVIDER_DESCRIPTOR;
# 7854 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    void __attribute__((__stdcall__)) RtlApplicationVerifierStop(ULONG_PTR Code,PSTR Message,ULONG_PTR Param1,PSTR Description1,ULONG_PTR Param2,PSTR Description2,ULONG_PTR Param3,PSTR Description3,ULONG_PTR Param4,PSTR Description4);
    __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) RtlSetHeapInformation(PVOID HeapHandle,HEAP_INFORMATION_CLASS HeapInformationClass,PVOID HeapInformation,SIZE_T HeapInformationLength);
    __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) RtlQueryHeapInformation(PVOID HeapHandle,HEAP_INFORMATION_CLASS HeapInformationClass,PVOID HeapInformation,SIZE_T HeapInformationLength,PSIZE_T ReturnLength);
    DWORD __attribute__((__stdcall__)) RtlMultipleAllocateHeap(PVOID HeapHandle,DWORD Flags,SIZE_T Size,DWORD Count,PVOID *Array);
    DWORD __attribute__((__stdcall__)) RtlMultipleFreeHeap(PVOID HeapHandle,DWORD Flags,DWORD Count,PVOID *Array);

    typedef struct _HARDWARE_COUNTER_DATA {
      HARDWARE_COUNTER_TYPE Type;
      DWORD Reserved;
      DWORD64 Value;
    } HARDWARE_COUNTER_DATA,*PHARDWARE_COUNTER_DATA;

    typedef struct _PERFORMANCE_DATA {
      WORD Size;
      BYTE Version;
      BYTE HwCountersCount;
      DWORD ContextSwitchCount;
      DWORD64 WaitReasonBitMap;
      DWORD64 CycleTime;
      DWORD RetryCount;
      DWORD Reserved;
      HARDWARE_COUNTER_DATA HwCounters[16];
    } PERFORMANCE_DATA,*PPERFORMANCE_DATA;
# 7907 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _EVENTLOGRECORD {
      DWORD Length;
      DWORD Reserved;
      DWORD RecordNumber;
      DWORD TimeGenerated;
      DWORD TimeWritten;
      DWORD EventID;
      WORD EventType;
      WORD NumStrings;
      WORD EventCategory;
      WORD ReservedFlags;
      DWORD ClosingRecordNumber;
      DWORD StringOffset;
      DWORD UserSidLength;
      DWORD UserSidOffset;
      DWORD DataLength;
      DWORD DataOffset;
    } EVENTLOGRECORD,*PEVENTLOGRECORD;



    typedef struct _EVENTSFORLOGFILE {
      DWORD ulSize;
      WCHAR szLogicalLogFile[256];
      DWORD ulNumRecords;
      EVENTLOGRECORD pEventLogRecords[];
    } EVENTSFORLOGFILE,*PEVENTSFORLOGFILE;

    typedef struct _PACKEDEVENTINFO {
      DWORD ulSize;
      DWORD ulNumEventsForLogFile;
      DWORD ulOffsets[];
    } PACKEDEVENTINFO,*PPACKEDEVENTINFO;
# 8034 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef enum _CM_SERVICE_NODE_TYPE {
      DriverType = 0x00000001,FileSystemType = 0x00000002,Win32ServiceOwnProcess = 0x00000010,
      Win32ServiceShareProcess = 0x00000020,AdapterType = 0x00000004,RecognizerType = 0x00000008
    } SERVICE_NODE_TYPE;

    typedef enum _CM_SERVICE_LOAD_TYPE {
      BootLoad = 0x00000000,SystemLoad = 0x00000001,AutoLoad = 0x00000002,DemandLoad = 0x00000003,
      DisableLoad = 0x00000004
    } SERVICE_LOAD_TYPE;

    typedef enum _CM_ERROR_CONTROL_TYPE {
      IgnoreError = 0x00000000,NormalError = 0x00000001,SevereError = 0x00000002,CriticalError = 0x00000003
    } SERVICE_ERROR_TYPE;
# 8065 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _TAPE_ERASE {
      DWORD Type;
      BOOLEAN Immediate;
    } TAPE_ERASE,*PTAPE_ERASE;
# 8077 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _TAPE_PREPARE {
      DWORD Operation;
      BOOLEAN Immediate;
    } TAPE_PREPARE,*PTAPE_PREPARE;






    typedef struct _TAPE_WRITE_MARKS {
      DWORD Type;
      DWORD Count;
      BOOLEAN Immediate;
    } TAPE_WRITE_MARKS,*PTAPE_WRITE_MARKS;





    typedef struct _TAPE_GET_POSITION {
      DWORD Type;
      DWORD Partition;
      LARGE_INTEGER Offset;
    } TAPE_GET_POSITION,*PTAPE_GET_POSITION;
# 8114 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _TAPE_SET_POSITION {
      DWORD Method;
      DWORD Partition;
      LARGE_INTEGER Offset;
      BOOLEAN Immediate;
    } TAPE_SET_POSITION,*PTAPE_SET_POSITION;
# 8188 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
    typedef struct _TAPE_GET_DRIVE_PARAMETERS {
      BOOLEAN ECC;
      BOOLEAN Compression;
      BOOLEAN DataPadding;
      BOOLEAN ReportSetmarks;
      DWORD DefaultBlockSize;
      DWORD MaximumBlockSize;
      DWORD MinimumBlockSize;
      DWORD MaximumPartitionCount;
      DWORD FeaturesLow;
      DWORD FeaturesHigh;
      DWORD EOTWarningZoneSize;
    } TAPE_GET_DRIVE_PARAMETERS,*PTAPE_GET_DRIVE_PARAMETERS;

    typedef struct _TAPE_SET_DRIVE_PARAMETERS {
      BOOLEAN ECC;
      BOOLEAN Compression;
      BOOLEAN DataPadding;
      BOOLEAN ReportSetmarks;
      DWORD EOTWarningZoneSize;
    } TAPE_SET_DRIVE_PARAMETERS,*PTAPE_SET_DRIVE_PARAMETERS;

    typedef struct _TAPE_GET_MEDIA_PARAMETERS {
      LARGE_INTEGER Capacity;
      LARGE_INTEGER Remaining;
      DWORD BlockSize;
      DWORD PartitionCount;
      BOOLEAN WriteProtected;
    } TAPE_GET_MEDIA_PARAMETERS,*PTAPE_GET_MEDIA_PARAMETERS;

    typedef struct _TAPE_SET_MEDIA_PARAMETERS {
      DWORD BlockSize;
    } TAPE_SET_MEDIA_PARAMETERS,*PTAPE_SET_MEDIA_PARAMETERS;





    typedef struct _TAPE_CREATE_PARTITION {
      DWORD Method;
      DWORD Count;
      DWORD Size;
    } TAPE_CREATE_PARTITION,*PTAPE_CREATE_PARTITION;







    typedef struct _TAPE_WMI_OPERATIONS {
      DWORD Method;
      DWORD DataBufferSize;
      PVOID DataBuffer;
    } TAPE_WMI_OPERATIONS,*PTAPE_WMI_OPERATIONS;

    typedef enum _TAPE_DRIVE_PROBLEM_TYPE {
      TapeDriveProblemNone,TapeDriveReadWriteWarning,TapeDriveReadWriteError,TapeDriveReadWarning,TapeDriveWriteWarning,TapeDriveReadError,TapeDriveWriteError,TapeDriveHardwareError,TapeDriveUnsupportedMedia,TapeDriveScsiConnectionError,TapeDriveTimetoClean,TapeDriveCleanDriveNow,TapeDriveMediaLifeExpired,TapeDriveSnappedTape
    } TAPE_DRIVE_PROBLEM_TYPE;


  typedef DWORD TP_VERSION,*PTP_VERSION;
  typedef struct _TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE,*PTP_CALLBACK_INSTANCE;
  typedef void (__attribute__((__stdcall__)) *PTP_SIMPLE_CALLBACK) (PTP_CALLBACK_INSTANCE Instance, PVOID Context);
  typedef struct _TP_POOL TP_POOL,*PTP_POOL;

  typedef enum _TP_CALLBACK_PRIORITY {
    TP_CALLBACK_PRIORITY_HIGH,
    TP_CALLBACK_PRIORITY_NORMAL,
    TP_CALLBACK_PRIORITY_LOW,
    TP_CALLBACK_PRIORITY_INVALID,
    TP_CALLBACK_PRIORITY_COUNT = TP_CALLBACK_PRIORITY_INVALID
  } TP_CALLBACK_PRIORITY;

  typedef struct _TP_POOL_STACK_INFORMATION {
    SIZE_T StackReserve;
    SIZE_T StackCommit;
  } TP_POOL_STACK_INFORMATION, *PTP_POOL_STACK_INFORMATION;

  typedef struct _TP_CLEANUP_GROUP TP_CLEANUP_GROUP,*PTP_CLEANUP_GROUP;
  typedef void (__attribute__((__stdcall__)) *PTP_CLEANUP_GROUP_CANCEL_CALLBACK) (PVOID ObjectContext, PVOID CleanupContext);
# 8292 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
  typedef struct _TP_CALLBACK_ENVIRON_V1 {
    TP_VERSION Version;
    PTP_POOL Pool;
    PTP_CLEANUP_GROUP CleanupGroup;
    PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback;
    PVOID RaceDll;
    struct _ACTIVATION_CONTEXT *ActivationContext;
    PTP_SIMPLE_CALLBACK FinalizationCallback;
    union {
      DWORD Flags;
      struct {
 DWORD LongFunction : 1;
 DWORD Persistent : 1;
 DWORD Private : 30;
      } s;
    } u;
  } TP_CALLBACK_ENVIRON_V1;
  typedef TP_CALLBACK_ENVIRON_V1 TP_CALLBACK_ENVIRON,*PTP_CALLBACK_ENVIRON;


  typedef struct _TP_WORK TP_WORK,*PTP_WORK;
  typedef void (__attribute__((__stdcall__)) *PTP_WORK_CALLBACK) (PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_WORK Work);
  typedef struct _TP_TIMER TP_TIMER,*PTP_TIMER;
  typedef void (__attribute__((__stdcall__)) *PTP_TIMER_CALLBACK) (PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_TIMER Timer);
  typedef DWORD TP_WAIT_RESULT;
  typedef struct _TP_WAIT TP_WAIT,*PTP_WAIT;
  typedef void (__attribute__((__stdcall__)) *PTP_WAIT_CALLBACK) (PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_WAIT Wait, TP_WAIT_RESULT WaitResult);
  typedef struct _TP_IO TP_IO,*PTP_IO;


    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void TpInitializeCallbackEnviron (PTP_CALLBACK_ENVIRON cbe) {
      cbe->Pool = ((void *)0);
      cbe->CleanupGroup = ((void *)0);
      cbe->CleanupGroupCancelCallback = ((void *)0);
      cbe->RaceDll = ((void *)0);
      cbe->ActivationContext = ((void *)0);
      cbe->FinalizationCallback = ((void *)0);
      cbe->u.Flags = 0;

      cbe->Version = 1;





    }
    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void TpSetCallbackThreadpool (PTP_CALLBACK_ENVIRON cbe, PTP_POOL pool) { cbe->Pool = pool; }
    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void TpSetCallbackCleanupGroup (PTP_CALLBACK_ENVIRON cbe, PTP_CLEANUP_GROUP cleanup_group, PTP_CLEANUP_GROUP_CANCEL_CALLBACK cleanup_group_cb) {
      cbe->CleanupGroup = cleanup_group;
      cbe->CleanupGroupCancelCallback = cleanup_group_cb;
    }
    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void TpSetCallbackActivationContext (PTP_CALLBACK_ENVIRON cbe, struct _ACTIVATION_CONTEXT *actx) { cbe->ActivationContext = actx; }
    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void TpSetCallbackNoActivationContext (PTP_CALLBACK_ENVIRON cbe) { cbe->ActivationContext = (struct _ACTIVATION_CONTEXT *) (LONG_PTR) -1; }
    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void TpSetCallbackLongFunction (PTP_CALLBACK_ENVIRON cbe) { cbe->u.s.LongFunction = 1; }
    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void TpSetCallbackRaceWithDll (PTP_CALLBACK_ENVIRON cbe, PVOID h) { cbe->RaceDll = h; }
    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void TpSetCallbackFinalizationCallback (PTP_CALLBACK_ENVIRON cbe, PTP_SIMPLE_CALLBACK fini_cb) { cbe->FinalizationCallback = fini_cb; }



    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void TpSetCallbackPersistent (PTP_CALLBACK_ENVIRON cbe) { cbe->u.s.Persistent = 1; }
    extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void TpDestroyCallbackEnviron (PTP_CALLBACK_ENVIRON cbe) { {(cbe) = (cbe);}; }
# 8384 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/ktmtypes.h" 1 3 4
# 13 "/usr/i686-w64-mingw32/sys-root/mingw/include/ktmtypes.h" 3 4
  typedef GUID CRM_PROTOCOL_ID,*PCRM_PROTOCOL_ID;
# 38 "/usr/i686-w64-mingw32/sys-root/mingw/include/ktmtypes.h" 3 4
  typedef ULONG NOTIFICATION_MASK;
# 78 "/usr/i686-w64-mingw32/sys-root/mingw/include/ktmtypes.h" 3 4
  typedef struct _TRANSACTION_NOTIFICATION {
    PVOID TransactionKey;
    ULONG TransactionNotification;
    LARGE_INTEGER TmVirtualClock;
    ULONG ArgumentLength;
  } TRANSACTION_NOTIFICATION,*PTRANSACTION_NOTIFICATION;

  typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
    GUID EnlistmentId;
    GUID UOW;
  } TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT,*PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;



  typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
    GUID TmIdentity;
    ULONG Flags;
  } TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT,*PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;

  typedef ULONG SAVEPOINT_ID,*PSAVEPOINT_ID;

  typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
    SAVEPOINT_ID SavepointId;
  } TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT,*PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;

  typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
    ULONG PropagationCookie;
    GUID UOW;
    GUID TmIdentity;
    ULONG BufferLength;
  } TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT,*PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;

  typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
    ULONG MarshalCookie;
    GUID UOW;
  } TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT,*PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;

  typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT,*PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;







  typedef struct _KCRM_MARSHAL_HEADER {
    ULONG VersionMajor;
    ULONG VersionMinor;
    ULONG NumProtocols;
    ULONG Unused;
  } KCRM_MARSHAL_HEADER,*PKCRM_MARSHAL_HEADER,* PRKCRM_MARSHAL_HEADER;

  typedef struct _KCRM_TRANSACTION_BLOB {
    GUID UOW;
    GUID TmIdentity;
    ULONG IsolationLevel;
    ULONG IsolationFlags;
    ULONG Timeout;
    WCHAR Description[64];
  } KCRM_TRANSACTION_BLOB,*PKCRM_TRANSACTION_BLOB,* PRKCRM_TRANSACTION_BLOB;

  typedef struct _KCRM_PROTOCOL_BLOB {
    CRM_PROTOCOL_ID ProtocolId;
    ULONG StaticInfoLength;
    ULONG TransactionIdInfoLength;
    ULONG Unused1;
    ULONG Unused2;
  } KCRM_PROTOCOL_BLOB,*PKCRM_PROTOCOL_BLOB,* PRKCRM_PROTOCOL_BLOB;
# 8385 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4
# 8436 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
      typedef enum _TRANSACTION_OUTCOME {
 TransactionOutcomeUndetermined = 1,
 TransactionOutcomeCommitted,
 TransactionOutcomeAborted,
      } TRANSACTION_OUTCOME;

      typedef enum _TRANSACTION_STATE {
 TransactionStateNormal = 1,
 TransactionStateIndoubt,
 TransactionStateCommittedNotify,
      } TRANSACTION_STATE;

      typedef struct _TRANSACTION_BASIC_INFORMATION {
 GUID TransactionId;
 DWORD State;
 DWORD Outcome;
      } TRANSACTION_BASIC_INFORMATION,*PTRANSACTION_BASIC_INFORMATION;

      typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
 GUID TmIdentity;
 LARGE_INTEGER VirtualClock;
      } TRANSACTIONMANAGER_BASIC_INFORMATION,*PTRANSACTIONMANAGER_BASIC_INFORMATION;

      typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION {
 GUID LogIdentity;
      } TRANSACTIONMANAGER_LOG_INFORMATION,*PTRANSACTIONMANAGER_LOG_INFORMATION;

      typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
 DWORD LogPathLength;
 WCHAR LogPath[1];
      } TRANSACTIONMANAGER_LOGPATH_INFORMATION,*PTRANSACTIONMANAGER_LOGPATH_INFORMATION;

      typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
 ULONGLONG LastRecoveredLsn;
      } TRANSACTIONMANAGER_RECOVERY_INFORMATION,*PTRANSACTIONMANAGER_RECOVERY_INFORMATION;

      typedef struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
 GUID OldestTransactionGuid;
      } TRANSACTIONMANAGER_OLDEST_INFORMATION,*PTRANSACTIONMANAGER_OLDEST_INFORMATION;

      typedef struct _TRANSACTION_PROPERTIES_INFORMATION {
 DWORD IsolationLevel;
 DWORD IsolationFlags;
 LARGE_INTEGER Timeout;
 DWORD Outcome;
 DWORD DescriptionLength;
 WCHAR Description[1];
      } TRANSACTION_PROPERTIES_INFORMATION,*PTRANSACTION_PROPERTIES_INFORMATION;

      typedef struct _TRANSACTION_BIND_INFORMATION {
 HANDLE TmHandle;
      } TRANSACTION_BIND_INFORMATION,*PTRANSACTION_BIND_INFORMATION;

      typedef struct _TRANSACTION_ENLISTMENT_PAIR {
 GUID EnlistmentId;
 GUID ResourceManagerId;
      } TRANSACTION_ENLISTMENT_PAIR,*PTRANSACTION_ENLISTMENT_PAIR;

      typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION {
 DWORD NumberOfEnlistments;
 TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1];
      } TRANSACTION_ENLISTMENTS_INFORMATION,*PTRANSACTION_ENLISTMENTS_INFORMATION;

      typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
 TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
      } TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION,*PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;

      typedef struct _RESOURCEMANAGER_BASIC_INFORMATION {
 GUID ResourceManagerId;
 DWORD DescriptionLength;
 WCHAR Description[1];
      } RESOURCEMANAGER_BASIC_INFORMATION,*PRESOURCEMANAGER_BASIC_INFORMATION;

      typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
 HANDLE IoCompletionPortHandle;
 ULONG_PTR CompletionKey;
      } RESOURCEMANAGER_COMPLETION_INFORMATION,*PRESOURCEMANAGER_COMPLETION_INFORMATION;

      typedef enum _TRANSACTION_INFORMATION_CLASS {
 TransactionBasicInformation,
 TransactionPropertiesInformation,
 TransactionEnlistmentInformation,
 TransactionSuperiorEnlistmentInformation,
 TransactionBindInformation,
 TransactionDTCPrivateInformation
      } TRANSACTION_INFORMATION_CLASS;

      typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
 TransactionManagerBasicInformation,
 TransactionManagerLogInformation,
 TransactionManagerLogPathInformation,
 TransactionManagerOnlineProbeInformation = 3,
 TransactionManagerRecoveryInformation = 4,
 TransactionManagerOldestTransactionInformation = 5
      } TRANSACTIONMANAGER_INFORMATION_CLASS;

      typedef enum _RESOURCEMANAGER_INFORMATION_CLASS {
 ResourceManagerBasicInformation,
 ResourceManagerCompletionInformation
      } RESOURCEMANAGER_INFORMATION_CLASS;

      typedef struct _ENLISTMENT_BASIC_INFORMATION {
 GUID EnlistmentId;
 GUID TransactionId;
 GUID ResourceManagerId;
      } ENLISTMENT_BASIC_INFORMATION,*PENLISTMENT_BASIC_INFORMATION;

      typedef struct _ENLISTMENT_CRM_INFORMATION {
 GUID CrmTransactionManagerId;
 GUID CrmResourceManagerId;
 GUID CrmEnlistmentId;
      } ENLISTMENT_CRM_INFORMATION,*PENLISTMENT_CRM_INFORMATION;

      typedef enum _ENLISTMENT_INFORMATION_CLASS {
 EnlistmentBasicInformation,
 EnlistmentRecoveryInformation,
 EnlistmentCrmInformation
      } ENLISTMENT_INFORMATION_CLASS;

      typedef struct _TRANSACTION_LIST_ENTRY {
         GUID UOW;
      } TRANSACTION_LIST_ENTRY,*PTRANSACTION_LIST_ENTRY;

      typedef struct _TRANSACTION_LIST_INFORMATION {
 DWORD NumberOfTransactions;
 TRANSACTION_LIST_ENTRY TransactionInformation[1];
      } TRANSACTION_LIST_INFORMATION,*PTRANSACTION_LIST_INFORMATION;

      typedef enum _KTMOBJECT_TYPE {
 KTMOBJECT_TRANSACTION,
 KTMOBJECT_TRANSACTION_MANAGER,
 KTMOBJECT_RESOURCE_MANAGER,
 KTMOBJECT_ENLISTMENT,
 KTMOBJECT_INVALID
      } KTMOBJECT_TYPE,*PKTMOBJECT_TYPE;

      typedef struct _KTMOBJECT_CURSOR {
 GUID LastQuery;
 DWORD ObjectIdCount;
 GUID ObjectIds[1];
      } KTMOBJECT_CURSOR,*PKTMOBJECT_CURSOR;
# 8613 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 3 4
typedef struct _WOW64_FLOATING_SAVE_AREA {
  DWORD ControlWord;
  DWORD StatusWord;
  DWORD TagWord;
  DWORD ErrorOffset;
  DWORD ErrorSelector;
  DWORD DataOffset;
  DWORD DataSelector;
  BYTE RegisterArea[80];
  DWORD Cr0NpxState;
} WOW64_FLOATING_SAVE_AREA, *PWOW64_FLOATING_SAVE_AREA;

# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/pshpack4.h" 1 3 4






#pragma pack(push,4)
# 8626 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4
typedef struct _WOW64_CONTEXT {
  DWORD ContextFlags;
  DWORD Dr0;
  DWORD Dr1;
  DWORD Dr2;
  DWORD Dr3;
  DWORD Dr6;
  DWORD Dr7;
  WOW64_FLOATING_SAVE_AREA FloatSave;
  DWORD SegGs;
  DWORD SegFs;
  DWORD SegEs;
  DWORD SegDs;
  DWORD Edi;
  DWORD Esi;
  DWORD Ebx;
  DWORD Edx;
  DWORD Ecx;
  DWORD Eax;
  DWORD Ebp;
  DWORD Eip;
  DWORD SegCs;
  DWORD EFlags;
  DWORD Esp;
  DWORD SegSs;
  BYTE ExtendedRegisters[512];
} WOW64_CONTEXT, *PWOW64_CONTEXT;
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/poppack.h" 1 3 4






#pragma pack(pop)
# 8654 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnt.h" 2 3 4

typedef struct _WOW64_LDT_ENTRY {
  WORD LimitLow;
  WORD BaseLow;
  __extension__ union {
    struct {
      BYTE BaseMid;
      BYTE Flags1;
      BYTE Flags2;
      BYTE BaseHi;
    } Bytes;
    struct {
      DWORD BaseMid :8;
      DWORD Type :5;
      DWORD Dpl :2;
      DWORD Pres :1;
      DWORD LimitHi :4;
      DWORD Sys :1;
      DWORD Reserved_0 :1;
      DWORD Default_Big :1;
      DWORD Granularity :1;
      DWORD BaseHi :8;
    } Bits;
  } HighWord;
} WOW64_LDT_ENTRY, *PWOW64_LDT_ENTRY;

    typedef struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
      DWORD Selector;
      WOW64_LDT_ENTRY Descriptor;
    } WOW64_DESCRIPTOR_TABLE_ENTRY,*PWOW64_DESCRIPTOR_TABLE_ENTRY;
# 164 "/usr/i686-w64-mingw32/sys-root/mingw/include/minwindef.h" 2 3 4


  typedef UINT_PTR WPARAM;
  typedef LONG_PTR LPARAM;
  typedef LONG_PTR LRESULT;
# 189 "/usr/i686-w64-mingw32/sys-root/mingw/include/minwindef.h" 3 4
  typedef HANDLE *SPHANDLE;
  typedef HANDLE *LPHANDLE;
  typedef HANDLE HGLOBAL;
  typedef HANDLE HLOCAL;
  typedef HANDLE GLOBALHANDLE;
  typedef HANDLE LOCALHANDLE;





  typedef int (__attribute__((__stdcall__)) *FARPROC) ();
  typedef int (__attribute__((__stdcall__)) *NEARPROC) ();
  typedef int (__attribute__((__stdcall__)) *PROC) ();


  typedef WORD ATOM;

  typedef int HFILE;
  struct HINSTANCE__ { int unused; }; typedef struct HINSTANCE__ *HINSTANCE;
  struct HKEY__ { int unused; }; typedef struct HKEY__ *HKEY;
  typedef HKEY *PHKEY;
  struct HKL__ { int unused; }; typedef struct HKL__ *HKL;
  struct HLSURF__ { int unused; }; typedef struct HLSURF__ *HLSURF;
  struct HMETAFILE__ { int unused; }; typedef struct HMETAFILE__ *HMETAFILE;
  typedef HINSTANCE HMODULE;
  struct HRGN__ { int unused; }; typedef struct HRGN__ *HRGN;
  struct HRSRC__ { int unused; }; typedef struct HRSRC__ *HRSRC;
  struct HSPRITE__ { int unused; }; typedef struct HSPRITE__ *HSPRITE;
  struct HSTR__ { int unused; }; typedef struct HSTR__ *HSTR;
  struct HTASK__ { int unused; }; typedef struct HTASK__ *HTASK;
  struct HWINSTA__ { int unused; }; typedef struct HWINSTA__ *HWINSTA;

  typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
  } FILETIME,*PFILETIME,*LPFILETIME;
# 9 "/usr/i686-w64-mingw32/sys-root/mingw/include/windef.h" 2 3 4
# 25 "/usr/i686-w64-mingw32/sys-root/mingw/include/windef.h" 3 4
struct HWND__ { int unused; }; typedef struct HWND__ *HWND;
struct HHOOK__ { int unused; }; typedef struct HHOOK__ *HHOOK;
# 37 "/usr/i686-w64-mingw32/sys-root/mingw/include/windef.h" 3 4
  typedef void *HGDIOBJ;




struct HACCEL__ { int unused; }; typedef struct HACCEL__ *HACCEL;
struct HBITMAP__ { int unused; }; typedef struct HBITMAP__ *HBITMAP;
struct HBRUSH__ { int unused; }; typedef struct HBRUSH__ *HBRUSH;
struct HCOLORSPACE__ { int unused; }; typedef struct HCOLORSPACE__ *HCOLORSPACE;
struct HDC__ { int unused; }; typedef struct HDC__ *HDC;
struct HGLRC__ { int unused; }; typedef struct HGLRC__ *HGLRC;
struct HDESK__ { int unused; }; typedef struct HDESK__ *HDESK;
struct HENHMETAFILE__ { int unused; }; typedef struct HENHMETAFILE__ *HENHMETAFILE;
struct HFONT__ { int unused; }; typedef struct HFONT__ *HFONT;
struct HICON__ { int unused; }; typedef struct HICON__ *HICON;
struct HMENU__ { int unused; }; typedef struct HMENU__ *HMENU;
struct HPALETTE__ { int unused; }; typedef struct HPALETTE__ *HPALETTE;
struct HPEN__ { int unused; }; typedef struct HPEN__ *HPEN;
struct HMONITOR__ { int unused; }; typedef struct HMONITOR__ *HMONITOR;
struct HWINEVENTHOOK__ { int unused; }; typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;

typedef HICON HCURSOR;
typedef DWORD COLORREF;



struct HUMPD__ { int unused; }; typedef struct HUMPD__ *HUMPD;

typedef DWORD *LPCOLORREF;





typedef struct tagRECT {
  LONG left;
  LONG top;
  LONG right;
  LONG bottom;
} RECT,*PRECT,*NPRECT,*LPRECT;

typedef const RECT *LPCRECT;

typedef struct _RECTL {
  LONG left;
  LONG top;
  LONG right;
  LONG bottom;
} RECTL,*PRECTL,*LPRECTL;

typedef const RECTL *LPCRECTL;

typedef struct tagPOINT {
  LONG x;
  LONG y;
} POINT,*PPOINT,*NPPOINT,*LPPOINT;

typedef struct _POINTL {
  LONG x;
  LONG y;
} POINTL,*PPOINTL;

typedef struct tagSIZE {
  LONG cx;
  LONG cy;
} SIZE,*PSIZE,*LPSIZE;

typedef SIZE SIZEL;
typedef SIZE *PSIZEL,*LPSIZEL;

typedef struct tagPOINTS {
  SHORT x;
  SHORT y;
} POINTS,*PPOINTS,*LPPOINTS;
# 70 "/usr/i686-w64-mingw32/sys-root/mingw/include/windows.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 1 3 4
# 10 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/apisetcconv.h" 1 3 4
# 11 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4


# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/minwinbase.h" 1 3 4
# 13 "/usr/i686-w64-mingw32/sys-root/mingw/include/minwinbase.h" 3 4
  typedef struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    WINBOOL bInheritHandle;
  } SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;

  typedef struct _OVERLAPPED {
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    __extension__ union {
      struct {
 DWORD Offset;
 DWORD OffsetHigh;
      } ;
      PVOID Pointer;
    } ;
    HANDLE hEvent;
  } OVERLAPPED, *LPOVERLAPPED;

  typedef struct _OVERLAPPED_ENTRY {
    ULONG_PTR lpCompletionKey;
    LPOVERLAPPED lpOverlapped;
    ULONG_PTR Internal;
    DWORD dwNumberOfBytesTransferred;
  } OVERLAPPED_ENTRY, *LPOVERLAPPED_ENTRY;
# 49 "/usr/i686-w64-mingw32/sys-root/mingw/include/minwinbase.h" 3 4
  typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
  } SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;


  typedef struct _WIN32_FIND_DATAA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    CHAR cFileName[260];
    CHAR cAlternateFileName[14];
  } WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;

  typedef struct _WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    WCHAR cFileName[260];
    WCHAR cAlternateFileName[14];
  } WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;

  typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
  typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
  typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;

  typedef enum _FINDEX_INFO_LEVELS {
    FindExInfoStandard,
    FindExInfoBasic,
    FindExInfoMaxInfoLevel
  } FINDEX_INFO_LEVELS;




  typedef enum _FINDEX_SEARCH_OPS {
    FindExSearchNameMatch,
    FindExSearchLimitToDirectories,
    FindExSearchLimitToDevices,
    FindExSearchMaxSearchOp
  } FINDEX_SEARCH_OPS;

  typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel
  } GET_FILEEX_INFO_LEVELS;
# 141 "/usr/i686-w64-mingw32/sys-root/mingw/include/minwinbase.h" 3 4
  typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
  typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
  typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;
  typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
  typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
  typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;

  typedef void (__attribute__((__stdcall__)) *LPOVERLAPPED_COMPLETION_ROUTINE) (DWORD dwErrorCode, DWORD dwNumberOfBytesTransfered, LPOVERLAPPED lpOverlapped);




  typedef struct _PROCESS_HEAP_ENTRY {
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    __extension__ union {
      struct {
 HANDLE hMem;
 DWORD dwReserved[3];
      } Block;
      struct {
 DWORD dwCommittedSize;
 DWORD dwUnCommittedSize;
 LPVOID lpFirstBlock;
 LPVOID lpLastBlock;
      } Region;
    } ;
  } PROCESS_HEAP_ENTRY,*LPPROCESS_HEAP_ENTRY,*PPROCESS_HEAP_ENTRY;







  typedef struct _REASON_CONTEXT {
    ULONG Version;
    DWORD Flags;
    union {
      struct {
 HMODULE LocalizedReasonModule;
 ULONG LocalizedReasonId;
 ULONG ReasonStringCount;
 LPWSTR *ReasonStrings;
      } Detailed;
      LPWSTR SimpleReasonString;
    } Reason;
  } REASON_CONTEXT, *PREASON_CONTEXT;
# 203 "/usr/i686-w64-mingw32/sys-root/mingw/include/minwinbase.h" 3 4
  typedef DWORD (__attribute__((__stdcall__)) *PTHREAD_START_ROUTINE) (LPVOID lpThreadParameter);
  typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;

  typedef struct _EXCEPTION_DEBUG_INFO {
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
  } EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;

  typedef struct _CREATE_THREAD_DEBUG_INFO {
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
  } CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;

  typedef struct _CREATE_PROCESS_DEBUG_INFO {
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
  } CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;

  typedef struct _EXIT_THREAD_DEBUG_INFO {
    DWORD dwExitCode;
  } EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;

  typedef struct _EXIT_PROCESS_DEBUG_INFO {
    DWORD dwExitCode;
  } EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;

  typedef struct _LOAD_DLL_DEBUG_INFO {
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
  } LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;

  typedef struct _UNLOAD_DLL_DEBUG_INFO {
    LPVOID lpBaseOfDll;
  } UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;

  typedef struct _OUTPUT_DEBUG_STRING_INFO {
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
  } OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;

  typedef struct _RIP_INFO {
    DWORD dwError;
    DWORD dwType;
  } RIP_INFO, *LPRIP_INFO;

  typedef struct _DEBUG_EVENT {
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union {
      EXCEPTION_DEBUG_INFO Exception;
      CREATE_THREAD_DEBUG_INFO CreateThread;
      CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
      EXIT_THREAD_DEBUG_INFO ExitThread;
      EXIT_PROCESS_DEBUG_INFO ExitProcess;
      LOAD_DLL_DEBUG_INFO LoadDll;
      UNLOAD_DLL_DEBUG_INFO UnloadDll;
      OUTPUT_DEBUG_STRING_INFO DebugString;
      RIP_INFO RipInfo;
    } u;
  } DEBUG_EVENT, *LPDEBUG_EVENT;


  typedef PCONTEXT LPCONTEXT;
# 14 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/bemapiset.h" 1 3 4
# 19 "/usr/i686-w64-mingw32/sys-root/mingw/include/bemapiset.h" 3 4
  typedef struct _CONTRACT_DESCRIPTION CONTRACT_DESCRIPTION;
  typedef struct _BEM_REFERENCE BEM_REFERENCE;
  typedef void (__attribute__((__stdcall__)) *BEM_FREE_INTERFACE_CALLBACK) (void *interfaceInstance);

  HRESULT __attribute__((__stdcall__)) BemCreateReference (const GUID *const iid, void *interfaceInstance, BEM_FREE_INTERFACE_CALLBACK freeCallback, BEM_REFERENCE **reference);
  HRESULT __attribute__((__stdcall__)) BemCreateContractFrom (LPCWSTR dllPath, const GUID *const extensionId, const CONTRACT_DESCRIPTION *contractDescription, void *hostContract, void **contract);
  HRESULT __attribute__((__stdcall__)) BemCopyReference (BEM_REFERENCE *reference, BEM_REFERENCE **copiedReference);
  void __attribute__((__stdcall__)) BemFreeReference (BEM_REFERENCE *reference);
  void __attribute__((__stdcall__)) BemFreeContract (void *contract);
# 15 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/debugapi.h" 1 3 4
# 18 "/usr/i686-w64-mingw32/sys-root/mingw/include/debugapi.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsDebuggerPresent (void);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) OutputDebugStringA (LPCSTR lpOutputString);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) OutputDebugStringW (LPCWSTR lpOutputString);





  __attribute__((dllimport)) void __attribute__((__stdcall__)) DebugBreak (void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ContinueDebugEvent (DWORD dwProcessId, DWORD dwThreadId, DWORD dwContinueStatus);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WaitForDebugEvent (LPDEBUG_EVENT lpDebugEvent, DWORD dwMilliseconds);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DebugActiveProcess (DWORD dwProcessId);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DebugActiveProcessStop (DWORD dwProcessId);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CheckRemoteDebuggerPresent (HANDLE hProcess, PBOOL pbDebuggerPresent);
# 16 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/errhandlingapi.h" 1 3 4
# 17 "/usr/i686-w64-mingw32/sys-root/mingw/include/errhandlingapi.h" 3 4
  typedef LONG (__attribute__((__stdcall__)) *PTOP_LEVEL_EXCEPTION_FILTER) (struct _EXCEPTION_POINTERS *ExceptionInfo);
  typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;

  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) UnhandledExceptionFilter (struct _EXCEPTION_POINTERS *ExceptionInfo);
  __attribute__((dllimport)) LPTOP_LEVEL_EXCEPTION_FILTER __attribute__((__stdcall__)) SetUnhandledExceptionFilter (LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) SetErrorMode (UINT uMode);
  __attribute__((dllimport)) PVOID __attribute__((__stdcall__)) AddVectoredExceptionHandler (ULONG First, PVECTORED_EXCEPTION_HANDLER Handler);
  __attribute__((dllimport)) ULONG __attribute__((__stdcall__)) RemoveVectoredExceptionHandler (PVOID Handle);
  __attribute__((dllimport)) PVOID __attribute__((__stdcall__)) AddVectoredContinueHandler (ULONG First, PVECTORED_EXCEPTION_HANDLER Handler);
  __attribute__((dllimport)) ULONG __attribute__((__stdcall__)) RemoveVectoredContinueHandler (PVOID Handle);
# 44 "/usr/i686-w64-mingw32/sys-root/mingw/include/errhandlingapi.h" 3 4
  __attribute__((dllimport)) void __attribute__((__stdcall__)) RaiseException (DWORD dwExceptionCode, DWORD dwExceptionFlags, DWORD nNumberOfArguments, const ULONG_PTR *lpArguments);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetLastError (void);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) SetLastError (DWORD dwErrCode);
# 17 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/fibersapi.h" 1 3 4
# 18 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/fileapi.h" 1 3 4
# 30 "/usr/i686-w64-mingw32/sys-root/mingw/include/fileapi.h" 3 4
  typedef struct _BY_HANDLE_FILE_INFORMATION {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
  } BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION,
    *LPBY_HANDLE_FILE_INFORMATION;

  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) CompareFileTime (const FILETIME *lpFileTime1, const FILETIME *lpFileTime2);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateFileA (LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateFileW (LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DefineDosDeviceW (DWORD dwFlags, LPCWSTR lpDeviceName, LPCWSTR lpTargetPath);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DeleteVolumeMountPointW (LPCWSTR lpszVolumeMountPoint);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FileTimeToLocalFileTime (const FILETIME *lpFileTime, LPFILETIME lpLocalFileTime);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FindCloseChangeNotification (HANDLE hChangeHandle);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) FindFirstChangeNotificationA (LPCSTR lpPathName, WINBOOL bWatchSubtree, DWORD dwNotifyFilter);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) FindFirstChangeNotificationW (LPCWSTR lpPathName, WINBOOL bWatchSubtree, DWORD dwNotifyFilter);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) FindFirstFileA (LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) FindFirstFileW (LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) FindFirstVolumeW (LPWSTR lpszVolumeName, DWORD cchBufferLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FindNextChangeNotification (HANDLE hChangeHandle);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FindNextVolumeW (HANDLE hFindVolume, LPWSTR lpszVolumeName, DWORD cchBufferLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FindVolumeClose (HANDLE hFindVolume);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetDiskFreeSpaceA (LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetDiskFreeSpaceW (LPCWSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetDriveTypeA (LPCSTR lpRootPathName);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetDriveTypeW (LPCWSTR lpRootPathName);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetFileAttributesA (LPCSTR lpFileName);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetFileAttributesW (LPCWSTR lpFileName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetFileInformationByHandle (HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetFileSize (HANDLE hFile, LPDWORD lpFileSizeHigh);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetFileSizeEx (HANDLE hFile, PLARGE_INTEGER lpFileSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetFileTime (HANDLE hFile, LPFILETIME lpCreationTime, LPFILETIME lpLastAccessTime, LPFILETIME lpLastWriteTime);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetFileType (HANDLE hFile);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetFullPathNameA (LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetFullPathNameW (LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetLogicalDrives (void);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetLogicalDriveStringsW (DWORD nBufferLength, LPWSTR lpBuffer);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetLongPathNameA (LPCSTR lpszShortPath, LPSTR lpszLongPath, DWORD cchBuffer);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetLongPathNameW (LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetShortPathNameW (LPCWSTR lpszLongPath, LPWSTR lpszShortPath, DWORD cchBuffer);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetTempFileNameW (LPCWSTR lpPathName, LPCWSTR lpPrefixString, UINT uUnique, LPWSTR lpTempFileName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetVolumeInformationW (LPCWSTR lpRootPathName, LPWSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetVolumePathNameW (LPCWSTR lpszFileName, LPWSTR lpszVolumePathName, DWORD cchBufferLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LocalFileTimeToFileTime (const FILETIME *lpLocalFileTime, LPFILETIME lpFileTime);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LockFile (HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) QueryDosDeviceW (LPCWSTR lpDeviceName, LPWSTR lpTargetPath, DWORD ucchMax);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReadFileEx (HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReadFileScatter (HANDLE hFile, FILE_SEGMENT_ELEMENT aSegmentArray[], DWORD nNumberOfBytesToRead, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SetFilePointer (HANDLE hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetFileTime (HANDLE hFile, const FILETIME *lpCreationTime, const FILETIME *lpLastAccessTime, const FILETIME *lpLastWriteTime);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetFileValidData (HANDLE hFile, LONGLONG ValidDataLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UnlockFile (HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WriteFileEx (HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WriteFileGather (HANDLE hFile, FILE_SEGMENT_ELEMENT aSegmentArray[], DWORD nNumberOfBytesToWrite, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetTempPathW (DWORD nBufferLength, LPWSTR lpBuffer);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetVolumeNameForVolumeMountPointW (LPCWSTR lpszVolumeMountPoint, LPWSTR lpszVolumeName, DWORD cchBufferLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetVolumePathNamesForVolumeNameW (LPCWSTR lpszVolumeName, LPWCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength);
# 130 "/usr/i686-w64-mingw32/sys-root/mingw/include/fileapi.h" 3 4
  typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
  } WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;
# 151 "/usr/i686-w64-mingw32/sys-root/mingw/include/fileapi.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreateDirectoryA (LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreateDirectoryW (LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DeleteFileA (LPCSTR lpFileName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DeleteFileW (LPCWSTR lpFileName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FindClose (HANDLE hFindFile);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) FindFirstFileExA (LPCSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) FindFirstFileExW (LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FindNextFileA (HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FindNextFileW (HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FlushFileBuffers (HANDLE hFile);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetDiskFreeSpaceExA (LPCSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetDiskFreeSpaceExW (LPCWSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetFileAttributesExA (LPCSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetFileAttributesExW (LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LockFileEx (HANDLE hFile, DWORD dwFlags, DWORD dwReserved, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh, LPOVERLAPPED lpOverlapped);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReadFile (HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) RemoveDirectoryA (LPCSTR lpPathName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) RemoveDirectoryW (LPCWSTR lpPathName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetEndOfFile (HANDLE hFile);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetFileAttributesA (LPCSTR lpFileName, DWORD dwFileAttributes);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetFileAttributesW (LPCWSTR lpFileName, DWORD dwFileAttributes);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetFilePointerEx (HANDLE hFile, LARGE_INTEGER liDistanceToMove, PLARGE_INTEGER lpNewFilePointer, DWORD dwMoveMethod);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UnlockFileEx (HANDLE hFile, DWORD dwReserved, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh, LPOVERLAPPED lpOverlapped);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WriteFile (HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped);
# 19 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/handleapi.h" 1 3 4
# 19 "/usr/i686-w64-mingw32/sys-root/mingw/include/handleapi.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CloseHandle (HANDLE hObject);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DuplicateHandle (HANDLE hSourceProcessHandle, HANDLE hSourceHandle, HANDLE hTargetProcessHandle, LPHANDLE lpTargetHandle, DWORD dwDesiredAccess, WINBOOL bInheritHandle, DWORD dwOptions);



  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetHandleInformation (HANDLE hObject, LPDWORD lpdwFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetHandleInformation (HANDLE hObject, DWORD dwMask, DWORD dwFlags);
# 20 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/heapapi.h" 1 3 4
# 18 "/usr/i686-w64-mingw32/sys-root/mingw/include/heapapi.h" 3 4
  typedef struct _HEAP_SUMMARY {
    DWORD cb;
    SIZE_T cbAllocated;
    SIZE_T cbCommitted;
    SIZE_T cbReserved;
    SIZE_T cbMaxReserve;
  } HEAP_SUMMARY,*PHEAP_SUMMARY;

  typedef PHEAP_SUMMARY LPHEAP_SUMMARY;

  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) HeapCreate (DWORD flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) HeapDestroy (HANDLE hHeap);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) HeapValidate (HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem);
  __attribute__((dllimport)) SIZE_T __attribute__((__stdcall__)) HeapCompact (HANDLE hHeap, DWORD dwFlags);
  WINBOOL __attribute__((__stdcall__)) HeapSummary (HANDLE hHeap, DWORD dwFlags, LPHEAP_SUMMARY lpSummary);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetProcessHeaps (DWORD NumberOfHeaps, PHANDLE ProcessHeaps);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) HeapLock (HANDLE hHeap);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) HeapUnlock (HANDLE hHeap);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) HeapWalk (HANDLE hHeap, LPPROCESS_HEAP_ENTRY lpEntry);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) HeapSetInformation (HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) HeapQueryInformation (HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength, PSIZE_T ReturnLength);



  __attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) HeapAlloc (HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes);
  __attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) HeapReAlloc (HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) HeapFree (HANDLE hHeap, DWORD dwFlags, LPVOID lpMem);
  __attribute__((dllimport)) SIZE_T __attribute__((__stdcall__)) HeapSize (HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) GetProcessHeap (void);
# 21 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/ioapiset.h" 1 3 4
# 18 "/usr/i686-w64-mingw32/sys-root/mingw/include/ioapiset.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetOverlappedResult (HANDLE hFile, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, WINBOOL bWait);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateIoCompletionPort (HANDLE FileHandle, HANDLE ExistingCompletionPort, ULONG_PTR CompletionKey, DWORD NumberOfConcurrentThreads);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetQueuedCompletionStatus (HANDLE CompletionPort, LPDWORD lpNumberOfBytesTransferred, PULONG_PTR lpCompletionKey, LPOVERLAPPED *lpOverlapped, DWORD dwMilliseconds);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PostQueuedCompletionStatus (HANDLE CompletionPort, DWORD dwNumberOfBytesTransferred, ULONG_PTR dwCompletionKey, LPOVERLAPPED lpOverlapped);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DeviceIoControl (HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CancelIo (HANDLE hFile);
# 32 "/usr/i686-w64-mingw32/sys-root/mingw/include/ioapiset.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetOverlappedResultEx (HANDLE hFile, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, DWORD dwMilliseconds, WINBOOL bAlertable);
# 22 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/interlockedapi.h" 1 3 4
# 18 "/usr/i686-w64-mingw32/sys-root/mingw/include/interlockedapi.h" 3 4
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) InterlockedIncrement (LONG volatile *lpAddend);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) InterlockedDecrement (LONG volatile *lpAddend);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) InterlockedExchange (LONG volatile *Target, LONG Value);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) InterlockedExchangeAdd (LONG volatile *Addend, LONG Value);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) InterlockedCompareExchange (LONG volatile *Destination, LONG Exchange, LONG Comperand);
  __attribute__((dllimport)) LONGLONG __attribute__((__stdcall__)) InterlockedCompareExchange64 (LONGLONG volatile *Destination, LONGLONG Exchange, LONGLONG Comperand);





  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) LONG __attribute__((__stdcall__)) InterlockedIncrement(LONG volatile *lpAddend) {
    return _InterlockedIncrement(lpAddend);
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) LONG __attribute__((__stdcall__)) InterlockedDecrement(LONG volatile *lpAddend) {
    return _InterlockedDecrement(lpAddend);
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) LONG __attribute__((__stdcall__)) InterlockedExchange(LONG volatile *Target, LONG Value) {
    return _InterlockedExchange(Target, Value);
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) LONG __attribute__((__stdcall__)) InterlockedExchangeAdd(LONG volatile *Addend, LONG Value) {
    return _InterlockedExchangeAdd(Addend, Value);
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) LONG __attribute__((__stdcall__)) InterlockedCompareExchange(LONG volatile *Destination, LONG Exchange, LONG Comperand) {
    return _InterlockedCompareExchange(Destination, Exchange, Comperand);
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) LONGLONG __attribute__((__stdcall__)) InterlockedCompareExchange64(LONGLONG volatile *Destination, LONGLONG Exchange, LONGLONG Comperand) {
    return _InterlockedCompareExchange64(Destination, Exchange, Comperand);
  }




  __attribute__((dllimport)) void __attribute__((__stdcall__)) InitializeSListHead (PSLIST_HEADER ListHead);
  __attribute__((dllimport)) PSLIST_ENTRY __attribute__((__stdcall__)) InterlockedPopEntrySList (PSLIST_HEADER ListHead);
  __attribute__((dllimport)) PSLIST_ENTRY __attribute__((__stdcall__)) InterlockedPushEntrySList (PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry);
  __attribute__((dllimport)) PSLIST_ENTRY __attribute__((__stdcall__)) InterlockedFlushSList (PSLIST_HEADER ListHead);
  __attribute__((dllimport)) USHORT __attribute__((__stdcall__)) QueryDepthSList (PSLIST_HEADER ListHead);
# 23 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/jobapi.h" 1 3 4
# 18 "/usr/i686-w64-mingw32/sys-root/mingw/include/jobapi.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsProcessInJob (HANDLE ProcessHandle, HANDLE JobHandle, PBOOL Result);
# 24 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/libloaderapi.h" 1 3 4
# 18 "/usr/i686-w64-mingw32/sys-root/mingw/include/libloaderapi.h" 3 4
  typedef struct tagENUMUILANG {
    ULONG NumOfEnumUILang;
    ULONG SizeOfEnumUIBuffer;
    LANGID *pEnumUIBuffer;
  } ENUMUILANG, *PENUMUILANG;


  typedef WINBOOL (__attribute__((__stdcall__)) *ENUMRESLANGPROCA) (HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LONG_PTR lParam);
  typedef WINBOOL (__attribute__((__stdcall__)) *ENUMRESLANGPROCW) (HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage, LONG_PTR lParam);
  typedef WINBOOL (__attribute__((__stdcall__)) *ENUMRESNAMEPROCA) (HMODULE hModule, LPCSTR lpType, LPSTR lpName, LONG_PTR lParam);
  typedef WINBOOL (__attribute__((__stdcall__)) *ENUMRESNAMEPROCW) (HMODULE hModule, LPCWSTR lpType, LPWSTR lpName, LONG_PTR lParam);
  typedef WINBOOL (__attribute__((__stdcall__)) *ENUMRESTYPEPROCA) (HMODULE hModule, LPSTR lpType, LONG_PTR lParam);
  typedef WINBOOL (__attribute__((__stdcall__)) *ENUMRESTYPEPROCW) (HMODULE hModule, LPWSTR lpType, LONG_PTR lParam);
# 41 "/usr/i686-w64-mingw32/sys-root/mingw/include/libloaderapi.h" 3 4
  typedef WINBOOL (__attribute__((__stdcall__)) *PGET_MODULE_HANDLE_EXA) (DWORD dwFlags, LPCSTR lpModuleName, HMODULE *phModule);
  typedef WINBOOL (__attribute__((__stdcall__)) *PGET_MODULE_HANDLE_EXW) (DWORD dwFlags, LPCWSTR lpModuleName, HMODULE *phModule);


  typedef PVOID DLL_DIRECTORY_COOKIE, *PDLL_DIRECTORY_COOKIE;
# 80 "/usr/i686-w64-mingw32/sys-root/mingw/include/libloaderapi.h" 3 4
  __attribute__((dllimport)) HRSRC __attribute__((__stdcall__)) FindResourceExW (HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage);
  __attribute__((dllimport)) __attribute__((noreturn)) void __attribute__((__stdcall__)) FreeLibraryAndExitThread (HMODULE hLibModule, DWORD dwExitCode);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FreeResource (HGLOBAL hResData);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetModuleFileNameA (HMODULE hModule, LPSTR lpFilename, DWORD nSize);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetModuleFileNameW (HMODULE hModule, LPWSTR lpFilename, DWORD nSize);
  __attribute__((dllimport)) HMODULE __attribute__((__stdcall__)) GetModuleHandleA (LPCSTR lpModuleName);
  __attribute__((dllimport)) HMODULE __attribute__((__stdcall__)) GetModuleHandleW (LPCWSTR lpModuleName);
  __attribute__((dllimport)) HMODULE __attribute__((__stdcall__)) LoadLibraryExA (LPCSTR lpLibFileName, HANDLE hFile, DWORD dwFlags);
  __attribute__((dllimport)) HMODULE __attribute__((__stdcall__)) LoadLibraryExW (LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags);
  __attribute__((dllimport)) HGLOBAL __attribute__((__stdcall__)) LoadResource (HMODULE hModule, HRSRC hResInfo);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) LoadStringA (HINSTANCE hInstance, UINT uID, LPSTR lpBuffer, int cchBufferMax);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) LoadStringW (HINSTANCE hInstance, UINT uID, LPWSTR lpBuffer, int cchBufferMax);
  __attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) LockResource (HGLOBAL hResData);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SizeofResource (HMODULE hModule, HRSRC hResInfo);
  __attribute__((dllimport)) DLL_DIRECTORY_COOKIE __attribute__((__stdcall__)) AddDllDirectory (PCWSTR NewDirectory);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) RemoveDllDirectory (DLL_DIRECTORY_COOKIE Cookie);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetDefaultDllDirectories (DWORD DirectoryFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetModuleHandleExA (DWORD dwFlags, LPCSTR lpModuleName, HMODULE *phModule);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetModuleHandleExW (DWORD dwFlags, LPCWSTR lpModuleName, HMODULE *phModule);
# 113 "/usr/i686-w64-mingw32/sys-root/mingw/include/libloaderapi.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumResourceLanguagesA(HMODULE hModule,LPCSTR lpType,LPCSTR lpName,ENUMRESLANGPROCA lpEnumFunc,LONG_PTR lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumResourceLanguagesW(HMODULE hModule,LPCWSTR lpType,LPCWSTR lpName,ENUMRESLANGPROCW lpEnumFunc,LONG_PTR lParam);
# 133 "/usr/i686-w64-mingw32/sys-root/mingw/include/libloaderapi.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DisableThreadLibraryCalls (HMODULE hLibModule);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FreeLibrary (HMODULE hLibModule);
  __attribute__((dllimport)) FARPROC __attribute__((__stdcall__)) GetProcAddress (HMODULE hModule, LPCSTR lpProcName);
# 25 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/memoryapi.h" 1 3 4
# 18 "/usr/i686-w64-mingw32/sys-root/mingw/include/memoryapi.h" 3 4
  typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
    LowMemoryResourceNotification,
    HighMemoryResourceNotification
  } MEMORY_RESOURCE_NOTIFICATION_TYPE;
# 47 "/usr/i686-w64-mingw32/sys-root/mingw/include/memoryapi.h" 3 4
  __attribute__((dllimport)) SIZE_T __attribute__((__stdcall__)) VirtualQuery (LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FlushViewOfFile (LPCVOID lpBaseAddress, SIZE_T dwNumberOfBytesToFlush);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UnmapViewOfFile (LPCVOID lpBaseAddress);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateFileMappingFromApp (HANDLE hFile, PSECURITY_ATTRIBUTES SecurityAttributes, ULONG PageProtection, ULONG64 MaximumSize, PCWSTR Name);
  __attribute__((dllimport)) PVOID __attribute__((__stdcall__)) MapViewOfFileFromApp (HANDLE hFileMappingObject, ULONG DesiredAccess, ULONG64 FileOffset, SIZE_T NumberOfBytesToMap);
# 63 "/usr/i686-w64-mingw32/sys-root/mingw/include/memoryapi.h" 3 4
  __attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) VirtualAlloc (LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) VirtualFree (LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) VirtualProtect (LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
  __attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) VirtualAllocEx (HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) VirtualFreeEx (HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) VirtualProtectEx (HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
  __attribute__((dllimport)) SIZE_T __attribute__((__stdcall__)) VirtualQueryEx (HANDLE hProcess, LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReadProcessMemory (HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesRead);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WriteProcessMemory (HANDLE hProcess, LPVOID lpBaseAddress, LPCVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesWritten);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateFileMappingW (HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenFileMappingW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
  __attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) MapViewOfFile (HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap);
  __attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) MapViewOfFileEx (HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, LPVOID lpBaseAddress);
  __attribute__((dllimport)) SIZE_T __attribute__((__stdcall__)) GetLargePageMinimum (void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetProcessWorkingSetSizeEx (HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize, PDWORD Flags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetProcessWorkingSetSizeEx (HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize, DWORD Flags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) VirtualLock (LPVOID lpAddress, SIZE_T dwSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) VirtualUnlock (LPVOID lpAddress, SIZE_T dwSize);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetWriteWatch (DWORD dwFlags, PVOID lpBaseAddress, SIZE_T dwRegionSize, PVOID *lpAddresses, ULONG_PTR *lpdwCount, LPDWORD lpdwGranularity);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) ResetWriteWatch (LPVOID lpBaseAddress, SIZE_T dwRegionSize);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateMemoryResourceNotification (MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) QueryMemoryResourceNotification (HANDLE ResourceNotificationHandle, PBOOL ResourceState);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetSystemFileCacheSize (PSIZE_T lpMinimumFileCacheSize, PSIZE_T lpMaximumFileCacheSize, PDWORD lpFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetSystemFileCacheSize (SIZE_T MinimumFileCacheSize, SIZE_T MaximumFileCacheSize, DWORD Flags);
# 26 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/namedpipeapi.h" 1 3 4
# 18 "/usr/i686-w64-mingw32/sys-root/mingw/include/namedpipeapi.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ImpersonateNamedPipeClient (HANDLE hNamedPipe);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreatePipe (PHANDLE hReadPipe, PHANDLE hWritePipe, LPSECURITY_ATTRIBUTES lpPipeAttributes, DWORD nSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ConnectNamedPipe (HANDLE hNamedPipe, LPOVERLAPPED lpOverlapped);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DisconnectNamedPipe (HANDLE hNamedPipe);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetNamedPipeHandleState (HANDLE hNamedPipe, LPDWORD lpMode, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PeekNamedPipe (HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) TransactNamedPipe (HANDLE hNamedPipe, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, LPOVERLAPPED lpOverlapped);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateNamedPipeW (LPCWSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WaitNamedPipeW (LPCWSTR lpNamedPipeName, DWORD nTimeOut);
# 27 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/namespaceapi.h" 1 3 4
# 20 "/usr/i686-w64-mingw32/sys-root/mingw/include/namespaceapi.h" 3 4
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreatePrivateNamespaceW (LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes, LPVOID lpBoundaryDescriptor, LPCWSTR lpAliasPrefix);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenPrivateNamespaceW (LPVOID lpBoundaryDescriptor, LPCWSTR lpAliasPrefix);




  __attribute__((dllimport)) BOOLEAN __attribute__((__stdcall__)) ClosePrivateNamespace (HANDLE Handle, ULONG Flags);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateBoundaryDescriptorW (LPCWSTR Name, ULONG Flags);




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AddSIDToBoundaryDescriptor (HANDLE *BoundaryDescriptor, PSID RequiredSid);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) DeleteBoundaryDescriptor (HANDLE BoundaryDescriptor);
# 28 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/processenv.h" 1 3 4
# 18 "/usr/i686-w64-mingw32/sys-root/mingw/include/processenv.h" 3 4
  __attribute__((dllimport)) LPCH __attribute__((__stdcall__)) GetEnvironmentStrings (void);
  __attribute__((dllimport)) LPWCH __attribute__((__stdcall__)) GetEnvironmentStringsW (void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetEnvironmentStringsW (LPWCH NewEnvironment);
# 29 "/usr/i686-w64-mingw32/sys-root/mingw/include/processenv.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FreeEnvironmentStringsA (LPCH penv);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FreeEnvironmentStringsW (LPWCH penv);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) GetStdHandle (DWORD nStdHandle);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetStdHandle (DWORD nStdHandle, HANDLE hHandle);



  __attribute__((dllimport)) LPSTR __attribute__((__stdcall__)) GetCommandLineA (void);
  __attribute__((dllimport)) LPWSTR __attribute__((__stdcall__)) GetCommandLineW (void);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetEnvironmentVariableA (LPCSTR lpName, LPSTR lpBuffer, DWORD nSize);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetEnvironmentVariableW (LPCWSTR lpName, LPWSTR lpBuffer, DWORD nSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetEnvironmentVariableA (LPCSTR lpName, LPCSTR lpValue);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetEnvironmentVariableW (LPCWSTR lpName, LPCWSTR lpValue);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) ExpandEnvironmentStringsA (LPCSTR lpSrc, LPSTR lpDst, DWORD nSize);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) ExpandEnvironmentStringsW (LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetCurrentDirectoryA (LPCSTR lpPathName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetCurrentDirectoryW (LPCWSTR lpPathName);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetCurrentDirectoryA (DWORD nBufferLength, LPSTR lpBuffer);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetCurrentDirectoryW (DWORD nBufferLength, LPWSTR lpBuffer);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SearchPathW (LPCWSTR lpPath, LPCWSTR lpFileName, LPCWSTR lpExtension, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SearchPathA (LPCSTR lpPath, LPCSTR lpFileName, LPCSTR lpExtension, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) NeedCurrentDirectoryForExePathA (LPCSTR ExeName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) NeedCurrentDirectoryForExePathW (LPCWSTR ExeName);
# 29 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/processthreadsapi.h" 1 3 4
# 24 "/usr/i686-w64-mingw32/sys-root/mingw/include/processthreadsapi.h" 3 4
  typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
  } PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;

  typedef struct _STARTUPINFOA {
    DWORD cb;
    LPSTR lpReserved;
    LPSTR lpDesktop;
    LPSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
  } STARTUPINFOA, *LPSTARTUPINFOA;

  typedef struct _STARTUPINFOW {
    DWORD cb;
    LPWSTR lpReserved;
    LPWSTR lpDesktop;
    LPWSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
  } STARTUPINFOW, *LPSTARTUPINFOW;

  typedef STARTUPINFOA STARTUPINFO;
  typedef LPSTARTUPINFOA LPSTARTUPINFO;

  typedef struct _PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST, *LPPROC_THREAD_ATTRIBUTE_LIST;

  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) QueueUserAPC (PAPCFUNC pfnAPC, HANDLE hThread, ULONG_PTR dwData);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetProcessTimes (HANDLE hProcess, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
  __attribute__((dllimport)) __attribute__((noreturn)) void __attribute__((__stdcall__)) ExitProcess (UINT uExitCode);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) TerminateProcess (HANDLE hProcess, UINT uExitCode);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetExitCodeProcess (HANDLE hProcess, LPDWORD lpExitCode);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SwitchToThread (void);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateRemoteThread (HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenThread (DWORD dwDesiredAccess, WINBOOL bInheritHandle, DWORD dwThreadId);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetThreadPriorityBoost (HANDLE hThread, WINBOOL bDisablePriorityBoost);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetThreadPriorityBoost (HANDLE hThread, PBOOL pDisablePriorityBoost);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) TerminateThread (HANDLE hThread, DWORD dwExitCode);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetProcessShutdownParameters (DWORD dwLevel, DWORD dwFlags);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetProcessVersion (DWORD ProcessId);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) GetStartupInfoW (LPSTARTUPINFOW lpStartupInfo);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetThreadToken (PHANDLE Thread, HANDLE Token);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) OpenProcessToken (HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) OpenThreadToken (HANDLE ThreadHandle, DWORD DesiredAccess, WINBOOL OpenAsSelf, PHANDLE TokenHandle);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetPriorityClass (HANDLE hProcess, DWORD dwPriorityClass);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetThreadStackGuarantee (PULONG StackSizeInBytes);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetPriorityClass (HANDLE hProcess);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ProcessIdToSessionId (DWORD dwProcessId, DWORD *pSessionId);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetProcessId (HANDLE Process);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetThreadId (HANDLE Thread);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateRemoteThreadEx (HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, LPDWORD lpThreadId);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetThreadContext (HANDLE hThread, LPCONTEXT lpContext);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetThreadContext (HANDLE hThread, const CONTEXT *lpContext);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FlushInstructionCache (HANDLE hProcess, LPCVOID lpBaseAddress, SIZE_T dwSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetThreadTimes (HANDLE hThread, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenProcess (DWORD dwDesiredAccess, WINBOOL bInheritHandle, DWORD dwProcessId);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetProcessHandleCount (HANDLE hProcess, PDWORD pdwHandleCount);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetCurrentProcessorNumber (void);






  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreateProcessA (LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreateProcessW (LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreateProcessAsUserW (HANDLE hToken, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
# 152 "/usr/i686-w64-mingw32/sys-root/mingw/include/processthreadsapi.h" 3 4
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) GetCurrentProcess (void);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetCurrentProcessId (void);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) GetCurrentThread (void);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetCurrentThreadId (void);
  WINBOOL __attribute__((__stdcall__)) IsProcessorFeaturePresent (DWORD ProcessorFeature);



  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateThread (LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetThreadPriority (HANDLE hThread, int nPriority);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetThreadPriority (HANDLE hThread);
  __attribute__((dllimport)) __attribute__((noreturn)) void __attribute__((__stdcall__)) ExitThread (DWORD dwExitCode);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetExitCodeThread (HANDLE hThread, LPDWORD lpExitCode);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SuspendThread (HANDLE hThread);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) ResumeThread (HANDLE hThread);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) TlsAlloc (void);
  __attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) TlsGetValue (DWORD dwTlsIndex);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) TlsSetValue (DWORD dwTlsIndex, LPVOID lpTlsValue);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) TlsFree (DWORD dwTlsIndex);
# 30 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/processtopologyapi.h" 1 3 4
# 31 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/profileapi.h" 1 3 4
# 16 "/usr/i686-w64-mingw32/sys-root/mingw/include/profileapi.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) QueryPerformanceCounter (LARGE_INTEGER *lpPerformanceCount);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) QueryPerformanceFrequency (LARGE_INTEGER *lpFrequency);
# 32 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/realtimeapiset.h" 1 3 4
# 33 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/securityappcontainer.h" 1 3 4
# 34 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/securitybaseapi.h" 1 3 4
# 18 "/usr/i686-w64-mingw32/sys-root/mingw/include/securitybaseapi.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AccessCheck (PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccess, LPBOOL AccessStatus);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AccessCheckAndAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, LPWSTR ObjectTypeName, LPWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AccessCheckByType (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, DWORD DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccess, LPBOOL AccessStatus);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AccessCheckByTypeResultList (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, DWORD DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccessList, LPDWORD AccessStatusList);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AccessCheckByTypeAndAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AccessCheckByTypeResultListAndAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccessList, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AccessCheckByTypeResultListAndAuditAlarmByHandleW (LPCWSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccessList, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AddAccessAllowedAce (PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AddAccessAllowedAceEx (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AddAccessAllowedObjectAce (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID pSid);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AddAccessDeniedAce (PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AddAccessDeniedAceEx (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AddAccessDeniedObjectAce (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID pSid);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AddAce (PACL pAcl, DWORD dwAceRevision, DWORD dwStartingAceIndex, LPVOID pAceList, DWORD nAceListLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AddAuditAccessAce (PACL pAcl, DWORD dwAceRevision, DWORD dwAccessMask, PSID pSid, WINBOOL bAuditSuccess, WINBOOL bAuditFailure);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AddAuditAccessAceEx (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD dwAccessMask, PSID pSid, WINBOOL bAuditSuccess, WINBOOL bAuditFailure);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AddAuditAccessObjectAce (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID pSid, WINBOOL bAuditSuccess, WINBOOL bAuditFailure);
# 60 "/usr/i686-w64-mingw32/sys-root/mingw/include/securitybaseapi.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AdjustTokenGroups (HANDLE TokenHandle, WINBOOL ResetToDefault, PTOKEN_GROUPS NewState, DWORD BufferLength, PTOKEN_GROUPS PreviousState, PDWORD ReturnLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AdjustTokenPrivileges (HANDLE TokenHandle, WINBOOL DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, DWORD BufferLength, PTOKEN_PRIVILEGES PreviousState, PDWORD ReturnLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AllocateAndInitializeSid (PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount, DWORD nSubAuthority0, DWORD nSubAuthority1, DWORD nSubAuthority2, DWORD nSubAuthority3, DWORD nSubAuthority4, DWORD nSubAuthority5, DWORD nSubAuthority6, DWORD nSubAuthority7, PSID *pSid);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AllocateLocallyUniqueId (PLUID Luid);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AreAllAccessesGranted (DWORD GrantedAccess, DWORD DesiredAccess);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AreAnyAccessesGranted (DWORD GrantedAccess, DWORD DesiredAccess);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CheckTokenMembership (HANDLE TokenHandle, PSID SidToCheck, PBOOL IsMember);







  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ConvertToAutoInheritPrivateObjectSecurity (PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CurrentSecurityDescriptor, PSECURITY_DESCRIPTOR *NewSecurityDescriptor, GUID *ObjectType, BOOLEAN IsDirectoryObject, PGENERIC_MAPPING GenericMapping);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CopySid (DWORD nDestinationSidLength, PSID pDestinationSid, PSID pSourceSid);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreatePrivateObjectSecurity (PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, WINBOOL IsDirectoryObject, HANDLE Token, PGENERIC_MAPPING GenericMapping);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreatePrivateObjectSecurityEx (PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, GUID *ObjectType, WINBOOL IsContainerObject, ULONG AutoInheritFlags, HANDLE Token, PGENERIC_MAPPING GenericMapping);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreatePrivateObjectSecurityWithMultipleInheritance (PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, GUID **ObjectTypes, ULONG GuidCount, WINBOOL IsContainerObject, ULONG AutoInheritFlags, HANDLE Token, PGENERIC_MAPPING GenericMapping);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreateRestrictedToken (HANDLE ExistingTokenHandle, DWORD Flags, DWORD DisableSidCount, PSID_AND_ATTRIBUTES SidsToDisable, DWORD DeletePrivilegeCount, PLUID_AND_ATTRIBUTES PrivilegesToDelete, DWORD RestrictedSidCount, PSID_AND_ATTRIBUTES SidsToRestrict, PHANDLE NewTokenHandle);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreateWellKnownSid (WELL_KNOWN_SID_TYPE WellKnownSidType, PSID DomainSid, PSID pSid, DWORD *cbSid);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EqualDomainSid (PSID pSid1, PSID pSid2, WINBOOL *pfEqual);

  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DeleteAce (PACL pAcl, DWORD dwAceIndex);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DestroyPrivateObjectSecurity (PSECURITY_DESCRIPTOR *ObjectDescriptor);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DuplicateToken (HANDLE ExistingTokenHandle, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, PHANDLE DuplicateTokenHandle);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DuplicateTokenEx (HANDLE hExistingToken, DWORD dwDesiredAccess, LPSECURITY_ATTRIBUTES lpTokenAttributes, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, TOKEN_TYPE TokenType, PHANDLE phNewToken);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EqualPrefixSid (PSID pSid1, PSID pSid2);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EqualSid (PSID pSid1, PSID pSid2);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FindFirstFreeAce (PACL pAcl, LPVOID *pAce);
  __attribute__((dllimport)) PVOID __attribute__((__stdcall__)) FreeSid (PSID pSid);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetAce (PACL pAcl, DWORD dwAceIndex, LPVOID *pAce);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetAclInformation (PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetFileSecurityW (LPCWSTR lpFileName, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetKernelObjectSecurity (HANDLE Handle, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetLengthSid (PSID pSid);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetPrivateObjectSecurity (PSECURITY_DESCRIPTOR ObjectDescriptor, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ResultantDescriptor, DWORD DescriptorLength, PDWORD ReturnLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetSecurityDescriptorControl (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSECURITY_DESCRIPTOR_CONTROL pControl, LPDWORD lpdwRevision);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetSecurityDescriptorDacl (PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbDaclPresent, PACL *pDacl, LPBOOL lpbDaclDefaulted);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetSecurityDescriptorGroup (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID *pGroup, LPBOOL lpbGroupDefaulted);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetSecurityDescriptorLength (PSECURITY_DESCRIPTOR pSecurityDescriptor);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetSecurityDescriptorOwner (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID *pOwner, LPBOOL lpbOwnerDefaulted);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetSecurityDescriptorRMControl (PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetSecurityDescriptorSacl (PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbSaclPresent, PACL *pSacl, LPBOOL lpbSaclDefaulted);
  __attribute__((dllimport)) PSID_IDENTIFIER_AUTHORITY __attribute__((__stdcall__)) GetSidIdentifierAuthority (PSID pSid);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetSidLengthRequired (UCHAR nSubAuthorityCount);
  __attribute__((dllimport)) PDWORD __attribute__((__stdcall__)) GetSidSubAuthority (PSID pSid, DWORD nSubAuthority);
  __attribute__((dllimport)) PUCHAR __attribute__((__stdcall__)) GetSidSubAuthorityCount (PSID pSid);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetTokenInformation (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength, PDWORD ReturnLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetWindowsAccountDomainSid (PSID pSid, PSID pDomainSid, DWORD *cbDomainSid);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ImpersonateAnonymousToken (HANDLE ThreadHandle);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ImpersonateLoggedOnUser (HANDLE hToken);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ImpersonateSelf (SECURITY_IMPERSONATION_LEVEL ImpersonationLevel);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) InitializeAcl (PACL pAcl, DWORD nAclLength, DWORD dwAclRevision);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) InitializeSecurityDescriptor (PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD dwRevision);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) InitializeSid (PSID Sid, PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsTokenRestricted (HANDLE TokenHandle);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsValidAcl (PACL pAcl);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsValidSecurityDescriptor (PSECURITY_DESCRIPTOR pSecurityDescriptor);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsValidSid (PSID pSid);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsWellKnownSid (PSID pSid, WELL_KNOWN_SID_TYPE WellKnownSidType);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) MakeAbsoluteSD (PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor, LPDWORD lpdwAbsoluteSecurityDescriptorSize, PACL pDacl, LPDWORD lpdwDaclSize, PACL pSacl, LPDWORD lpdwSaclSize, PSID pOwner, LPDWORD lpdwOwnerSize, PSID pPrimaryGroup, LPDWORD lpdwPrimaryGroupSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) MakeSelfRelativeSD (PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor, PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, LPDWORD lpdwBufferLength);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) MapGenericMask (PDWORD AccessMask, PGENERIC_MAPPING GenericMapping);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ObjectCloseAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, WINBOOL GenerateOnClose);




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ObjectDeleteAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, WINBOOL GenerateOnClose);




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ObjectOpenAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, LPWSTR ObjectTypeName, LPWSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, DWORD GrantedAccess, PPRIVILEGE_SET Privileges, WINBOOL ObjectCreation, WINBOOL AccessGranted, LPBOOL GenerateOnClose);




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ObjectPrivilegeAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, DWORD DesiredAccess, PPRIVILEGE_SET Privileges, WINBOOL AccessGranted);




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PrivilegeCheck (HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, LPBOOL pfResult);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PrivilegedServiceAuditAlarmW (LPCWSTR SubsystemName, LPCWSTR ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, WINBOOL AccessGranted);
# 158 "/usr/i686-w64-mingw32/sys-root/mingw/include/securitybaseapi.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) RevertToSelf (void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetAclInformation (PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetFileSecurityW (LPCWSTR lpFileName, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor);




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetKernelObjectSecurity (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetPrivateObjectSecurity (SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor, PGENERIC_MAPPING GenericMapping, HANDLE Token);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetPrivateObjectSecurityEx (SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor, ULONG AutoInheritFlags, PGENERIC_MAPPING GenericMapping, HANDLE Token);





  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetSecurityDescriptorControl (PSECURITY_DESCRIPTOR pSecurityDescriptor, SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest, SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetSecurityDescriptorDacl (PSECURITY_DESCRIPTOR pSecurityDescriptor, WINBOOL bDaclPresent, PACL pDacl, WINBOOL bDaclDefaulted);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetSecurityDescriptorGroup (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pGroup, WINBOOL bGroupDefaulted);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetSecurityDescriptorOwner (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pOwner, WINBOOL bOwnerDefaulted);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SetSecurityDescriptorRMControl (PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetSecurityDescriptorSacl (PSECURITY_DESCRIPTOR pSecurityDescriptor, WINBOOL bSaclPresent, PACL pSacl, WINBOOL bSaclDefaulted);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetTokenInformation (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength);
# 35 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/synchapi.h" 1 3 4
# 34 "/usr/i686-w64-mingw32/sys-root/mingw/include/synchapi.h" 3 4
  typedef RTL_SRWLOCK SRWLOCK, *PSRWLOCK;

  typedef RTL_RUN_ONCE INIT_ONCE;
  typedef PRTL_RUN_ONCE PINIT_ONCE;
  typedef PRTL_RUN_ONCE LPINIT_ONCE;

  typedef WINBOOL (__attribute__((__stdcall__)) *PINIT_ONCE_FN) (PINIT_ONCE InitOnce, PVOID Parameter, PVOID *Context);
  typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE, *PCONDITION_VARIABLE;

  __attribute__((dllimport)) void __attribute__((__stdcall__)) EnterCriticalSection (LPCRITICAL_SECTION lpCriticalSection);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) LeaveCriticalSection (LPCRITICAL_SECTION lpCriticalSection);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) TryEnterCriticalSection (LPCRITICAL_SECTION lpCriticalSection);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) DeleteCriticalSection (LPCRITICAL_SECTION lpCriticalSection);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetEvent (HANDLE hEvent);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ResetEvent (HANDLE hEvent);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReleaseSemaphore (HANDLE hSemaphore, LONG lReleaseCount, LPLONG lpPreviousCount);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReleaseMutex (HANDLE hMutex);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) WaitForSingleObjectEx (HANDLE hHandle, DWORD dwMilliseconds, WINBOOL bAlertable);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) WaitForMultipleObjectsEx (DWORD nCount, const HANDLE *lpHandles, WINBOOL bWaitAll, DWORD dwMilliseconds, WINBOOL bAlertable);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenMutexW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenEventA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenEventW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenSemaphoreW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
  WINBOOL __attribute__((__stdcall__)) WaitOnAddress (volatile void *Address, PVOID CompareAddress, SIZE_T AddressSize, DWORD dwMilliseconds);
  void __attribute__((__stdcall__)) WakeByAddressSingle (PVOID Address);
  void __attribute__((__stdcall__)) WakeByAddressAll (PVOID Address);
# 102 "/usr/i686-w64-mingw32/sys-root/mingw/include/synchapi.h" 3 4
  typedef void (__attribute__((__stdcall__)) *PTIMERAPCROUTINE) (LPVOID lpArgToCompletionRoutine, DWORD dwTimerLowValue, DWORD dwTimerHighValue);

  typedef RTL_BARRIER SYNCHRONIZATION_BARRIER;
  typedef PRTL_BARRIER PSYNCHRONIZATION_BARRIER;
  typedef PRTL_BARRIER LPSYNCHRONIZATION_BARRIER;





  __attribute__((dllimport)) void __attribute__((__stdcall__)) InitializeCriticalSection (LPCRITICAL_SECTION lpCriticalSection);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) InitializeCriticalSectionAndSpinCount (LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SetCriticalSectionSpinCount (LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) WaitForSingleObject (HANDLE hHandle, DWORD dwMilliseconds);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SleepEx (DWORD dwMilliseconds, WINBOOL bAlertable);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateMutexA (LPSECURITY_ATTRIBUTES lpMutexAttributes, WINBOOL bInitialOwner, LPCSTR lpName);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateMutexW (LPSECURITY_ATTRIBUTES lpMutexAttributes, WINBOOL bInitialOwner, LPCWSTR lpName);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateEventA (LPSECURITY_ATTRIBUTES lpEventAttributes, WINBOOL bManualReset, WINBOOL bInitialState, LPCSTR lpName);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateEventW (LPSECURITY_ATTRIBUTES lpEventAttributes, WINBOOL bManualReset, WINBOOL bInitialState, LPCWSTR lpName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetWaitableTimer (HANDLE hTimer, const LARGE_INTEGER *lpDueTime, LONG lPeriod, PTIMERAPCROUTINE pfnCompletionRoutine, LPVOID lpArgToCompletionRoutine, WINBOOL fResume);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CancelWaitableTimer (HANDLE hTimer);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenWaitableTimerW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpTimerName);
  WINBOOL __attribute__((__stdcall__)) EnterSynchronizationBarrier (LPSYNCHRONIZATION_BARRIER lpBarrier, DWORD dwFlags);
  WINBOOL __attribute__((__stdcall__)) InitializeSynchronizationBarrier (LPSYNCHRONIZATION_BARRIER lpBarrier, LONG lTotalThreads, LONG lSpinCount);
  WINBOOL __attribute__((__stdcall__)) DeleteSynchronizationBarrier (LPSYNCHRONIZATION_BARRIER lpBarrier);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) Sleep (DWORD dwMilliseconds);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SignalObjectAndWait (HANDLE hObjectToSignal, HANDLE hObjectToWaitOn, DWORD dwMilliseconds, WINBOOL bAlertable);
# 36 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/sysinfoapi.h" 1 3 4
# 18 "/usr/i686-w64-mingw32/sys-root/mingw/include/sysinfoapi.h" 3 4
  typedef struct _SYSTEM_INFO {
    __extension__ union {
      DWORD dwOemId;
      __extension__ struct {
 WORD wProcessorArchitecture;
 WORD wReserved;
      } ;
    } ;
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
  } SYSTEM_INFO, *LPSYSTEM_INFO;

  __attribute__((dllimport)) void __attribute__((__stdcall__)) GetSystemTime (LPSYSTEMTIME lpSystemTime);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) GetSystemTimeAsFileTime (LPFILETIME lpSystemTimeAsFileTime);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) GetLocalTime (LPSYSTEMTIME lpSystemTime);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) GetNativeSystemInfo (LPSYSTEM_INFO lpSystemInfo);






  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetVersion (void);

  typedef struct _MEMORYSTATUSEX {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORDLONG ullTotalPhys;
    DWORDLONG ullAvailPhys;
    DWORDLONG ullTotalPageFile;
    DWORDLONG ullAvailPageFile;
    DWORDLONG ullTotalVirtual;
    DWORDLONG ullAvailVirtual;
    DWORDLONG ullAvailExtendedVirtual;
  } MEMORYSTATUSEX,*LPMEMORYSTATUSEX;

  typedef enum _COMPUTER_NAME_FORMAT {
    ComputerNameNetBIOS,
    ComputerNameDnsHostname,
    ComputerNameDnsDomain,
    ComputerNameDnsFullyQualified,
    ComputerNamePhysicalNetBIOS,
    ComputerNamePhysicalDnsHostname,
    ComputerNamePhysicalDnsDomain,
    ComputerNamePhysicalDnsFullyQualified,
    ComputerNameMax
  } COMPUTER_NAME_FORMAT;

  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GlobalMemoryStatusEx (LPMEMORYSTATUSEX lpBuffer);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetLocalTime (const SYSTEMTIME *lpSystemTime);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) GetSystemInfo (LPSYSTEM_INFO lpSystemInfo);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetTickCount (void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetSystemTimeAdjustment (PDWORD lpTimeAdjustment, PDWORD lpTimeIncrement, PBOOL lpTimeAdjustmentDisabled);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetSystemDirectoryA (LPSTR lpBuffer, UINT uSize);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetSystemDirectoryW (LPWSTR lpBuffer, UINT uSize);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetWindowsDirectoryA (LPSTR lpBuffer, UINT uSize);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetWindowsDirectoryW (LPWSTR lpBuffer, UINT uSize);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetSystemWindowsDirectoryA (LPSTR lpBuffer, UINT uSize);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetSystemWindowsDirectoryW (LPWSTR lpBuffer, UINT uSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetComputerNameExA (COMPUTER_NAME_FORMAT NameType, LPSTR lpBuffer, LPDWORD nSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetComputerNameExW (COMPUTER_NAME_FORMAT NameType, LPWSTR lpBuffer, LPDWORD nSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetComputerNameExW (COMPUTER_NAME_FORMAT NameType, LPCWSTR lpBuffer);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetSystemTime (const SYSTEMTIME *lpSystemTime);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetVersionExA (LPOSVERSIONINFOA lpVersionInformation);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetVersionExW (LPOSVERSIONINFOW lpVersionInformation);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetLogicalProcessorInformation (PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer, PDWORD ReturnedLength);
  __attribute__((dllimport)) ULONGLONG __attribute__((__stdcall__)) VerSetConditionMask (ULONGLONG ConditionMask, ULONG TypeMask, UCHAR Condition);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) GetSystemTimePreciseAsFileTime (LPFILETIME lpSystemTimeAsFileTime);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) EnumSystemFirmwareTables (DWORD FirmwareTableProviderSignature, PVOID pFirmwareTableEnumBuffer, DWORD BufferSize);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetSystemFirmwareTable (DWORD FirmwareTableProviderSignature, DWORD FirmwareTableID, PVOID pFirmwareTableBuffer, DWORD BufferSize);
# 37 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/systemtopologyapi.h" 1 3 4
# 18 "/usr/i686-w64-mingw32/sys-root/mingw/include/systemtopologyapi.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetNumaHighestNodeNumber (PULONG HighestNodeNumber);
# 38 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/threadpoolapiset.h" 1 3 4
# 18 "/usr/i686-w64-mingw32/sys-root/mingw/include/threadpoolapiset.h" 3 4
  typedef void (__attribute__((__stdcall__)) *PTP_WIN32_IO_CALLBACK) (PTP_CALLBACK_INSTANCE Instance, PVOID Context, PVOID Overlapped, ULONG IoResult, ULONG_PTR NumberOfBytesTransferred, PTP_IO Io);
# 39 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/threadpoollegacyapiset.h" 1 3 4
# 18 "/usr/i686-w64-mingw32/sys-root/mingw/include/threadpoollegacyapiset.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreateTimerQueueTimer (PHANDLE phNewTimer, HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, ULONG Flags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DeleteTimerQueueTimer (HANDLE TimerQueue, HANDLE Timer, HANDLE CompletionEvent);



  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) QueueUserWorkItem (LPTHREAD_START_ROUTINE Function, PVOID Context, ULONG Flags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UnregisterWaitEx (HANDLE WaitHandle, HANDLE CompletionEvent);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateTimerQueue (void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ChangeTimerQueueTimer (HANDLE TimerQueue, HANDLE Timer, ULONG DueTime, ULONG Period);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DeleteTimerQueueEx (HANDLE TimerQueue, HANDLE CompletionEvent);
# 40 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/utilapiset.h" 1 3 4
# 17 "/usr/i686-w64-mingw32/sys-root/mingw/include/utilapiset.h" 3 4
  __attribute__((dllimport)) PVOID __attribute__((__stdcall__)) EncodePointer (PVOID Ptr);
  __attribute__((dllimport)) PVOID __attribute__((__stdcall__)) DecodePointer (PVOID Ptr);



  __attribute__((dllimport)) PVOID __attribute__((__stdcall__)) EncodeSystemPointer (PVOID Ptr);
  __attribute__((dllimport)) PVOID __attribute__((__stdcall__)) DecodeSystemPointer (PVOID Ptr);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) Beep (DWORD dwFreq, DWORD dwDuration);
# 41 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/wow64apiset.h" 1 3 4
# 18 "/usr/i686-w64-mingw32/sys-root/mingw/include/wow64apiset.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) Wow64DisableWow64FsRedirection (PVOID *OldValue);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) Wow64RevertWow64FsRedirection (PVOID OlValue);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsWow64Process (HANDLE hProcess, PBOOL Wow64Process);
# 42 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4







# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/psdk_inc/intrin-impl.h" 1 3 4
# 50 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 160 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  typedef void (__attribute__((__stdcall__)) *PFIBER_START_ROUTINE) (LPVOID lpFiberParameter);
  typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;


  typedef PLDT_ENTRY LPLDT_ENTRY;
# 240 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  typedef struct _COMMPROP {
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
  } COMMPROP,*LPCOMMPROP;



  typedef struct _COMSTAT {
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
  } COMSTAT,*LPCOMSTAT;
# 285 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  typedef struct _DCB {
    DWORD DCBlength;
    DWORD BaudRate;
    DWORD fBinary: 1;
    DWORD fParity: 1;
    DWORD fOutxCtsFlow:1;
    DWORD fOutxDsrFlow:1;
    DWORD fDtrControl:2;
    DWORD fDsrSensitivity:1;
    DWORD fTXContinueOnXoff: 1;
    DWORD fOutX: 1;
    DWORD fInX: 1;
    DWORD fErrorChar: 1;
    DWORD fNull: 1;
    DWORD fRtsControl:2;
    DWORD fAbortOnError:1;
    DWORD fDummy2:17;
    WORD wReserved;
    WORD XonLim;
    WORD XoffLim;
    BYTE ByteSize;
    BYTE Parity;
    BYTE StopBits;
    char XonChar;
    char XoffChar;
    char ErrorChar;
    char EofChar;
    char EvtChar;
    WORD wReserved1;
  } DCB,*LPDCB;

  typedef struct _COMMTIMEOUTS {
    DWORD ReadIntervalTimeout;
    DWORD ReadTotalTimeoutMultiplier;
    DWORD ReadTotalTimeoutConstant;
    DWORD WriteTotalTimeoutMultiplier;
    DWORD WriteTotalTimeoutConstant;
  } COMMTIMEOUTS,*LPCOMMTIMEOUTS;

  typedef struct _COMMCONFIG {
    DWORD dwSize;
    WORD wVersion;
    WORD wReserved;
    DCB dcb;
    DWORD dwProviderSubType;
    DWORD dwProviderOffset;
    DWORD dwProviderSize;
    WCHAR wcProviderData[1];
  } COMMCONFIG,*LPCOMMCONFIG;
# 364 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  typedef struct _MEMORYSTATUS {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
  } MEMORYSTATUS,*LPMEMORYSTATUS;
# 431 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  typedef struct _JIT_DEBUG_INFO {
    DWORD dwSize;
    DWORD dwProcessorArchitecture;
    DWORD dwThreadID;
    DWORD dwReserved0;
    ULONG64 lpExceptionAddress;
    ULONG64 lpExceptionRecord;
    ULONG64 lpContextRecord;
  } JIT_DEBUG_INFO,*LPJIT_DEBUG_INFO;

  typedef JIT_DEBUG_INFO JIT_DEBUG_INFO32, *LPJIT_DEBUG_INFO32;
  typedef JIT_DEBUG_INFO JIT_DEBUG_INFO64, *LPJIT_DEBUG_INFO64;


  typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
  typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
# 620 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  typedef struct _OFSTRUCT {
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
  } OFSTRUCT, *LPOFSTRUCT,*POFSTRUCT;
# 972 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) LONGLONG InterlockedAnd64 (LONGLONG volatile *Destination, LONGLONG Value) {
    LONGLONG Old;

    do {
      Old = *Destination;
    } while (InterlockedCompareExchange64 (Destination, Old &Value, Old) != Old);
    return Old;
  }

  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) LONGLONG InterlockedOr64 (LONGLONG volatile *Destination, LONGLONG Value) {
    LONGLONG Old;

    do {
      Old = *Destination;
    } while (InterlockedCompareExchange64 (Destination, Old | Value, Old) != Old);
    return Old;
  }

  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) LONGLONG InterlockedXor64 (LONGLONG volatile *Destination, LONGLONG Value) {
    LONGLONG Old;

    do {
      Old = *Destination;
    } while (InterlockedCompareExchange64 (Destination, Old ^ Value, Old) != Old);
    return Old;
  }

  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) LONGLONG InterlockedIncrement64 (LONGLONG volatile *Addend) {
    LONGLONG Old;

    do {
      Old = *Addend;
    } while (InterlockedCompareExchange64 (Addend, Old + 1, Old) != Old);
    return Old + 1;
  }

  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) LONGLONG InterlockedDecrement64 (LONGLONG volatile *Addend) {
    LONGLONG Old;

    do {
      Old = *Addend;
    } while (InterlockedCompareExchange64 (Addend, Old - 1, Old) != Old);
    return Old - 1;
  }

  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) LONGLONG InterlockedExchange64 (LONGLONG volatile *Target, LONGLONG Value) {
    LONGLONG Old;

    do {
      Old = *Target;
    } while (InterlockedCompareExchange64 (Target, Value, Old) != Old);
    return Old;
  }

  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) LONGLONG InterlockedExchangeAdd64 (LONGLONG volatile *Addend, LONGLONG Value) {
    LONGLONG Old;

    do {
      Old = *Addend;
    } while (InterlockedCompareExchange64 (Addend, Old + Value, Old) != Old);
    return Old;
  }
# 1069 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  int __attribute__((__stdcall__)) WinMain (HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd);
  int __attribute__((__stdcall__)) wWinMain (HINSTANCE hInstance, HINSTANCE hPrevInstance, LPWSTR lpCmdLine, int nShowCmd);
  __attribute__((dllimport)) HGLOBAL __attribute__((__stdcall__)) GlobalAlloc (UINT uFlags, SIZE_T dwBytes);
  __attribute__((dllimport)) HGLOBAL __attribute__((__stdcall__)) GlobalReAlloc (HGLOBAL hMem, SIZE_T dwBytes, UINT uFlags);
  __attribute__((dllimport)) SIZE_T __attribute__((__stdcall__)) GlobalSize (HGLOBAL hMem);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GlobalFlags (HGLOBAL hMem);
  __attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) GlobalLock (HGLOBAL hMem);
  __attribute__((dllimport)) HGLOBAL __attribute__((__stdcall__)) GlobalHandle (LPCVOID pMem);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GlobalUnlock (HGLOBAL hMem);
  __attribute__((dllimport)) HGLOBAL __attribute__((__stdcall__)) GlobalFree (HGLOBAL hMem);
  __attribute__((dllimport)) SIZE_T __attribute__((__stdcall__)) GlobalCompact (DWORD dwMinFree);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) GlobalFix (HGLOBAL hMem);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) GlobalUnfix (HGLOBAL hMem);
  __attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) GlobalWire (HGLOBAL hMem);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GlobalUnWire (HGLOBAL hMem);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) GlobalMemoryStatus (LPMEMORYSTATUS lpBuffer);
  __attribute__((dllimport)) HLOCAL __attribute__((__stdcall__)) LocalAlloc (UINT uFlags, SIZE_T uBytes);
  __attribute__((dllimport)) HLOCAL __attribute__((__stdcall__)) LocalReAlloc (HLOCAL hMem, SIZE_T uBytes, UINT uFlags);
  __attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) LocalLock (HLOCAL hMem);
  __attribute__((dllimport)) HLOCAL __attribute__((__stdcall__)) LocalHandle (LPCVOID pMem);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LocalUnlock (HLOCAL hMem);
  __attribute__((dllimport)) SIZE_T __attribute__((__stdcall__)) LocalSize (HLOCAL hMem);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) LocalFlags (HLOCAL hMem);
  __attribute__((dllimport)) HLOCAL __attribute__((__stdcall__)) LocalFree (HLOCAL hMem);
  __attribute__((dllimport)) SIZE_T __attribute__((__stdcall__)) LocalShrink (HLOCAL hMem, UINT cbNewSize);
  __attribute__((dllimport)) SIZE_T __attribute__((__stdcall__)) LocalCompact (UINT uMinFree);
# 1117 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetBinaryTypeA (LPCSTR lpApplicationName, LPDWORD lpBinaryType);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetBinaryTypeW (LPCWSTR lpApplicationName, LPDWORD lpBinaryType);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetShortPathNameA (LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer);




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetProcessAffinityMask (HANDLE hProcess, PDWORD_PTR lpProcessAffinityMask, PDWORD_PTR lpSystemAffinityMask);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetProcessAffinityMask (HANDLE hProcess, DWORD_PTR dwProcessAffinityMask);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetProcessIoCounters (HANDLE hProcess, PIO_COUNTERS lpIoCounters);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetProcessWorkingSetSize (HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetProcessWorkingSetSize (HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) FatalExit (int ExitCode);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetEnvironmentStringsA (LPCH NewEnvironment);
# 1145 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) void __attribute__((__stdcall__)) RaiseFailFastException (PEXCEPTION_RECORD pExceptionRecord, PCONTEXT pContextRecord, DWORD dwFlags);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SetThreadIdealProcessor (HANDLE hThread, DWORD dwIdealProcessor);






  __attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) CreateFiber (SIZE_T dwStackSize, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter);
  __attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) CreateFiberEx (SIZE_T dwStackCommitSize, SIZE_T dwStackReserveSize, DWORD dwFlags, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) DeleteFiber (LPVOID lpFiber);
  __attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) ConvertThreadToFiber (LPVOID lpParameter);
  __attribute__((dllimport)) LPVOID __attribute__((__stdcall__)) ConvertThreadToFiberEx (LPVOID lpParameter, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ConvertFiberToThread (void);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) SwitchToFiber (LPVOID lpFiber);
  __attribute__((dllimport)) DWORD_PTR __attribute__((__stdcall__)) SetThreadAffinityMask (HANDLE hThread, DWORD_PTR dwThreadAffinityMask);



  typedef enum _THREAD_INFORMATION_CLASS {
    ThreadMemoryPriority,
    ThreadAbsoluteCpuPriority,
    ThreadInformationClassMax
  } THREAD_INFORMATION_CLASS;

  typedef enum _PROCESS_INFORMATION_CLASS {
    ProcessMemoryPriority,
    ProcessInformationClassMax
  } PROCESS_INFORMATION_CLASS;
# 1201 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetProcessPriorityBoost (HANDLE hProcess, WINBOOL bDisablePriorityBoost);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetProcessPriorityBoost (HANDLE hProcess, PBOOL pDisablePriorityBoost);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) RequestWakeupLatency (LATENCY_TIME latency);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsSystemResumeAutomatic (void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetThreadIOPendingFlag (HANDLE hThread, PBOOL lpIOIsPending);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetThreadSelectorEntry (HANDLE hThread, DWORD dwSelector, LPLDT_ENTRY lpSelectorEntry);
  __attribute__((dllimport)) EXECUTION_STATE __attribute__((__stdcall__)) SetThreadExecutionState (EXECUTION_STATE esFlags);
# 1244 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetThreadErrorMode (void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetThreadErrorMode (DWORD dwNewMode, LPDWORD lpOldMode);
# 1258 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DebugSetProcessKillOnExit (WINBOOL KillOnExit);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DebugBreakProcess (HANDLE Process);







  typedef enum _DEP_SYSTEM_POLICY_TYPE {
    DEPPolicyAlwaysOff = 0,
    DEPPolicyAlwaysOn,
    DEPPolicyOptIn,
    DEPPolicyOptOut,
    DEPTotalPolicyCount
  } DEP_SYSTEM_POLICY_TYPE;
# 1286 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PulseEvent (HANDLE hEvent);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) WaitForMultipleObjects (DWORD nCount, const HANDLE *lpHandles, WINBOOL bWaitAll, DWORD dwMilliseconds);
  __attribute__((dllimport)) ATOM __attribute__((__stdcall__)) GlobalDeleteAtom (ATOM nAtom);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) InitAtomTable (DWORD nSize);
  __attribute__((dllimport)) ATOM __attribute__((__stdcall__)) DeleteAtom (ATOM nAtom);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) SetHandleCount (UINT uNumber);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) RequestDeviceWakeup (HANDLE hDevice);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CancelDeviceWakeupRequest (HANDLE hDevice);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetDevicePowerState (HANDLE hDevice, WINBOOL *pfOn);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetMessageWaitingIndicator (HANDLE hMsgIndicator, ULONG ulMsgCount);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetFileShortNameA (HANDLE hFile, LPCSTR lpShortName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetFileShortNameW (HANDLE hFile, LPCWSTR lpShortName);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) LoadModule (LPCSTR lpModuleName, LPVOID lpParameterBlock);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) WinExec (LPCSTR lpCmdLine, UINT uCmdShow);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ClearCommBreak (HANDLE hFile);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ClearCommError (HANDLE hFile, LPDWORD lpErrors, LPCOMSTAT lpStat);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetupComm (HANDLE hFile, DWORD dwInQueue, DWORD dwOutQueue);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EscapeCommFunction (HANDLE hFile, DWORD dwFunc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCommConfig (HANDLE hCommDev, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCommMask (HANDLE hFile, LPDWORD lpEvtMask);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCommProperties (HANDLE hFile, LPCOMMPROP lpCommProp);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCommModemStatus (HANDLE hFile, LPDWORD lpModemStat);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCommState (HANDLE hFile, LPDCB lpDCB);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCommTimeouts (HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PurgeComm (HANDLE hFile, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetCommBreak (HANDLE hFile);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetCommConfig (HANDLE hCommDev, LPCOMMCONFIG lpCC, DWORD dwSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetCommMask (HANDLE hFile, DWORD dwEvtMask);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetCommState (HANDLE hFile, LPDCB lpDCB);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetCommTimeouts (HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) TransmitCommChar (HANDLE hFile, char cChar);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WaitCommEvent (HANDLE hFile, LPDWORD lpEvtMask, LPOVERLAPPED lpOverlapped);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SetTapePosition (HANDLE hDevice, DWORD dwPositionMethod, DWORD dwPartition, DWORD dwOffsetLow, DWORD dwOffsetHigh, WINBOOL bImmediate);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetTapePosition (HANDLE hDevice, DWORD dwPositionType, LPDWORD lpdwPartition, LPDWORD lpdwOffsetLow, LPDWORD lpdwOffsetHigh);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) PrepareTape (HANDLE hDevice, DWORD dwOperation, WINBOOL bImmediate);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) EraseTape (HANDLE hDevice, DWORD dwEraseType, WINBOOL bImmediate);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) CreateTapePartition (HANDLE hDevice, DWORD dwPartitionMethod, DWORD dwCount, DWORD dwSize);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) WriteTapemark (HANDLE hDevice, DWORD dwTapemarkType, DWORD dwTapemarkCount, WINBOOL bImmediate);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetTapeStatus (HANDLE hDevice);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetTapeParameters (HANDLE hDevice, DWORD dwOperation, LPDWORD lpdwSize, LPVOID lpTapeInformation);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SetTapeParameters (HANDLE hDevice, DWORD dwOperation, LPVOID lpTapeInformation);
  __attribute__((dllimport)) DEP_SYSTEM_POLICY_TYPE __attribute__((__stdcall__)) GetSystemDEPPolicy (void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetSystemRegistryQuota (PDWORD pdwQuotaAllowed, PDWORD pdwQuotaUsed);
  WINBOOL __attribute__((__stdcall__)) GetSystemTimes (LPFILETIME lpIdleTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FileTimeToDosDateTime (const FILETIME *lpFileTime, LPWORD lpFatDate, LPWORD lpFatTime);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DosDateTimeToFileTime (WORD wFatDate, WORD wFatTime, LPFILETIME lpFileTime);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetSystemTimeAdjustment (DWORD dwTimeAdjustment, WINBOOL bTimeAdjustmentDisabled);






  __attribute__((dllimport)) int __attribute__((__stdcall__)) MulDiv (int nNumber, int nNumerator, int nDenominator);


  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) FormatMessageA (DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) FormatMessageW (DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPWSTR lpBuffer, DWORD nSize, va_list *Arguments);
# 1357 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  typedef DWORD (__attribute__((__stdcall__)) *PFE_EXPORT_FUNC) (PBYTE pbData, PVOID pvCallbackContext, ULONG ulLength);
  typedef DWORD (__attribute__((__stdcall__)) *PFE_IMPORT_FUNC) (PBYTE pbData, PVOID pvCallbackContext, PULONG ulLength);
# 1380 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetNamedPipeInfo (HANDLE hNamedPipe, LPDWORD lpFlags, LPDWORD lpOutBufferSize, LPDWORD lpInBufferSize, LPDWORD lpMaxInstances);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateMailslotA (LPCSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateMailslotW (LPCWSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetMailslotInfo (HANDLE hMailslot, LPDWORD lpMaxMessageSize, LPDWORD lpNextSize, LPDWORD lpMessageCount, LPDWORD lpReadTimeout);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetMailslotInfo (HANDLE hMailslot, DWORD lReadTimeout);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EncryptFileA (LPCSTR lpFileName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EncryptFileW (LPCWSTR lpFileName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DecryptFileA (LPCSTR lpFileName, DWORD dwReserved);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DecryptFileW (LPCWSTR lpFileName, DWORD dwReserved);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FileEncryptionStatusA (LPCSTR lpFileName, LPDWORD lpStatus);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FileEncryptionStatusW (LPCWSTR lpFileName, LPDWORD lpStatus);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) OpenEncryptedFileRawA (LPCSTR lpFileName, ULONG ulFlags, PVOID *pvContext);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) OpenEncryptedFileRawW (LPCWSTR lpFileName, ULONG ulFlags, PVOID *pvContext);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) ReadEncryptedFileRaw (PFE_EXPORT_FUNC pfExportCallback, PVOID pvCallbackContext, PVOID pvContext);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) WriteEncryptedFileRaw (PFE_IMPORT_FUNC pfImportCallback, PVOID pvCallbackContext, PVOID pvContext);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) CloseEncryptedFileRaw (PVOID pvContext);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) lstrcmpA (LPCSTR lpString1, LPCSTR lpString2);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) lstrcmpW (LPCWSTR lpString1, LPCWSTR lpString2);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) lstrcmpiA (LPCSTR lpString1, LPCSTR lpString2);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) lstrcmpiW (LPCWSTR lpString1, LPCWSTR lpString2);
  __attribute__((dllimport)) LPSTR __attribute__((__stdcall__)) lstrcpynA (LPSTR lpString1, LPCSTR lpString2, int iMaxLength);
  __attribute__((dllimport)) LPWSTR __attribute__((__stdcall__)) lstrcpynW (LPWSTR lpString1, LPCWSTR lpString2, int iMaxLength);
  __attribute__((dllimport)) LPSTR __attribute__((__stdcall__)) lstrcpyA (LPSTR lpString1, LPCSTR lpString2);
  __attribute__((dllimport)) LPWSTR __attribute__((__stdcall__)) lstrcpyW (LPWSTR lpString1, LPCWSTR lpString2);
  __attribute__((dllimport)) LPSTR __attribute__((__stdcall__)) lstrcatA (LPSTR lpString1, LPCSTR lpString2);
  __attribute__((dllimport)) LPWSTR __attribute__((__stdcall__)) lstrcatW (LPWSTR lpString1, LPCWSTR lpString2);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) lstrlenA (LPCSTR lpString);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) lstrlenW (LPCWSTR lpString);
  __attribute__((dllimport)) HFILE __attribute__((__stdcall__)) OpenFile (LPCSTR lpFileName, LPOFSTRUCT lpReOpenBuff, UINT uStyle);
  __attribute__((dllimport)) HFILE __attribute__((__stdcall__)) _lopen (LPCSTR lpPathName, int iReadWrite);
  __attribute__((dllimport)) HFILE __attribute__((__stdcall__)) _lcreat (LPCSTR lpPathName, int iAttribute);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) _lread (HFILE hFile, LPVOID lpBuffer, UINT uBytes);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) _lwrite (HFILE hFile, LPCCH lpBuffer, UINT uBytes);
  __attribute__((dllimport)) long __attribute__((__stdcall__)) _hread (HFILE hFile, LPVOID lpBuffer, long lBytes);
  __attribute__((dllimport)) long __attribute__((__stdcall__)) _hwrite (HFILE hFile, LPCCH lpBuffer, long lBytes);
  __attribute__((dllimport)) HFILE __attribute__((__stdcall__)) _lclose (HFILE hFile);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) _llseek (HFILE hFile, LONG lOffset, int iOrigin);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsTextUnicode (const void *lpv, int iSize, LPINT lpiResult);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SignalObjectAndWait (HANDLE hObjectToSignal, HANDLE hObjectToWaitOn, DWORD dwMilliseconds, WINBOOL bAlertable);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) BackupRead (HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, WINBOOL bAbort, WINBOOL bProcessSecurity, LPVOID *lpContext);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) BackupSeek (HANDLE hFile, DWORD dwLowBytesToSeek, DWORD dwHighBytesToSeek, LPDWORD lpdwLowByteSeeked, LPDWORD lpdwHighByteSeeked, LPVOID *lpContext);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) BackupWrite (HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, WINBOOL bAbort, WINBOOL bProcessSecurity, LPVOID *lpContext);
# 1435 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  typedef struct _WIN32_STREAM_ID {
    DWORD dwStreamId;
    DWORD dwStreamAttributes;
    LARGE_INTEGER Size;
    DWORD dwStreamNameSize;
    WCHAR cStreamName[1];
  } WIN32_STREAM_ID,*LPWIN32_STREAM_ID;
# 1496 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateSemaphoreW (LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCWSTR lpName);
  __attribute__((dllimport)) HMODULE __attribute__((__stdcall__)) LoadLibraryW (LPCWSTR lpLibFileName);


  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenMutexA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateSemaphoreA (LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR lpName);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenSemaphoreA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateWaitableTimerA (LPSECURITY_ATTRIBUTES lpTimerAttributes, WINBOOL bManualReset, LPCSTR lpTimerName);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateWaitableTimerW (LPSECURITY_ATTRIBUTES lpTimerAttributes, WINBOOL bManualReset, LPCWSTR lpTimerName);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenWaitableTimerA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpTimerName);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateFileMappingA (HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName);





  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenFileMappingA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetLogicalDriveStringsA (DWORD nBufferLength, LPSTR lpBuffer);
  __attribute__((dllimport)) HMODULE __attribute__((__stdcall__)) LoadLibraryA (LPCSTR lpLibFileName);
# 1639 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetProcessShutdownParameters (LPDWORD lpdwLevel, LPDWORD lpdwFlags);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) FatalAppExitA (UINT uAction, LPCSTR lpMessageText);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) FatalAppExitW (UINT uAction, LPCWSTR lpMessageText);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) GetStartupInfoA (LPSTARTUPINFOA lpStartupInfo);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetFirmwareEnvironmentVariableA (LPCSTR lpName, LPCSTR lpGuid, PVOID pBuffer, DWORD nSize);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetFirmwareEnvironmentVariableW (LPCWSTR lpName, LPCWSTR lpGuid, PVOID pBuffer, DWORD nSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetFirmwareEnvironmentVariableA (LPCSTR lpName, LPCSTR lpGuid, PVOID pValue, DWORD nSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetFirmwareEnvironmentVariableW (LPCWSTR lpName, LPCWSTR lpGuid, PVOID pValue, DWORD nSize);
  __attribute__((dllimport)) HRSRC __attribute__((__stdcall__)) FindResourceA (HMODULE hModule, LPCSTR lpName, LPCSTR lpType);
  __attribute__((dllimport)) HRSRC __attribute__((__stdcall__)) FindResourceW (HMODULE hModule, LPCWSTR lpName, LPCWSTR lpType);
  __attribute__((dllimport)) HRSRC __attribute__((__stdcall__)) FindResourceExA (HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumResourceTypesA (HMODULE hModule, ENUMRESTYPEPROCA lpEnumFunc, LONG_PTR lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumResourceTypesW (HMODULE hModule, ENUMRESTYPEPROCW lpEnumFunc, LONG_PTR lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumResourceNamesA (HMODULE hModule, LPCSTR lpType, ENUMRESNAMEPROCA lpEnumFunc, LONG_PTR lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumResourceNamesW (HMODULE hModule, LPCWSTR lpType, ENUMRESNAMEPROCW lpEnumFunc, LONG_PTR lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumResourceLanguagesA (HMODULE hModule, LPCSTR lpType, LPCSTR lpName, ENUMRESLANGPROCA lpEnumFunc, LONG_PTR lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumResourceLanguagesW (HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, ENUMRESLANGPROCW lpEnumFunc, LONG_PTR lParam);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) BeginUpdateResourceA (LPCSTR pFileName, WINBOOL bDeleteExistingResources);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) BeginUpdateResourceW (LPCWSTR pFileName, WINBOOL bDeleteExistingResources);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UpdateResourceA (HANDLE hUpdate, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UpdateResourceW (HANDLE hUpdate, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EndUpdateResourceA (HANDLE hUpdate, WINBOOL fDiscard);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EndUpdateResourceW (HANDLE hUpdate, WINBOOL fDiscard);
# 1670 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) ATOM __attribute__((__stdcall__)) GlobalAddAtomA (LPCSTR lpString);
  __attribute__((dllimport)) ATOM __attribute__((__stdcall__)) GlobalAddAtomW (LPCWSTR lpString);
  __attribute__((dllimport)) ATOM __attribute__((__stdcall__)) GlobalAddAtomExA (LPCSTR lpString, DWORD Flags);
  __attribute__((dllimport)) ATOM __attribute__((__stdcall__)) GlobalAddAtomExW (LPCWSTR lpString, DWORD Flags);
  __attribute__((dllimport)) ATOM __attribute__((__stdcall__)) GlobalFindAtomA (LPCSTR lpString);
  __attribute__((dllimport)) ATOM __attribute__((__stdcall__)) GlobalFindAtomW (LPCWSTR lpString);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GlobalGetAtomNameA (ATOM nAtom, LPSTR lpBuffer, int nSize);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GlobalGetAtomNameW (ATOM nAtom, LPWSTR lpBuffer, int nSize);
  __attribute__((dllimport)) ATOM __attribute__((__stdcall__)) AddAtomA (LPCSTR lpString);
  __attribute__((dllimport)) ATOM __attribute__((__stdcall__)) AddAtomW (LPCWSTR lpString);
  __attribute__((dllimport)) ATOM __attribute__((__stdcall__)) FindAtomA (LPCSTR lpString);
  __attribute__((dllimport)) ATOM __attribute__((__stdcall__)) FindAtomW (LPCWSTR lpString);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetAtomNameA (ATOM nAtom, LPSTR lpBuffer, int nSize);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetAtomNameW (ATOM nAtom, LPWSTR lpBuffer, int nSize);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetProfileIntA (LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetProfileIntW (LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetProfileStringA (LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetProfileStringW (LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WriteProfileStringA (LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WriteProfileStringW (LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetProfileSectionA (LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetProfileSectionW (LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WriteProfileSectionA (LPCSTR lpAppName, LPCSTR lpString);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WriteProfileSectionW (LPCWSTR lpAppName, LPCWSTR lpString);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetPrivateProfileIntA (LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault, LPCSTR lpFileName);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetPrivateProfileIntW (LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault, LPCWSTR lpFileName);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetPrivateProfileStringA (LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetPrivateProfileStringW (LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WritePrivateProfileStringA (LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString, LPCSTR lpFileName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WritePrivateProfileStringW (LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString, LPCWSTR lpFileName);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetPrivateProfileSectionA (LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetPrivateProfileSectionW (LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WritePrivateProfileSectionA (LPCSTR lpAppName, LPCSTR lpString, LPCSTR lpFileName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WritePrivateProfileSectionW (LPCWSTR lpAppName, LPCWSTR lpString, LPCWSTR lpFileName);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetPrivateProfileSectionNamesA (LPSTR lpszReturnBuffer, DWORD nSize, LPCSTR lpFileName);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetPrivateProfileSectionNamesW (LPWSTR lpszReturnBuffer, DWORD nSize, LPCWSTR lpFileName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetPrivateProfileStructA (LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetPrivateProfileStructW (LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WritePrivateProfileStructA (LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WritePrivateProfileStructW (LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetTempPathA (DWORD nBufferLength, LPSTR lpBuffer);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetTempFileNameA (LPCSTR lpPathName, LPCSTR lpPrefixString, UINT uUnique, LPSTR lpTempFileName);
# 1757 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetSystemWow64DirectoryA (LPSTR lpBuffer, UINT uSize);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetSystemWow64DirectoryW (LPWSTR lpBuffer, UINT uSize);



  __attribute__((dllimport)) BOOLEAN __attribute__((__stdcall__)) Wow64EnableWow64FsRedirection (BOOLEAN Wow64FsEnableRedirection);

  typedef UINT (__attribute__((__stdcall__)) *PGET_SYSTEM_WOW64_DIRECTORY_A) (LPSTR lpBuffer, UINT uSize);
  typedef UINT (__attribute__((__stdcall__)) *PGET_SYSTEM_WOW64_DIRECTORY_W) (LPWSTR lpBuffer, UINT uSize);
# 1779 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetDllDirectoryA (LPCSTR lpPathName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetDllDirectoryW (LPCWSTR lpPathName);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetDllDirectoryA (DWORD nBufferLength, LPSTR lpBuffer);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetDllDirectoryW (DWORD nBufferLength, LPWSTR lpBuffer);
# 1792 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetSearchPathMode (DWORD Flags);



  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreateDirectoryExA (LPCSTR lpTemplateDirectory, LPCSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreateDirectoryExW (LPCWSTR lpTemplateDirectory, LPCWSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
# 1821 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DefineDosDeviceA (DWORD dwFlags, LPCSTR lpDeviceName, LPCSTR lpTargetPath);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) QueryDosDeviceA (LPCSTR lpDeviceName, LPSTR lpTargetPath, DWORD ucchMax);
# 1838 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) ReOpenFile (HANDLE hOriginalFile, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwFlagsAndAttributes);
# 1850 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetCompressedFileSizeA (LPCSTR lpFileName, LPDWORD lpFileSizeHigh);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetCompressedFileSizeW (LPCWSTR lpFileName, LPDWORD lpFileSizeHigh);
# 1868 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  typedef DWORD (__attribute__((__stdcall__)) *LPPROGRESS_ROUTINE) (LARGE_INTEGER TotalFileSize, LARGE_INTEGER TotalBytesTransferred, LARGE_INTEGER StreamSize, LARGE_INTEGER StreamBytesTransferred, DWORD dwStreamNumber, DWORD dwCallbackReason, HANDLE hSourceFile, HANDLE hDestinationFile, LPVOID lpData);

  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CheckNameLegalDOS8Dot3A (LPCSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpaces, PBOOL pbNameLegal);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CheckNameLegalDOS8Dot3W (LPCWSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpaces, PBOOL pbNameLegal);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CopyFileA (LPCSTR lpExistingFileName, LPCSTR lpNewFileName, WINBOOL bFailIfExists);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CopyFileW (LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, WINBOOL bFailIfExists);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CopyFileExA (LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CopyFileExW (LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags);
# 2003 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) MoveFileA (LPCSTR lpExistingFileName, LPCSTR lpNewFileName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) MoveFileW (LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName);





  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) MoveFileExA (LPCSTR lpExistingFileName, LPCSTR lpNewFileName, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) MoveFileExW (LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, DWORD dwFlags);





  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) MoveFileWithProgressA (LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) MoveFileWithProgressW (LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags);
# 2040 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReplaceFileA (LPCSTR lpReplacedFileName, LPCSTR lpReplacementFileName, LPCSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReplaceFileW (LPCWSTR lpReplacedFileName, LPCWSTR lpReplacementFileName, LPCWSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreateHardLinkA (LPCSTR lpFileName, LPCSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreateHardLinkW (LPCWSTR lpFileName, LPCWSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
# 2055 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  typedef enum _STREAM_INFO_LEVELS {
    FindStreamInfoStandard,
    FindStreamInfoMaxInfoLevel
  } STREAM_INFO_LEVELS;

  typedef struct _WIN32_FIND_STREAM_DATA {
    LARGE_INTEGER StreamSize;
    WCHAR cStreamName[260 + 36];
  } WIN32_FIND_STREAM_DATA,*PWIN32_FIND_STREAM_DATA;

  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) FindFirstStreamW (LPCWSTR lpFileName, STREAM_INFO_LEVELS InfoLevel, LPVOID lpFindStreamData, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FindNextStreamW (HANDLE hFindStream, LPVOID lpFindStreamData);
# 2080 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateNamedPipeA (LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetNamedPipeHandleStateA (HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPSTR lpUserName, DWORD nMaxUserNameSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetNamedPipeHandleStateW (HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPWSTR lpUserName, DWORD nMaxUserNameSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CallNamedPipeA (LPCSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CallNamedPipeW (LPCWSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WaitNamedPipeA (LPCSTR lpNamedPipeName, DWORD nTimeOut);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetVolumeLabelA (LPCSTR lpRootPathName, LPCSTR lpVolumeName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetVolumeLabelW (LPCWSTR lpRootPathName, LPCWSTR lpVolumeName);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) SetFileApisToOEM (void);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) SetFileApisToANSI (void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AreFileApisANSI (void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetVolumeInformationA (LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ClearEventLogA (HANDLE hEventLog, LPCSTR lpBackupFileName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ClearEventLogW (HANDLE hEventLog, LPCWSTR lpBackupFileName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) BackupEventLogA (HANDLE hEventLog, LPCSTR lpBackupFileName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) BackupEventLogW (HANDLE hEventLog, LPCWSTR lpBackupFileName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CloseEventLog (HANDLE hEventLog);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DeregisterEventSource (HANDLE hEventLog);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) NotifyChangeEventLog (HANDLE hEventLog, HANDLE hEvent);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetNumberOfEventLogRecords (HANDLE hEventLog, PDWORD NumberOfRecords);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetOldestEventLogRecord (HANDLE hEventLog, PDWORD OldestRecord);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenEventLogA (LPCSTR lpUNCServerName, LPCSTR lpSourceName);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenEventLogW (LPCWSTR lpUNCServerName, LPCWSTR lpSourceName);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) RegisterEventSourceA (LPCSTR lpUNCServerName, LPCSTR lpSourceName);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) RegisterEventSourceW (LPCWSTR lpUNCServerName, LPCWSTR lpSourceName);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenBackupEventLogA (LPCSTR lpUNCServerName, LPCSTR lpFileName);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenBackupEventLogW (LPCWSTR lpUNCServerName, LPCWSTR lpFileName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReadEventLogA (HANDLE hEventLog, DWORD dwReadFlags, DWORD dwRecordOffset, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD *pnBytesRead, DWORD *pnMinNumberOfBytesNeeded);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReadEventLogW (HANDLE hEventLog, DWORD dwReadFlags, DWORD dwRecordOffset, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD *pnBytesRead, DWORD *pnMinNumberOfBytesNeeded);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReportEventA (HANDLE hEventLog, WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCSTR *lpStrings, LPVOID lpRawData);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReportEventW (HANDLE hEventLog, WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCWSTR *lpStrings, LPVOID lpRawData);
# 2135 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  typedef struct _EVENTLOG_FULL_INFORMATION {
    DWORD dwFull;
  } EVENTLOG_FULL_INFORMATION,*LPEVENTLOG_FULL_INFORMATION;

  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetEventLogInformation (HANDLE hEventLog, DWORD dwInfoLevel, LPVOID lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
# 2167 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AccessCheckAndAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, LPSTR ObjectTypeName, LPSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AccessCheckByTypeAndAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AccessCheckByTypeResultListAndAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AccessCheckByTypeResultListAndAuditAlarmByHandleA (LPCSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ObjectOpenAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, LPSTR ObjectTypeName, LPSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, DWORD GrantedAccess, PPRIVILEGE_SET Privileges, WINBOOL ObjectCreation, WINBOOL AccessGranted, LPBOOL GenerateOnClose);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ObjectPrivilegeAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, DWORD DesiredAccess, PPRIVILEGE_SET Privileges, WINBOOL AccessGranted);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ObjectCloseAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, WINBOOL GenerateOnClose);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ObjectDeleteAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, WINBOOL GenerateOnClose);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PrivilegedServiceAuditAlarmA (LPCSTR SubsystemName, LPCSTR ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, WINBOOL AccessGranted);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetFileSecurityA (LPCSTR lpFileName, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetFileSecurityA (LPCSTR lpFileName, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReadDirectoryChangesW (HANDLE hDirectory, LPVOID lpBuffer, DWORD nBufferLength, WINBOOL bWatchSubtree, DWORD dwNotifyFilter, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsBadReadPtr (const void *lp, UINT_PTR ucb);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsBadWritePtr (LPVOID lp, UINT_PTR ucb);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsBadHugeReadPtr (const void *lp, UINT_PTR ucb);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsBadHugeWritePtr (LPVOID lp, UINT_PTR ucb);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsBadCodePtr (FARPROC lpfn);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsBadStringPtrA (LPCSTR lpsz, UINT_PTR ucchMax);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsBadStringPtrW (LPCWSTR lpsz, UINT_PTR ucchMax);






  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LookupAccountSidA (LPCSTR lpSystemName, PSID Sid, LPSTR Name, LPDWORD cchName, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LookupAccountSidW (LPCWSTR lpSystemName, PSID Sid, LPWSTR Name, LPDWORD cchName, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LookupAccountNameA (LPCSTR lpSystemName, LPCSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LookupAccountNameW (LPCWSTR lpSystemName, LPCWSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
# 2235 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LookupPrivilegeValueA (LPCSTR lpSystemName, LPCSTR lpName, PLUID lpLuid);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LookupPrivilegeValueW (LPCWSTR lpSystemName, LPCWSTR lpName, PLUID lpLuid);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LookupPrivilegeNameA (LPCSTR lpSystemName, PLUID lpLuid, LPSTR lpName, LPDWORD cchName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LookupPrivilegeNameW (LPCWSTR lpSystemName, PLUID lpLuid, LPWSTR lpName, LPDWORD cchName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LookupPrivilegeDisplayNameA (LPCSTR lpSystemName, LPCSTR lpName, LPSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LookupPrivilegeDisplayNameW (LPCWSTR lpSystemName, LPCWSTR lpName, LPWSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) BuildCommDCBA (LPCSTR lpDef, LPDCB lpDCB);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) BuildCommDCBW (LPCWSTR lpDef, LPDCB lpDCB);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) BuildCommDCBAndTimeoutsA (LPCSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) BuildCommDCBAndTimeoutsW (LPCWSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CommConfigDialogA (LPCSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CommConfigDialogW (LPCWSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetDefaultCommConfigA (LPCSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetDefaultCommConfigW (LPCWSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetDefaultCommConfigA (LPCSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetDefaultCommConfigW (LPCWSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize);
# 2263 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetComputerNameA (LPSTR lpBuffer, LPDWORD nSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetComputerNameW (LPWSTR lpBuffer, LPDWORD nSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetComputerNameA (LPCSTR lpComputerName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetComputerNameW (LPCWSTR lpComputerName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetComputerNameExA (COMPUTER_NAME_FORMAT NameType, LPCTSTR lpBuffer);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DnsHostnameToComputerNameA (LPCSTR Hostname, LPSTR ComputerName, LPDWORD nSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DnsHostnameToComputerNameW (LPCWSTR Hostname, LPWSTR ComputerName, LPDWORD nSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetUserNameA (LPSTR lpBuffer, LPDWORD pcbBuffer);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetUserNameW (LPWSTR lpBuffer, LPDWORD pcbBuffer);
# 2298 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LogonUserA (LPCSTR lpszUsername, LPCSTR lpszDomain, LPCSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LogonUserW (LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LogonUserExA (LPCSTR lpszUsername, LPCSTR lpszDomain, LPCSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken, PSID *ppLogonSid, PVOID *ppProfileBuffer, LPDWORD pdwProfileLength, PQUOTA_LIMITS pQuotaLimits);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LogonUserExW (LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken, PSID *ppLogonSid, PVOID *ppProfileBuffer, LPDWORD pdwProfileLength, PQUOTA_LIMITS pQuotaLimits);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreateProcessAsUserA (HANDLE hToken, LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
# 2315 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreateProcessWithLogonW (LPCWSTR lpUsername, LPCWSTR lpDomain, LPCWSTR lpPassword, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreateProcessWithTokenW (HANDLE hToken, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsTokenUntrusted (HANDLE TokenHandle);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) RegisterWaitForSingleObject (PHANDLE phNewWaitObject, HANDLE hObject, WAITORTIMERCALLBACK Callback, PVOID Context, ULONG dwMilliseconds, ULONG dwFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UnregisterWait (HANDLE WaitHandle);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) BindIoCompletionCallback (HANDLE FileHandle, LPOVERLAPPED_COMPLETION_ROUTINE Function, ULONG Flags);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) SetTimerQueueTimer (HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, WINBOOL PreferIo);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CancelTimerQueueTimer (HANDLE TimerQueue, HANDLE Timer);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DeleteTimerQueue (HANDLE TimerQueue);




  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreatePrivateNamespaceA (LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes, LPVOID lpBoundaryDescriptor, LPCSTR lpAliasPrefix);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenPrivateNamespaceA (LPVOID lpBoundaryDescriptor, LPCSTR lpAliasPrefix);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateBoundaryDescriptorA (LPCSTR Name, ULONG Flags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AddIntegrityLabelToBoundaryDescriptor (HANDLE *BoundaryDescriptor, PSID IntegrityLabel);
# 2352 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  typedef struct tagHW_PROFILE_INFOA {
    DWORD dwDockInfo;
    CHAR szHwProfileGuid[39];
    CHAR szHwProfileName[80];
  } HW_PROFILE_INFOA,*LPHW_PROFILE_INFOA;

  typedef struct tagHW_PROFILE_INFOW {
    DWORD dwDockInfo;
    WCHAR szHwProfileGuid[39];
    WCHAR szHwProfileName[80];
  } HW_PROFILE_INFOW,*LPHW_PROFILE_INFOW;

  typedef HW_PROFILE_INFOA HW_PROFILE_INFO;
  typedef LPHW_PROFILE_INFOA LPHW_PROFILE_INFO;

  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCurrentHwProfileA (LPHW_PROFILE_INFOA lpHwProfileInfo);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCurrentHwProfileW (LPHW_PROFILE_INFOW lpHwProfileInfo);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) VerifyVersionInfoA (LPOSVERSIONINFOEXA lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) VerifyVersionInfoW (LPOSVERSIONINFOEXW lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask);






# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/winerror.h" 1 3 4
# 3567 "/usr/i686-w64-mingw32/sys-root/mingw/include/winerror.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/fltwinerror.h" 1 3 4
# 3568 "/usr/i686-w64-mingw32/sys-root/mingw/include/winerror.h" 2 3 4
# 2378 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/timezoneapi.h" 1 3 4
# 21 "/usr/i686-w64-mingw32/sys-root/mingw/include/timezoneapi.h" 3 4
  typedef struct _TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[32];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[32];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
  } TIME_ZONE_INFORMATION,*PTIME_ZONE_INFORMATION,*LPTIME_ZONE_INFORMATION;

  typedef struct _TIME_DYNAMIC_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[32];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[32];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
    WCHAR TimeZoneKeyName[128];
    BOOLEAN DynamicDaylightTimeDisabled;
  } DYNAMIC_TIME_ZONE_INFORMATION,*PDYNAMIC_TIME_ZONE_INFORMATION;

  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SystemTimeToTzSpecificLocalTime (const TIME_ZONE_INFORMATION *lpTimeZoneInformation, const SYSTEMTIME *lpUniversalTime, LPSYSTEMTIME lpLocalTime);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) TzSpecificLocalTimeToSystemTime (const TIME_ZONE_INFORMATION *lpTimeZoneInformation, const SYSTEMTIME *lpLocalTime, LPSYSTEMTIME lpUniversalTime);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FileTimeToSystemTime (const FILETIME *lpFileTime, LPSYSTEMTIME lpSystemTime);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SystemTimeToFileTime (const SYSTEMTIME *lpSystemTime, LPFILETIME lpFileTime);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetTimeZoneInformation (LPTIME_ZONE_INFORMATION lpTimeZoneInformation);
# 64 "/usr/i686-w64-mingw32/sys-root/mingw/include/timezoneapi.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetTimeZoneInformation (const TIME_ZONE_INFORMATION *lpTimeZoneInformation);
# 2379 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 2 3 4
# 2403 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  typedef struct _SYSTEM_POWER_STATUS {
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE Reserved1;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
  } SYSTEM_POWER_STATUS,*LPSYSTEM_POWER_STATUS;

  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetSystemPowerStatus (LPSYSTEM_POWER_STATUS lpSystemPowerStatus);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetSystemPowerState (WINBOOL fSuspend, WINBOOL fForce);
# 2427 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AllocateUserPhysicalPages (HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FreeUserPhysicalPages (HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) MapUserPhysicalPages (PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR PageArray);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) MapUserPhysicalPagesScatter (PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR PageArray);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateJobObjectA (LPSECURITY_ATTRIBUTES lpJobAttributes, LPCSTR lpName);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateJobObjectW (LPSECURITY_ATTRIBUTES lpJobAttributes, LPCWSTR lpName);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenJobObjectA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) OpenJobObjectW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AssignProcessToJobObject (HANDLE hJob, HANDLE hProcess);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) TerminateJobObject (HANDLE hJob, UINT uExitCode);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) QueryInformationJobObject (HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength, LPDWORD lpReturnLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetInformationJobObject (HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreateJobSet (ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) FindFirstVolumeA (LPSTR lpszVolumeName, DWORD cchBufferLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FindNextVolumeA (HANDLE hFindVolume, LPSTR lpszVolumeName, DWORD cchBufferLength);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) FindFirstVolumeMountPointA (LPCSTR lpszRootPathName, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) FindFirstVolumeMountPointW (LPCWSTR lpszRootPathName, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FindNextVolumeMountPointA (HANDLE hFindVolumeMountPoint, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FindNextVolumeMountPointW (HANDLE hFindVolumeMountPoint, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FindVolumeMountPointClose (HANDLE hFindVolumeMountPoint);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetVolumeMountPointA (LPCSTR lpszVolumeMountPoint, LPCSTR lpszVolumeName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetVolumeMountPointW (LPCWSTR lpszVolumeMountPoint, LPCWSTR lpszVolumeName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DeleteVolumeMountPointA (LPCSTR lpszVolumeMountPoint);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetVolumeNameForVolumeMountPointA (LPCSTR lpszVolumeMountPoint, LPSTR lpszVolumeName, DWORD cchBufferLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetVolumePathNameA (LPCSTR lpszFileName, LPSTR lpszVolumePathName, DWORD cchBufferLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetVolumePathNamesForVolumeNameA (LPCSTR lpszVolumeName, LPCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength);
# 2481 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  typedef struct tagACTCTXA {
    ULONG cbSize;
    DWORD dwFlags;
    LPCSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCSTR lpAssemblyDirectory;
    LPCSTR lpResourceName;
    LPCSTR lpApplicationName;
    HMODULE hModule;
  } ACTCTXA,*PACTCTXA;

  typedef struct tagACTCTXW {
    ULONG cbSize;
    DWORD dwFlags;
    LPCWSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCWSTR lpAssemblyDirectory;
    LPCWSTR lpResourceName;
    LPCWSTR lpApplicationName;
    HMODULE hModule;
  } ACTCTXW,*PACTCTXW;

  typedef ACTCTXA ACTCTX;
  typedef PACTCTXA PACTCTX;

  typedef const ACTCTXA *PCACTCTXA;
  typedef const ACTCTXW *PCACTCTXW;

  typedef PCACTCTXA PCACTCTX;

  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateActCtxA (PCACTCTXA pActCtx);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateActCtxW (PCACTCTXW pActCtx);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) AddRefActCtx (HANDLE hActCtx);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) ReleaseActCtx (HANDLE hActCtx);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ZombifyActCtx (HANDLE hActCtx);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ActivateActCtx (HANDLE hActCtx, ULONG_PTR *lpCookie);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DeactivateActCtx (DWORD dwFlags, ULONG_PTR ulCookie);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCurrentActCtx (HANDLE *lphActCtx);




  typedef struct tagACTCTX_SECTION_KEYED_DATA_2600 {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
  } ACTCTX_SECTION_KEYED_DATA_2600,*PACTCTX_SECTION_KEYED_DATA_2600;

  typedef const ACTCTX_SECTION_KEYED_DATA_2600 *PCACTCTX_SECTION_KEYED_DATA_2600;

  typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
    PVOID lpInformation;
    PVOID lpSectionBase;
    ULONG ulSectionLength;
    PVOID lpSectionGlobalDataBase;
    ULONG ulSectionGlobalDataLength;
  } ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA,*PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

  typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

  typedef struct tagACTCTX_SECTION_KEYED_DATA {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
    ULONG ulFlags;
    ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
  } ACTCTX_SECTION_KEYED_DATA,*PACTCTX_SECTION_KEYED_DATA;

  typedef const ACTCTX_SECTION_KEYED_DATA *PCACTCTX_SECTION_KEYED_DATA;





  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FindActCtxSectionStringA (DWORD dwFlags, const GUID *lpExtensionGuid, ULONG ulSectionId, LPCSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FindActCtxSectionStringW (DWORD dwFlags, const GUID *lpExtensionGuid, ULONG ulSectionId, LPCWSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FindActCtxSectionGuid (DWORD dwFlags, const GUID *lpExtensionGuid, ULONG ulSectionId, const GUID *lpGuidToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);




  typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
    HANDLE hActCtx;
    DWORD dwFlags;
  } ACTIVATION_CONTEXT_BASIC_INFORMATION,*PACTIVATION_CONTEXT_BASIC_INFORMATION;

  typedef const struct _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;
# 2593 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) QueryActCtxW (DWORD dwFlags, HANDLE hActCtx, PVOID pvSubInstance, ULONG ulInfoClass, PVOID pvBuffer, SIZE_T cbBuffer, SIZE_T *pcbWrittenOrRequired);

  typedef WINBOOL (__attribute__((__stdcall__)) *PQUERYACTCTXW_FUNC) (DWORD dwFlags, HANDLE hActCtx, PVOID pvSubInstance, ULONG ulInfoClass, PVOID pvBuffer, SIZE_T cbBuffer, SIZE_T *pcbWrittenOrRequired);

  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) WTSGetActiveConsoleSessionId (void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetNumaProcessorNode (UCHAR Processor, PUCHAR NodeNumber);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetNumaNodeProcessorMask (UCHAR Node, PULONGLONG ProcessorMask);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetNumaAvailableMemoryNode (UCHAR Node, PULONGLONG AvailableBytes);
# 2615 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  typedef DWORD (__attribute__((__stdcall__)) *APPLICATION_RECOVERY_CALLBACK) (PVOID pvParameter);
# 2892 "/usr/i686-w64-mingw32/sys-root/mingw/include/winbase.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CopyContext (PCONTEXT Destination, DWORD ContextFlags, PCONTEXT Source);



  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) InitializeContext (PVOID Buffer, DWORD ContextFlags, PCONTEXT *Context, PDWORD ContextLength);

  __attribute__((dllimport)) DWORD64 __attribute__((__stdcall__)) GetEnabledXStateFeatures (void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetXStateFeaturesMask (PCONTEXT Context, PDWORD64 FeatureMask);
  __attribute__((dllimport)) PVOID __attribute__((__stdcall__)) LocateXStateFeature (PCONTEXT Context, DWORD FeatureId, PDWORD Length);





  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetXStateFeaturesMask (PCONTEXT Context, DWORD64 FeatureMask);
# 71 "/usr/i686-w64-mingw32/sys-root/mingw/include/windows.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 1 3 4
# 224 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  typedef struct _DRAWPATRECT {
    POINT ptPosition;
    POINT ptSize;
    WORD wStyle;
    WORD wPattern;
  } DRAWPATRECT,*PDRAWPATRECT;
# 335 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  typedef struct _PSINJECTDATA {
    DWORD DataBytes;
    WORD InjectionPoint;
    WORD PageNumber;
  } PSINJECTDATA,*PPSINJECTDATA;
# 391 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  typedef struct _PSFEATURE_OUTPUT {
    WINBOOL bPageIndependent;
    WINBOOL bSetPageDevice;
  } PSFEATURE_OUTPUT,*PPSFEATURE_OUTPUT;

  typedef struct _PSFEATURE_CUSTPAPER {
    LONG lOrientation;
    LONG lWidth;
    LONG lHeight;
    LONG lWidthOffset;
    LONG lHeightOffset;
  } PSFEATURE_CUSTPAPER,*PPSFEATURE_CUSTPAPER;
# 450 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  typedef struct tagXFORM {
    FLOAT eM11;
    FLOAT eM12;
    FLOAT eM21;
    FLOAT eM22;
    FLOAT eDx;
    FLOAT eDy;
  } XFORM,*PXFORM,*LPXFORM;

  typedef struct tagBITMAP {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    LPVOID bmBits;
  } BITMAP,*PBITMAP,*NPBITMAP,*LPBITMAP;

# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/pshpack1.h" 1 3 4






#pragma pack(push,1)
# 470 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 2 3 4
  typedef struct tagRGBTRIPLE {
    BYTE rgbtBlue;
    BYTE rgbtGreen;
    BYTE rgbtRed;
  } RGBTRIPLE;
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/poppack.h" 1 3 4






#pragma pack(pop)
# 476 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 2 3 4

  typedef struct tagRGBQUAD {
    BYTE rgbBlue;
    BYTE rgbGreen;
    BYTE rgbRed;
    BYTE rgbReserved;
  } RGBQUAD;



  typedef RGBQUAD *LPRGBQUAD;
# 499 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  typedef LONG LCSCSTYPE;


  typedef LONG LCSGAMUTMATCH;
# 526 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  typedef long FXPT16DOT16,*LPFXPT16DOT16;
  typedef long FXPT2DOT30,*LPFXPT2DOT30;

  typedef struct tagCIEXYZ {
    FXPT2DOT30 ciexyzX;
    FXPT2DOT30 ciexyzY;
    FXPT2DOT30 ciexyzZ;
  } CIEXYZ;


  typedef CIEXYZ *LPCIEXYZ;


  typedef struct tagICEXYZTRIPLE {
    CIEXYZ ciexyzRed;
    CIEXYZ ciexyzGreen;
    CIEXYZ ciexyzBlue;
  } CIEXYZTRIPLE;


  typedef CIEXYZTRIPLE *LPCIEXYZTRIPLE;



  typedef struct tagLOGCOLORSPACEA {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR lcsFilename[260];
  } LOGCOLORSPACEA,*LPLOGCOLORSPACEA;

  typedef struct tagLOGCOLORSPACEW {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR lcsFilename[260];
  } LOGCOLORSPACEW,*LPLOGCOLORSPACEW;

  typedef LOGCOLORSPACEA LOGCOLORSPACE;
  typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE;



  typedef struct tagBITMAPCOREHEADER {
    DWORD bcSize;
    WORD bcWidth;
    WORD bcHeight;
    WORD bcPlanes;
    WORD bcBitCount;
  } BITMAPCOREHEADER,*LPBITMAPCOREHEADER,*PBITMAPCOREHEADER;



  typedef struct tagBITMAPINFOHEADER {
    DWORD biSize;
    LONG biWidth;
    LONG biHeight;
    WORD biPlanes;
    WORD biBitCount;
    DWORD biCompression;
    DWORD biSizeImage;
    LONG biXPelsPerMeter;
    LONG biYPelsPerMeter;
    DWORD biClrUsed;
    DWORD biClrImportant;
  } BITMAPINFOHEADER,*LPBITMAPINFOHEADER,*PBITMAPINFOHEADER;



  typedef struct {
    DWORD bV4Size;
    LONG bV4Width;
    LONG bV4Height;
    WORD bV4Planes;
    WORD bV4BitCount;
    DWORD bV4V4Compression;
    DWORD bV4SizeImage;
    LONG bV4XPelsPerMeter;
    LONG bV4YPelsPerMeter;
    DWORD bV4ClrUsed;
    DWORD bV4ClrImportant;
    DWORD bV4RedMask;
    DWORD bV4GreenMask;
    DWORD bV4BlueMask;
    DWORD bV4AlphaMask;
    DWORD bV4CSType;
    CIEXYZTRIPLE bV4Endpoints;
    DWORD bV4GammaRed;
    DWORD bV4GammaGreen;
    DWORD bV4GammaBlue;
  } BITMAPV4HEADER,*LPBITMAPV4HEADER,*PBITMAPV4HEADER;

  typedef struct {
    DWORD bV5Size;
    LONG bV5Width;
    LONG bV5Height;
    WORD bV5Planes;
    WORD bV5BitCount;
    DWORD bV5Compression;
    DWORD bV5SizeImage;
    LONG bV5XPelsPerMeter;
    LONG bV5YPelsPerMeter;
    DWORD bV5ClrUsed;
    DWORD bV5ClrImportant;
    DWORD bV5RedMask;
    DWORD bV5GreenMask;
    DWORD bV5BlueMask;
    DWORD bV5AlphaMask;
    DWORD bV5CSType;
    CIEXYZTRIPLE bV5Endpoints;
    DWORD bV5GammaRed;
    DWORD bV5GammaGreen;
    DWORD bV5GammaBlue;
    DWORD bV5Intent;
    DWORD bV5ProfileData;
    DWORD bV5ProfileSize;
    DWORD bV5Reserved;
  } BITMAPV5HEADER,*LPBITMAPV5HEADER,*PBITMAPV5HEADER;
# 669 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER bmiHeader;
    RGBQUAD bmiColors[1];
  } BITMAPINFO,*LPBITMAPINFO,*PBITMAPINFO;



  typedef struct tagBITMAPCOREINFO {
    BITMAPCOREHEADER bmciHeader;
    RGBTRIPLE bmciColors[1];
  } BITMAPCOREINFO,*LPBITMAPCOREINFO,*PBITMAPCOREINFO;

# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/pshpack2.h" 1 3 4






#pragma pack(push,2)
# 682 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 2 3 4
  typedef struct tagBITMAPFILEHEADER {
    WORD bfType;
    DWORD bfSize;
    WORD bfReserved1;
    WORD bfReserved2;
    DWORD bfOffBits;
  } BITMAPFILEHEADER,*LPBITMAPFILEHEADER,*PBITMAPFILEHEADER;
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/poppack.h" 1 3 4






#pragma pack(pop)
# 690 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 2 3 4







  typedef struct tagFONTSIGNATURE {
    DWORD fsUsb[4];
    DWORD fsCsb[2];
  } FONTSIGNATURE,*PFONTSIGNATURE,*LPFONTSIGNATURE;

  typedef struct tagCHARSETINFO {
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
  } CHARSETINFO,*PCHARSETINFO,*NPCHARSETINFO,*LPCHARSETINFO;
# 715 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  typedef struct tagLOCALESIGNATURE {
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
  } LOCALESIGNATURE,*PLOCALESIGNATURE,*LPLOCALESIGNATURE;





  typedef struct tagHANDLETABLE {
    HGDIOBJ objectHandle[1];
  } HANDLETABLE,*PHANDLETABLE,*LPHANDLETABLE;

  typedef struct tagMETARECORD {
    DWORD rdSize;
    WORD rdFunction;
    WORD rdParm[1];
  } METARECORD;


  typedef struct tagMETARECORD *PMETARECORD;


  typedef struct tagMETARECORD *LPMETARECORD;

  typedef struct tagMETAFILEPICT {
    LONG mm;
    LONG xExt;
    LONG yExt;
    HMETAFILE hMF;
  } METAFILEPICT,*LPMETAFILEPICT;



# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/pshpack2.h" 1 3 4






#pragma pack(push,2)
# 751 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 2 3 4
  typedef struct tagMETAHEADER {
    WORD mtType;
    WORD mtHeaderSize;
    WORD mtVersion;
    DWORD mtSize;
    WORD mtNoObjects;
    DWORD mtMaxRecord;
    WORD mtNoParameters;
  } METAHEADER;
  typedef struct tagMETAHEADER *PMETAHEADER;
  typedef struct tagMETAHEADER *LPMETAHEADER;

# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/poppack.h" 1 3 4






#pragma pack(pop)
# 764 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 2 3 4



  typedef struct tagENHMETARECORD {
    DWORD iType;
    DWORD nSize;
    DWORD dParm[1];
  } ENHMETARECORD,*PENHMETARECORD,*LPENHMETARECORD;

  typedef struct tagENHMETAHEADER {
    DWORD iType;
    DWORD nSize;
    RECTL rclBounds;
    RECTL rclFrame;
    DWORD dSignature;
    DWORD nVersion;
    DWORD nBytes;
    DWORD nRecords;
    WORD nHandles;
    WORD sReserved;
    DWORD nDescription;
    DWORD offDescription;
    DWORD nPalEntries;
    SIZEL szlDevice;
    SIZEL szlMillimeters;
    DWORD cbPixelFormat;
    DWORD offPixelFormat;
    DWORD bOpenGL;
    SIZEL szlMicrometers;
  } ENHMETAHEADER,*PENHMETAHEADER,*LPENHMETAHEADER;
# 807 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  typedef BYTE BCHAR;






# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/pshpack4.h" 1 3 4






#pragma pack(push,4)
# 815 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 2 3 4

  typedef struct tagTEXTMETRICA {
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
  } TEXTMETRICA,*PTEXTMETRICA,*NPTEXTMETRICA,*LPTEXTMETRICA;

  typedef struct tagTEXTMETRICW {
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
  } TEXTMETRICW,*PTEXTMETRICW,*NPTEXTMETRICW,*LPTEXTMETRICW;

  typedef TEXTMETRICA TEXTMETRIC;
  typedef PTEXTMETRICA PTEXTMETRIC;
  typedef NPTEXTMETRICA NPTEXTMETRIC;
  typedef LPTEXTMETRICA LPTEXTMETRIC;
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/poppack.h" 1 3 4






#pragma pack(pop)
# 867 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 2 3 4
# 882 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/pshpack4.h" 1 3 4






#pragma pack(push,4)
# 883 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 2 3 4
  typedef struct tagNEWTEXTMETRICA {
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
  } NEWTEXTMETRICA,*PNEWTEXTMETRICA,*NPNEWTEXTMETRICA,*LPNEWTEXTMETRICA;

  typedef struct tagNEWTEXTMETRICW {
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
  } NEWTEXTMETRICW,*PNEWTEXTMETRICW,*NPNEWTEXTMETRICW,*LPNEWTEXTMETRICW;

  typedef NEWTEXTMETRICA NEWTEXTMETRIC;
  typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
  typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
  typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;

# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/poppack.h" 1 3 4






#pragma pack(pop)
# 943 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 2 3 4

  typedef struct tagNEWTEXTMETRICEXA {
    NEWTEXTMETRICA ntmTm;
    FONTSIGNATURE ntmFontSig;
  } NEWTEXTMETRICEXA;

  typedef struct tagNEWTEXTMETRICEXW {
    NEWTEXTMETRICW ntmTm;
    FONTSIGNATURE ntmFontSig;
  } NEWTEXTMETRICEXW;

  typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;




  typedef struct tagPELARRAY {
    LONG paXCount;
    LONG paYCount;
    LONG paXExt;
    LONG paYExt;
    BYTE paRGBs;
  } PELARRAY,*PPELARRAY,*NPPELARRAY,*LPPELARRAY;


  typedef struct tagLOGBRUSH {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG_PTR lbHatch;
  } LOGBRUSH,*PLOGBRUSH,*NPLOGBRUSH,*LPLOGBRUSH;

  typedef struct tagLOGBRUSH32 {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG lbHatch;
  } LOGBRUSH32,*PLOGBRUSH32,*NPLOGBRUSH32,*LPLOGBRUSH32;


  typedef LOGBRUSH PATTERN;
  typedef PATTERN *PPATTERN;
  typedef PATTERN *NPPATTERN;
  typedef PATTERN *LPPATTERN;



  typedef struct tagLOGPEN {
    UINT lopnStyle;
    POINT lopnWidth;
    COLORREF lopnColor;
  } LOGPEN,*PLOGPEN,*NPLOGPEN,*LPLOGPEN;



  typedef struct tagEXTLOGPEN {
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG_PTR elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
  } EXTLOGPEN,*PEXTLOGPEN,*NPEXTLOGPEN,*LPEXTLOGPEN;



  typedef struct tagEXTLOGPEN32 {
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
  } EXTLOGPEN32, *PEXTLOGPEN32, *NPEXTLOGPEN32, *LPEXTLOGPEN32;



  typedef struct tagPALETTEENTRY {
    BYTE peRed;
    BYTE peGreen;
    BYTE peBlue;
    BYTE peFlags;
  } PALETTEENTRY,*PPALETTEENTRY,*LPPALETTEENTRY;




  typedef struct tagLOGPALETTE {
    WORD palVersion;
    WORD palNumEntries;
    PALETTEENTRY palPalEntry[1];
  } LOGPALETTE,*PLOGPALETTE,*NPLOGPALETTE,*LPLOGPALETTE;






  typedef struct tagLOGFONTA {
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    CHAR lfFaceName[32];
  } LOGFONTA,*PLOGFONTA,*NPLOGFONTA,*LPLOGFONTA;

  typedef struct tagLOGFONTW {
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    WCHAR lfFaceName[32];
  } LOGFONTW,*PLOGFONTW,*NPLOGFONTW,*LPLOGFONTW;

  typedef LOGFONTA LOGFONT;
  typedef PLOGFONTA PLOGFONT;
  typedef NPLOGFONTA NPLOGFONT;
  typedef LPLOGFONTA LPLOGFONT;





  typedef struct tagENUMLOGFONTA {
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
  } ENUMLOGFONTA,*LPENUMLOGFONTA;

  typedef struct tagENUMLOGFONTW {
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
  } ENUMLOGFONTW,*LPENUMLOGFONTW;

  typedef ENUMLOGFONTA ENUMLOGFONT;
  typedef LPENUMLOGFONTA LPENUMLOGFONT;

  typedef struct tagENUMLOGFONTEXA {
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    BYTE elfScript[32];
  } ENUMLOGFONTEXA,*LPENUMLOGFONTEXA;

  typedef struct tagENUMLOGFONTEXW {
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    WCHAR elfScript[32];
  } ENUMLOGFONTEXW,*LPENUMLOGFONTEXW;

  typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
  typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX;
# 1235 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  typedef struct tagPANOSE {
    BYTE bFamilyType;
    BYTE bSerifStyle;
    BYTE bWeight;
    BYTE bProportion;
    BYTE bContrast;
    BYTE bStrokeVariation;
    BYTE bArmStyle;
    BYTE bLetterform;
    BYTE bMidline;
    BYTE bXHeight;
  } PANOSE,*LPPANOSE;
# 1356 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  typedef struct tagEXTLOGFONTA {
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture;
    PANOSE elfPanose;
  } EXTLOGFONTA,*PEXTLOGFONTA,*NPEXTLOGFONTA,*LPEXTLOGFONTA;

  typedef struct tagEXTLOGFONTW {
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture;
    PANOSE elfPanose;
  } EXTLOGFONTW,*PEXTLOGFONTW,*NPEXTLOGFONTW,*LPEXTLOGFONTW;

  typedef EXTLOGFONTA EXTLOGFONT;
  typedef PEXTLOGFONTA PEXTLOGFONT;
  typedef NPEXTLOGFONTA NPEXTLOGFONT;
  typedef LPEXTLOGFONTA LPEXTLOGFONT;
# 1669 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  typedef struct _devicemodeA {
    BYTE dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    __extension__ union {
      __extension__ struct {
 short dmOrientation;
 short dmPaperSize;
 short dmPaperLength;
 short dmPaperWidth;
 short dmScale;
 short dmCopies;
 short dmDefaultSource;
 short dmPrintQuality;
      };
      struct {
 POINTL dmPosition;
 DWORD dmDisplayOrientation;
 DWORD dmDisplayFixedOutput;
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    __extension__ union {
      DWORD dmDisplayFlags;
      DWORD dmNup;
    };
    DWORD dmDisplayFrequency;
    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;
    DWORD dmPanningWidth;
    DWORD dmPanningHeight;
  } DEVMODEA,*PDEVMODEA,*NPDEVMODEA,*LPDEVMODEA;

  typedef struct _devicemodeW {
    WCHAR dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    __extension__ union {
      __extension__ struct {
 short dmOrientation;
 short dmPaperSize;
 short dmPaperLength;
 short dmPaperWidth;
 short dmScale;
 short dmCopies;
 short dmDefaultSource;
 short dmPrintQuality;
      };
      __extension__ struct {
 POINTL dmPosition;
 DWORD dmDisplayOrientation;
 DWORD dmDisplayFixedOutput;
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    __extension__ union {
      DWORD dmDisplayFlags;
      DWORD dmNup;
    };
    DWORD dmDisplayFrequency;
    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;
    DWORD dmPanningWidth;
    DWORD dmPanningHeight;
  } DEVMODEW,*PDEVMODEW,*NPDEVMODEW,*LPDEVMODEW;

  typedef DEVMODEA DEVMODE;
  typedef PDEVMODEA PDEVMODE;
  typedef NPDEVMODEA NPDEVMODE;
  typedef LPDEVMODEA LPDEVMODE;
# 2021 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  typedef struct _DISPLAY_DEVICEA {
    DWORD cb;
    CHAR DeviceName[32];
    CHAR DeviceString[128];
    DWORD StateFlags;
    CHAR DeviceID[128];
    CHAR DeviceKey[128];
  } DISPLAY_DEVICEA,*PDISPLAY_DEVICEA,*LPDISPLAY_DEVICEA;

  typedef struct _DISPLAY_DEVICEW {
    DWORD cb;
    WCHAR DeviceName[32];
    WCHAR DeviceString[128];
    DWORD StateFlags;
    WCHAR DeviceID[128];
    WCHAR DeviceKey[128];
  } DISPLAY_DEVICEW,*PDISPLAY_DEVICEW,*LPDISPLAY_DEVICEW;

  typedef DISPLAY_DEVICEA DISPLAY_DEVICE;
  typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE;
  typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;
# 2315 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  typedef struct _RGNDATAHEADER {
    DWORD dwSize;
    DWORD iType;
    DWORD nCount;
    DWORD nRgnSize;
    RECT rcBound;
  } RGNDATAHEADER,*PRGNDATAHEADER;

  typedef struct _RGNDATA {
    RGNDATAHEADER rdh;
    char Buffer[1];
  } RGNDATA,*PRGNDATA,*NPRGNDATA,*LPRGNDATA;





  typedef struct _ABC {
    int abcA;
    UINT abcB;
    int abcC;
  } ABC,*PABC,*NPABC,*LPABC;

  typedef struct _ABCFLOAT {
    FLOAT abcfA;
    FLOAT abcfB;
    FLOAT abcfC;
  } ABCFLOAT,*PABCFLOAT,*NPABCFLOAT,*LPABCFLOAT;





  typedef struct _OUTLINETEXTMETRICA {
    UINT otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
    int otmsCharSlopeRise;
    int otmsCharSlopeRun;
    int otmItalicAngle;
    UINT otmEMSquare;
    int otmAscent;
    int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
    int otmMacAscent;
    int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
    int otmsStrikeoutPosition;
    int otmsUnderscoreSize;
    int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
  } OUTLINETEXTMETRICA,*POUTLINETEXTMETRICA,*NPOUTLINETEXTMETRICA,*LPOUTLINETEXTMETRICA;

  typedef struct _OUTLINETEXTMETRICW {
    UINT otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
    int otmsCharSlopeRise;
    int otmsCharSlopeRun;
    int otmItalicAngle;
    UINT otmEMSquare;
    int otmAscent;
    int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
    int otmMacAscent;
    int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
    int otmsStrikeoutPosition;
    int otmsUnderscoreSize;
    int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
  } OUTLINETEXTMETRICW,*POUTLINETEXTMETRICW,*NPOUTLINETEXTMETRICW,*LPOUTLINETEXTMETRICW;

  typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
  typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
  typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
  typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;




  typedef struct tagPOLYTEXTA {
    int x;
    int y;
    UINT n;
    LPCSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
  } POLYTEXTA,*PPOLYTEXTA,*NPPOLYTEXTA,*LPPOLYTEXTA;

  typedef struct tagPOLYTEXTW {
    int x;
    int y;
    UINT n;
    LPCWSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
  } POLYTEXTW,*PPOLYTEXTW,*NPPOLYTEXTW,*LPPOLYTEXTW;

  typedef POLYTEXTA POLYTEXT;
  typedef PPOLYTEXTA PPOLYTEXT;
  typedef NPPOLYTEXTA NPPOLYTEXT;
  typedef LPPOLYTEXTA LPPOLYTEXT;



  typedef struct _FIXED {
    WORD fract;
    short value;
  } FIXED;

  typedef struct _MAT2 {
    FIXED eM11;
    FIXED eM12;
    FIXED eM21;
    FIXED eM22;
  } MAT2,*LPMAT2;

  typedef struct _GLYPHMETRICS {
    UINT gmBlackBoxX;
    UINT gmBlackBoxY;
    POINT gmptGlyphOrigin;
    short gmCellIncX;
    short gmCellIncY;
  } GLYPHMETRICS,*LPGLYPHMETRICS;
# 2491 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  typedef struct tagPOINTFX {
    FIXED x;
    FIXED y;
  } POINTFX,*LPPOINTFX;

  typedef struct tagTTPOLYCURVE {
    WORD wType;
    WORD cpfx;
    POINTFX apfx[1];
  } TTPOLYCURVE,*LPTTPOLYCURVE;

  typedef struct tagTTPOLYGONHEADER {
    DWORD cb;
    DWORD dwType;
    POINTFX pfxStart;
  } TTPOLYGONHEADER,*LPTTPOLYGONHEADER;
# 2549 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  typedef struct tagGCP_RESULTSA {
    DWORD lStructSize;
    LPSTR lpOutString;
    UINT *lpOrder;
    int *lpDx;
    int *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
  } GCP_RESULTSA,*LPGCP_RESULTSA;
  typedef struct tagGCP_RESULTSW {
    DWORD lStructSize;
    LPWSTR lpOutString;
    UINT *lpOrder;
    int *lpDx;
    int *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
  } GCP_RESULTSW,*LPGCP_RESULTSW;

  typedef GCP_RESULTSA GCP_RESULTS;
  typedef LPGCP_RESULTSA LPGCP_RESULTS;

  typedef struct _RASTERIZER_STATUS {
    short nSize;
    short wFlags;
    short nLanguageID;
  } RASTERIZER_STATUS,*LPRASTERIZER_STATUS;






  typedef struct tagPIXELFORMATDESCRIPTOR {
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerType;
    BYTE bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
  } PIXELFORMATDESCRIPTOR,*PPIXELFORMATDESCRIPTOR,*LPPIXELFORMATDESCRIPTOR;
# 2646 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  typedef int (__attribute__((__stdcall__)) *OLDFONTENUMPROCA)(const LOGFONTA *,const TEXTMETRICA *,DWORD,LPARAM);
  typedef int (__attribute__((__stdcall__)) *OLDFONTENUMPROCW)(const LOGFONTW *,const TEXTMETRICW *,DWORD,LPARAM);
# 2657 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  typedef OLDFONTENUMPROCA FONTENUMPROCA;
  typedef OLDFONTENUMPROCW FONTENUMPROCW;

  typedef FONTENUMPROCA FONTENUMPROC;

  typedef int (__attribute__((__stdcall__)) *GOBJENUMPROC)(LPVOID,LPARAM);
  typedef void (__attribute__((__stdcall__)) *LINEDDAPROC)(int,int,LPARAM);
# 2675 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  __attribute__((dllimport)) int __attribute__((__stdcall__)) AddFontResourceA(LPCSTR);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) AddFontResourceW(LPCWSTR);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AnimatePalette(HPALETTE hPal,UINT iStartIndex,UINT cEntries,const PALETTEENTRY *ppe);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) Arc(HDC hdc,int x1,int y1,int x2,int y2,int x3,int y3,int x4,int y4);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) BitBlt(HDC hdc,int x,int y,int cx,int cy,HDC hdcSrc,int x1,int y1,DWORD rop);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CancelDC(HDC hdc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) Chord(HDC hdc,int x1,int y1,int x2,int y2,int x3,int y3,int x4,int y4);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) ChoosePixelFormat(HDC hdc,const PIXELFORMATDESCRIPTOR *ppfd);
  __attribute__((dllimport)) HMETAFILE __attribute__((__stdcall__)) CloseMetaFile(HDC hdc);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) CombineRgn(HRGN hrgnDst,HRGN hrgnSrc1,HRGN hrgnSrc2,int iMode);
  __attribute__((dllimport)) HMETAFILE __attribute__((__stdcall__)) CopyMetaFileA(HMETAFILE,LPCSTR);
  __attribute__((dllimport)) HMETAFILE __attribute__((__stdcall__)) CopyMetaFileW(HMETAFILE,LPCWSTR);
  __attribute__((dllimport)) HBITMAP __attribute__((__stdcall__)) CreateBitmap(int nWidth,int nHeight,UINT nPlanes,UINT nBitCount,const void *lpBits);
  __attribute__((dllimport)) HBITMAP __attribute__((__stdcall__)) CreateBitmapIndirect(const BITMAP *pbm);
  __attribute__((dllimport)) HBRUSH __attribute__((__stdcall__)) CreateBrushIndirect(const LOGBRUSH *plbrush);
  __attribute__((dllimport)) HBITMAP __attribute__((__stdcall__)) CreateCompatibleBitmap(HDC hdc,int cx,int cy);
  __attribute__((dllimport)) HBITMAP __attribute__((__stdcall__)) CreateDiscardableBitmap(HDC hdc,int cx,int cy);
  __attribute__((dllimport)) HDC __attribute__((__stdcall__)) CreateCompatibleDC(HDC hdc);
  __attribute__((dllimport)) HDC __attribute__((__stdcall__)) CreateDCA(LPCSTR pwszDriver,LPCSTR pwszDevice,LPCSTR pszPort,const DEVMODEA *pdm);
  __attribute__((dllimport)) HDC __attribute__((__stdcall__)) CreateDCW(LPCWSTR pwszDriver,LPCWSTR pwszDevice,LPCWSTR pszPort,const DEVMODEW *pdm);
  __attribute__((dllimport)) HBITMAP __attribute__((__stdcall__)) CreateDIBitmap(HDC hdc,const BITMAPINFOHEADER *pbmih,DWORD flInit,const void *pjBits,const BITMAPINFO *pbmi,UINT iUsage);
  __attribute__((dllimport)) HBRUSH __attribute__((__stdcall__)) CreateDIBPatternBrush(HGLOBAL h,UINT iUsage);
  __attribute__((dllimport)) HBRUSH __attribute__((__stdcall__)) CreateDIBPatternBrushPt(const void *lpPackedDIB,UINT iUsage);
  __attribute__((dllimport)) HRGN __attribute__((__stdcall__)) CreateEllipticRgn(int x1,int y1,int x2,int y2);
  __attribute__((dllimport)) HRGN __attribute__((__stdcall__)) CreateEllipticRgnIndirect(const RECT *lprect);
  __attribute__((dllimport)) HFONT __attribute__((__stdcall__)) CreateFontIndirectA(const LOGFONTA *lplf);
  __attribute__((dllimport)) HFONT __attribute__((__stdcall__)) CreateFontIndirectW(const LOGFONTW *lplf);
  __attribute__((dllimport)) HFONT __attribute__((__stdcall__)) CreateFontA(int cHeight,int cWidth,int cEscapement,int cOrientation,int cWeight,DWORD bItalic,DWORD bUnderline,DWORD bStrikeOut,DWORD iCharSet,DWORD iOutPrecision,DWORD iClipPrecision,DWORD iQuality,DWORD iPitchAndFamily,LPCSTR pszFaceName);
  __attribute__((dllimport)) HFONT __attribute__((__stdcall__)) CreateFontW(int cHeight,int cWidth,int cEscapement,int cOrientation,int cWeight,DWORD bItalic,DWORD bUnderline,DWORD bStrikeOut,DWORD iCharSet,DWORD iOutPrecision,DWORD iClipPrecision,DWORD iQuality,DWORD iPitchAndFamily,LPCWSTR pszFaceName);
  __attribute__((dllimport)) HBRUSH __attribute__((__stdcall__)) CreateHatchBrush(int iHatch,COLORREF color);
  __attribute__((dllimport)) HDC __attribute__((__stdcall__)) CreateICA(LPCSTR pszDriver,LPCSTR pszDevice,LPCSTR pszPort,const DEVMODEA *pdm);
  __attribute__((dllimport)) HDC __attribute__((__stdcall__)) CreateICW(LPCWSTR pszDriver,LPCWSTR pszDevice,LPCWSTR pszPort,const DEVMODEW *pdm);
  __attribute__((dllimport)) HDC __attribute__((__stdcall__)) CreateMetaFileA(LPCSTR pszFile);
  __attribute__((dllimport)) HDC __attribute__((__stdcall__)) CreateMetaFileW(LPCWSTR pszFile);
  __attribute__((dllimport)) HPALETTE __attribute__((__stdcall__)) CreatePalette(const LOGPALETTE *plpal);
  __attribute__((dllimport)) HPEN __attribute__((__stdcall__)) CreatePen(int iStyle,int cWidth,COLORREF color);
  __attribute__((dllimport)) HPEN __attribute__((__stdcall__)) CreatePenIndirect(const LOGPEN *plpen);
  __attribute__((dllimport)) HRGN __attribute__((__stdcall__)) CreatePolyPolygonRgn(const POINT *pptl,const INT *pc,int cPoly,int iMode);
  __attribute__((dllimport)) HBRUSH __attribute__((__stdcall__)) CreatePatternBrush(HBITMAP hbm);
  __attribute__((dllimport)) HRGN __attribute__((__stdcall__)) CreateRectRgn(int x1,int y1,int x2,int y2);
  __attribute__((dllimport)) HRGN __attribute__((__stdcall__)) CreateRectRgnIndirect(const RECT *lprect);
  __attribute__((dllimport)) HRGN __attribute__((__stdcall__)) CreateRoundRectRgn(int x1,int y1,int x2,int y2,int w,int h);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreateScalableFontResourceA(DWORD fdwHidden,LPCSTR lpszFont,LPCSTR lpszFile,LPCSTR lpszPath);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreateScalableFontResourceW(DWORD fdwHidden,LPCWSTR lpszFont,LPCWSTR lpszFile,LPCWSTR lpszPath);
  __attribute__((dllimport)) HBRUSH __attribute__((__stdcall__)) CreateSolidBrush(COLORREF color);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DeleteDC(HDC hdc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DeleteMetaFile(HMETAFILE hmf);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DeleteObject(HGDIOBJ ho);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) DescribePixelFormat(HDC hdc,int iPixelFormat,UINT nBytes,LPPIXELFORMATDESCRIPTOR ppfd);

  typedef UINT (__attribute__((__stdcall__)) *LPFNDEVMODE)(HWND,HMODULE,LPDEVMODE,LPSTR,LPSTR,LPDEVMODE,LPSTR,UINT);
  typedef DWORD (__attribute__((__stdcall__)) *LPFNDEVCAPS)(LPSTR,LPSTR,UINT,LPSTR,LPDEVMODE);
# 2806 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  __attribute__((dllimport)) int __attribute__((__stdcall__)) DeviceCapabilitiesA(LPCSTR pDevice,LPCSTR pPort,WORD fwCapability,LPSTR pOutput,const DEVMODEA *pDevMode);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) DeviceCapabilitiesW(LPCWSTR pDevice,LPCWSTR pPort,WORD fwCapability,LPWSTR pOutput,const DEVMODEW *pDevMode);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) DrawEscape(HDC hdc,int iEscape,int cjIn,LPCSTR lpIn);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) Ellipse(HDC hdc,int left,int top,int right,int bottom);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) EnumFontFamiliesExA(HDC hdc,LPLOGFONTA lpLogfont,FONTENUMPROCA lpProc,LPARAM lParam,DWORD dwFlags);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) EnumFontFamiliesExW(HDC hdc,LPLOGFONTW lpLogfont,FONTENUMPROCW lpProc,LPARAM lParam,DWORD dwFlags);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) EnumFontFamiliesA(HDC hdc,LPCSTR lpLogfont,FONTENUMPROCA lpProc,LPARAM lParam);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) EnumFontFamiliesW(HDC hdc,LPCWSTR lpLogfont,FONTENUMPROCW lpProc,LPARAM lParam);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) EnumFontsA(HDC hdc,LPCSTR lpLogfont,FONTENUMPROCA lpProc,LPARAM lParam);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) EnumFontsW(HDC hdc,LPCWSTR lpLogfont,FONTENUMPROCW lpProc,LPARAM lParam);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) EnumObjects(HDC hdc,int nType,GOBJENUMPROC lpFunc,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EqualRgn(HRGN hrgn1,HRGN hrgn2);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) Escape(HDC hdc,int iEscape,int cjIn,LPCSTR pvIn,LPVOID pvOut);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) ExtEscape(HDC hdc,int iEscape,int cjInput,LPCSTR lpInData,int cjOutput,LPSTR lpOutData);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) ExcludeClipRect(HDC hdc,int left,int top,int right,int bottom);
  __attribute__((dllimport)) HRGN __attribute__((__stdcall__)) ExtCreateRegion(const XFORM *lpx,DWORD nCount,const RGNDATA *lpData);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ExtFloodFill(HDC hdc,int x,int y,COLORREF color,UINT type);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FillRgn(HDC hdc,HRGN hrgn,HBRUSH hbr);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FloodFill(HDC hdc,int x,int y,COLORREF color);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FrameRgn(HDC hdc,HRGN hrgn,HBRUSH hbr,int w,int h);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetROP2(HDC hdc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetAspectRatioFilterEx(HDC hdc,LPSIZE lpsize);
  __attribute__((dllimport)) COLORREF __attribute__((__stdcall__)) GetBkColor(HDC hdc);
  __attribute__((dllimport)) COLORREF __attribute__((__stdcall__)) GetDCBrushColor(HDC hdc);
  __attribute__((dllimport)) COLORREF __attribute__((__stdcall__)) GetDCPenColor(HDC hdc);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetBkMode(HDC hdc);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) GetBitmapBits(HBITMAP hbit,LONG cb,LPVOID lpvBits);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetBitmapDimensionEx(HBITMAP hbit,LPSIZE lpsize);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetBoundsRect(HDC hdc,LPRECT lprect,UINT flags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetBrushOrgEx(HDC hdc,LPPOINT lppt);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCharWidthA(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCharWidthW(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCharWidth32A(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCharWidth32W(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCharWidthFloatA(HDC hdc,UINT iFirst,UINT iLast,PFLOAT lpBuffer);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCharWidthFloatW(HDC hdc,UINT iFirst,UINT iLast,PFLOAT lpBuffer);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCharABCWidthsA(HDC hdc,UINT wFirst,UINT wLast,LPABC lpABC);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCharABCWidthsW(HDC hdc,UINT wFirst,UINT wLast,LPABC lpABC);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCharABCWidthsFloatA(HDC hdc,UINT iFirst,UINT iLast,LPABCFLOAT lpABC);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCharABCWidthsFloatW(HDC hdc,UINT iFirst,UINT iLast,LPABCFLOAT lpABC);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetClipBox(HDC hdc,LPRECT lprect);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetClipRgn(HDC hdc,HRGN hrgn);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetMetaRgn(HDC hdc,HRGN hrgn);
  __attribute__((dllimport)) HGDIOBJ __attribute__((__stdcall__)) GetCurrentObject(HDC hdc,UINT type);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCurrentPositionEx(HDC hdc,LPPOINT lppt);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetDeviceCaps(HDC hdc,int index);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetDIBits(HDC hdc,HBITMAP hbm,UINT start,UINT cLines,LPVOID lpvBits,LPBITMAPINFO lpbmi,UINT usage);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetFontData (HDC hdc,DWORD dwTable,DWORD dwOffset,PVOID pvBuffer,DWORD cjBuffer);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetGlyphOutlineA(HDC hdc,UINT uChar,UINT fuFormat,LPGLYPHMETRICS lpgm,DWORD cjBuffer,LPVOID pvBuffer,const MAT2 *lpmat2);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetGlyphOutlineW(HDC hdc,UINT uChar,UINT fuFormat,LPGLYPHMETRICS lpgm,DWORD cjBuffer,LPVOID pvBuffer,const MAT2 *lpmat2);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetGraphicsMode(HDC hdc);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetMapMode(HDC hdc);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetMetaFileBitsEx(HMETAFILE hMF,UINT cbBuffer,LPVOID lpData);
  __attribute__((dllimport)) HMETAFILE __attribute__((__stdcall__)) GetMetaFileA(LPCSTR lpName);
  __attribute__((dllimport)) HMETAFILE __attribute__((__stdcall__)) GetMetaFileW(LPCWSTR lpName);
  __attribute__((dllimport)) COLORREF __attribute__((__stdcall__)) GetNearestColor(HDC hdc,COLORREF color);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetNearestPaletteIndex(HPALETTE h,COLORREF color);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetObjectType(HGDIOBJ h);





  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetOutlineTextMetricsA(HDC hdc,UINT cjCopy,LPOUTLINETEXTMETRICA potm);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetOutlineTextMetricsW(HDC hdc,UINT cjCopy,LPOUTLINETEXTMETRICW potm);







  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetPaletteEntries(HPALETTE hpal,UINT iStart,UINT cEntries,LPPALETTEENTRY pPalEntries);
  __attribute__((dllimport)) COLORREF __attribute__((__stdcall__)) GetPixel(HDC hdc,int x,int y);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetPixelFormat(HDC hdc);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetPolyFillMode(HDC hdc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetRasterizerCaps(LPRASTERIZER_STATUS lpraststat,UINT cjBytes);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetRandomRgn (HDC hdc,HRGN hrgn,INT i);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetRegionData(HRGN hrgn,DWORD nCount,LPRGNDATA lpRgnData);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetRgnBox(HRGN hrgn,LPRECT lprc);
  __attribute__((dllimport)) HGDIOBJ __attribute__((__stdcall__)) GetStockObject(int i);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetStretchBltMode(HDC hdc);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetSystemPaletteEntries(HDC hdc,UINT iStart,UINT cEntries,LPPALETTEENTRY pPalEntries);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetSystemPaletteUse(HDC hdc);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetTextCharacterExtra(HDC hdc);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetTextAlign(HDC hdc);
  __attribute__((dllimport)) COLORREF __attribute__((__stdcall__)) GetTextColor(HDC hdc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetTextExtentPointA(HDC hdc,LPCSTR lpString,int c,LPSIZE lpsz);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetTextExtentPointW(HDC hdc,LPCWSTR lpString,int c,LPSIZE lpsz);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetTextExtentPoint32A(HDC hdc,LPCSTR lpString,int c,LPSIZE psizl);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetTextExtentPoint32W(HDC hdc,LPCWSTR lpString,int c,LPSIZE psizl);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetTextExtentExPointA(HDC hdc,LPCSTR lpszString,int cchString,int nMaxExtent,LPINT lpnFit,LPINT lpnDx,LPSIZE lpSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetTextExtentExPointW(HDC hdc,LPCWSTR lpszString,int cchString,int nMaxExtent,LPINT lpnFit,LPINT lpnDx,LPSIZE lpSize);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetTextCharset(HDC hdc);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetTextCharsetInfo(HDC hdc,LPFONTSIGNATURE lpSig,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) TranslateCharsetInfo(DWORD *lpSrc,LPCHARSETINFO lpCs,DWORD dwFlags);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetFontLanguageInfo(HDC hdc);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetCharacterPlacementA(HDC hdc,LPCSTR lpString,int nCount,int nMexExtent,LPGCP_RESULTSA lpResults,DWORD dwFlags);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetCharacterPlacementW(HDC hdc,LPCWSTR lpString,int nCount,int nMexExtent,LPGCP_RESULTSW lpResults,DWORD dwFlags);

  typedef struct tagWCRANGE {
    WCHAR wcLow;
    USHORT cGlyphs;
  } WCRANGE,*PWCRANGE,*LPWCRANGE;

  typedef struct tagGLYPHSET {
    DWORD cbThis;
    DWORD flAccel;
    DWORD cGlyphsSupported;
    DWORD cRanges;
    WCRANGE ranges[1];
  } GLYPHSET,*PGLYPHSET,*LPGLYPHSET;







  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetFontUnicodeRanges(HDC hdc,LPGLYPHSET lpgs);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetGlyphIndicesA(HDC hdc,LPCSTR lpstr,int c,LPWORD pgi,DWORD fl);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetGlyphIndicesW(HDC hdc,LPCWSTR lpstr,int c,LPWORD pgi,DWORD fl);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetTextExtentPointI(HDC hdc,LPWORD pgiIn,int cgi,LPSIZE psize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetTextExtentExPointI (HDC hdc,LPWORD lpwszString,int cwchString,int nMaxExtent,LPINT lpnFit,LPINT lpnDx,LPSIZE lpSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCharWidthI(HDC hdc,UINT giFirst,UINT cgi,LPWORD pgi,LPINT piWidths);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCharABCWidthsI(HDC hdc,UINT giFirst,UINT cgi,LPWORD pgi,LPABC pabc);





  typedef struct tagDESIGNVECTOR {
    DWORD dvReserved;
    DWORD dvNumAxes;
    LONG dvValues[16];
  } DESIGNVECTOR,*PDESIGNVECTOR,*LPDESIGNVECTOR;




  __attribute__((dllimport)) int __attribute__((__stdcall__)) AddFontResourceExA(LPCSTR name,DWORD fl,PVOID res);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) AddFontResourceExW(LPCWSTR name,DWORD fl,PVOID res);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) RemoveFontResourceExA(LPCSTR name,DWORD fl,PVOID pdv);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) RemoveFontResourceExW(LPCWSTR name,DWORD fl,PVOID pdv);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) AddFontMemResourceEx(PVOID pFileView,DWORD cjSize,PVOID pvResrved,DWORD *pNumFonts);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) RemoveFontMemResourceEx(HANDLE h);






  typedef struct tagAXISINFOA {
    LONG axMinValue;
    LONG axMaxValue;
    BYTE axAxisName[16];
  } AXISINFOA,*PAXISINFOA,*LPAXISINFOA;

  typedef struct tagAXISINFOW {
    LONG axMinValue;
    LONG axMaxValue;
    WCHAR axAxisName[16];
  } AXISINFOW,*PAXISINFOW,*LPAXISINFOW;

  typedef AXISINFOA AXISINFO;
  typedef PAXISINFOA PAXISINFO;
  typedef LPAXISINFOA LPAXISINFO;

  typedef struct tagAXESLISTA {
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOA axlAxisInfo[16];
  } AXESLISTA,*PAXESLISTA,*LPAXESLISTA;

  typedef struct tagAXESLISTW {
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOW axlAxisInfo[16];
  } AXESLISTW,*PAXESLISTW,*LPAXESLISTW;

  typedef AXESLISTA AXESLIST;
  typedef PAXESLISTA PAXESLIST;
  typedef LPAXESLISTA LPAXESLIST;

  typedef struct tagENUMLOGFONTEXDVA {
    ENUMLOGFONTEXA elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
  } ENUMLOGFONTEXDVA,*PENUMLOGFONTEXDVA,*LPENUMLOGFONTEXDVA;

  typedef struct tagENUMLOGFONTEXDVW {
    ENUMLOGFONTEXW elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
  } ENUMLOGFONTEXDVW,*PENUMLOGFONTEXDVW,*LPENUMLOGFONTEXDVW;

  typedef ENUMLOGFONTEXDVA ENUMLOGFONTEXDV;
  typedef PENUMLOGFONTEXDVA PENUMLOGFONTEXDV;
  typedef LPENUMLOGFONTEXDVA LPENUMLOGFONTEXDV;



  __attribute__((dllimport)) HFONT __attribute__((__stdcall__)) CreateFontIndirectExA(const ENUMLOGFONTEXDVA *);
  __attribute__((dllimport)) HFONT __attribute__((__stdcall__)) CreateFontIndirectExW(const ENUMLOGFONTEXDVW *);


  typedef struct tagENUMTEXTMETRICA {
    NEWTEXTMETRICEXA etmNewTextMetricEx;
    AXESLISTA etmAxesList;
  } ENUMTEXTMETRICA,*PENUMTEXTMETRICA,*LPENUMTEXTMETRICA;
  typedef struct tagENUMTEXTMETRICW
  {
    NEWTEXTMETRICEXW etmNewTextMetricEx;
    AXESLISTW etmAxesList;
  } ENUMTEXTMETRICW,*PENUMTEXTMETRICW,*LPENUMTEXTMETRICW;

  typedef ENUMTEXTMETRICA ENUMTEXTMETRIC;
  typedef PENUMTEXTMETRICA PENUMTEXTMETRIC;
  typedef LPENUMTEXTMETRICA LPENUMTEXTMETRIC;





  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetViewportExtEx(HDC hdc,LPSIZE lpsize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetViewportOrgEx(HDC hdc,LPPOINT lppoint);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetWindowExtEx(HDC hdc,LPSIZE lpsize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetWindowOrgEx(HDC hdc,LPPOINT lppoint);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) IntersectClipRect(HDC hdc,int left,int top,int right,int bottom);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) InvertRgn(HDC hdc,HRGN hrgn);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LineDDA(int xStart,int yStart,int xEnd,int yEnd,LINEDDAPROC lpProc,LPARAM data);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LineTo(HDC hdc,int x,int y);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) MaskBlt(HDC hdcDest,int xDest,int yDest,int width,int height,HDC hdcSrc,int xSrc,int ySrc,HBITMAP hbmMask,int xMask,int yMask,DWORD rop);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PlgBlt(HDC hdcDest,const POINT *lpPoint,HDC hdcSrc,int xSrc,int ySrc,int width,int height,HBITMAP hbmMask,int xMask,int yMask);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) OffsetClipRgn(HDC hdc,int x,int y);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) OffsetRgn(HRGN hrgn,int x,int y);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PatBlt(HDC hdc,int x,int y,int w,int h,DWORD rop);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) Pie(HDC hdc,int left,int top,int right,int bottom,int xr1,int yr1,int xr2,int yr2);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PlayMetaFile(HDC hdc,HMETAFILE hmf);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PaintRgn(HDC hdc,HRGN hrgn);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PolyPolygon(HDC hdc,const POINT *apt,const INT *asz,int csz);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PtInRegion(HRGN hrgn,int x,int y);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PtVisible(HDC hdc,int x,int y);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) RectInRegion(HRGN hrgn,const RECT *lprect);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) RectVisible(HDC hdc,const RECT *lprect);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) Rectangle(HDC hdc,int left,int top,int right,int bottom);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) RestoreDC(HDC hdc,int nSavedDC);
  __attribute__((dllimport)) HDC __attribute__((__stdcall__)) ResetDCA(HDC hdc,const DEVMODEA *lpdm);
  __attribute__((dllimport)) HDC __attribute__((__stdcall__)) ResetDCW(HDC hdc,const DEVMODEW *lpdm);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) RealizePalette(HDC hdc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) RemoveFontResourceA(LPCSTR lpFileName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) RemoveFontResourceW(LPCWSTR lpFileName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) RoundRect(HDC hdc,int left,int top,int right,int bottom,int width,int height);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ResizePalette(HPALETTE hpal,UINT n);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) SaveDC(HDC hdc);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) SelectClipRgn(HDC hdc,HRGN hrgn);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) ExtSelectClipRgn(HDC hdc,HRGN hrgn,int mode);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) SetMetaRgn(HDC hdc);
  __attribute__((dllimport)) HGDIOBJ __attribute__((__stdcall__)) SelectObject(HDC hdc,HGDIOBJ h);
  __attribute__((dllimport)) HPALETTE __attribute__((__stdcall__)) SelectPalette(HDC hdc,HPALETTE hPal,WINBOOL bForceBkgd);
  __attribute__((dllimport)) COLORREF __attribute__((__stdcall__)) SetBkColor(HDC hdc,COLORREF color);
  __attribute__((dllimport)) COLORREF __attribute__((__stdcall__)) SetDCBrushColor(HDC hdc,COLORREF color);
  __attribute__((dllimport)) COLORREF __attribute__((__stdcall__)) SetDCPenColor(HDC hdc,COLORREF color);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) SetBkMode(HDC hdc,int mode);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) SetBitmapBits(HBITMAP hbm,DWORD cb,const void *pvBits);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) SetBoundsRect(HDC hdc,const RECT *lprect,UINT flags);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) SetDIBits(HDC hdc,HBITMAP hbm,UINT start,UINT cLines,const void *lpBits,const BITMAPINFO *lpbmi,UINT ColorUse);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) SetDIBitsToDevice(HDC hdc,int xDest,int yDest,DWORD w,DWORD h,int xSrc,int ySrc,UINT StartScan,UINT cLines,const void *lpvBits,const BITMAPINFO *lpbmi,UINT ColorUse);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SetMapperFlags(HDC hdc,DWORD flags);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) SetGraphicsMode(HDC hdc,int iMode);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) SetMapMode(HDC hdc,int iMode);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SetLayout(HDC hdc,DWORD l);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetLayout(HDC hdc);
  __attribute__((dllimport)) HMETAFILE __attribute__((__stdcall__)) SetMetaFileBitsEx(UINT cbBuffer,const BYTE *lpData);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) SetPaletteEntries(HPALETTE hpal,UINT iStart,UINT cEntries,const PALETTEENTRY *pPalEntries);
  __attribute__((dllimport)) COLORREF __attribute__((__stdcall__)) SetPixel(HDC hdc,int x,int y,COLORREF color);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetPixelV(HDC hdc,int x,int y,COLORREF color);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetPixelFormat(HDC hdc,int format,const PIXELFORMATDESCRIPTOR *ppfd);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) SetPolyFillMode(HDC hdc,int mode);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) StretchBlt(HDC hdcDest,int xDest,int yDest,int wDest,int hDest,HDC hdcSrc,int xSrc,int ySrc,int wSrc,int hSrc,DWORD rop);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetRectRgn(HRGN hrgn,int left,int top,int right,int bottom);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) StretchDIBits(HDC hdc,int xDest,int yDest,int DestWidth,int DestHeight,int xSrc,int ySrc,int SrcWidth,int SrcHeight,const void *lpBits,const BITMAPINFO *lpbmi,UINT iUsage,DWORD rop);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) SetROP2(HDC hdc,int rop2);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) SetStretchBltMode(HDC hdc,int mode);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) SetSystemPaletteUse(HDC hdc,UINT use);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) SetTextCharacterExtra(HDC hdc,int extra);
  __attribute__((dllimport)) COLORREF __attribute__((__stdcall__)) SetTextColor(HDC hdc,COLORREF color);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) SetTextAlign(HDC hdc,UINT align);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetTextJustification(HDC hdc,int extra,int count);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UpdateColors(HDC hdc);
# 3124 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  typedef USHORT COLOR16;

  typedef struct _TRIVERTEX {
    LONG x;
    LONG y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
  } TRIVERTEX,*PTRIVERTEX,*LPTRIVERTEX;


  typedef struct _GRADIENT_TRIANGLE {
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
  } GRADIENT_TRIANGLE,*PGRADIENT_TRIANGLE,*LPGRADIENT_TRIANGLE;

  typedef struct _GRADIENT_RECT {
    ULONG UpperLeft;
    ULONG LowerRight;
  } GRADIENT_RECT,*PGRADIENT_RECT,*LPGRADIENT_RECT;


  typedef struct _BLENDFUNCTION {
    BYTE BlendOp;
    BYTE BlendFlags;
    BYTE SourceConstantAlpha;
    BYTE AlphaFormat;
  } BLENDFUNCTION,*PBLENDFUNCTION;





  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AlphaBlend(HDC hdcDest,int xoriginDest,int yoriginDest,int wDest,int hDest,HDC hdcSrc,int xoriginSrc,int yoriginSrc,int wSrc,int hSrc,BLENDFUNCTION ftn);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GdiAlphaBlend(HDC hdcDest,int xoriginDest,int yoriginDest,int wDest,int hDest,HDC hdcSrc,int xoriginSrc,int yoriginSrc,int wSrc,int hSrc,BLENDFUNCTION ftn);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) TransparentBlt(HDC hdcDest,int xoriginDest,int yoriginDest,int wDest,int hDest,HDC hdcSrc,int xoriginSrc,int yoriginSrc,int wSrc,int hSrc,UINT crTransparent);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GdiTransparentBlt(HDC hdcDest,int xoriginDest,int yoriginDest,int wDest,int hDest,HDC hdcSrc,int xoriginSrc,int yoriginSrc,int wSrc,int hSrc,UINT crTransparent);






  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GradientFill(HDC hdc,PTRIVERTEX pVertex,ULONG nVertex,PVOID pMesh,ULONG nMesh,ULONG ulMode);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GdiGradientFill(HDC hdc,PTRIVERTEX pVertex,ULONG nVertex,PVOID pMesh,ULONG nMesh,ULONG ulMode);
# 3179 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PlayMetaFileRecord(HDC hdc,LPHANDLETABLE lpHandleTable,LPMETARECORD lpMR,UINT noObjs);

  typedef int (__attribute__((__stdcall__)) *MFENUMPROC)(HDC hdc,HANDLETABLE *lpht,METARECORD *lpMR,int nObj,LPARAM lParam);

  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumMetaFile(HDC hdc,HMETAFILE hmf,MFENUMPROC lpProc,LPARAM lParam);

  typedef int (__attribute__((__stdcall__)) *ENHMFENUMPROC)(HDC hdc,HANDLETABLE *lpht,const ENHMETARECORD *lpmr,int hHandles,LPARAM data);

  __attribute__((dllimport)) HENHMETAFILE __attribute__((__stdcall__)) CloseEnhMetaFile(HDC hdc);
  __attribute__((dllimport)) HENHMETAFILE __attribute__((__stdcall__)) CopyEnhMetaFileA(HENHMETAFILE hEnh,LPCSTR lpFileName);
  __attribute__((dllimport)) HENHMETAFILE __attribute__((__stdcall__)) CopyEnhMetaFileW(HENHMETAFILE hEnh,LPCWSTR lpFileName);
  __attribute__((dllimport)) HDC __attribute__((__stdcall__)) CreateEnhMetaFileA(HDC hdc,LPCSTR lpFilename,const RECT *lprc,LPCSTR lpDesc);
  __attribute__((dllimport)) HDC __attribute__((__stdcall__)) CreateEnhMetaFileW(HDC hdc,LPCWSTR lpFilename,const RECT *lprc,LPCWSTR lpDesc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DeleteEnhMetaFile(HENHMETAFILE hmf);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumEnhMetaFile(HDC hdc,HENHMETAFILE hmf,ENHMFENUMPROC lpProc,LPVOID lpParam,const RECT *lpRect);
  __attribute__((dllimport)) HENHMETAFILE __attribute__((__stdcall__)) GetEnhMetaFileA(LPCSTR lpName);
  __attribute__((dllimport)) HENHMETAFILE __attribute__((__stdcall__)) GetEnhMetaFileW(LPCWSTR lpName);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetEnhMetaFileBits(HENHMETAFILE hEMF,UINT nSize,LPBYTE lpData);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetEnhMetaFileDescriptionA(HENHMETAFILE hemf,UINT cchBuffer,LPSTR lpDescription);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetEnhMetaFileDescriptionW(HENHMETAFILE hemf,UINT cchBuffer,LPWSTR lpDescription);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetEnhMetaFileHeader(HENHMETAFILE hemf,UINT nSize,LPENHMETAHEADER lpEnhMetaHeader);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetEnhMetaFilePaletteEntries(HENHMETAFILE hemf,UINT nNumEntries,LPPALETTEENTRY lpPaletteEntries);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetEnhMetaFilePixelFormat(HENHMETAFILE hemf,UINT cbBuffer,PIXELFORMATDESCRIPTOR *ppfd);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetWinMetaFileBits(HENHMETAFILE hemf,UINT cbData16,LPBYTE pData16,INT iMapMode,HDC hdcRef);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PlayEnhMetaFile(HDC hdc,HENHMETAFILE hmf,const RECT *lprect);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PlayEnhMetaFileRecord(HDC hdc,LPHANDLETABLE pht,const ENHMETARECORD *pmr,UINT cht);
  __attribute__((dllimport)) HENHMETAFILE __attribute__((__stdcall__)) SetEnhMetaFileBits(UINT nSize,const BYTE *pb);
  __attribute__((dllimport)) HENHMETAFILE __attribute__((__stdcall__)) SetWinMetaFileBits(UINT nSize,const BYTE *lpMeta16Data,HDC hdcRef,const METAFILEPICT *lpMFP);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GdiComment(HDC hdc,UINT nSize,const BYTE *lpData);





  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetTextMetricsA(HDC hdc,LPTEXTMETRICA lptm);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetTextMetricsW(HDC hdc,LPTEXTMETRICW lptm);


  typedef struct tagDIBSECTION {
    BITMAP dsBm;
    BITMAPINFOHEADER dsBmih;
    DWORD dsBitfields[3];
    HANDLE dshSection;
    DWORD dsOffset;
  } DIBSECTION,*LPDIBSECTION,*PDIBSECTION;

  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AngleArc(HDC hdc,int x,int y,DWORD r,FLOAT StartAngle,FLOAT SweepAngle);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PolyPolyline(HDC hdc,const POINT *apt,const DWORD *asz,DWORD csz);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetWorldTransform(HDC hdc,LPXFORM lpxf);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetWorldTransform(HDC hdc,const XFORM *lpxf);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ModifyWorldTransform(HDC hdc,const XFORM *lpxf,DWORD mode);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CombineTransform(LPXFORM lpxfOut,const XFORM *lpxf1,const XFORM *lpxf2);
  __attribute__((dllimport)) HBITMAP __attribute__((__stdcall__)) CreateDIBSection(HDC hdc,const BITMAPINFO *lpbmi,UINT usage,void **ppvBits,HANDLE hSection,DWORD offset);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetDIBColorTable(HDC hdc,UINT iStart,UINT cEntries,RGBQUAD *prgbq);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) SetDIBColorTable(HDC hdc,UINT iStart,UINT cEntries,const RGBQUAD *prgbq);
# 3265 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  typedef struct tagCOLORADJUSTMENT {
    WORD caSize;
    WORD caFlags;
    WORD caIlluminantIndex;
    WORD caRedGamma;
    WORD caGreenGamma;
    WORD caBlueGamma;
    WORD caReferenceBlack;
    WORD caReferenceWhite;
    SHORT caContrast;
    SHORT caBrightness;
    SHORT caColorfulness;
    SHORT caRedGreenTint;
  } COLORADJUSTMENT,*PCOLORADJUSTMENT,*LPCOLORADJUSTMENT;

  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetColorAdjustment(HDC hdc,const COLORADJUSTMENT *lpca);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetColorAdjustment(HDC hdc,LPCOLORADJUSTMENT lpca);
  __attribute__((dllimport)) HPALETTE __attribute__((__stdcall__)) CreateHalftonePalette(HDC hdc);

  typedef WINBOOL (__attribute__((__stdcall__)) *ABORTPROC)(HDC,int);

  typedef struct _DOCINFOA {
    int cbSize;
    LPCSTR lpszDocName;
    LPCSTR lpszOutput;
    LPCSTR lpszDatatype;
    DWORD fwType;
  } DOCINFOA,*LPDOCINFOA;

  typedef struct _DOCINFOW {
    int cbSize;
    LPCWSTR lpszDocName;
    LPCWSTR lpszOutput;
    LPCWSTR lpszDatatype;
    DWORD fwType;
  } DOCINFOW,*LPDOCINFOW;

  typedef DOCINFOA DOCINFO;
  typedef LPDOCINFOA LPDOCINFO;
# 3315 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  __attribute__((dllimport)) int __attribute__((__stdcall__)) StartDocA(HDC hdc,const DOCINFOA *lpdi);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) StartDocW(HDC hdc,const DOCINFOW *lpdi);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) EndDoc(HDC hdc);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) StartPage(HDC hdc);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) EndPage(HDC hdc);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) AbortDoc(HDC hdc);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) SetAbortProc(HDC hdc,ABORTPROC lpProc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AbortPath(HDC hdc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ArcTo(HDC hdc,int left,int top,int right,int bottom,int xr1,int yr1,int xr2,int yr2);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) BeginPath(HDC hdc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CloseFigure(HDC hdc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EndPath(HDC hdc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FillPath(HDC hdc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FlattenPath(HDC hdc);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetPath(HDC hdc,LPPOINT apt,LPBYTE aj,int cpt);
  __attribute__((dllimport)) HRGN __attribute__((__stdcall__)) PathToRegion(HDC hdc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PolyDraw(HDC hdc,const POINT *apt,const BYTE *aj,int cpt);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SelectClipPath(HDC hdc,int mode);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) SetArcDirection(HDC hdc,int dir);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetMiterLimit(HDC hdc,FLOAT limit,PFLOAT old);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) StrokeAndFillPath(HDC hdc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) StrokePath(HDC hdc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WidenPath(HDC hdc);
  __attribute__((dllimport)) HPEN __attribute__((__stdcall__)) ExtCreatePen(DWORD iPenStyle,DWORD cWidth,const LOGBRUSH *plbrush,DWORD cStyle,const DWORD *pstyle);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetMiterLimit(HDC hdc,PFLOAT plimit);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetArcDirection(HDC hdc);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetObjectA(HANDLE h,int c,LPVOID pv);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetObjectW(HANDLE h,int c,LPVOID pv);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) MoveToEx(HDC hdc,int x,int y,LPPOINT lppt);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) TextOutA(HDC hdc,int x,int y,LPCSTR lpString,int c);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) TextOutW(HDC hdc,int x,int y,LPCWSTR lpString,int c);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ExtTextOutA(HDC hdc,int x,int y,UINT options,const RECT *lprect,LPCSTR lpString,UINT c,const INT *lpDx);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ExtTextOutW(HDC hdc,int x,int y,UINT options,const RECT *lprect,LPCWSTR lpString,UINT c,const INT *lpDx);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PolyTextOutA(HDC hdc,const POLYTEXTA *ppt,int nstrings);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PolyTextOutW(HDC hdc,const POLYTEXTW *ppt,int nstrings);
  __attribute__((dllimport)) HRGN __attribute__((__stdcall__)) CreatePolygonRgn(const POINT *pptl,int cPoint,int iMode);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DPtoLP(HDC hdc,LPPOINT lppt,int c);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LPtoDP(HDC hdc,LPPOINT lppt,int c);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) Polygon(HDC hdc,const POINT *apt,int cpt);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) Polyline(HDC hdc,const POINT *apt,int cpt);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PolyBezier(HDC hdc,const POINT *apt,DWORD cpt);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PolyBezierTo(HDC hdc,const POINT *apt,DWORD cpt);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PolylineTo(HDC hdc,const POINT *apt,DWORD cpt);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetViewportExtEx(HDC hdc,int x,int y,LPSIZE lpsz);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetViewportOrgEx(HDC hdc,int x,int y,LPPOINT lppt);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetWindowExtEx(HDC hdc,int x,int y,LPSIZE lpsz);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetWindowOrgEx(HDC hdc,int x,int y,LPPOINT lppt);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) OffsetViewportOrgEx(HDC hdc,int x,int y,LPPOINT lppt);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) OffsetWindowOrgEx(HDC hdc,int x,int y,LPPOINT lppt);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ScaleViewportExtEx(HDC hdc,int xn,int dx,int yn,int yd,LPSIZE lpsz);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ScaleWindowExtEx(HDC hdc,int xn,int xd,int yn,int yd,LPSIZE lpsz);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetBitmapDimensionEx(HBITMAP hbm,int w,int h,LPSIZE lpsz);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetBrushOrgEx(HDC hdc,int x,int y,LPPOINT lppt);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetTextFaceA(HDC hdc,int c,LPSTR lpName);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetTextFaceW(HDC hdc,int c,LPWSTR lpName);



  typedef struct tagKERNINGPAIR {
    WORD wFirst;
    WORD wSecond;
    int iKernAmount;
  } KERNINGPAIR,*LPKERNINGPAIR;



  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetKerningPairsA(HDC hdc,DWORD nPairs,LPKERNINGPAIR lpKernPair);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetKerningPairsW(HDC hdc,DWORD nPairs,LPKERNINGPAIR lpKernPair);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetDCOrgEx(HDC hdc,LPPOINT lppt);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FixBrushOrgEx(HDC hdc,int x,int y,LPPOINT ptl);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UnrealizeObject(HGDIOBJ h);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GdiFlush();
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GdiSetBatchLimit(DWORD dw);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GdiGetBatchLimit();






  typedef int (__attribute__((__stdcall__)) *ICMENUMPROCA)(LPSTR,LPARAM);
  typedef int (__attribute__((__stdcall__)) *ICMENUMPROCW)(LPWSTR,LPARAM);
# 3406 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  __attribute__((dllimport)) int __attribute__((__stdcall__)) SetICMMode(HDC hdc,int mode);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CheckColorsInGamut(HDC hdc,LPVOID lpRGBTriple,LPVOID dlpBuffer,DWORD nCount);
  __attribute__((dllimport)) HCOLORSPACE __attribute__((__stdcall__)) GetColorSpace(HDC hdc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetLogColorSpaceA(HCOLORSPACE hColorSpace,LPLOGCOLORSPACEA lpBuffer,DWORD nSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetLogColorSpaceW(HCOLORSPACE hColorSpace,LPLOGCOLORSPACEW lpBuffer,DWORD nSize);
  __attribute__((dllimport)) HCOLORSPACE __attribute__((__stdcall__)) CreateColorSpaceA(LPLOGCOLORSPACEA lplcs);
  __attribute__((dllimport)) HCOLORSPACE __attribute__((__stdcall__)) CreateColorSpaceW(LPLOGCOLORSPACEW lplcs);
  __attribute__((dllimport)) HCOLORSPACE __attribute__((__stdcall__)) SetColorSpace(HDC hdc,HCOLORSPACE hcs);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DeleteColorSpace(HCOLORSPACE hcs);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetICMProfileA(HDC hdc,LPDWORD pBufSize,LPSTR pszFilename);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetICMProfileW(HDC hdc,LPDWORD pBufSize,LPWSTR pszFilename);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetICMProfileA(HDC hdc,LPSTR lpFileName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetICMProfileW(HDC hdc,LPWSTR lpFileName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetDeviceGammaRamp(HDC hdc,LPVOID lpRamp);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetDeviceGammaRamp(HDC hdc,LPVOID lpRamp);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ColorMatchToTarget(HDC hdc,HDC hdcTarget,DWORD action);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) EnumICMProfilesA(HDC hdc,ICMENUMPROCA lpProc,LPARAM lParam);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) EnumICMProfilesW(HDC hdc,ICMENUMPROCW lpProc,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UpdateICMRegKeyA(DWORD reserved,LPSTR lpszCMID,LPSTR lpszFileName,UINT command);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UpdateICMRegKeyW(DWORD reserved,LPWSTR lpszCMID,LPWSTR lpszFileName,UINT command);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ColorCorrectPalette(HDC hdc,HPALETTE hPal,DWORD deFirst,DWORD num);
# 3561 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  typedef struct tagEMR {
    DWORD iType;
    DWORD nSize;
  } EMR,*PEMR;

  typedef struct tagEMRTEXT {
    POINTL ptlReference;
    DWORD nChars;
    DWORD offString;
    DWORD fOptions;
    RECTL rcl;
    DWORD offDx;
  } EMRTEXT,*PEMRTEXT;

  typedef struct tagABORTPATH {
    EMR emr;
  } EMRABORTPATH,*PEMRABORTPATH,EMRBEGINPATH,*PEMRBEGINPATH,EMRENDPATH,*PEMRENDPATH,EMRCLOSEFIGURE,*PEMRCLOSEFIGURE,EMRFLATTENPATH,*PEMRFLATTENPATH,EMRWIDENPATH,*PEMRWIDENPATH,EMRSETMETARGN,*PEMRSETMETARGN,EMRSAVEDC,*PEMRSAVEDC,EMRREALIZEPALETTE,*PEMRREALIZEPALETTE;

  typedef struct tagEMRSELECTCLIPPATH {
    EMR emr;
    DWORD iMode;
  } EMRSELECTCLIPPATH,*PEMRSELECTCLIPPATH,EMRSETBKMODE,*PEMRSETBKMODE,EMRSETMAPMODE,*PEMRSETMAPMODE,EMRSETLAYOUT,*PEMRSETLAYOUT,
    EMRSETPOLYFILLMODE,*PEMRSETPOLYFILLMODE,EMRSETROP2,*PEMRSETROP2,EMRSETSTRETCHBLTMODE,*PEMRSETSTRETCHBLTMODE,EMRSETICMMODE,
    *PEMRSETICMMODE,EMRSETTEXTALIGN,*PEMRSETTEXTALIGN;

  typedef struct tagEMRSETMITERLIMIT {
    EMR emr;
    FLOAT eMiterLimit;
  } EMRSETMITERLIMIT,*PEMRSETMITERLIMIT;

  typedef struct tagEMRRESTOREDC {
    EMR emr;
    LONG iRelative;
  } EMRRESTOREDC,*PEMRRESTOREDC;

  typedef struct tagEMRSETARCDIRECTION {
    EMR emr;
    DWORD iArcDirection;

  } EMRSETARCDIRECTION,*PEMRSETARCDIRECTION;

  typedef struct tagEMRSETMAPPERFLAGS {
    EMR emr;
    DWORD dwFlags;
  } EMRSETMAPPERFLAGS,*PEMRSETMAPPERFLAGS;

  typedef struct tagEMRSETTEXTCOLOR {
    EMR emr;
    COLORREF crColor;
  } EMRSETBKCOLOR,*PEMRSETBKCOLOR,EMRSETTEXTCOLOR,*PEMRSETTEXTCOLOR;

  typedef struct tagEMRSELECTOBJECT {
    EMR emr;
    DWORD ihObject;
  } EMRSELECTOBJECT,*PEMRSELECTOBJECT,EMRDELETEOBJECT,*PEMRDELETEOBJECT;

  typedef struct tagEMRSELECTPALETTE {
    EMR emr;
    DWORD ihPal;
  } EMRSELECTPALETTE,*PEMRSELECTPALETTE;

  typedef struct tagEMRRESIZEPALETTE {
    EMR emr;
    DWORD ihPal;
    DWORD cEntries;
  } EMRRESIZEPALETTE,*PEMRRESIZEPALETTE;

  typedef struct tagEMRSETPALETTEENTRIES {
    EMR emr;
    DWORD ihPal;
    DWORD iStart;
    DWORD cEntries;
    PALETTEENTRY aPalEntries[1];
  } EMRSETPALETTEENTRIES,*PEMRSETPALETTEENTRIES;

  typedef struct tagEMRSETCOLORADJUSTMENT {
    EMR emr;
    COLORADJUSTMENT ColorAdjustment;
  } EMRSETCOLORADJUSTMENT,*PEMRSETCOLORADJUSTMENT;

  typedef struct tagEMRGDICOMMENT {
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
  } EMRGDICOMMENT,*PEMRGDICOMMENT;

  typedef struct tagEMREOF {
    EMR emr;
    DWORD nPalEntries;
    DWORD offPalEntries;
    DWORD nSizeLast;
  } EMREOF,*PEMREOF;

  typedef struct tagEMRLINETO {
    EMR emr;
    POINTL ptl;
  } EMRLINETO,*PEMRLINETO,EMRMOVETOEX,*PEMRMOVETOEX;

  typedef struct tagEMROFFSETCLIPRGN {
    EMR emr;
    POINTL ptlOffset;
  } EMROFFSETCLIPRGN,*PEMROFFSETCLIPRGN;

  typedef struct tagEMRFILLPATH {
    EMR emr;
    RECTL rclBounds;
  } EMRFILLPATH,*PEMRFILLPATH,EMRSTROKEANDFILLPATH,*PEMRSTROKEANDFILLPATH,EMRSTROKEPATH,*PEMRSTROKEPATH;

  typedef struct tagEMREXCLUDECLIPRECT {
    EMR emr;
    RECTL rclClip;
  } EMREXCLUDECLIPRECT,*PEMREXCLUDECLIPRECT,EMRINTERSECTCLIPRECT,*PEMRINTERSECTCLIPRECT;

  typedef struct tagEMRSETVIEWPORTORGEX {
    EMR emr;
    POINTL ptlOrigin;
  } EMRSETVIEWPORTORGEX,*PEMRSETVIEWPORTORGEX,EMRSETWINDOWORGEX,*PEMRSETWINDOWORGEX,EMRSETBRUSHORGEX,*PEMRSETBRUSHORGEX;

  typedef struct tagEMRSETVIEWPORTEXTEX {
    EMR emr;
    SIZEL szlExtent;
  } EMRSETVIEWPORTEXTEX,*PEMRSETVIEWPORTEXTEX,EMRSETWINDOWEXTEX,*PEMRSETWINDOWEXTEX;

  typedef struct tagEMRSCALEVIEWPORTEXTEX {
    EMR emr;
    LONG xNum;
    LONG xDenom;
    LONG yNum;
    LONG yDenom;
  } EMRSCALEVIEWPORTEXTEX,*PEMRSCALEVIEWPORTEXTEX,EMRSCALEWINDOWEXTEX,*PEMRSCALEWINDOWEXTEX;

  typedef struct tagEMRSETWORLDTRANSFORM {
    EMR emr;
    XFORM xform;
  } EMRSETWORLDTRANSFORM,*PEMRSETWORLDTRANSFORM;

  typedef struct tagEMRMODIFYWORLDTRANSFORM {
    EMR emr;
    XFORM xform;
    DWORD iMode;
  } EMRMODIFYWORLDTRANSFORM,*PEMRMODIFYWORLDTRANSFORM;

  typedef struct tagEMRSETPIXELV {
    EMR emr;
    POINTL ptlPixel;
    COLORREF crColor;
  } EMRSETPIXELV,*PEMRSETPIXELV;

  typedef struct tagEMREXTFLOODFILL {
    EMR emr;
    POINTL ptlStart;
    COLORREF crColor;
    DWORD iMode;
  } EMREXTFLOODFILL,*PEMREXTFLOODFILL;

  typedef struct tagEMRELLIPSE {
    EMR emr;
    RECTL rclBox;
  } EMRELLIPSE,*PEMRELLIPSE,EMRRECTANGLE,*PEMRRECTANGLE;

  typedef struct tagEMRROUNDRECT {
    EMR emr;
    RECTL rclBox;
    SIZEL szlCorner;
  } EMRROUNDRECT,*PEMRROUNDRECT;

  typedef struct tagEMRARC {
    EMR emr;
    RECTL rclBox;
    POINTL ptlStart;
    POINTL ptlEnd;
  } EMRARC,*PEMRARC,EMRARCTO,*PEMRARCTO,EMRCHORD,*PEMRCHORD,EMRPIE,*PEMRPIE;

  typedef struct tagEMRANGLEARC {
    EMR emr;
    POINTL ptlCenter;
    DWORD nRadius;
    FLOAT eStartAngle;
    FLOAT eSweepAngle;
  } EMRANGLEARC,*PEMRANGLEARC;

  typedef struct tagEMRPOLYLINE {
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
  } EMRPOLYLINE,*PEMRPOLYLINE,EMRPOLYBEZIER,*PEMRPOLYBEZIER,EMRPOLYGON,*PEMRPOLYGON,EMRPOLYBEZIERTO,*PEMRPOLYBEZIERTO,EMRPOLYLINETO,*PEMRPOLYLINETO;

  typedef struct tagEMRPOLYLINE16 {
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
  } EMRPOLYLINE16,*PEMRPOLYLINE16,EMRPOLYBEZIER16,*PEMRPOLYBEZIER16,EMRPOLYGON16,*PEMRPOLYGON16,EMRPOLYBEZIERTO16,*PEMRPOLYBEZIERTO16,EMRPOLYLINETO16,*PEMRPOLYLINETO16;

  typedef struct tagEMRPOLYDRAW {
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
    BYTE abTypes[1];
  } EMRPOLYDRAW,*PEMRPOLYDRAW;

  typedef struct tagEMRPOLYDRAW16 {
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
    BYTE abTypes[1];
  } EMRPOLYDRAW16,*PEMRPOLYDRAW16;

  typedef struct tagEMRPOLYPOLYLINE {
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cptl;
    DWORD aPolyCounts[1];
    POINTL aptl[1];
  } EMRPOLYPOLYLINE,*PEMRPOLYPOLYLINE,EMRPOLYPOLYGON,*PEMRPOLYPOLYGON;

  typedef struct tagEMRPOLYPOLYLINE16 {
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cpts;
    DWORD aPolyCounts[1];
    POINTS apts[1];
  } EMRPOLYPOLYLINE16,*PEMRPOLYPOLYLINE16,EMRPOLYPOLYGON16,*PEMRPOLYPOLYGON16;

  typedef struct tagEMRINVERTRGN {
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    BYTE RgnData[1];
  } EMRINVERTRGN,*PEMRINVERTRGN,EMRPAINTRGN,*PEMRPAINTRGN;

  typedef struct tagEMRFILLRGN {
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    BYTE RgnData[1];
  } EMRFILLRGN,*PEMRFILLRGN;

  typedef struct tagEMRFRAMERGN {
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    SIZEL szlStroke;
    BYTE RgnData[1];
  } EMRFRAMERGN,*PEMRFRAMERGN;

  typedef struct tagEMREXTSELECTCLIPRGN {
    EMR emr;
    DWORD cbRgnData;
    DWORD iMode;
    BYTE RgnData[1];
  } EMREXTSELECTCLIPRGN,*PEMREXTSELECTCLIPRGN;

  typedef struct tagEMREXTTEXTOUTA {
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    EMRTEXT emrtext;
  } EMREXTTEXTOUTA,*PEMREXTTEXTOUTA,EMREXTTEXTOUTW,*PEMREXTTEXTOUTW;

  typedef struct tagEMRPOLYTEXTOUTA {
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    LONG cStrings;
    EMRTEXT aemrtext[1];
  } EMRPOLYTEXTOUTA,*PEMRPOLYTEXTOUTA,EMRPOLYTEXTOUTW,*PEMRPOLYTEXTOUTW;

  typedef struct tagEMRBITBLT {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
  } EMRBITBLT,*PEMRBITBLT;

  typedef struct tagEMRSTRETCHBLT {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
  } EMRSTRETCHBLT,*PEMRSTRETCHBLT;

  typedef struct tagEMRMASKBLT {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
  } EMRMASKBLT,*PEMRMASKBLT;

  typedef struct tagEMRPLGBLT {
    EMR emr;
    RECTL rclBounds;
    POINTL aptlDest[3];
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
  } EMRPLGBLT,*PEMRPLGBLT;

  typedef struct tagEMRSETDIBITSTODEVICE {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD iStartScan;
    DWORD cScans;
  } EMRSETDIBITSTODEVICE,*PEMRSETDIBITSTODEVICE;

  typedef struct tagEMRSTRETCHDIBITS {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD dwRop;
    LONG cxDest;
    LONG cyDest;
  } EMRSTRETCHDIBITS,*PEMRSTRETCHDIBITS;

  typedef struct tagEMREXTCREATEFONTINDIRECTW {
    EMR emr;
    DWORD ihFont;
    EXTLOGFONTW elfw;
  } EMREXTCREATEFONTINDIRECTW,*PEMREXTCREATEFONTINDIRECTW;

  typedef struct tagEMRCREATEPALETTE {
    EMR emr;
    DWORD ihPal;
    LOGPALETTE lgpl;
  } EMRCREATEPALETTE,*PEMRCREATEPALETTE;

  typedef struct tagEMRCREATEPEN {
    EMR emr;
    DWORD ihPen;
    LOGPEN lopn;
  } EMRCREATEPEN,*PEMRCREATEPEN;

  typedef struct tagEMREXTCREATEPEN {
    EMR emr;
    DWORD ihPen;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
    EXTLOGPEN elp;
  } EMREXTCREATEPEN,*PEMREXTCREATEPEN;

  typedef struct tagEMRCREATEBRUSHINDIRECT {
    EMR emr;
    DWORD ihBrush;
    LOGBRUSH32 lb;
  } EMRCREATEBRUSHINDIRECT,*PEMRCREATEBRUSHINDIRECT;

  typedef struct tagEMRCREATEMONOBRUSH {
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
  } EMRCREATEMONOBRUSH,*PEMRCREATEMONOBRUSH;

  typedef struct tagEMRCREATEDIBPATTERNBRUSHPT {
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
  } EMRCREATEDIBPATTERNBRUSHPT,*PEMRCREATEDIBPATTERNBRUSHPT;

  typedef struct tagEMRFORMAT {
    DWORD dSignature;
    DWORD nVersion;
    DWORD cbData;
    DWORD offData;
  } EMRFORMAT,*PEMRFORMAT;

  typedef struct tagEMRGLSRECORD {
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
  } EMRGLSRECORD,*PEMRGLSRECORD;

  typedef struct tagEMRGLSBOUNDEDRECORD {
    EMR emr;
    RECTL rclBounds;
    DWORD cbData;
    BYTE Data[1];
  } EMRGLSBOUNDEDRECORD,*PEMRGLSBOUNDEDRECORD;

  typedef struct tagEMRPIXELFORMAT {
    EMR emr;
    PIXELFORMATDESCRIPTOR pfd;
  } EMRPIXELFORMAT,*PEMRPIXELFORMAT;

  typedef struct tagEMRCREATECOLORSPACE {
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEA lcs;
  } EMRCREATECOLORSPACE,*PEMRCREATECOLORSPACE;

  typedef struct tagEMRSETCOLORSPACE {
    EMR emr;
    DWORD ihCS;
  } EMRSETCOLORSPACE,*PEMRSETCOLORSPACE,EMRSELECTCOLORSPACE,*PEMRSELECTCOLORSPACE,EMRDELETECOLORSPACE,*PEMRDELETECOLORSPACE;

  typedef struct tagEMREXTESCAPE {
    EMR emr;
    INT iEscape;
    INT cbEscData;
    BYTE EscData[1];
  } EMREXTESCAPE,*PEMREXTESCAPE,EMRDRAWESCAPE,*PEMRDRAWESCAPE;

  typedef struct tagEMRNAMEDESCAPE {
    EMR emr;
    INT iEscape;
    INT cbDriver;
    INT cbEscData;
    BYTE EscData[1];
  } EMRNAMEDESCAPE,*PEMRNAMEDESCAPE;



  typedef struct tagEMRSETICMPROFILE {
    EMR emr;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE Data[1];
  } EMRSETICMPROFILE,*PEMRSETICMPROFILE,EMRSETICMPROFILEA,*PEMRSETICMPROFILEA,EMRSETICMPROFILEW,*PEMRSETICMPROFILEW;



  typedef struct tagEMRCREATECOLORSPACEW {
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEW lcs;
    DWORD dwFlags;
    DWORD cbData;
    BYTE Data[1];
  } EMRCREATECOLORSPACEW,*PEMRCREATECOLORSPACEW;



  typedef struct tagCOLORMATCHTOTARGET {
    EMR emr;
    DWORD dwAction;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE Data[1];
  } EMRCOLORMATCHTOTARGET,*PEMRCOLORMATCHTOTARGET;

  typedef struct tagCOLORCORRECTPALETTE {
    EMR emr;
    DWORD ihPalette;
    DWORD nFirstEntry;
    DWORD nPalEntries;
    DWORD nReserved;
  } EMRCOLORCORRECTPALETTE,*PEMRCOLORCORRECTPALETTE;

  typedef struct tagEMRALPHABLEND {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
  } EMRALPHABLEND,*PEMRALPHABLEND;

  typedef struct tagEMRGRADIENTFILL {
    EMR emr;
    RECTL rclBounds;
    DWORD nVer;
    DWORD nTri;
    ULONG ulMode;
    TRIVERTEX Ver[1];
  } EMRGRADIENTFILL,*PEMRGRADIENTFILL;

  typedef struct tagEMRTRANSPARENTBLT {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
  } EMRTRANSPARENTBLT,*PEMRTRANSPARENTBLT;
# 4175 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) wglCopyContext(HGLRC,HGLRC,UINT);
  __attribute__((dllimport)) HGLRC __attribute__((__stdcall__)) wglCreateContext(HDC);
  __attribute__((dllimport)) HGLRC __attribute__((__stdcall__)) wglCreateLayerContext(HDC,int);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) wglDeleteContext(HGLRC);
  __attribute__((dllimport)) HGLRC __attribute__((__stdcall__)) wglGetCurrentContext(void);
  __attribute__((dllimport)) HDC __attribute__((__stdcall__)) wglGetCurrentDC(void);
  __attribute__((dllimport)) PROC __attribute__((__stdcall__)) wglGetProcAddress(LPCSTR);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) wglMakeCurrent(HDC,HGLRC);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) wglShareLists(HGLRC,HGLRC);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) wglUseFontBitmapsA(HDC,DWORD,DWORD,DWORD);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) wglUseFontBitmapsW(HDC,DWORD,DWORD,DWORD);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SwapBuffers(HDC);

  typedef struct _POINTFLOAT {
    FLOAT x;
    FLOAT y;
  } POINTFLOAT,*PPOINTFLOAT;

  typedef struct _GLYPHMETRICSFLOAT {
    FLOAT gmfBlackBoxX;
    FLOAT gmfBlackBoxY;
    POINTFLOAT gmfptGlyphOrigin;
    FLOAT gmfCellIncX;
    FLOAT gmfCellIncY;
  } GLYPHMETRICSFLOAT,*PGLYPHMETRICSFLOAT,*LPGLYPHMETRICSFLOAT;






  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) wglUseFontOutlinesA(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,int,LPGLYPHMETRICSFLOAT);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) wglUseFontOutlinesW(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,int,LPGLYPHMETRICSFLOAT);

  typedef struct tagLAYERPLANEDESCRIPTOR {
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerPlane;
    BYTE bReserved;
    COLORREF crTransparent;
  } LAYERPLANEDESCRIPTOR,*PLAYERPLANEDESCRIPTOR,*LPLAYERPLANEDESCRIPTOR;
# 4282 "/usr/i686-w64-mingw32/sys-root/mingw/include/wingdi.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) wglDescribeLayerPlane(HDC,int,int,UINT,LPLAYERPLANEDESCRIPTOR);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) wglSetLayerPaletteEntries(HDC,int,int,int,const COLORREF *);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) wglGetLayerPaletteEntries(HDC,int,int,int,COLORREF *);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) wglRealizeLayerPalette(HDC,int,WINBOOL);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) wglSwapLayerBuffers(HDC,UINT);

  typedef struct _WGLSWAP {
    HDC hdc;
    UINT uiFlags;
  } WGLSWAP,*PWGLSWAP,*LPWGLSWAP;



  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) wglSwapMultipleBuffers(UINT,const WGLSWAP *);
# 72 "/usr/i686-w64-mingw32/sys-root/mingw/include/windows.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 1 3 4
# 22 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw.h" 1 3 4
# 23 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdarg.h" 1 3 4
# 24 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/guiddef.h" 1 3 4
# 25 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 2 3 4







  typedef HANDLE HDWP;
  typedef void MENUTEMPLATEA;
  typedef void MENUTEMPLATEW;
  typedef PVOID LPMENUTEMPLATEA;
  typedef PVOID LPMENUTEMPLATEW;

  typedef MENUTEMPLATEA MENUTEMPLATE;
  typedef LPMENUTEMPLATEA LPMENUTEMPLATE;

  typedef LRESULT (__attribute__((__stdcall__)) *WNDPROC)(HWND,UINT,WPARAM,LPARAM);




  typedef INT_PTR (__attribute__((__stdcall__)) *DLGPROC) (HWND, UINT, WPARAM, LPARAM);



  typedef void (__attribute__((__stdcall__)) *TIMERPROC) (HWND, UINT, UINT_PTR, DWORD);
  typedef WINBOOL (__attribute__((__stdcall__)) *GRAYSTRINGPROC) (HDC, LPARAM, int);
  typedef WINBOOL (__attribute__((__stdcall__)) *WNDENUMPROC) (HWND, LPARAM);
  typedef LRESULT (__attribute__((__stdcall__)) *HOOKPROC) (int code, WPARAM wParam, LPARAM lParam);
  typedef void (__attribute__((__stdcall__)) *SENDASYNCPROC) (HWND, UINT, ULONG_PTR, LRESULT);

  typedef WINBOOL (__attribute__((__stdcall__)) *PROPENUMPROCA) (HWND, LPCSTR, HANDLE);
  typedef WINBOOL (__attribute__((__stdcall__)) *PROPENUMPROCW) (HWND, LPCWSTR, HANDLE);

  typedef WINBOOL (__attribute__((__stdcall__)) *PROPENUMPROCEXA) (HWND, LPSTR, HANDLE, ULONG_PTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *PROPENUMPROCEXW) (HWND, LPWSTR, HANDLE, ULONG_PTR);

  typedef int (__attribute__((__stdcall__)) *EDITWORDBREAKPROCA) (LPSTR lpch, int ichCurrent, int cch, int code);
  typedef int (__attribute__((__stdcall__)) *EDITWORDBREAKPROCW) (LPWSTR lpch, int ichCurrent, int cch, int code);

  typedef WINBOOL (__attribute__((__stdcall__)) *DRAWSTATEPROC) (HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);
# 93 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef PROPENUMPROCA PROPENUMPROC;
  typedef PROPENUMPROCEXA PROPENUMPROCEX;
  typedef EDITWORDBREAKPROCA EDITWORDBREAKPROC;


  typedef WINBOOL (__attribute__((__stdcall__)) *NAMEENUMPROCA) (LPSTR, LPARAM);
  typedef WINBOOL (__attribute__((__stdcall__)) *NAMEENUMPROCW) (LPWSTR, LPARAM);
  typedef NAMEENUMPROCA WINSTAENUMPROCA;
  typedef NAMEENUMPROCW WINSTAENUMPROCW;
  typedef NAMEENUMPROCA DESKTOPENUMPROCA;
  typedef NAMEENUMPROCW DESKTOPENUMPROCW;
# 113 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef WINSTAENUMPROCA WINSTAENUMPROC;
  typedef DESKTOPENUMPROCA DESKTOPENUMPROC;
# 168 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) int __attribute__((__stdcall__)) wvsprintfA(LPSTR,LPCSTR,va_list arglist);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) wvsprintfW(LPWSTR,LPCWSTR,va_list arglist);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) wsprintfA(LPSTR,LPCSTR,...);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) wsprintfW(LPWSTR,LPCWSTR,...);
# 456 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagCBT_CREATEWNDA {
    struct tagCREATESTRUCTA *lpcs;
    HWND hwndInsertAfter;
  } CBT_CREATEWNDA,*LPCBT_CREATEWNDA;

  typedef struct tagCBT_CREATEWNDW {
    struct tagCREATESTRUCTW *lpcs;
    HWND hwndInsertAfter;
  } CBT_CREATEWNDW,*LPCBT_CREATEWNDW;

  typedef CBT_CREATEWNDA CBT_CREATEWND;
  typedef LPCBT_CREATEWNDA LPCBT_CREATEWND;

  typedef struct tagCBTACTIVATESTRUCT {
    WINBOOL fMouse;
    HWND hWndActive;
  } CBTACTIVATESTRUCT,*LPCBTACTIVATESTRUCT;



  typedef struct tagWTSSESSION_NOTIFICATION {
    DWORD cbSize;
    DWORD dwSessionId;
  } WTSSESSION_NOTIFICATION,*PWTSSESSION_NOTIFICATION;
# 597 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct {
    HWND hwnd;
    RECT rc;
  } SHELLHOOKINFO,*LPSHELLHOOKINFO;

  typedef struct tagEVENTMSG {
    UINT message;
    UINT paramL;
    UINT paramH;
    DWORD time;
    HWND hwnd;
  } EVENTMSG,*PEVENTMSGMSG,*NPEVENTMSGMSG,*LPEVENTMSGMSG;

  typedef struct tagEVENTMSG *PEVENTMSG,*NPEVENTMSG,*LPEVENTMSG;

  typedef struct tagCWPSTRUCT {
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
  } CWPSTRUCT,*PCWPSTRUCT,*NPCWPSTRUCT,*LPCWPSTRUCT;

  typedef struct tagCWPRETSTRUCT {
    LRESULT lResult;
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
  } CWPRETSTRUCT,*PCWPRETSTRUCT,*NPCWPRETSTRUCT,*LPCWPRETSTRUCT;
# 636 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagKBDLLHOOKSTRUCT {
    DWORD vkCode;
    DWORD scanCode;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
  } KBDLLHOOKSTRUCT,*LPKBDLLHOOKSTRUCT,*PKBDLLHOOKSTRUCT;

  typedef struct tagMSLLHOOKSTRUCT {
    POINT pt;
    DWORD mouseData;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
  } MSLLHOOKSTRUCT,*LPMSLLHOOKSTRUCT,*PMSLLHOOKSTRUCT;

  typedef struct tagDEBUGHOOKINFO {
    DWORD idThread;
    DWORD idThreadInstaller;
    LPARAM lParam;
    WPARAM wParam;
    int code;
  } DEBUGHOOKINFO,*PDEBUGHOOKINFO,*NPDEBUGHOOKINFO,*LPDEBUGHOOKINFO;

  typedef struct tagMOUSEHOOKSTRUCT {
    POINT pt;
    HWND hwnd;
    UINT wHitTestCode;
    ULONG_PTR dwExtraInfo;
  } MOUSEHOOKSTRUCT,*LPMOUSEHOOKSTRUCT,*PMOUSEHOOKSTRUCT;






  typedef struct tagMOUSEHOOKSTRUCTEX {
    MOUSEHOOKSTRUCT __unnamed;
    DWORD mouseData;
  } MOUSEHOOKSTRUCTEX,*LPMOUSEHOOKSTRUCTEX,*PMOUSEHOOKSTRUCTEX;


  typedef struct tagHARDWAREHOOKSTRUCT {
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
  } HARDWAREHOOKSTRUCT,*LPHARDWAREHOOKSTRUCT,*PHARDWAREHOOKSTRUCT;
# 709 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) HKL __attribute__((__stdcall__)) LoadKeyboardLayoutA(LPCSTR pwszKLID,UINT Flags);
  __attribute__((dllimport)) HKL __attribute__((__stdcall__)) LoadKeyboardLayoutW(LPCWSTR pwszKLID,UINT Flags);
  __attribute__((dllimport)) HKL __attribute__((__stdcall__)) ActivateKeyboardLayout(HKL hkl,UINT Flags);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) ToUnicodeEx(UINT wVirtKey,UINT wScanCode,const BYTE *lpKeyState,LPWSTR pwszBuff,int cchBuff,UINT wFlags,HKL dwhkl);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UnloadKeyboardLayout(HKL hkl);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetKeyboardLayoutNameA(LPSTR pwszKLID);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetKeyboardLayoutNameW(LPWSTR pwszKLID);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetKeyboardLayoutList(int nBuff,HKL *lpList);
  __attribute__((dllimport)) HKL __attribute__((__stdcall__)) GetKeyboardLayout(DWORD idThread);

  typedef struct tagMOUSEMOVEPOINT {
    int x;
    int y;
    DWORD time;
    ULONG_PTR dwExtraInfo;
  } MOUSEMOVEPOINT,*PMOUSEMOVEPOINT,*LPMOUSEMOVEPOINT;

  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetMouseMovePointsEx(UINT cbSize,LPMOUSEMOVEPOINT lppt,LPMOUSEMOVEPOINT lpptBuf,int nBufPoints,DWORD resolution);
# 753 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) HDESK __attribute__((__stdcall__)) CreateDesktopA(LPCSTR lpszDesktop,LPCSTR lpszDevice,LPDEVMODEA pDevmode,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa);
  __attribute__((dllimport)) HDESK __attribute__((__stdcall__)) CreateDesktopW(LPCWSTR lpszDesktop,LPCWSTR lpszDevice,LPDEVMODEW pDevmode,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa);
  __attribute__((dllimport)) HDESK __attribute__((__stdcall__)) CreateDesktopExA (LPCSTR lpszDesktop, LPCSTR lpszDevice, DEVMODEA *pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa, ULONG ulHeapSize, PVOID pvoid);
  __attribute__((dllimport)) HDESK __attribute__((__stdcall__)) CreateDesktopExW (LPCWSTR lpszDesktop, LPCWSTR lpszDevice, DEVMODEW *pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa, ULONG ulHeapSize, PVOID pvoid);






  __attribute__((dllimport)) HDESK __attribute__((__stdcall__)) OpenDesktopA(LPCSTR lpszDesktop,DWORD dwFlags,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess);
  __attribute__((dllimport)) HDESK __attribute__((__stdcall__)) OpenDesktopW(LPCWSTR lpszDesktop,DWORD dwFlags,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess);
  __attribute__((dllimport)) HDESK __attribute__((__stdcall__)) OpenInputDesktop(DWORD dwFlags,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumDesktopsA(HWINSTA hwinsta,DESKTOPENUMPROCA lpEnumFunc,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumDesktopsW(HWINSTA hwinsta,DESKTOPENUMPROCW lpEnumFunc,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumDesktopWindows(HDESK hDesktop,WNDENUMPROC lpfn,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SwitchDesktop(HDESK hDesktop);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetThreadDesktop(HDESK hDesktop);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CloseDesktop(HDESK hDesktop);
  __attribute__((dllimport)) HDESK __attribute__((__stdcall__)) GetThreadDesktop(DWORD dwThreadId);
# 797 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) HWINSTA __attribute__((__stdcall__)) CreateWindowStationA(LPCSTR lpwinsta,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa);
  __attribute__((dllimport)) HWINSTA __attribute__((__stdcall__)) CreateWindowStationW(LPCWSTR lpwinsta,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa);
  __attribute__((dllimport)) HWINSTA __attribute__((__stdcall__)) OpenWindowStationA(LPCSTR lpszWinSta,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess);
  __attribute__((dllimport)) HWINSTA __attribute__((__stdcall__)) OpenWindowStationW(LPCWSTR lpszWinSta,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumWindowStationsA(WINSTAENUMPROCA lpEnumFunc,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumWindowStationsW(WINSTAENUMPROCW lpEnumFunc,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CloseWindowStation(HWINSTA hWinSta);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetProcessWindowStation(HWINSTA hWinSta);
  __attribute__((dllimport)) HWINSTA __attribute__((__stdcall__)) GetProcessWindowStation(void);





  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetUserObjectSecurity(HANDLE hObj,PSECURITY_INFORMATION pSIRequested,PSECURITY_DESCRIPTOR pSID);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetUserObjectSecurity(HANDLE hObj,PSECURITY_INFORMATION pSIRequested,PSECURITY_DESCRIPTOR pSID,DWORD nLength,LPDWORD lpnLengthNeeded);
# 825 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagUSEROBJECTFLAGS {
    WINBOOL fInherit;
    WINBOOL fReserved;
    DWORD dwFlags;
  } USEROBJECTFLAGS,*PUSEROBJECTFLAGS;




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetUserObjectInformationA(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength,LPDWORD lpnLengthNeeded);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetUserObjectInformationW(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength,LPDWORD lpnLengthNeeded);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetUserObjectInformationA(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetUserObjectInformationW(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength);




  typedef struct tagWNDCLASSEXA {
    UINT cbSize;
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
    HICON hIconSm;
  } WNDCLASSEXA,*PWNDCLASSEXA,*NPWNDCLASSEXA,*LPWNDCLASSEXA;

  typedef struct tagWNDCLASSEXW {
    UINT cbSize;
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
    HICON hIconSm;
  } WNDCLASSEXW,*PWNDCLASSEXW,*NPWNDCLASSEXW,*LPWNDCLASSEXW;

  typedef WNDCLASSEXA WNDCLASSEX;
  typedef PWNDCLASSEXA PWNDCLASSEX;
  typedef NPWNDCLASSEXA NPWNDCLASSEX;
  typedef LPWNDCLASSEXA LPWNDCLASSEX;

  typedef struct tagWNDCLASSA {
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
  } WNDCLASSA,*PWNDCLASSA,*NPWNDCLASSA,*LPWNDCLASSA;

  typedef struct tagWNDCLASSW {
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
  } WNDCLASSW,*PWNDCLASSW,*NPWNDCLASSW,*LPWNDCLASSW;

  typedef WNDCLASSA WNDCLASS;
  typedef PWNDCLASSA PWNDCLASS;
  typedef NPWNDCLASSA NPWNDCLASS;
  typedef LPWNDCLASSA LPWNDCLASS;

  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsHungAppWindow(HWND hwnd);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) DisableProcessWindowsGhosting(void);




  typedef struct tagMSG {
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
    DWORD time;
    POINT pt;
  } MSG,*PMSG,*NPMSG,*LPMSG;
# 1031 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagMINMAXINFO {
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
  } MINMAXINFO,*PMINMAXINFO,*LPMINMAXINFO;
# 1074 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagCOPYDATASTRUCT {
    ULONG_PTR dwData;
    DWORD cbData;
    PVOID lpData;
  } COPYDATASTRUCT,*PCOPYDATASTRUCT;

  typedef struct tagMDINEXTMENU {
    HMENU hmenuIn;
    HMENU hmenuNext;
    HWND hwndNext;
  } MDINEXTMENU,*PMDINEXTMENU,*LPMDINEXTMENU;
# 1264 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct {
    GUID PowerSetting;
    DWORD DataLength;
    UCHAR Data[1];
  } POWERBROADCAST_SETTING,*PPOWERBROADCAST_SETTING;
# 1442 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) RegisterWindowMessageA(LPCSTR lpString);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) RegisterWindowMessageW(LPCWSTR lpString);
# 1459 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagWINDOWPOS {
    HWND hwnd;
    HWND hwndInsertAfter;
    int x;
    int y;
    int cx;
    int cy;
    UINT flags;
  } WINDOWPOS,*LPWINDOWPOS,*PWINDOWPOS;

  typedef struct tagNCCALCSIZE_PARAMS {
    RECT rgrc[3];
    PWINDOWPOS lppos;
  } NCCALCSIZE_PARAMS,*LPNCCALCSIZE_PARAMS;
# 1506 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagTRACKMOUSEEVENT {
    DWORD cbSize;
    DWORD dwFlags;
    HWND hwndTrack;
    DWORD dwHoverTime;
  } TRACKMOUSEEVENT,*LPTRACKMOUSEEVENT;

  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) TrackMouseEvent(LPTRACKMOUSEEVENT lpEventTrack);
# 1641 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DrawEdge(HDC hdc,LPRECT qrc,UINT edge,UINT grfFlags);
# 1687 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DrawFrameControl(HDC,LPRECT,UINT,UINT);
# 1699 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DrawCaption(HWND hwnd,HDC hdc,const RECT *lprect,UINT flags);






  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DrawAnimatedRects(HWND hwnd,int idAni,const RECT *lprcFrom,const RECT *lprcTo);
# 1750 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagACCEL {
    BYTE fVirt;
    WORD key;
    WORD cmd;
  } ACCEL,*LPACCEL;

  typedef struct tagPAINTSTRUCT {
    HDC hdc;
    WINBOOL fErase;
    RECT rcPaint;
    WINBOOL fRestore;
    WINBOOL fIncUpdate;
    BYTE rgbReserved[32];
  } PAINTSTRUCT,*PPAINTSTRUCT,*NPPAINTSTRUCT,*LPPAINTSTRUCT;

  typedef struct tagCREATESTRUCTA {
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCSTR lpszName;
    LPCSTR lpszClass;
    DWORD dwExStyle;
  } CREATESTRUCTA,*LPCREATESTRUCTA;

  typedef struct tagCREATESTRUCTW {
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCWSTR lpszName;
    LPCWSTR lpszClass;
    DWORD dwExStyle;
  } CREATESTRUCTW,*LPCREATESTRUCTW;

  typedef CREATESTRUCTA CREATESTRUCT;
  typedef LPCREATESTRUCTA LPCREATESTRUCT;

  typedef struct tagWINDOWPLACEMENT {
    UINT length;
    UINT flags;
    UINT showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT rcNormalPosition;
  } WINDOWPLACEMENT;
  typedef WINDOWPLACEMENT *PWINDOWPLACEMENT,*LPWINDOWPLACEMENT;







  typedef struct tagNMHDR {
    HWND hwndFrom;
    UINT_PTR idFrom;
    UINT code;
  } NMHDR;



  typedef NMHDR *LPNMHDR;

  typedef struct tagSTYLESTRUCT {
    DWORD styleOld;
    DWORD styleNew;
  } STYLESTRUCT,*LPSTYLESTRUCT;
# 1853 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagMEASUREITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemWidth;
    UINT itemHeight;
    ULONG_PTR itemData;
  } MEASUREITEMSTRUCT,*PMEASUREITEMSTRUCT,*LPMEASUREITEMSTRUCT;

  typedef struct tagDRAWITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemAction;
    UINT itemState;
    HWND hwndItem;
    HDC hDC;
    RECT rcItem;
    ULONG_PTR itemData;
  } DRAWITEMSTRUCT,*PDRAWITEMSTRUCT,*LPDRAWITEMSTRUCT;

  typedef struct tagDELETEITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    HWND hwndItem;
    ULONG_PTR itemData;
  } DELETEITEMSTRUCT,*PDELETEITEMSTRUCT,*LPDELETEITEMSTRUCT;

  typedef struct tagCOMPAREITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    HWND hwndItem;
    UINT itemID1;
    ULONG_PTR itemData1;
    UINT itemID2;
    ULONG_PTR itemData2;
    DWORD dwLocaleId;
  } COMPAREITEMSTRUCT,*PCOMPAREITEMSTRUCT,*LPCOMPAREITEMSTRUCT;
# 1900 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetMessageA(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetMessageW(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) TranslateMessage(const MSG *lpMsg);
  __attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) DispatchMessageA(const MSG *lpMsg);
  __attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) DispatchMessageW(const MSG *lpMsg);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetMessageQueue(int cMessagesMax);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PeekMessageA(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax,UINT wRemoveMsg);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PeekMessageW(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax,UINT wRemoveMsg);
# 1921 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) RegisterHotKey(HWND hWnd,int id,UINT fsModifiers,UINT vk);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UnregisterHotKey(HWND hWnd,int id);
# 1970 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ExitWindowsEx(UINT uFlags,DWORD dwReason);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SwapMouseButton(WINBOOL fSwap);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetMessagePos(void);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) GetMessageTime(void);
  __attribute__((dllimport)) LPARAM __attribute__((__stdcall__)) GetMessageExtraInfo(void);



  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsWow64Message(void);
  __attribute__((dllimport)) LPARAM __attribute__((__stdcall__)) SetMessageExtraInfo(LPARAM lParam);
  __attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) SendMessageA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) SendMessageW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) SendMessageTimeoutA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,UINT fuFlags,UINT uTimeout,PDWORD_PTR lpdwResult);
  __attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) SendMessageTimeoutW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,UINT fuFlags,UINT uTimeout,PDWORD_PTR lpdwResult);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SendNotifyMessageA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SendNotifyMessageW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SendMessageCallbackA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,SENDASYNCPROC lpResultCallBack,ULONG_PTR dwData);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SendMessageCallbackW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,SENDASYNCPROC lpResultCallBack,ULONG_PTR dwData);

  typedef struct {
    UINT cbSize;
    HDESK hdesk;
    HWND hwnd;
    LUID luid;
  } BSMINFO,*PBSMINFO;




  __attribute__((dllimport)) long __attribute__((__stdcall__)) BroadcastSystemMessageExA(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam,PBSMINFO pbsmInfo);
  __attribute__((dllimport)) long __attribute__((__stdcall__)) BroadcastSystemMessageExW(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam,PBSMINFO pbsmInfo);
  __attribute__((dllimport)) long __attribute__((__stdcall__)) BroadcastSystemMessageA(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) long __attribute__((__stdcall__)) BroadcastSystemMessageW(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam);
# 2027 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef PVOID HDEVNOTIFY;
  typedef HDEVNOTIFY *PHDEVNOTIFY;
# 2051 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef HANDLE HPOWERNOTIFY;
  typedef HPOWERNOTIFY *PHPOWERNOTIFY;


  __attribute__((dllimport)) HPOWERNOTIFY __attribute__((__stdcall__)) RegisterPowerSettingNotification (HANDLE hRecipient, LPCGUID PowerSettingGuid, DWORD Flags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UnregisterPowerSettingNotification (HPOWERNOTIFY Handle);
  __attribute__((dllimport)) HPOWERNOTIFY __attribute__((__stdcall__)) RegisterSuspendResumeNotification (HANDLE hRecipient, DWORD Flags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UnregisterSuspendResumeNotification (HPOWERNOTIFY Handle);


  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PostMessageA (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PostMessageW (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PostThreadMessageA (DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PostThreadMessageW (DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam);




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AttachThreadInput (DWORD idAttach, DWORD idAttachTo, WINBOOL fAttach);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReplyMessage (LRESULT lResult);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WaitMessage (void);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) WaitForInputIdle (HANDLE hProcess, DWORD dwMilliseconds);
  __attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) DefWindowProcA (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  __attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) DefWindowProcW (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) PostQuitMessage (int nExitCode);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) InSendMessage (void);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) InSendMessageEx (LPVOID lpReserved);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetDoubleClickTime (void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetDoubleClickTime (UINT);
  __attribute__((dllimport)) ATOM __attribute__((__stdcall__)) RegisterClassA (const WNDCLASSA *lpWndClass);
  __attribute__((dllimport)) ATOM __attribute__((__stdcall__)) RegisterClassW (const WNDCLASSW *lpWndClass);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UnregisterClassA (LPCSTR lpClassName, HINSTANCE hInstance);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UnregisterClassW (LPCWSTR lpClassName, HINSTANCE hInstance);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetClassInfoA (HINSTANCE hInstance, LPCSTR lpClassName, LPWNDCLASSA lpWndClass);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetClassInfoW (HINSTANCE hInstance, LPCWSTR lpClassName, LPWNDCLASSW lpWndClass);
  __attribute__((dllimport)) ATOM __attribute__((__stdcall__)) RegisterClassExA (const WNDCLASSEXA *);
  __attribute__((dllimport)) ATOM __attribute__((__stdcall__)) RegisterClassExW (const WNDCLASSEXW *);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetClassInfoExA (HINSTANCE hInstance, LPCSTR lpszClass, LPWNDCLASSEXA lpwcx);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetClassInfoExW (HINSTANCE hInstance, LPCWSTR lpszClass, LPWNDCLASSEXW lpwcx);


  __attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) CallWindowProcA (WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
  __attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) CallWindowProcW (WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
# 2113 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  extern const GUID GUID_POWERSCHEME_PERSONALITY;
  extern const GUID GUID_MIN_POWER_SAVINGS;
  extern const GUID GUID_MAX_POWER_SAVINGS;
  extern const GUID GUID_TYPICAL_POWER_SAVINGS;
  extern const GUID GUID_ACDC_POWER_SOURCE;
  extern const GUID GUID_BATTERY_PERCENTAGE_REMAINING;
  extern const GUID GUID_IDLE_BACKGROUND_TASK;
  extern const GUID GUID_SYSTEM_AWAYMODE;
  extern const GUID GUID_MONITOR_POWER_ON;



  __attribute__((dllimport)) HDEVNOTIFY __attribute__((__stdcall__)) RegisterDeviceNotificationA(HANDLE hRecipient,LPVOID NotificationFilter,DWORD Flags);
  __attribute__((dllimport)) HDEVNOTIFY __attribute__((__stdcall__)) RegisterDeviceNotificationW(HANDLE hRecipient,LPVOID NotificationFilter,DWORD Flags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UnregisterDeviceNotification(HDEVNOTIFY Handle);

  typedef BOOLEAN (__attribute__((__stdcall__)) *PREGISTERCLASSNAMEW)(LPCWSTR);




  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) CreateWindowExA(DWORD dwExStyle,LPCSTR lpClassName,LPCSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HMENU hMenu,HINSTANCE hInstance,LPVOID lpParam);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) CreateWindowExW(DWORD dwExStyle,LPCWSTR lpClassName,LPCWSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HMENU hMenu,HINSTANCE hInstance,LPVOID lpParam);




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsWindow(HWND hWnd);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsMenu(HMENU hMenu);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsChild(HWND hWndParent,HWND hWnd);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DestroyWindow(HWND hWnd);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ShowWindow(HWND hWnd,int nCmdShow);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AnimateWindow(HWND hWnd,DWORD dwTime,DWORD dwFlags);




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UpdateLayeredWindow (HWND hWnd, HDC hdcDst, POINT *pptDst, SIZE *psize, HDC hdcSrc, POINT *pptSrc, COLORREF crKey, BLENDFUNCTION *pblend, DWORD dwFlags);

  typedef struct tagUPDATELAYEREDWINDOWINFO {
    DWORD cbSize;
    HDC hdcDst;
    const POINT *pptDst;
    const SIZE *psize;
    HDC hdcSrc;
    const POINT *pptSrc;
    COLORREF crKey;
    const BLENDFUNCTION *pblend;
    DWORD dwFlags;
    const RECT *prcDirty;
  } UPDATELAYEREDWINDOWINFO,*PUPDATELAYEREDWINDOWINFO;




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UpdateLayeredWindowIndirect (HWND hWnd, const UPDATELAYEREDWINDOWINFO *pULWInfo);




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetLayeredWindowAttributes (HWND hwnd, COLORREF *pcrKey, BYTE *pbAlpha, DWORD *pdwFlags);



  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PrintWindow (HWND hwnd, HDC hdcBlt, UINT nFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetLayeredWindowAttributes (HWND hwnd, COLORREF crKey, BYTE bAlpha, DWORD dwFlags);
# 2197 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct {
    UINT cbSize;
    HWND hwnd;
    DWORD dwFlags;
    UINT uCount;
    DWORD dwTimeout;
  } FLASHWINFO,*PFLASHWINFO;

  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ShowWindowAsync (HWND hWnd, int nCmdShow);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FlashWindow (HWND hWnd, WINBOOL bInvert);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FlashWindowEx (PFLASHWINFO pfwi);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ShowOwnedPopups (HWND hWnd, WINBOOL fShow);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) OpenIcon (HWND hWnd);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CloseWindow (HWND hWnd);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) MoveWindow (HWND hWnd, int X, int Y, int nWidth, int nHeight, WINBOOL bRepaint);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetWindowPos (HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetWindowPlacement (HWND hWnd, WINDOWPLACEMENT *lpwndpl);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetWindowPlacement (HWND hWnd, const WINDOWPLACEMENT *lpwndpl);
# 2227 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) HDWP __attribute__((__stdcall__)) BeginDeferWindowPos (int nNumWindows);
  __attribute__((dllimport)) HDWP __attribute__((__stdcall__)) DeferWindowPos (HDWP hWinPosInfo, HWND hWnd, HWND hWndInsertAfter, int x, int y, int cx, int cy, UINT uFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EndDeferWindowPos (HDWP hWinPosInfo);




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsWindowVisible (HWND hWnd);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsIconic (HWND hWnd);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AnyPopup (void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) BringWindowToTop (HWND hWnd);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsZoomed (HWND hWnd);
# 2265 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/pshpack2.h" 1 3 4






#pragma pack(push,2)
# 2266 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 2 3 4


  typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
  } DLGTEMPLATE;



  typedef DLGTEMPLATE *LPDLGTEMPLATEA;
  typedef DLGTEMPLATE *LPDLGTEMPLATEW;

  typedef LPDLGTEMPLATEA LPDLGTEMPLATE;



  typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
  typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;

  typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;



  typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
  } DLGITEMTEMPLATE;

  typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
  typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;

  typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;

  typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
  typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;

  typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;


# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/poppack.h" 1 3 4






#pragma pack(pop)
# 2316 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 2 3 4
# 2331 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) CreateDialogParamA(HINSTANCE hInstance,LPCSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) CreateDialogParamW(HINSTANCE hInstance,LPCWSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) CreateDialogIndirectParamA(HINSTANCE hInstance,LPCDLGTEMPLATEA lpTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) CreateDialogIndirectParamW(HINSTANCE hInstance,LPCDLGTEMPLATEW lpTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);






  __attribute__((dllimport)) INT_PTR __attribute__((__stdcall__)) DialogBoxParamA(HINSTANCE hInstance,LPCSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
  __attribute__((dllimport)) INT_PTR __attribute__((__stdcall__)) DialogBoxParamW(HINSTANCE hInstance,LPCWSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
  __attribute__((dllimport)) INT_PTR __attribute__((__stdcall__)) DialogBoxIndirectParamA(HINSTANCE hInstance,LPCDLGTEMPLATEA hDialogTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
  __attribute__((dllimport)) INT_PTR __attribute__((__stdcall__)) DialogBoxIndirectParamW(HINSTANCE hInstance,LPCDLGTEMPLATEW hDialogTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EndDialog(HWND hDlg,INT_PTR nResult);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetDlgItem(HWND hDlg,int nIDDlgItem);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetDlgItemInt(HWND hDlg,int nIDDlgItem,UINT uValue,WINBOOL bSigned);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetDlgItemInt(HWND hDlg,int nIDDlgItem,WINBOOL *lpTranslated,WINBOOL bSigned);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetDlgItemTextA(HWND hDlg,int nIDDlgItem,LPCSTR lpString);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetDlgItemTextW(HWND hDlg,int nIDDlgItem,LPCWSTR lpString);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetDlgItemTextA(HWND hDlg,int nIDDlgItem,LPSTR lpString,int cchMax);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetDlgItemTextW(HWND hDlg,int nIDDlgItem,LPWSTR lpString,int cchMax);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CheckDlgButton(HWND hDlg,int nIDButton,UINT uCheck);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CheckRadioButton(HWND hDlg,int nIDFirstButton,int nIDLastButton,int nIDCheckButton);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) IsDlgButtonChecked(HWND hDlg,int nIDButton);
  __attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) SendDlgItemMessageA(HWND hDlg,int nIDDlgItem,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) SendDlgItemMessageW(HWND hDlg,int nIDDlgItem,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetNextDlgGroupItem(HWND hDlg,HWND hCtl,WINBOOL bPrevious);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetNextDlgTabItem(HWND hDlg,HWND hCtl,WINBOOL bPrevious);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetDlgCtrlID(HWND hWnd);
  __attribute__((dllimport)) long __attribute__((__stdcall__)) GetDialogBaseUnits(void);
  __attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) DefDlgProcA(HWND hDlg,UINT Msg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) DefDlgProcW(HWND hDlg,UINT Msg,WPARAM wParam,LPARAM lParam);
# 2377 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CallMsgFilterA(LPMSG lpMsg,int nCode);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CallMsgFilterW(LPMSG lpMsg,int nCode);
# 2387 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) OpenClipboard(HWND hWndNewOwner);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CloseClipboard(void);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetClipboardSequenceNumber(void);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetClipboardOwner(void);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) SetClipboardViewer(HWND hWndNewViewer);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetClipboardViewer(void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ChangeClipboardChain(HWND hWndRemove, HWND hWndNewNext);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) SetClipboardData(UINT uFormat, HANDLE hMem);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) GetClipboardData(UINT uFormat);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) RegisterClipboardFormatA(LPCSTR lpszFormat);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) RegisterClipboardFormatW(LPCWSTR lpszFormat);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) CountClipboardFormats(void);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) EnumClipboardFormats(UINT format);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetClipboardFormatNameA(UINT format, LPSTR lpszFormatName, int cchMaxCount);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetClipboardFormatNameW(UINT format, LPWSTR lpszFormatName, int cchMaxCount);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EmptyClipboard(void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsClipboardFormatAvailable(UINT format);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetPriorityClipboardFormat(UINT *paFormatPriorityList, int cFormats);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetOpenClipboardWindow(void);
# 2426 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CharToOemA(LPCSTR lpszSrc,LPSTR lpszDst);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CharToOemW(LPCWSTR lpszSrc,LPSTR lpszDst);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) OemToCharA(LPCSTR lpszSrc,LPSTR lpszDst);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) OemToCharW(LPCSTR lpszSrc,LPWSTR lpszDst);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CharToOemBuffA(LPCSTR lpszSrc,LPSTR lpszDst,DWORD cchDstLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CharToOemBuffW(LPCWSTR lpszSrc,LPSTR lpszDst,DWORD cchDstLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) OemToCharBuffA(LPCSTR lpszSrc,LPSTR lpszDst,DWORD cchDstLength);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) OemToCharBuffW(LPCSTR lpszSrc,LPWSTR lpszDst,DWORD cchDstLength);
  __attribute__((dllimport)) LPSTR __attribute__((__stdcall__)) CharUpperA(LPSTR lpsz);
  __attribute__((dllimport)) LPWSTR __attribute__((__stdcall__)) CharUpperW(LPWSTR lpsz);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) CharUpperBuffA(LPSTR lpsz,DWORD cchLength);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) CharUpperBuffW(LPWSTR lpsz,DWORD cchLength);
  __attribute__((dllimport)) LPSTR __attribute__((__stdcall__)) CharLowerA(LPSTR lpsz);
  __attribute__((dllimport)) LPWSTR __attribute__((__stdcall__)) CharLowerW(LPWSTR lpsz);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) CharLowerBuffA(LPSTR lpsz,DWORD cchLength);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) CharLowerBuffW(LPWSTR lpsz,DWORD cchLength);
  __attribute__((dllimport)) LPSTR __attribute__((__stdcall__)) CharNextA(LPCSTR lpsz);
  __attribute__((dllimport)) LPWSTR __attribute__((__stdcall__)) CharNextW(LPCWSTR lpsz);
  __attribute__((dllimport)) LPSTR __attribute__((__stdcall__)) CharPrevA(LPCSTR lpszStart,LPCSTR lpszCurrent);
  __attribute__((dllimport)) LPWSTR __attribute__((__stdcall__)) CharPrevW(LPCWSTR lpszStart,LPCWSTR lpszCurrent);
  __attribute__((dllimport)) LPSTR __attribute__((__stdcall__)) CharNextExA(WORD CodePage,LPCSTR lpCurrentChar,DWORD dwFlags);
  __attribute__((dllimport)) LPSTR __attribute__((__stdcall__)) CharPrevExA(WORD CodePage,LPCSTR lpStart,LPCSTR lpCurrentChar,DWORD dwFlags);
# 2468 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsCharAlphaA(CHAR ch);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsCharAlphaW(WCHAR ch);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsCharAlphaNumericA(CHAR ch);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsCharAlphaNumericW(WCHAR ch);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsCharUpperA(CHAR ch);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsCharUpperW(WCHAR ch);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsCharLowerA(CHAR ch);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsCharLowerW(WCHAR ch);
# 2484 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) SetFocus(HWND hWnd);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetActiveWindow(void);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetFocus(void);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetKBCodePage(void);
  __attribute__((dllimport)) SHORT __attribute__((__stdcall__)) GetKeyState(int nVirtKey);
  __attribute__((dllimport)) SHORT __attribute__((__stdcall__)) GetAsyncKeyState(int vKey);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetKeyboardState(PBYTE lpKeyState);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetKeyboardState(LPBYTE lpKeyState);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetKeyNameTextA(LONG lParam,LPSTR lpString,int cchSize);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetKeyNameTextW(LONG lParam,LPWSTR lpString,int cchSize);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetKeyboardType(int nTypeFlag);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) ToAscii(UINT uVirtKey,UINT uScanCode,const BYTE *lpKeyState,LPWORD lpChar,UINT uFlags);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) ToAsciiEx(UINT uVirtKey,UINT uScanCode,const BYTE *lpKeyState,LPWORD lpChar,UINT uFlags,HKL dwhkl);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) ToUnicode(UINT wVirtKey,UINT wScanCode,const BYTE *lpKeyState,LPWSTR pwszBuff,int cchBuff,UINT wFlags);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) OemKeyScan(WORD wOemChar);
  __attribute__((dllimport)) SHORT __attribute__((__stdcall__)) VkKeyScanA(CHAR ch);
  __attribute__((dllimport)) SHORT __attribute__((__stdcall__)) VkKeyScanW(WCHAR ch);
  __attribute__((dllimport)) SHORT __attribute__((__stdcall__)) VkKeyScanExA(CHAR ch,HKL dwhkl);
  __attribute__((dllimport)) SHORT __attribute__((__stdcall__)) VkKeyScanExW(WCHAR ch,HKL dwhkl);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) keybd_event(BYTE bVk,BYTE bScan,DWORD dwFlags,ULONG_PTR dwExtraInfo);
# 2641 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) void __attribute__((__stdcall__)) mouse_event(DWORD dwFlags,DWORD dx,DWORD dy,DWORD dwData,ULONG_PTR dwExtraInfo);

  typedef struct tagMOUSEINPUT {
    LONG dx;
    LONG dy;
    DWORD mouseData;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
  } MOUSEINPUT,*PMOUSEINPUT,*LPMOUSEINPUT;

  typedef struct tagKEYBDINPUT {
    WORD wVk;
    WORD wScan;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
  } KEYBDINPUT,*PKEYBDINPUT,*LPKEYBDINPUT;

  typedef struct tagHARDWAREINPUT {
    DWORD uMsg;
    WORD wParamL;
    WORD wParamH;
  } HARDWAREINPUT,*PHARDWAREINPUT,*LPHARDWAREINPUT;

  typedef struct tagINPUT {
    DWORD type;
    __extension__ union {
      MOUSEINPUT mi;
      KEYBDINPUT ki;
      HARDWAREINPUT hi;
    } ;
  } INPUT,*PINPUT,*LPINPUT;

  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) SendInput(UINT cInputs,LPINPUT pInputs,int cbSize);
# 2827 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagLASTINPUTINFO {
    UINT cbSize;
    DWORD dwTime;
  } LASTINPUTINFO,*PLASTINPUTINFO;




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetLastInputInfo(PLASTINPUTINFO plii);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) MapVirtualKeyA(UINT uCode,UINT uMapType);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) MapVirtualKeyW(UINT uCode,UINT uMapType);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) MapVirtualKeyExA(UINT uCode,UINT uMapType,HKL dwhkl);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) MapVirtualKeyExW(UINT uCode,UINT uMapType,HKL dwhkl);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetInputState(void);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetQueueStatus(UINT flags);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetCapture(void);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) SetCapture(HWND hWnd);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReleaseCapture(void);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) MsgWaitForMultipleObjects(DWORD nCount,const HANDLE *pHandles,WINBOOL fWaitAll,DWORD dwMilliseconds,DWORD dwWakeMask);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) MsgWaitForMultipleObjectsEx(DWORD nCount,const HANDLE *pHandles,DWORD dwMilliseconds,DWORD dwWakeMask,DWORD dwFlags);
# 2901 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) UINT_PTR __attribute__((__stdcall__)) SetTimer(HWND hWnd,UINT_PTR nIDEvent,UINT uElapse,TIMERPROC lpTimerFunc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) KillTimer(HWND hWnd,UINT_PTR uIDEvent);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsWindowUnicode(HWND hWnd);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnableWindow(HWND hWnd,WINBOOL bEnable);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsWindowEnabled(HWND hWnd);
  __attribute__((dllimport)) HACCEL __attribute__((__stdcall__)) LoadAcceleratorsA(HINSTANCE hInstance,LPCSTR lpTableName);
  __attribute__((dllimport)) HACCEL __attribute__((__stdcall__)) LoadAcceleratorsW(HINSTANCE hInstance,LPCWSTR lpTableName);
  __attribute__((dllimport)) HACCEL __attribute__((__stdcall__)) CreateAcceleratorTableA(LPACCEL paccel,int cAccel);
  __attribute__((dllimport)) HACCEL __attribute__((__stdcall__)) CreateAcceleratorTableW(LPACCEL paccel,int cAccel);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DestroyAcceleratorTable(HACCEL hAccel);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) CopyAcceleratorTableA(HACCEL hAccelSrc,LPACCEL lpAccelDst,int cAccelEntries);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) CopyAcceleratorTableW(HACCEL hAccelSrc,LPACCEL lpAccelDst,int cAccelEntries);




  __attribute__((dllimport)) int __attribute__((__stdcall__)) TranslateAcceleratorA(HWND hWnd,HACCEL hAccTable,LPMSG lpMsg);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) TranslateAcceleratorW(HWND hWnd,HACCEL hAccTable,LPMSG lpMsg);
# 3047 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetSystemMetrics(int nIndex);
# 3114 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) HMENU __attribute__((__stdcall__)) LoadMenuA(HINSTANCE hInstance,LPCSTR lpMenuName);
  __attribute__((dllimport)) HMENU __attribute__((__stdcall__)) LoadMenuW(HINSTANCE hInstance,LPCWSTR lpMenuName);
  __attribute__((dllimport)) HMENU __attribute__((__stdcall__)) LoadMenuIndirectA(const MENUTEMPLATEA *lpMenuTemplate);
  __attribute__((dllimport)) HMENU __attribute__((__stdcall__)) LoadMenuIndirectW(const MENUTEMPLATEW *lpMenuTemplate);
  __attribute__((dllimport)) HMENU __attribute__((__stdcall__)) GetMenu(HWND hWnd);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetMenu(HWND hWnd,HMENU hMenu);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ChangeMenuA(HMENU hMenu,UINT cmd,LPCSTR lpszNewItem,UINT cmdInsert,UINT flags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ChangeMenuW(HMENU hMenu,UINT cmd,LPCWSTR lpszNewItem,UINT cmdInsert,UINT flags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) HiliteMenuItem(HWND hWnd,HMENU hMenu,UINT uIDHiliteItem,UINT uHilite);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetMenuStringA(HMENU hMenu,UINT uIDItem,LPSTR lpString,int cchMax,UINT flags);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetMenuStringW(HMENU hMenu,UINT uIDItem,LPWSTR lpString,int cchMax,UINT flags);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetMenuState(HMENU hMenu,UINT uId,UINT uFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DrawMenuBar(HWND hWnd);

  __attribute__((dllimport)) HMENU __attribute__((__stdcall__)) GetSystemMenu(HWND hWnd,WINBOOL bRevert);
  __attribute__((dllimport)) HMENU __attribute__((__stdcall__)) CreateMenu(void);
  __attribute__((dllimport)) HMENU __attribute__((__stdcall__)) CreatePopupMenu(void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DestroyMenu(HMENU hMenu);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) CheckMenuItem(HMENU hMenu,UINT uIDCheckItem,UINT uCheck);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnableMenuItem(HMENU hMenu,UINT uIDEnableItem,UINT uEnable);
  __attribute__((dllimport)) HMENU __attribute__((__stdcall__)) GetSubMenu(HMENU hMenu,int nPos);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetMenuItemID(HMENU hMenu,int nPos);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetMenuItemCount(HMENU hMenu);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) InsertMenuA(HMENU hMenu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCSTR lpNewItem);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) InsertMenuW(HMENU hMenu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCWSTR lpNewItem);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AppendMenuA(HMENU hMenu,UINT uFlags,UINT_PTR uIDNewItem,LPCSTR lpNewItem);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AppendMenuW(HMENU hMenu,UINT uFlags,UINT_PTR uIDNewItem,LPCWSTR lpNewItem);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ModifyMenuA(HMENU hMnu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCSTR lpNewItem);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ModifyMenuW(HMENU hMnu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCWSTR lpNewItem);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) RemoveMenu(HMENU hMenu,UINT uPosition,UINT uFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DeleteMenu(HMENU hMenu,UINT uPosition,UINT uFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetMenuItemBitmaps(HMENU hMenu,UINT uPosition,UINT uFlags,HBITMAP hBitmapUnchecked,HBITMAP hBitmapChecked);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) GetMenuCheckMarkDimensions(void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) TrackPopupMenu(HMENU hMenu,UINT uFlags,int x,int y,int nReserved,HWND hWnd,const RECT *prcRect);

  typedef struct tagTPMPARAMS {
    UINT cbSize;
    RECT rcExclude;
  } TPMPARAMS;

  typedef struct tagMENUINFO {
    DWORD cbSize;
    DWORD fMask;
    DWORD dwStyle;
    UINT cyMax;
    HBRUSH hbrBack;
    DWORD dwContextHelpID;
    ULONG_PTR dwMenuData;
  } MENUINFO,*LPMENUINFO;

  typedef TPMPARAMS *LPTPMPARAMS;
  typedef MENUINFO const *LPCMENUINFO;

  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) TrackPopupMenuEx(HMENU,UINT,int,int,HWND,LPTPMPARAMS);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetMenuInfo(HMENU,LPMENUINFO);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetMenuInfo(HMENU,LPCMENUINFO);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EndMenu(void);




  typedef struct tagMENUGETOBJECTINFO {
    DWORD dwFlags;
    UINT uPos;
    HMENU hmenu;
    PVOID riid;
    PVOID pvObj;
  } MENUGETOBJECTINFO,*PMENUGETOBJECTINFO;

  typedef struct tagMENUITEMINFOA {
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPSTR dwTypeData;
    UINT cch;
    HBITMAP hbmpItem;
  } MENUITEMINFOA,*LPMENUITEMINFOA;

  typedef struct tagMENUITEMINFOW {
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPWSTR dwTypeData;
    UINT cch;
    HBITMAP hbmpItem;
  } MENUITEMINFOW,*LPMENUITEMINFOW;

  typedef MENUITEMINFOA MENUITEMINFO;
  typedef LPMENUITEMINFOA LPMENUITEMINFO;

  typedef MENUITEMINFOA const *LPCMENUITEMINFOA;
  typedef MENUITEMINFOW const *LPCMENUITEMINFOW;

  typedef LPCMENUITEMINFOA LPCMENUITEMINFO;





  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) InsertMenuItemA(HMENU hmenu,UINT item,WINBOOL fByPosition,LPCMENUITEMINFOA lpmi);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) InsertMenuItemW(HMENU hmenu,UINT item,WINBOOL fByPosition,LPCMENUITEMINFOW lpmi);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetMenuItemInfoA(HMENU hmenu,UINT item,WINBOOL fByPosition,LPMENUITEMINFOA lpmii);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetMenuItemInfoW(HMENU hmenu,UINT item,WINBOOL fByPosition,LPMENUITEMINFOW lpmii);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetMenuItemInfoA(HMENU hmenu,UINT item,WINBOOL fByPositon,LPCMENUITEMINFOA lpmii);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetMenuItemInfoW(HMENU hmenu,UINT item,WINBOOL fByPositon,LPCMENUITEMINFOW lpmii);




  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetMenuDefaultItem(HMENU hMenu,UINT fByPos,UINT gmdiFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetMenuDefaultItem(HMENU hMenu,UINT uItem,UINT fByPos);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetMenuItemRect(HWND hWnd,HMENU hMenu,UINT uItem,LPRECT lprcItem);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) MenuItemFromPoint(HWND hWnd,HMENU hMenu,POINT ptScreen);
# 3267 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagDROPSTRUCT {
    HWND hwndSource;
    HWND hwndSink;
    DWORD wFmt;
    ULONG_PTR dwData;
    POINT ptDrop;
    DWORD dwControlData;
  } DROPSTRUCT,*PDROPSTRUCT,*LPDROPSTRUCT;
# 3288 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) DragObject(HWND hwndParent,HWND hwndFrom,UINT fmt,ULONG_PTR data,HCURSOR hcur);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DragDetect(HWND hwnd,POINT pt);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DrawIcon(HDC hDC,int X,int Y,HICON hIcon);
# 3321 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagDRAWTEXTPARAMS {
    UINT cbSize;
    int iTabLength;
    int iLeftMargin;
    int iRightMargin;
    UINT uiLengthDrawn;
  } DRAWTEXTPARAMS,*LPDRAWTEXTPARAMS;




  __attribute__((dllimport)) int __attribute__((__stdcall__)) DrawTextA(HDC hdc,LPCSTR lpchText,int cchText,LPRECT lprc,UINT format);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) DrawTextW(HDC hdc,LPCWSTR lpchText,int cchText,LPRECT lprc,UINT format);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) DrawTextExA(HDC hdc,LPSTR lpchText,int cchText,LPRECT lprc,UINT format,LPDRAWTEXTPARAMS lpdtp);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) DrawTextExW(HDC hdc,LPWSTR lpchText,int cchText,LPRECT lprc,UINT format,LPDRAWTEXTPARAMS lpdtp);
# 3345 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GrayStringA(HDC hDC,HBRUSH hBrush,GRAYSTRINGPROC lpOutputFunc,LPARAM lpData,int nCount,int X,int Y,int nWidth,int nHeight);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GrayStringW(HDC hDC,HBRUSH hBrush,GRAYSTRINGPROC lpOutputFunc,LPARAM lpData,int nCount,int X,int Y,int nWidth,int nHeight);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DrawStateA(HDC hdc,HBRUSH hbrFore,DRAWSTATEPROC qfnCallBack,LPARAM lData,WPARAM wData,int x,int y,int cx,int cy,UINT uFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DrawStateW(HDC hdc,HBRUSH hbrFore,DRAWSTATEPROC qfnCallBack,LPARAM lData,WPARAM wData,int x,int y,int cx,int cy,UINT uFlags);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) TabbedTextOutA(HDC hdc,int x,int y,LPCSTR lpString,int chCount,int nTabPositions,const INT *lpnTabStopPositions,int nTabOrigin);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) TabbedTextOutW(HDC hdc,int x,int y,LPCWSTR lpString,int chCount,int nTabPositions,const INT *lpnTabStopPositions,int nTabOrigin);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetTabbedTextExtentA(HDC hdc,LPCSTR lpString,int chCount,int nTabPositions,const INT *lpnTabStopPositions);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetTabbedTextExtentW(HDC hdc,LPCWSTR lpString,int chCount,int nTabPositions,const INT *lpnTabStopPositions);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UpdateWindow(HWND hWnd);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) SetActiveWindow(HWND hWnd);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetForegroundWindow(void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PaintDesktop(HDC hdc);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) SwitchToThisWindow(HWND hwnd,WINBOOL fUnknown);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetForegroundWindow(HWND hWnd);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AllowSetForegroundWindow(DWORD dwProcessId);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LockSetForegroundWindow(UINT uLockCode);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) WindowFromDC(HDC hDC);
  __attribute__((dllimport)) HDC __attribute__((__stdcall__)) GetDC(HWND hWnd);
  __attribute__((dllimport)) HDC __attribute__((__stdcall__)) GetDCEx(HWND hWnd,HRGN hrgnClip,DWORD flags);
# 3400 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) HDC __attribute__((__stdcall__)) GetWindowDC(HWND hWnd);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) ReleaseDC(HWND hWnd,HDC hDC);
  __attribute__((dllimport)) HDC __attribute__((__stdcall__)) BeginPaint(HWND hWnd,LPPAINTSTRUCT lpPaint);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EndPaint(HWND hWnd,const PAINTSTRUCT *lpPaint);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetUpdateRect(HWND hWnd,LPRECT lpRect,WINBOOL bErase);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetUpdateRgn(HWND hWnd,HRGN hRgn,WINBOOL bErase);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) SetWindowRgn(HWND hWnd,HRGN hRgn,WINBOOL bRedraw);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetWindowRgn(HWND hWnd,HRGN hRgn);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetWindowRgnBox(HWND hWnd,LPRECT lprc);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) ExcludeUpdateRgn(HDC hDC,HWND hWnd);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) InvalidateRect(HWND hWnd,const RECT *lpRect,WINBOOL bErase);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ValidateRect(HWND hWnd,const RECT *lpRect);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) InvalidateRgn(HWND hWnd,HRGN hRgn,WINBOOL bErase);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ValidateRgn(HWND hWnd,HRGN hRgn);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) RedrawWindow(HWND hWnd,const RECT *lprcUpdate,HRGN hrgnUpdate,UINT flags);
# 3435 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LockWindowUpdate(HWND hWndLock);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ScrollWindow(HWND hWnd,int XAmount,int YAmount,const RECT *lpRect,const RECT *lpClipRect);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ScrollDC(HDC hDC,int dx,int dy,const RECT *lprcScroll,const RECT *lprcClip,HRGN hrgnUpdate,LPRECT lprcUpdate);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) ScrollWindowEx(HWND hWnd,int dx,int dy,const RECT *prcScroll,const RECT *prcClip,HRGN hrgnUpdate,LPRECT prcUpdate,UINT flags);
# 3448 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) int __attribute__((__stdcall__)) SetScrollPos(HWND hWnd,int nBar,int nPos,WINBOOL bRedraw);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetScrollPos(HWND hWnd,int nBar);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetScrollRange(HWND hWnd,int nBar,int nMinPos,int nMaxPos,WINBOOL bRedraw);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetScrollRange(HWND hWnd,int nBar,LPINT lpMinPos,LPINT lpMaxPos);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ShowScrollBar(HWND hWnd,int wBar,WINBOOL bShow);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnableScrollBar(HWND hWnd,UINT wSBflags,UINT wArrows);
# 3478 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetPropA(HWND hWnd,LPCSTR lpString,HANDLE hData);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetPropW(HWND hWnd,LPCWSTR lpString,HANDLE hData);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) GetPropA(HWND hWnd,LPCSTR lpString);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) GetPropW(HWND hWnd,LPCWSTR lpString);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) RemovePropA(HWND hWnd,LPCSTR lpString);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) RemovePropW(HWND hWnd,LPCWSTR lpString);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) EnumPropsExA(HWND hWnd,PROPENUMPROCEXA lpEnumFunc,LPARAM lParam);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) EnumPropsExW(HWND hWnd,PROPENUMPROCEXW lpEnumFunc,LPARAM lParam);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) EnumPropsA(HWND hWnd,PROPENUMPROCA lpEnumFunc);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) EnumPropsW(HWND hWnd,PROPENUMPROCW lpEnumFunc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetWindowTextA(HWND hWnd,LPCSTR lpString);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetWindowTextW(HWND hWnd,LPCWSTR lpString);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetWindowTextA(HWND hWnd,LPSTR lpString,int nMaxCount);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetWindowTextW(HWND hWnd,LPWSTR lpString,int nMaxCount);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetWindowTextLengthA(HWND hWnd);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetWindowTextLengthW(HWND hWnd);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetClientRect(HWND hWnd,LPRECT lpRect);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetWindowRect(HWND hWnd,LPRECT lpRect);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AdjustWindowRect(LPRECT lpRect,DWORD dwStyle,WINBOOL bMenu);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AdjustWindowRectEx(LPRECT lpRect,DWORD dwStyle,WINBOOL bMenu,DWORD dwExStyle);






  typedef struct tagHELPINFO {
    UINT cbSize;
    int iContextType;
    int iCtrlId;
    HANDLE hItemHandle;
    DWORD_PTR dwContextId;
    POINT MousePos;
  } HELPINFO,*LPHELPINFO;

  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetWindowContextHelpId(HWND,DWORD);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetWindowContextHelpId(HWND);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetMenuContextHelpId(HMENU,DWORD);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetMenuContextHelpId(HMENU);
# 3563 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) int __attribute__((__stdcall__)) MessageBoxA(HWND hWnd,LPCSTR lpText,LPCSTR lpCaption,UINT uType);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) MessageBoxW(HWND hWnd,LPCWSTR lpText,LPCWSTR lpCaption,UINT uType);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) MessageBoxExA(HWND hWnd,LPCSTR lpText,LPCSTR lpCaption,UINT uType,WORD wLanguageId);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) MessageBoxExW(HWND hWnd,LPCWSTR lpText,LPCWSTR lpCaption,UINT uType,WORD wLanguageId);

  typedef void (__attribute__((__stdcall__)) *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);

  typedef struct tagMSGBOXPARAMSA {
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpszText;
    LPCSTR lpszCaption;
    DWORD dwStyle;
    LPCSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
  } MSGBOXPARAMSA,*PMSGBOXPARAMSA,*LPMSGBOXPARAMSA;

  typedef struct tagMSGBOXPARAMSW {
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpszText;
    LPCWSTR lpszCaption;
    DWORD dwStyle;
    LPCWSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
  } MSGBOXPARAMSW,*PMSGBOXPARAMSW,*LPMSGBOXPARAMSW;

  typedef MSGBOXPARAMSA MSGBOXPARAMS;
  typedef PMSGBOXPARAMSA PMSGBOXPARAMS;
  typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS;



  __attribute__((dllimport)) int __attribute__((__stdcall__)) MessageBoxIndirectA(const MSGBOXPARAMSA *lpmbp);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) MessageBoxIndirectW(const MSGBOXPARAMSW *lpmbp);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) MessageBeep(UINT uType);




  __attribute__((dllimport)) int __attribute__((__stdcall__)) ShowCursor(WINBOOL bShow);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetCursorPos(int X,int Y);
  __attribute__((dllimport)) HCURSOR __attribute__((__stdcall__)) SetCursor(HCURSOR hCursor);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCursorPos(LPPOINT lpPoint);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ClipCursor(const RECT *lpRect);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetClipCursor(LPRECT lpRect);
  __attribute__((dllimport)) HCURSOR __attribute__((__stdcall__)) GetCursor(void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CreateCaret(HWND hWnd,HBITMAP hBitmap,int nWidth,int nHeight);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetCaretBlinkTime(void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetCaretBlinkTime(UINT uMSeconds);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DestroyCaret(void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) HideCaret(HWND hWnd);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ShowCaret(HWND hWnd);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetCaretPos(int X,int Y);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCaretPos(LPPOINT lpPoint);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ClientToScreen(HWND hWnd,LPPOINT lpPoint);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ScreenToClient(HWND hWnd,LPPOINT lpPoint);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) MapWindowPoints(HWND hWndFrom,HWND hWndTo,LPPOINT lpPoints,UINT cPoints);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) WindowFromPoint(POINT Point);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) ChildWindowFromPoint(HWND hWndParent,POINT Point);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) ChildWindowFromPointEx(HWND hwnd,POINT pt,UINT flags);
# 3695 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetSysColor(int nIndex);
  __attribute__((dllimport)) HBRUSH __attribute__((__stdcall__)) GetSysColorBrush(int nIndex);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetSysColors(int cElements,const INT *lpaElements,const COLORREF *lpaRgbValues);




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DrawFocusRect(HDC hDC,const RECT *lprc);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) FillRect(HDC hDC,const RECT *lprc,HBRUSH hbr);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) FrameRect(HDC hDC,const RECT *lprc,HBRUSH hbr);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) InvertRect(HDC hDC,const RECT *lprc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetRect(LPRECT lprc,int xLeft,int yTop,int xRight,int yBottom);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetRectEmpty(LPRECT lprc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CopyRect(LPRECT lprcDst,const RECT *lprcSrc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) InflateRect(LPRECT lprc,int dx,int dy);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IntersectRect(LPRECT lprcDst,const RECT *lprcSrc1,const RECT *lprcSrc2);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UnionRect(LPRECT lprcDst,const RECT *lprcSrc1,const RECT *lprcSrc2);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SubtractRect(LPRECT lprcDst,const RECT *lprcSrc1,const RECT *lprcSrc2);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) OffsetRect(LPRECT lprc,int dx,int dy);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsRectEmpty(const RECT *lprc);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EqualRect(const RECT *lprc1,const RECT *lprc2);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PtInRect(const RECT *lprc,POINT pt);
# 3725 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WORD __attribute__((__stdcall__)) GetWindowWord(HWND hWnd,int nIndex);
  __attribute__((dllimport)) WORD __attribute__((__stdcall__)) SetWindowWord(HWND hWnd,int nIndex,WORD wNewWord);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) GetWindowLongA(HWND hWnd,int nIndex);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) GetWindowLongW(HWND hWnd,int nIndex);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) SetWindowLongA(HWND hWnd,int nIndex,LONG dwNewLong);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) SetWindowLongW(HWND hWnd,int nIndex,LONG dwNewLong);
# 3750 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WORD __attribute__((__stdcall__)) GetClassWord(HWND hWnd,int nIndex);
  __attribute__((dllimport)) WORD __attribute__((__stdcall__)) SetClassWord(HWND hWnd,int nIndex,WORD wNewWord);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetClassLongA(HWND hWnd,int nIndex);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetClassLongW(HWND hWnd,int nIndex);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SetClassLongA(HWND hWnd,int nIndex,LONG dwNewLong);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) SetClassLongW(HWND hWnd,int nIndex,LONG dwNewLong);
# 3780 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetProcessDefaultLayout(DWORD *pdwDefaultLayout);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetProcessDefaultLayout(DWORD dwDefaultLayout);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetDesktopWindow(void);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetParent(HWND hWnd);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) SetParent(HWND hWndChild,HWND hWndNewParent);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumChildWindows(HWND hWndParent,WNDENUMPROC lpEnumFunc,LPARAM lParam);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) FindWindowA(LPCSTR lpClassName,LPCSTR lpWindowName);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) FindWindowW(LPCWSTR lpClassName,LPCWSTR lpWindowName);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) FindWindowExA(HWND hWndParent,HWND hWndChildAfter,LPCSTR lpszClass,LPCSTR lpszWindow);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) FindWindowExW(HWND hWndParent,HWND hWndChildAfter,LPCWSTR lpszClass,LPCWSTR lpszWindow);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetShellWindow(void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) RegisterShellHookWindow(HWND hwnd);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DeregisterShellHookWindow(HWND hwnd);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumWindows(WNDENUMPROC lpEnumFunc,LPARAM lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumThreadWindows(DWORD dwThreadId,WNDENUMPROC lpfn,LPARAM lParam);



  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetClassNameA(HWND hWnd,LPSTR lpClassName,int nMaxCount);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetClassNameW(HWND hWnd,LPWSTR lpClassName,int nMaxCount);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetTopWindow(HWND hWnd);





  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetWindowThreadProcessId(HWND hWnd,LPDWORD lpdwProcessId);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsGUIThread(WINBOOL bConvert);



  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetLastActivePopup(HWND hWnd);
# 3822 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetWindow(HWND hWnd,UINT uCmd);






  __attribute__((dllimport)) HHOOK __attribute__((__stdcall__)) SetWindowsHookA (int nFilterType, HOOKPROC pfnFilterProc);
  __attribute__((dllimport)) HHOOK __attribute__((__stdcall__)) SetWindowsHookW (int nFilterType, HOOKPROC pfnFilterProc);
# 3839 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UnhookWindowsHook (int nCode, HOOKPROC pfnFilterProc);
  __attribute__((dllimport)) HHOOK __attribute__((__stdcall__)) SetWindowsHookExA (int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId);
  __attribute__((dllimport)) HHOOK __attribute__((__stdcall__)) SetWindowsHookExW (int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UnhookWindowsHookEx (HHOOK hhk);
  __attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) CallNextHookEx (HHOOK hhk, int nCode, WPARAM wParam, LPARAM lParam);
# 3898 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CheckMenuRadioItem(HMENU hmenu,UINT first,UINT last,UINT check,UINT flags);

  typedef struct {
    WORD versionNumber;
    WORD offset;
  } MENUITEMTEMPLATEHEADER,*PMENUITEMTEMPLATEHEADER;

  typedef struct {
    WORD mtOption;
    WORD mtID;
    WCHAR mtString[1];
  } MENUITEMTEMPLATE,*PMENUITEMTEMPLATE;
# 3952 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) HBITMAP __attribute__((__stdcall__)) LoadBitmapA(HINSTANCE hInstance,LPCSTR lpBitmapName);
  __attribute__((dllimport)) HBITMAP __attribute__((__stdcall__)) LoadBitmapW(HINSTANCE hInstance,LPCWSTR lpBitmapName);
  __attribute__((dllimport)) HCURSOR __attribute__((__stdcall__)) LoadCursorA(HINSTANCE hInstance,LPCSTR lpCursorName);
  __attribute__((dllimport)) HCURSOR __attribute__((__stdcall__)) LoadCursorW(HINSTANCE hInstance,LPCWSTR lpCursorName);
  __attribute__((dllimport)) HCURSOR __attribute__((__stdcall__)) LoadCursorFromFileA(LPCSTR lpFileName);
  __attribute__((dllimport)) HCURSOR __attribute__((__stdcall__)) LoadCursorFromFileW(LPCWSTR lpFileName);
  __attribute__((dllimport)) HCURSOR __attribute__((__stdcall__)) CreateCursor(HINSTANCE hInst,int xHotSpot,int yHotSpot,int nWidth,int nHeight,const void *pvANDPlane,const void *pvXORPlane);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DestroyCursor(HCURSOR hCursor);
# 3982 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct _ICONINFO {
    WINBOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
  } ICONINFO;
  typedef ICONINFO *PICONINFO;




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetSystemCursor(HCURSOR hcur,DWORD id);
  __attribute__((dllimport)) HICON __attribute__((__stdcall__)) LoadIconA(HINSTANCE hInstance,LPCSTR lpIconName);
  __attribute__((dllimport)) HICON __attribute__((__stdcall__)) LoadIconW(HINSTANCE hInstance,LPCWSTR lpIconName);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) PrivateExtractIconsA(LPCSTR szFileName,int nIconIndex,int cxIcon,int cyIcon,HICON *phicon,UINT *piconid,UINT nIcons,UINT flags);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) PrivateExtractIconsW(LPCWSTR szFileName,int nIconIndex,int cxIcon,int cyIcon,HICON *phicon,UINT *piconid,UINT nIcons,UINT flags);
  __attribute__((dllimport)) HICON __attribute__((__stdcall__)) CreateIcon(HINSTANCE hInstance,int nWidth,int nHeight,BYTE cPlanes,BYTE cBitsPixel,const BYTE *lpbANDbits,const BYTE *lpbXORbits);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DestroyIcon(HICON hIcon);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) LookupIconIdFromDirectory(PBYTE presbits,WINBOOL fIcon);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) LookupIconIdFromDirectoryEx(PBYTE presbits,WINBOOL fIcon,int cxDesired,int cyDesired,UINT Flags);
  __attribute__((dllimport)) HICON __attribute__((__stdcall__)) CreateIconFromResource(PBYTE presbits,DWORD dwResSize,WINBOOL fIcon,DWORD dwVer);
  __attribute__((dllimport)) HICON __attribute__((__stdcall__)) CreateIconFromResourceEx(PBYTE presbits,DWORD dwResSize,WINBOOL fIcon,DWORD dwVer,int cxDesired,int cyDesired,UINT Flags);

  typedef struct tagCURSORSHAPE {
    int xHotSpot;
    int yHotSpot;
    int cx;
    int cy;
    int cbWidth;
    BYTE Planes;
    BYTE BitsPixel;
  } CURSORSHAPE,*LPCURSORSHAPE;
# 4039 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) LoadImageA(HINSTANCE hInst,LPCSTR name,UINT type,int cx,int cy,UINT fuLoad);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) LoadImageW(HINSTANCE hInst,LPCWSTR name,UINT type,int cx,int cy,UINT fuLoad);
  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CopyImage(HANDLE h,UINT type,int cx,int cy,UINT flags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DrawIconEx(HDC hdc,int xLeft,int yTop,HICON hIcon,int cxWidth,int cyWidth,UINT istepIfAniCur,HBRUSH hbrFlickerFreeDraw,UINT diFlags);
  __attribute__((dllimport)) HICON __attribute__((__stdcall__)) CreateIconIndirect(PICONINFO piconinfo);
  __attribute__((dllimport)) HICON __attribute__((__stdcall__)) CopyIcon(HICON hIcon);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetIconInfo(HICON hIcon,PICONINFO piconinfo);
# 4442 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsDialogMessageA(HWND hDlg,LPMSG lpMsg);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsDialogMessageW(HWND hDlg,LPMSG lpMsg);







  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) MapDialogRect(HWND hDlg,LPRECT lpRect);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) DlgDirListA(HWND hDlg,LPSTR lpPathSpec,int nIDListBox,int nIDStaticPath,UINT uFileType);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) DlgDirListW(HWND hDlg,LPWSTR lpPathSpec,int nIDListBox,int nIDStaticPath,UINT uFileType);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DlgDirSelectExA(HWND hwndDlg,LPSTR lpString,int chCount,int idListBox);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DlgDirSelectExW(HWND hwndDlg,LPWSTR lpString,int chCount,int idListBox);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) DlgDirListComboBoxA(HWND hDlg,LPSTR lpPathSpec,int nIDComboBox,int nIDStaticPath,UINT uFiletype);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) DlgDirListComboBoxW(HWND hDlg,LPWSTR lpPathSpec,int nIDComboBox,int nIDStaticPath,UINT uFiletype);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DlgDirSelectComboBoxExA(HWND hwndDlg,LPSTR lpString,int cchOut,int idComboBox);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DlgDirSelectComboBoxExW(HWND hwndDlg,LPWSTR lpString,int cchOut,int idComboBox);
# 4694 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagSCROLLINFO {
    UINT cbSize;
    UINT fMask;
    int nMin;
    int nMax;
    UINT nPage;
    int nPos;
    int nTrackPos;
  } SCROLLINFO,*LPSCROLLINFO;
  typedef SCROLLINFO const *LPCSCROLLINFO;

  __attribute__((dllimport)) int __attribute__((__stdcall__)) SetScrollInfo(HWND hwnd,int nBar,LPCSCROLLINFO lpsi,WINBOOL redraw);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetScrollInfo(HWND hwnd,int nBar,LPSCROLLINFO lpsi);
# 4721 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagMDICREATESTRUCTA {
    LPCSTR szClass;
    LPCSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
  } MDICREATESTRUCTA,*LPMDICREATESTRUCTA;

  typedef struct tagMDICREATESTRUCTW {
    LPCWSTR szClass;
    LPCWSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
  } MDICREATESTRUCTW,*LPMDICREATESTRUCTW;

  typedef MDICREATESTRUCTA MDICREATESTRUCT;
  typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT;

  typedef struct tagCLIENTCREATESTRUCT {
    HANDLE hWindowMenu;
    UINT idFirstChild;
  } CLIENTCREATESTRUCT,*LPCLIENTCREATESTRUCT;





  __attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) DefFrameProcA(HWND hWnd,HWND hWndMDIClient,UINT uMsg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) DefFrameProcW(HWND hWnd,HWND hWndMDIClient,UINT uMsg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) DefMDIChildProcA(HWND hWnd,UINT uMsg,WPARAM wParam,LPARAM lParam);
  __attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) DefMDIChildProcW(HWND hWnd,UINT uMsg,WPARAM wParam,LPARAM lParam);


  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) TranslateMDISysAccel(HWND hWndClient,LPMSG lpMsg);


  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) ArrangeIconicWindows(HWND hWnd);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) CreateMDIWindowA(LPCSTR lpClassName,LPCSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HINSTANCE hInstance,LPARAM lParam);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) CreateMDIWindowW(LPCWSTR lpClassName,LPCWSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HINSTANCE hInstance,LPARAM lParam);
  __attribute__((dllimport)) WORD __attribute__((__stdcall__)) TileWindows(HWND hwndParent,UINT wHow,const RECT *lpRect,UINT cKids,const HWND *lpKids);
  __attribute__((dllimport)) WORD __attribute__((__stdcall__)) CascadeWindows(HWND hwndParent,UINT wHow,const RECT *lpRect,UINT cKids,const HWND *lpKids);






  typedef DWORD HELPPOLY;

  typedef struct tagMULTIKEYHELPA {
    DWORD mkSize;
    CHAR mkKeylist;
    CHAR szKeyphrase[1];
  } MULTIKEYHELPA,*PMULTIKEYHELPA,*LPMULTIKEYHELPA;

  typedef struct tagMULTIKEYHELPW {
    DWORD mkSize;
    WCHAR mkKeylist;
    WCHAR szKeyphrase[1];
  } MULTIKEYHELPW,*PMULTIKEYHELPW,*LPMULTIKEYHELPW;

  typedef MULTIKEYHELPA MULTIKEYHELP;
  typedef PMULTIKEYHELPA PMULTIKEYHELP;
  typedef LPMULTIKEYHELPA LPMULTIKEYHELP;

  typedef struct tagHELPWININFOA {
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    CHAR rgchMember[2];
  } HELPWININFOA,*PHELPWININFOA,*LPHELPWININFOA;

  typedef struct tagHELPWININFOW {
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    WCHAR rgchMember[2];
  } HELPWININFOW,*PHELPWININFOW,*LPHELPWININFOW;

  typedef HELPWININFOA HELPWININFO;
  typedef PHELPWININFOA PHELPWININFO;
  typedef LPHELPWININFOA LPHELPWININFO;



  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WinHelpA(HWND hWndMain,LPCSTR lpszHelp,UINT uCommand,ULONG_PTR dwData);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WinHelpW(HWND hWndMain,LPCWSTR lpszHelp,UINT uCommand,ULONG_PTR dwData);
# 4866 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetGuiResources(HANDLE hProcess,DWORD uiFlags);
# 5176 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagNONCLIENTMETRICSA {
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTA lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTA lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTA lfMenuFont;
    LOGFONTA lfStatusFont;
    LOGFONTA lfMessageFont;



  } NONCLIENTMETRICSA,*PNONCLIENTMETRICSA,*LPNONCLIENTMETRICSA;

  typedef struct tagNONCLIENTMETRICSW {
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTW lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTW lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTW lfMenuFont;
    LOGFONTW lfStatusFont;
    LOGFONTW lfMessageFont;



  } NONCLIENTMETRICSW,*PNONCLIENTMETRICSW,*LPNONCLIENTMETRICSW;

  typedef NONCLIENTMETRICSA NONCLIENTMETRICS;
  typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS;
  typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;
# 5240 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagMINIMIZEDMETRICS {
    UINT cbSize;
    int iWidth;
    int iHorzGap;
    int iVertGap;
    int iArrange;
  } MINIMIZEDMETRICS,*PMINIMIZEDMETRICS,*LPMINIMIZEDMETRICS;



  typedef struct tagICONMETRICSA {
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTA lfFont;
  } ICONMETRICSA,*PICONMETRICSA,*LPICONMETRICSA;

  typedef struct tagICONMETRICSW {
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTW lfFont;
  } ICONMETRICSW,*PICONMETRICSW,*LPICONMETRICSW;

  typedef ICONMETRICSA ICONMETRICS;
  typedef PICONMETRICSA PICONMETRICS;
  typedef LPICONMETRICSA LPICONMETRICS;



  typedef struct tagANIMATIONINFO {
    UINT cbSize;
    int iMinAnimate;
  } ANIMATIONINFO,*LPANIMATIONINFO;

  typedef struct tagSERIALKEYSA {
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszActivePort;
    LPSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
  } SERIALKEYSA,*LPSERIALKEYSA;

  typedef struct tagSERIALKEYSW {
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszActivePort;
    LPWSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
  } SERIALKEYSW,*LPSERIALKEYSW;

  typedef SERIALKEYSA SERIALKEYS;
  typedef LPSERIALKEYSA LPSERIALKEYS;

  typedef struct tagHIGHCONTRASTA {
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszDefaultScheme;
  } HIGHCONTRASTA,*LPHIGHCONTRASTA;

  typedef struct tagHIGHCONTRASTW {
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszDefaultScheme;
  } HIGHCONTRASTW,*LPHIGHCONTRASTW;

  typedef HIGHCONTRASTA HIGHCONTRAST;
  typedef LPHIGHCONTRASTA LPHIGHCONTRAST;
# 5344 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/tvout.h" 1 3 4
# 9 "/usr/i686-w64-mingw32/sys-root/mingw/include/tvout.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/guiddef.h" 1 3 4
# 10 "/usr/i686-w64-mingw32/sys-root/mingw/include/tvout.h" 2 3 4

typedef struct _VIDEOPARAMETERS {
  GUID Guid;
  ULONG dwOffset;
  ULONG dwCommand;
  ULONG dwFlags;
  ULONG dwMode;
  ULONG dwTVStandard;
  ULONG dwAvailableModes;
  ULONG dwAvailableTVStandard;
  ULONG dwFlickerFilter;
  ULONG dwOverScanX;
  ULONG dwOverScanY;
  ULONG dwMaxUnscaledX;
  ULONG dwMaxUnscaledY;
  ULONG dwPositionX;
  ULONG dwPositionY;
  ULONG dwBrightness;
  ULONG dwContrast;
  ULONG dwCPType;
  ULONG dwCPCommand;
  ULONG dwCPStandard;
  ULONG dwCPKey;
  ULONG bCP_APSTriggerBits;
  UCHAR bOEMCopyProtection[256];
} VIDEOPARAMETERS,*PVIDEOPARAMETERS,*LPVIDEOPARAMETERS;
# 5345 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 2 3 4
# 5364 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) ChangeDisplaySettingsA(LPDEVMODEA lpDevMode,DWORD dwFlags);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) ChangeDisplaySettingsW(LPDEVMODEW lpDevMode,DWORD dwFlags);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) ChangeDisplaySettingsExA(LPCSTR lpszDeviceName,LPDEVMODEA lpDevMode,HWND hwnd,DWORD dwflags,LPVOID lParam);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) ChangeDisplaySettingsExW(LPCWSTR lpszDeviceName,LPDEVMODEW lpDevMode,HWND hwnd,DWORD dwflags,LPVOID lParam);




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumDisplaySettingsA(LPCSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEA lpDevMode);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumDisplaySettingsW(LPCWSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEW lpDevMode);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumDisplaySettingsExA(LPCSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEA lpDevMode,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumDisplaySettingsExW(LPCWSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEW lpDevMode,DWORD dwFlags);



  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumDisplayDevicesA(LPCSTR lpDevice,DWORD iDevNum,PDISPLAY_DEVICEA lpDisplayDevice,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumDisplayDevicesW(LPCWSTR lpDevice,DWORD iDevNum,PDISPLAY_DEVICEW lpDisplayDevice,DWORD dwFlags);
# 5396 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SystemParametersInfoA(UINT uiAction,UINT uiParam,PVOID pvParam,UINT fWinIni);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SystemParametersInfoW(UINT uiAction,UINT uiParam,PVOID pvParam,UINT fWinIni);




  typedef struct tagFILTERKEYS {
    UINT cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec;
    DWORD iDelayMSec;
    DWORD iRepeatMSec;
    DWORD iBounceMSec;
  } FILTERKEYS,*LPFILTERKEYS;
# 5421 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagSTICKYKEYS {
    UINT cbSize;
    DWORD dwFlags;
  } STICKYKEYS,*LPSTICKYKEYS;
# 5454 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagMOUSEKEYS {
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
  } MOUSEKEYS,*LPMOUSEKEYS;
# 5480 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagACCESSTIMEOUT {
    UINT cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
  } ACCESSTIMEOUT,*LPACCESSTIMEOUT;
# 5505 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagSOUNDSENTRYA {
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
  } SOUNDSENTRYA,*LPSOUNDSENTRYA;

  typedef struct tagSOUNDSENTRYW {
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
  } SOUNDSENTRYW,*LPSOUNDSENTRYW;

  typedef SOUNDSENTRYA SOUNDSENTRY;
  typedef LPSOUNDSENTRYA LPSOUNDSENTRY;
# 5548 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagTOGGLEKEYS {
    UINT cbSize;
    DWORD dwFlags;
  } TOGGLEKEYS,*LPTOGGLEKEYS;

  typedef struct tagMONITORINFO {
    DWORD cbSize;
    RECT rcMonitor;
    RECT rcWork;
    DWORD dwFlags;
  } MONITORINFO,*LPMONITORINFO;
# 5580 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagMONITORINFOEXA {
    __extension__ struct {
      DWORD cbSize;
      RECT rcMonitor;
      RECT rcWork;
      DWORD dwFlags;
    };
    CHAR szDevice[32];
  } MONITORINFOEXA,*LPMONITORINFOEXA;

  typedef struct tagMONITORINFOEXW {
    __extension__ struct {
      DWORD cbSize;
      RECT rcMonitor;
      RECT rcWork;
      DWORD dwFlags;
    };
    WCHAR szDevice[32];
  } MONITORINFOEXW,*LPMONITORINFOEXW;

  typedef MONITORINFOEXA MONITORINFOEX;
  typedef LPMONITORINFOEXA LPMONITORINFOEX;


  typedef WINBOOL (__attribute__((__stdcall__)) *MONITORENUMPROC)(HMONITOR,HDC,LPRECT,LPARAM);

  __attribute__((dllimport)) void __attribute__((__stdcall__)) SetDebugErrorLevel (DWORD dwLevel);
  __attribute__((dllimport)) void __attribute__((__stdcall__)) SetLastErrorEx (DWORD dwErrCode, DWORD dwType);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) InternalGetWindowText (HWND hWnd, LPWSTR pString, int cchMaxCount);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CancelShutdown (void);
  __attribute__((dllimport)) HMONITOR __attribute__((__stdcall__)) MonitorFromPoint(POINT pt,DWORD dwFlags);
  __attribute__((dllimport)) HMONITOR __attribute__((__stdcall__)) MonitorFromRect(LPCRECT lprc,DWORD dwFlags);
  __attribute__((dllimport)) HMONITOR __attribute__((__stdcall__)) MonitorFromWindow(HWND hwnd,DWORD dwFlags);

  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EndTask (HWND hWnd, WINBOOL fShutDown, WINBOOL fForce);







  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetMonitorInfoA(HMONITOR hMonitor,LPMONITORINFO lpmi);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetMonitorInfoW(HMONITOR hMonitor,LPMONITORINFO lpmi);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumDisplayMonitors(HDC hdc,LPCRECT lprcClip,MONITORENUMPROC lpfnEnum,LPARAM dwData);
# 5646 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef void (__attribute__((__stdcall__)) *WINEVENTPROC)(HWINEVENTHOOK hWinEventHook,DWORD event,HWND hwnd,LONG idObject,LONG idChild,DWORD idEventThread,DWORD dwmsEventTime);

  __attribute__((dllimport)) void __attribute__((__stdcall__)) NotifyWinEvent(DWORD event,HWND hwnd,LONG idObject,LONG idChild);
  __attribute__((dllimport)) HWINEVENTHOOK __attribute__((__stdcall__)) SetWinEventHook(DWORD eventMin,DWORD eventMax,HMODULE hmodWinEventProc,WINEVENTPROC pfnWinEventProc,DWORD idProcess,DWORD idThread,DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsWinEventHookInstalled(DWORD event);
# 5659 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UnhookWinEvent(HWINEVENTHOOK hWinEventHook);
# 5823 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagGUITHREADINFO {
    DWORD cbSize;
    DWORD flags;
    HWND hwndActive;
    HWND hwndFocus;
    HWND hwndCapture;
    HWND hwndMenuOwner;
    HWND hwndMoveSize;
    HWND hwndCaret;
    RECT rcCaret;
  } GUITHREADINFO,*PGUITHREADINFO,*LPGUITHREADINFO;
# 5850 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetGUIThreadInfo(DWORD idThread,PGUITHREADINFO pgui);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) BlockInput (WINBOOL fBlockIt);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetWindowModuleFileNameA(HWND hwnd,LPSTR pszFileName,UINT cchFileNameMax);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetWindowModuleFileNameW(HWND hwnd,LPWSTR pszFileName,UINT cchFileNameMax);
# 5901 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagCURSORINFO {
    DWORD cbSize;
    DWORD flags;
    HCURSOR hCursor;
    POINT ptScreenPos;
  } CURSORINFO,*PCURSORINFO,*LPCURSORINFO;






  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCursorInfo(PCURSORINFO pci);

  typedef struct tagWINDOWINFO {
    DWORD cbSize;
    RECT rcWindow;
    RECT rcClient;
    DWORD dwStyle;
    DWORD dwExStyle;
    DWORD dwWindowStatus;
    UINT cxWindowBorders;
    UINT cyWindowBorders;
    ATOM atomWindowType;
    WORD wCreatorVersion;
  } WINDOWINFO,*PWINDOWINFO,*LPWINDOWINFO;



  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetWindowInfo(HWND hwnd,PWINDOWINFO pwi);

  typedef struct tagTITLEBARINFO {
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
  } TITLEBARINFO,*PTITLEBARINFO,*LPTITLEBARINFO;

  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetTitleBarInfo(HWND hwnd,PTITLEBARINFO pti);
# 5949 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagMENUBARINFO {
    DWORD cbSize;
    RECT rcBar;
    HMENU hMenu;
    HWND hwndMenu;
    WINBOOL fBarFocused:1;
    WINBOOL fFocused:1;
  } MENUBARINFO,*PMENUBARINFO,*LPMENUBARINFO;

  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetMenuBarInfo(HWND hwnd,LONG idObject,LONG idItem,PMENUBARINFO pmbi);

  typedef struct tagSCROLLBARINFO {
    DWORD cbSize;
    RECT rcScrollBar;
    int dxyLineButton;
    int xyThumbTop;
    int xyThumbBottom;
    int reserved;
    DWORD rgstate[5 + 1];
  } SCROLLBARINFO,*PSCROLLBARINFO,*LPSCROLLBARINFO;

  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetScrollBarInfo(HWND hwnd,LONG idObject,PSCROLLBARINFO psbi);

  typedef struct tagCOMBOBOXINFO {
    DWORD cbSize;
    RECT rcItem;
    RECT rcButton;
    DWORD stateButton;
    HWND hwndCombo;
    HWND hwndItem;
    HWND hwndList;
  } COMBOBOXINFO,*PCOMBOBOXINFO,*LPCOMBOBOXINFO;

  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetComboBoxInfo(HWND hwndCombo,PCOMBOBOXINFO pcbi);
# 5992 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetAncestor(HWND hwnd,UINT gaFlags);
  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) RealChildWindowFromPoint(HWND hwndParent,POINT ptParentClientCoords);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) RealGetWindowClassA(HWND hwnd,LPSTR ptszClassName,UINT cchClassNameMax);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) RealGetWindowClassW(HWND hwnd,LPWSTR ptszClassName,UINT cchClassNameMax);

  typedef struct tagALTTABINFO {
    DWORD cbSize;
    int cItems;
    int cColumns;
    int cRows;
    int iColFocus;
    int iRowFocus;
    int cxItem;
    int cyItem;
    POINT ptStart;
  } ALTTABINFO,*PALTTABINFO,*LPALTTABINFO;



  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetAltTabInfoA(HWND hwnd,int iItem,PALTTABINFO pati,LPSTR pszItemText,UINT cchItemText);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetAltTabInfoW(HWND hwnd,int iItem,PALTTABINFO pati,LPWSTR pszItemText,UINT cchItemText);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetListBoxInfo(HWND hwnd);




  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) LockWorkStation(void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UserHandleGrantAccess(HANDLE hUserHandle,HANDLE hJob,WINBOOL bGrant);

  struct HRAWINPUT__ { int unused; }; typedef struct HRAWINPUT__ *HRAWINPUT;
# 6030 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagRAWINPUTHEADER {
    DWORD dwType;
    DWORD dwSize;
    HANDLE hDevice;
    WPARAM wParam;
  } RAWINPUTHEADER,*PRAWINPUTHEADER,*LPRAWINPUTHEADER;







  typedef struct tagRAWMOUSE {
    USHORT usFlags;
    __extension__ union {
      ULONG ulButtons;
      __extension__ struct {
 USHORT usButtonFlags;
 USHORT usButtonData;
      };
    };
    ULONG ulRawButtons;
    LONG lLastX;
    LONG lLastY;
    ULONG ulExtraInformation;
  } RAWMOUSE,*PRAWMOUSE,*LPRAWMOUSE;
# 6087 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagRAWKEYBOARD {
    USHORT MakeCode;
    USHORT Flags;
    USHORT Reserved;
    USHORT VKey;
    UINT Message;
    ULONG ExtraInformation;
  } RAWKEYBOARD,*PRAWKEYBOARD,*LPRAWKEYBOARD;
# 6107 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagRAWHID {
    DWORD dwSizeHid;
    DWORD dwCount;
    BYTE bRawData[1];
  } RAWHID,*PRAWHID,*LPRAWHID;

  typedef struct tagRAWINPUT {
    RAWINPUTHEADER header;
    union {
      RAWMOUSE mouse;
      RAWKEYBOARD keyboard;
      RAWHID hid;
    } data;
  } RAWINPUT,*PRAWINPUT,*LPRAWINPUT;
# 6135 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetRawInputData(HRAWINPUT hRawInput,UINT uiCommand,LPVOID pData,PUINT pcbSize,UINT cbSizeHeader);







  typedef struct tagRID_DEVICE_INFO_MOUSE {
    DWORD dwId;
    DWORD dwNumberOfButtons;
    DWORD dwSampleRate;
    WINBOOL fHasHorizontalWheel;
  } RID_DEVICE_INFO_MOUSE,*PRID_DEVICE_INFO_MOUSE;

  typedef struct tagRID_DEVICE_INFO_KEYBOARD {
    DWORD dwType;
    DWORD dwSubType;
    DWORD dwKeyboardMode;
    DWORD dwNumberOfFunctionKeys;
    DWORD dwNumberOfIndicators;
    DWORD dwNumberOfKeysTotal;
  } RID_DEVICE_INFO_KEYBOARD,*PRID_DEVICE_INFO_KEYBOARD;

  typedef struct tagRID_DEVICE_INFO_HID {
    DWORD dwVendorId;
    DWORD dwProductId;
    DWORD dwVersionNumber;
    USHORT usUsagePage;
    USHORT usUsage;
  } RID_DEVICE_INFO_HID,*PRID_DEVICE_INFO_HID;

  typedef struct tagRID_DEVICE_INFO {
    DWORD cbSize;
    DWORD dwType;
    __extension__ union {
      RID_DEVICE_INFO_MOUSE mouse;
      RID_DEVICE_INFO_KEYBOARD keyboard;
      RID_DEVICE_INFO_HID hid;
    } ;
  } RID_DEVICE_INFO,*PRID_DEVICE_INFO,*LPRID_DEVICE_INFO;



  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetRawInputDeviceInfoA(HANDLE hDevice,UINT uiCommand,LPVOID pData,PUINT pcbSize);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetRawInputDeviceInfoW(HANDLE hDevice,UINT uiCommand,LPVOID pData,PUINT pcbSize);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetRawInputBuffer(PRAWINPUT pData,PUINT pcbSize,UINT cbSizeHeader);

  typedef struct tagRAWINPUTDEVICE {
    USHORT usUsagePage;
    USHORT usUsage;
    DWORD dwFlags;
    HWND hwndTarget;
  } RAWINPUTDEVICE,*PRAWINPUTDEVICE,*LPRAWINPUTDEVICE;

  typedef const RAWINPUTDEVICE *PCRAWINPUTDEVICE;
# 6217 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  typedef struct tagRAWINPUTDEVICELIST {
    HANDLE hDevice;
    DWORD dwType;
  } RAWINPUTDEVICELIST,*PRAWINPUTDEVICELIST;

  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) RegisterRawInputDevices (PCRAWINPUTDEVICE pRawInputDevices, UINT uiNumDevices, UINT cbSize);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetRegisteredRawInputDevices (PRAWINPUTDEVICE pRawInputDevices, PUINT puiNumDevices, UINT cbSize);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetRawInputDeviceList (PRAWINPUTDEVICELIST pRawInputDeviceList, PUINT puiNumDevices, UINT cbSize);
  __attribute__((dllimport)) LRESULT __attribute__((__stdcall__)) DefRawInputProc (PRAWINPUT *paRawInput, INT nInput, UINT cbSizeHeader);
# 6411 "/usr/i686-w64-mingw32/sys-root/mingw/include/winuser.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ShutdownBlockReasonCreate (HWND hWnd, LPCWSTR pwszReason);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ShutdownBlockReasonQuery (HWND hWnd, LPWSTR pwszBuff, DWORD *pcchBuff);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ShutdownBlockReasonDestroy (HWND hWnd);
# 73 "/usr/i686-w64-mingw32/sys-root/mingw/include/windows.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnls.h" 1 3 4
# 16 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnls.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/datetimeapi.h" 1 3 4
# 19 "/usr/i686-w64-mingw32/sys-root/mingw/include/datetimeapi.h" 3 4
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetTimeFormatEx (LPCWSTR lpLocaleName, DWORD dwFlags, const SYSTEMTIME *lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int cchTime);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetDateFormatEx (LPCWSTR lpLocaleName, DWORD dwFlags, const SYSTEMTIME *lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate, LPCWSTR lpCalendar);



  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetDateFormatA (LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpDate, LPCSTR lpFormat, LPSTR lpDateStr, int cchDate);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetDateFormatW (LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetTimeFormatA (LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpTime, LPCSTR lpFormat, LPSTR lpTimeStr, int cchTime);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetTimeFormatW (LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int cchTime);
# 17 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnls.h" 2 3 4
# 644 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnls.h" 3 4
  typedef DWORD LGRPID;
  typedef DWORD LCTYPE;
  typedef DWORD CALTYPE;
  typedef DWORD CALID;

  typedef struct _cpinfo {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
  } CPINFO,*LPCPINFO;
  typedef struct _cpinfoexA {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    CHAR CodePageName[260];
  } CPINFOEXA,*LPCPINFOEXA;

  typedef struct _cpinfoexW {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    WCHAR CodePageName[260];
  } CPINFOEXW,*LPCPINFOEXW;

  typedef CPINFOEXA CPINFOEX;
  typedef LPCPINFOEXA LPCPINFOEX;

  typedef struct _numberfmtA {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
  } NUMBERFMTA,*LPNUMBERFMTA;
  typedef struct _numberfmtW {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
  } NUMBERFMTW,*LPNUMBERFMTW;

  typedef NUMBERFMTA NUMBERFMT;
  typedef LPNUMBERFMTA LPNUMBERFMT;

  typedef struct _currencyfmtA {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPSTR lpCurrencySymbol;
  } CURRENCYFMTA,*LPCURRENCYFMTA;

  typedef struct _currencyfmtW {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPWSTR lpCurrencySymbol;
  } CURRENCYFMTW,*LPCURRENCYFMTW;

  typedef CURRENCYFMTA CURRENCYFMT;
  typedef LPCURRENCYFMTA LPCURRENCYFMT;

  enum SYSNLS_FUNCTION {
    COMPARE_STRING = 0x1
  };

  typedef DWORD NLS_FUNCTION;
# 735 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnls.h" 3 4
  typedef struct _nlsversioninfo {
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
  } NLSVERSIONINFO,*LPNLSVERSIONINFO;


  typedef struct _nlsversioninfoex {
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
    DWORD dwEffectiveId;
    GUID guidCustomVersion;
  } NLSVERSIONINFOEX,*LPNLSVERSIONINFOEX;

  typedef LONG GEOID;
  typedef DWORD GEOTYPE;
  typedef DWORD GEOCLASS;



  enum SYSGEOTYPE {
    GEO_NATION = 0x0001,
    GEO_LATITUDE = 0x0002,
    GEO_LONGITUDE = 0x0003,
    GEO_ISO2 = 0x0004,
    GEO_ISO3 = 0x0005,
    GEO_RFC1766 = 0x0006,
    GEO_LCID = 0x0007,
    GEO_FRIENDLYNAME= 0x0008,
    GEO_OFFICIALNAME= 0x0009,
    GEO_TIMEZONES = 0x000a,
    GEO_OFFICIALLANGUAGES = 0x000b,
    GEO_ISO_UN_NUMBER = 0x000c,
    GEO_PARENT = 0x000d
  };

  enum SYSGEOCLASS {
    GEOCLASS_NATION = 16,
    GEOCLASS_REGION = 14,
    GEOCLASS_ALL = 0
  };
# 798 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnls.h" 3 4
  typedef WINBOOL (__attribute__((__stdcall__)) *LANGUAGEGROUP_ENUMPROCA) (LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *LANGGROUPLOCALE_ENUMPROCA) (LGRPID, LCID, LPSTR, LONG_PTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *UILANGUAGE_ENUMPROCA) (LPSTR, LONG_PTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *CODEPAGE_ENUMPROCA) (LPSTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *DATEFMT_ENUMPROCA) (LPSTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *DATEFMT_ENUMPROCEXA) (LPSTR, CALID);
  typedef WINBOOL (__attribute__((__stdcall__)) *TIMEFMT_ENUMPROCA) (LPSTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *CALINFO_ENUMPROCA) (LPSTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *CALINFO_ENUMPROCEXA) (LPSTR, CALID);
  typedef WINBOOL (__attribute__((__stdcall__)) *LOCALE_ENUMPROCA) (LPSTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *LOCALE_ENUMPROCW) (LPWSTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *LANGUAGEGROUP_ENUMPROCW) (LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *LANGGROUPLOCALE_ENUMPROCW) (LGRPID, LCID, LPWSTR, LONG_PTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *UILANGUAGE_ENUMPROCW) (LPWSTR, LONG_PTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *CODEPAGE_ENUMPROCW) (LPWSTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *DATEFMT_ENUMPROCW) (LPWSTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *DATEFMT_ENUMPROCEXW) (LPWSTR, CALID);
  typedef WINBOOL (__attribute__((__stdcall__)) *TIMEFMT_ENUMPROCW) (LPWSTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *CALINFO_ENUMPROCW) (LPWSTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *CALINFO_ENUMPROCEXW) (LPWSTR, CALID);
  typedef WINBOOL (__attribute__((__stdcall__)) *GEO_ENUMPROC) (GEOID);
# 869 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnls.h" 3 4
  typedef struct _FILEMUIINFO {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwFileType;
    BYTE pChecksum[16];
    BYTE pServiceChecksum[16];
    DWORD dwLanguageNameOffset;
    DWORD dwTypeIDMainSize;
    DWORD dwTypeIDMainOffset;
    DWORD dwTypeNameMainOffset;
    DWORD dwTypeIDMUISize;
    DWORD dwTypeIDMUIOffset;
    DWORD dwTypeNameMUIOffset;
    BYTE abBuffer[8];
  } FILEMUIINFO,*PFILEMUIINFO;


# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/stringapiset.h" 1 3 4
# 12 "/usr/i686-w64-mingw32/sys-root/mingw/include/stringapiset.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnls.h" 1 3 4
# 13 "/usr/i686-w64-mingw32/sys-root/mingw/include/stringapiset.h" 2 3 4






  __attribute__((dllimport)) int __attribute__((__stdcall__)) CompareStringW (LCID Locale, DWORD dwCmpFlags, PCNZWCH lpString1, int cchCount1, PCNZWCH lpString2, int cchCount2);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) FoldStringW (DWORD dwMapFlags, LPCWCH lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest);
# 30 "/usr/i686-w64-mingw32/sys-root/mingw/include/stringapiset.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetStringTypeExW (LCID Locale, DWORD dwInfoType, LPCWCH lpSrcStr, int cchSrc, LPWORD lpCharType);
# 40 "/usr/i686-w64-mingw32/sys-root/mingw/include/stringapiset.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetStringTypeW (DWORD dwInfoType, LPCWCH lpSrcStr, int cchSrc, LPWORD lpCharType);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) MultiByteToWideChar (UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) WideCharToMultiByte (UINT CodePage, DWORD dwFlags, LPCWCH lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCCH lpDefaultChar, LPBOOL lpUsedDefaultChar);
# 887 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnls.h" 2 3 4
# 901 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnls.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsValidCodePage (UINT CodePage);



  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetACP (void);



  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetOEMCP (void);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) CompareStringA (LCID Locale, DWORD dwCmpFlags, PCNZCH lpString1, int cchCount1, PCNZCH lpString2, int cchCount2);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) LCMapStringW (LCID Locale, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) LCMapStringA (LCID Locale, DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetLocaleInfoW (LCID Locale, LCTYPE LCType, LPWSTR lpLCData, int cchData);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetLocaleInfoA (LCID Locale, LCTYPE LCType, LPSTR lpLCData, int cchData);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsDBCSLeadByte (BYTE TestChar);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsDBCSLeadByteEx (UINT CodePage, BYTE TestChar);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetNumberFormatA (LCID Locale, DWORD dwFlags, LPCSTR lpValue, const NUMBERFMTA *lpFormat, LPSTR lpNumberStr, int cchNumber);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetNumberFormatW (LCID Locale, DWORD dwFlags, LPCWSTR lpValue, const NUMBERFMTW *lpFormat, LPWSTR lpNumberStr, int cchNumber);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetCurrencyFormatA (LCID Locale, DWORD dwFlags, LPCSTR lpValue, const CURRENCYFMTA *lpFormat, LPSTR lpCurrencyStr, int cchCurrency);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetCurrencyFormatW (LCID Locale, DWORD dwFlags, LPCWSTR lpValue, const CURRENCYFMTW *lpFormat, LPWSTR lpCurrencyStr, int cchCurrency);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumCalendarInfoA (CALINFO_ENUMPROCA lpCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumCalendarInfoW (CALINFO_ENUMPROCW lpCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumCalendarInfoExA (CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumCalendarInfoExW (CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumTimeFormatsA (TIMEFMT_ENUMPROCA lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumTimeFormatsW (TIMEFMT_ENUMPROCW lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumDateFormatsA (DATEFMT_ENUMPROCA lpDateFmtEnumProc, LCID Locale, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumDateFormatsW (DATEFMT_ENUMPROCW lpDateFmtEnumProc, LCID Locale, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumDateFormatsExA (DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumDateFormatsExW (DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsValidLanguageGroup (LGRPID LanguageGroup, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetNLSVersion (NLS_FUNCTION Function, LCID Locale, LPNLSVERSIONINFO lpVersionInformation);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsNLSDefinedString (NLS_FUNCTION Function, DWORD dwFlags, LPNLSVERSIONINFO lpVersionInformation, LPCWSTR lpString, INT cchStr);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) IsValidLocale (LCID Locale, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetLocaleInfoA (LCID Locale, LCTYPE LCType, LPCSTR lpLCData);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetLocaleInfoW (LCID Locale, LCTYPE LCType, LPCWSTR lpLCData);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetCalendarInfoA (LCID Locale, CALID Calendar, CALTYPE CalType, LPSTR lpCalData, int cchData, LPDWORD lpValue);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetCalendarInfoW (LCID Locale, CALID Calendar, CALTYPE CalType, LPWSTR lpCalData, int cchData, LPDWORD lpValue);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetCalendarInfoA (LCID Locale, CALID Calendar, CALTYPE CalType, LPCSTR lpCalData);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetCalendarInfoW (LCID Locale, CALID Calendar, CALTYPE CalType, LPCWSTR lpCalData);
# 981 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnls.h" 3 4
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetGeoInfoA (GEOID Location, GEOTYPE GeoType, LPSTR lpGeoData, int cchData, LANGID LangId);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) GetGeoInfoW (GEOID Location, GEOTYPE GeoType, LPWSTR lpGeoData, int cchData, LANGID LangId);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumSystemGeoID (GEOCLASS GeoClass, GEOID ParentGeoId, GEO_ENUMPROC lpGeoEnumProc);
  __attribute__((dllimport)) GEOID __attribute__((__stdcall__)) GetUserGeoID (GEOCLASS GeoClass);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCPInfo (UINT CodePage, LPCPINFO lpCPInfo);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCPInfoExA (UINT CodePage, DWORD dwFlags, LPCPINFOEXA lpCPInfoEx);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCPInfoExW (UINT CodePage, DWORD dwFlags, LPCPINFOEXW lpCPInfoEx);
# 1000 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnls.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetUserGeoID (GEOID GeoId);
  __attribute__((dllimport)) LCID __attribute__((__stdcall__)) ConvertDefaultLocale (LCID Locale);
  __attribute__((dllimport)) LCID __attribute__((__stdcall__)) GetThreadLocale (void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetThreadLocale (LCID Locale);
  __attribute__((dllimport)) LANGID __attribute__((__stdcall__)) GetSystemDefaultUILanguage (void);
  __attribute__((dllimport)) LANGID __attribute__((__stdcall__)) GetUserDefaultUILanguage (void);
  __attribute__((dllimport)) LANGID __attribute__((__stdcall__)) GetSystemDefaultLangID (void);
  __attribute__((dllimport)) LANGID __attribute__((__stdcall__)) GetUserDefaultLangID (void);
  __attribute__((dllimport)) LCID __attribute__((__stdcall__)) GetSystemDefaultLCID (void);
  __attribute__((dllimport)) LCID __attribute__((__stdcall__)) GetUserDefaultLCID (void);
  __attribute__((dllimport)) LANGID __attribute__((__stdcall__)) SetThreadUILanguage (LANGID LangId);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetStringTypeExA (LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, int cchSrc, LPWORD lpCharType);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetStringTypeA (LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, int cchSrc, LPWORD lpCharType);
  __attribute__((dllimport)) int __attribute__((__stdcall__)) FoldStringA (DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumSystemLocalesA (LOCALE_ENUMPROCA lpLocaleEnumProc, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumSystemLocalesW (LOCALE_ENUMPROCW lpLocaleEnumProc, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumSystemLanguageGroupsA (LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc, DWORD dwFlags, LONG_PTR lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumSystemLanguageGroupsW (LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc, DWORD dwFlags, LONG_PTR lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumLanguageGroupLocalesA (LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumLanguageGroupLocalesW (LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumUILanguagesA (UILANGUAGE_ENUMPROCA lpUILanguageEnumProc, DWORD dwFlags, LONG_PTR lParam);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumUILanguagesW (UILANGUAGE_ENUMPROCW lpUILanguageEnumProc, DWORD dwFlags, LONG_PTR lParam);
# 1049 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnls.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumSystemCodePagesA (CODEPAGE_ENUMPROCA lpCodePageEnumProc, DWORD dwFlags);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumSystemCodePagesW (CODEPAGE_ENUMPROCW lpCodePageEnumProc, DWORD dwFlags);
# 74 "/usr/i686-w64-mingw32/sys-root/mingw/include/windows.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/wincon.h" 1 3 4
# 17 "/usr/i686-w64-mingw32/sys-root/mingw/include/wincon.h" 3 4
  typedef struct _COORD {
    SHORT X;
    SHORT Y;
  } COORD,*PCOORD;

  typedef struct _SMALL_RECT {
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
  } SMALL_RECT,*PSMALL_RECT;

  typedef struct _KEY_EVENT_RECORD {
    WINBOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union {
      WCHAR UnicodeChar;
      CHAR AsciiChar;
    } uChar;
    DWORD dwControlKeyState;
  } KEY_EVENT_RECORD,*PKEY_EVENT_RECORD;
# 58 "/usr/i686-w64-mingw32/sys-root/mingw/include/wincon.h" 3 4
  typedef struct _MOUSE_EVENT_RECORD {
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
  } MOUSE_EVENT_RECORD,*PMOUSE_EVENT_RECORD;
# 78 "/usr/i686-w64-mingw32/sys-root/mingw/include/wincon.h" 3 4
  typedef struct _WINDOW_BUFFER_SIZE_RECORD {
    COORD dwSize;
  } WINDOW_BUFFER_SIZE_RECORD,*PWINDOW_BUFFER_SIZE_RECORD;

  typedef struct _MENU_EVENT_RECORD {
    UINT dwCommandId;
  } MENU_EVENT_RECORD,*PMENU_EVENT_RECORD;

  typedef struct _FOCUS_EVENT_RECORD {
    WINBOOL bSetFocus;
  } FOCUS_EVENT_RECORD,*PFOCUS_EVENT_RECORD;

  typedef struct _INPUT_RECORD {
    WORD EventType;
    union {
      KEY_EVENT_RECORD KeyEvent;
      MOUSE_EVENT_RECORD MouseEvent;
      WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
      MENU_EVENT_RECORD MenuEvent;
      FOCUS_EVENT_RECORD FocusEvent;
    } Event;
  } INPUT_RECORD,*PINPUT_RECORD;







  typedef struct _CHAR_INFO {
    union {
      WCHAR UnicodeChar;
      CHAR AsciiChar;
    } Char;
    WORD Attributes;
  } CHAR_INFO,*PCHAR_INFO;
# 133 "/usr/i686-w64-mingw32/sys-root/mingw/include/wincon.h" 3 4
  typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
  } CONSOLE_SCREEN_BUFFER_INFO,*PCONSOLE_SCREEN_BUFFER_INFO;

  typedef struct _CONSOLE_CURSOR_INFO {
    DWORD dwSize;
    WINBOOL bVisible;
  } CONSOLE_CURSOR_INFO,*PCONSOLE_CURSOR_INFO;

  typedef struct _CONSOLE_FONT_INFO {
    DWORD nFont;
    COORD dwFontSize;
  } CONSOLE_FONT_INFO,*PCONSOLE_FONT_INFO;

  typedef struct _CONSOLE_SELECTION_INFO {
    DWORD dwFlags;
    COORD dwSelectionAnchor;
    SMALL_RECT srSelection;
  } CONSOLE_SELECTION_INFO,*PCONSOLE_SELECTION_INFO;







  typedef WINBOOL (__attribute__((__stdcall__)) *PHANDLER_ROUTINE)(DWORD CtrlType);
# 207 "/usr/i686-w64-mingw32/sys-root/mingw/include/wincon.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PeekConsoleInputA(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) PeekConsoleInputW(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReadConsoleInputA(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReadConsoleInputW(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WriteConsoleInputA(HANDLE hConsoleInput,const INPUT_RECORD *lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsWritten);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WriteConsoleInputW(HANDLE hConsoleInput,const INPUT_RECORD *lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsWritten);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReadConsoleOutputA(HANDLE hConsoleOutput,PCHAR_INFO lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpReadRegion);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReadConsoleOutputW(HANDLE hConsoleOutput,PCHAR_INFO lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpReadRegion);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WriteConsoleOutputA(HANDLE hConsoleOutput,const CHAR_INFO *lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpWriteRegion);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WriteConsoleOutputW(HANDLE hConsoleOutput,const CHAR_INFO *lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpWriteRegion);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReadConsoleOutputCharacterA(HANDLE hConsoleOutput,LPSTR lpCharacter,DWORD nLength,COORD dwReadCoord,LPDWORD lpNumberOfCharsRead);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReadConsoleOutputCharacterW(HANDLE hConsoleOutput,LPWSTR lpCharacter,DWORD nLength,COORD dwReadCoord,LPDWORD lpNumberOfCharsRead);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReadConsoleOutputAttribute(HANDLE hConsoleOutput,LPWORD lpAttribute,DWORD nLength,COORD dwReadCoord,LPDWORD lpNumberOfAttrsRead);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WriteConsoleOutputCharacterA(HANDLE hConsoleOutput,LPCSTR lpCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WriteConsoleOutputCharacterW(HANDLE hConsoleOutput,LPCWSTR lpCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WriteConsoleOutputAttribute(HANDLE hConsoleOutput,const WORD *lpAttribute,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfAttrsWritten);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FillConsoleOutputCharacterA(HANDLE hConsoleOutput,CHAR cCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FillConsoleOutputCharacterW(HANDLE hConsoleOutput,WCHAR cCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FillConsoleOutputAttribute(HANDLE hConsoleOutput,WORD wAttribute,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfAttrsWritten);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetConsoleMode(HANDLE hConsoleHandle,LPDWORD lpMode);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetNumberOfConsoleInputEvents(HANDLE hConsoleInput,LPDWORD lpNumberOfEvents);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetConsoleScreenBufferInfo(HANDLE hConsoleOutput,PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo);
  __attribute__((dllimport)) COORD __attribute__((__stdcall__)) GetLargestConsoleWindowSize(HANDLE hConsoleOutput);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetConsoleCursorInfo(HANDLE hConsoleOutput,PCONSOLE_CURSOR_INFO lpConsoleCursorInfo);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCurrentConsoleFont(HANDLE hConsoleOutput,WINBOOL bMaximumWindow,PCONSOLE_FONT_INFO lpConsoleCurrentFont);
  __attribute__((dllimport)) COORD __attribute__((__stdcall__)) GetConsoleFontSize(HANDLE hConsoleOutput,DWORD nFont);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetConsoleSelectionInfo(PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetNumberOfConsoleMouseButtons(LPDWORD lpNumberOfMouseButtons);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetConsoleMode(HANDLE hConsoleHandle,DWORD dwMode);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetConsoleActiveScreenBuffer(HANDLE hConsoleOutput);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FlushConsoleInputBuffer(HANDLE hConsoleInput);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetConsoleScreenBufferSize(HANDLE hConsoleOutput,COORD dwSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetConsoleCursorPosition(HANDLE hConsoleOutput,COORD dwCursorPosition);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetConsoleCursorInfo(HANDLE hConsoleOutput,const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ScrollConsoleScreenBufferA(HANDLE hConsoleOutput,const SMALL_RECT *lpScrollRectangle,const SMALL_RECT *lpClipRectangle,COORD dwDestinationOrigin,const CHAR_INFO *lpFill);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ScrollConsoleScreenBufferW(HANDLE hConsoleOutput,const SMALL_RECT *lpScrollRectangle,const SMALL_RECT *lpClipRectangle,COORD dwDestinationOrigin,const CHAR_INFO *lpFill);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetConsoleWindowInfo(HANDLE hConsoleOutput,WINBOOL bAbsolute,const SMALL_RECT *lpConsoleWindow);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetConsoleTextAttribute(HANDLE hConsoleOutput,WORD wAttributes);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetConsoleCtrlHandler(PHANDLER_ROUTINE HandlerRoutine,WINBOOL Add);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GenerateConsoleCtrlEvent(DWORD dwCtrlEvent,DWORD dwProcessGroupId);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AllocConsole(void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) FreeConsole(void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AttachConsole(DWORD dwProcessId);



  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleTitleA(LPSTR lpConsoleTitle,DWORD nSize);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleTitleW(LPWSTR lpConsoleTitle,DWORD nSize);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetConsoleTitleA(LPCSTR lpConsoleTitle);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetConsoleTitleW(LPCWSTR lpConsoleTitle);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReadConsoleA(HANDLE hConsoleInput,LPVOID lpBuffer,DWORD nNumberOfCharsToRead,LPDWORD lpNumberOfCharsRead,LPVOID lpReserved);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ReadConsoleW(HANDLE hConsoleInput,LPVOID lpBuffer,DWORD nNumberOfCharsToRead,LPDWORD lpNumberOfCharsRead,LPVOID lpReserved);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WriteConsoleA(HANDLE hConsoleOutput,const void *lpBuffer,DWORD nNumberOfCharsToWrite,LPDWORD lpNumberOfCharsWritten,LPVOID lpReserved);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) WriteConsoleW(HANDLE hConsoleOutput,const void *lpBuffer,DWORD nNumberOfCharsToWrite,LPDWORD lpNumberOfCharsWritten,LPVOID lpReserved);



  __attribute__((dllimport)) HANDLE __attribute__((__stdcall__)) CreateConsoleScreenBuffer(DWORD dwDesiredAccess,DWORD dwShareMode,const SECURITY_ATTRIBUTES *lpSecurityAttributes,DWORD dwFlags,LPVOID lpScreenBufferData);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetConsoleCP(void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetConsoleCP(UINT wCodePageID);
  __attribute__((dllimport)) UINT __attribute__((__stdcall__)) GetConsoleOutputCP(void);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetConsoleOutputCP(UINT wCodePageID);



  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetConsoleDisplayMode(LPDWORD lpModeFlags);



  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetConsoleDisplayMode(HANDLE hConsoleOutput, DWORD dwFlags, PCOORD lpNewScreenBufferDimensions);

  __attribute__((dllimport)) HWND __attribute__((__stdcall__)) GetConsoleWindow(void);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleProcessList(LPDWORD lpdwProcessList,DWORD dwProcessCount);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AddConsoleAliasA(LPSTR Source,LPSTR Target,LPSTR ExeName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AddConsoleAliasW(LPWSTR Source,LPWSTR Target,LPWSTR ExeName);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleAliasA(LPSTR Source,LPSTR TargetBuffer,DWORD TargetBufferLength,LPSTR ExeName);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleAliasW(LPWSTR Source,LPWSTR TargetBuffer,DWORD TargetBufferLength,LPWSTR ExeName);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleAliasesLengthA(LPSTR ExeName);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleAliasesLengthW(LPWSTR ExeName);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleAliasExesLengthA(void);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleAliasExesLengthW(void);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleAliasesA(LPSTR AliasBuffer,DWORD AliasBufferLength,LPSTR ExeName);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleAliasesW(LPWSTR AliasBuffer,DWORD AliasBufferLength,LPWSTR ExeName);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleAliasExesA(LPSTR ExeNameBuffer,DWORD ExeNameBufferLength);
  __attribute__((dllimport)) DWORD __attribute__((__stdcall__)) GetConsoleAliasExesW(LPWSTR ExeNameBuffer,DWORD ExeNameBufferLength);





typedef struct _CONSOLE_FONT_INFOEX {
  ULONG cbSize;
  DWORD nFont;
  COORD dwFontSize;
  UINT FontFamily;
  UINT FontWeight;
  WCHAR FaceName[32];
} CONSOLE_FONT_INFOEX, *PCONSOLE_FONT_INFOEX;

typedef struct _CONSOLE_HISTORY_INFO {
  UINT cbSize;
  UINT HistoryBufferSize;
  UINT NumberOfHistoryBuffers;
  DWORD dwFlags;
} CONSOLE_HISTORY_INFO, *PCONSOLE_HISTORY_INFO;

typedef struct _CONSOLE_READCONSOLE_CONTROL {
  ULONG nLength;
  ULONG nInitialChars;
  ULONG dwCtrlWakeupMask;
  ULONG dwControlKeyState;
} CONSOLE_READCONSOLE_CONTROL, *PCONSOLE_READCONSOLE_CONTROL;

typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX {
  ULONG cbSize;
  COORD dwSize;
  COORD dwCursorPosition;
  WORD wAttributes;
  SMALL_RECT srWindow;
  COORD dwMaximumWindowSize;
  WORD wPopupAttributes;
  WINBOOL bFullscreenSupported;
  COLORREF ColorTable[16];
} CONSOLE_SCREEN_BUFFER_INFOEX, *PCONSOLE_SCREEN_BUFFER_INFOEX;

WINBOOL __attribute__((__stdcall__)) GetConsoleHistoryInfo(
  PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo
);
# 350 "/usr/i686-w64-mingw32/sys-root/mingw/include/wincon.h" 3 4
__attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetConsoleScreenBufferInfoEx(
  HANDLE hConsoleOutput,
  PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx
);

__attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetCurrentConsoleFontEx(
  HANDLE hConsoleOutput,
  WINBOOL bMaximumWindow,
  PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx
);

__attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetConsoleHistoryInfo(
  PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo
);

__attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetConsoleScreenBufferInfoEx(
  HANDLE hConsoleOutput,
  PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx
);

__attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetCurrentConsoleFontEx(
  HANDLE hConsoleOutput,
  WINBOOL bMaximumWindow,
  PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx
);
# 75 "/usr/i686-w64-mingw32/sys-root/mingw/include/windows.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/winver.h" 1 3 4
# 9 "/usr/i686-w64-mingw32/sys-root/mingw/include/winver.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw.h" 1 3 4
# 10 "/usr/i686-w64-mingw32/sys-root/mingw/include/winver.h" 2 3 4
# 113 "/usr/i686-w64-mingw32/sys-root/mingw/include/winver.h" 3 4
  typedef struct tagVS_FIXEDFILEINFO
  {
    DWORD dwSignature;
    DWORD dwStrucVersion;
    DWORD dwFileVersionMS;
    DWORD dwFileVersionLS;
    DWORD dwProductVersionMS;
    DWORD dwProductVersionLS;
    DWORD dwFileFlagsMask;
    DWORD dwFileFlags;
    DWORD dwFileOS;
    DWORD dwFileType;
    DWORD dwFileSubtype;
    DWORD dwFileDateMS;
    DWORD dwFileDateLS;
  } VS_FIXEDFILEINFO;
# 137 "/usr/i686-w64-mingw32/sys-root/mingw/include/winver.h" 3 4
  DWORD __attribute__((__stdcall__)) VerFindFileA(DWORD uFlags,LPSTR szFileName,LPSTR szWinDir,LPSTR szAppDir,LPSTR szCurDir,PUINT lpuCurDirLen,LPSTR szDestDir,PUINT lpuDestDirLen);
  DWORD __attribute__((__stdcall__)) VerFindFileW(DWORD uFlags,LPWSTR szFileName,LPWSTR szWinDir,LPWSTR szAppDir,LPWSTR szCurDir,PUINT lpuCurDirLen,LPWSTR szDestDir,PUINT lpuDestDirLen);
  DWORD __attribute__((__stdcall__)) VerInstallFileA(DWORD uFlags,LPSTR szSrcFileName,LPSTR szDestFileName,LPSTR szSrcDir,LPSTR szDestDir,LPSTR szCurDir,LPSTR szTmpFile,PUINT lpuTmpFileLen);
  DWORD __attribute__((__stdcall__)) VerInstallFileW(DWORD uFlags,LPWSTR szSrcFileName,LPWSTR szDestFileName,LPWSTR szSrcDir,LPWSTR szDestDir,LPWSTR szCurDir,LPWSTR szTmpFile,PUINT lpuTmpFileLen);
  DWORD __attribute__((__stdcall__)) GetFileVersionInfoSizeA(LPCSTR lptstrFilename,LPDWORD lpdwHandle);
  DWORD __attribute__((__stdcall__)) GetFileVersionInfoSizeW(LPCWSTR lptstrFilename,LPDWORD lpdwHandle);
  WINBOOL __attribute__((__stdcall__)) GetFileVersionInfoA(LPCSTR lptstrFilename,DWORD dwHandle,DWORD dwLen,LPVOID lpData);
  WINBOOL __attribute__((__stdcall__)) GetFileVersionInfoW(LPCWSTR lptstrFilename,DWORD dwHandle,DWORD dwLen,LPVOID lpData);
  DWORD __attribute__((__stdcall__)) VerLanguageNameA(DWORD wLang,LPSTR szLang,DWORD nSize);
  DWORD __attribute__((__stdcall__)) VerLanguageNameW(DWORD wLang,LPWSTR szLang,DWORD nSize);
  WINBOOL __attribute__((__stdcall__)) VerQueryValueA(const LPVOID pBlock,LPCSTR lpSubBlock,LPVOID *lplpBuffer,PUINT puLen);
  WINBOOL __attribute__((__stdcall__)) VerQueryValueW(const LPVOID pBlock,LPCWSTR lpSubBlock,LPVOID *lplpBuffer,PUINT puLen);
# 76 "/usr/i686-w64-mingw32/sys-root/mingw/include/windows.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/winreg.h" 1 3 4
# 34 "/usr/i686-w64-mingw32/sys-root/mingw/include/winreg.h" 3 4
  typedef ACCESS_MASK REGSAM;
  typedef LONG LSTATUS;
# 53 "/usr/i686-w64-mingw32/sys-root/mingw/include/winreg.h" 3 4
  struct val_context {
    int valuelen;
    LPVOID value_context;
    LPVOID val_buff_ptr;
  };

  typedef struct val_context *PVALCONTEXT;

  typedef struct pvalueA {
    LPSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
  }PVALUEA,*PPVALUEA;

  typedef struct pvalueW {
    LPWSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
  }PVALUEW,*PPVALUEW;

  typedef PVALUEA PVALUE;
  typedef PPVALUEA PPVALUE;

  typedef DWORD __attribute__((__cdecl__)) QUERYHANDLER(LPVOID keycontext,PVALCONTEXT val_list,DWORD num_vals,LPVOID outputbuffer,DWORD *total_outlen,DWORD input_blen);

  typedef QUERYHANDLER *PQUERYHANDLER;

  typedef struct provider_info {
    PQUERYHANDLER pi_R0_1val;
    PQUERYHANDLER pi_R0_allvals;
    PQUERYHANDLER pi_R3_1val;
    PQUERYHANDLER pi_R3_allvals;
    DWORD pi_flags;
    LPVOID pi_key_context;
  } REG_PROVIDER;

  typedef struct provider_info *PPROVIDER;

  typedef struct value_entA {
    LPSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
  } VALENTA,*PVALENTA;

  typedef struct value_entW {
    LPWSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
  } VALENTW,*PVALENTW;

  typedef VALENTA VALENT;
  typedef PVALENTA PVALENT;
# 140 "/usr/i686-w64-mingw32/sys-root/mingw/include/winreg.h" 3 4
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegCloseKey(HKEY hKey);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegOverridePredefKey(HKEY hKey,HKEY hNewHKey);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegOpenUserClassesRoot(HANDLE hToken,DWORD dwOptions,REGSAM samDesired,PHKEY phkResult);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegOpenCurrentUser(REGSAM samDesired,PHKEY phkResult);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegDisablePredefinedCache();
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegConnectRegistryA(LPCSTR lpMachineName,HKEY hKey,PHKEY phkResult);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegConnectRegistryW(LPCWSTR lpMachineName,HKEY hKey,PHKEY phkResult);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegConnectRegistryExA(LPCSTR lpMachineName,HKEY hKey,ULONG Flags,PHKEY phkResult);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegConnectRegistryExW(LPCWSTR lpMachineName,HKEY hKey,ULONG Flags,PHKEY phkResult);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegCreateKeyA(HKEY hKey,LPCSTR lpSubKey,PHKEY phkResult);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegCreateKeyW(HKEY hKey,LPCWSTR lpSubKey,PHKEY phkResult);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegCreateKeyExA(HKEY hKey,LPCSTR lpSubKey,DWORD Reserved,LPSTR lpClass,DWORD dwOptions,REGSAM samDesired,LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,LPDWORD lpdwDisposition);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegCreateKeyExW(HKEY hKey,LPCWSTR lpSubKey,DWORD Reserved,LPWSTR lpClass,DWORD dwOptions,REGSAM samDesired,LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,LPDWORD lpdwDisposition);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegDeleteKeyA(HKEY hKey,LPCSTR lpSubKey);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegDeleteKeyW(HKEY hKey,LPCWSTR lpSubKey);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegDeleteKeyExA(HKEY hKey,LPCSTR lpSubKey,REGSAM samDesired,DWORD Reserved);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegDeleteKeyExW(HKEY hKey,LPCWSTR lpSubKey,REGSAM samDesired,DWORD Reserved);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegDisableReflectionKey(HKEY hBase);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegEnableReflectionKey(HKEY hBase);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegQueryReflectionKey(HKEY hBase,WINBOOL *bIsReflectionDisabled);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegDeleteValueA(HKEY hKey,LPCSTR lpValueName);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegDeleteValueW(HKEY hKey,LPCWSTR lpValueName);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegEnumKeyA(HKEY hKey,DWORD dwIndex,LPSTR lpName,DWORD cchName);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegEnumKeyW(HKEY hKey,DWORD dwIndex,LPWSTR lpName,DWORD cchName);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegEnumKeyExA(HKEY hKey,DWORD dwIndex,LPSTR lpName,LPDWORD lpcchName,LPDWORD lpReserved,LPSTR lpClass,LPDWORD lpcchClass,PFILETIME lpftLastWriteTime);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegEnumKeyExW(HKEY hKey,DWORD dwIndex,LPWSTR lpName,LPDWORD lpcchName,LPDWORD lpReserved,LPWSTR lpClass,LPDWORD lpcchClass,PFILETIME lpftLastWriteTime);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegEnumValueA(HKEY hKey,DWORD dwIndex,LPSTR lpValueName,LPDWORD lpcchValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegEnumValueW(HKEY hKey,DWORD dwIndex,LPWSTR lpValueName,LPDWORD lpcchValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegFlushKey(HKEY hKey);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegGetKeySecurity(HKEY hKey,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor,LPDWORD lpcbSecurityDescriptor);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegLoadKeyA(HKEY hKey,LPCSTR lpSubKey,LPCSTR lpFile);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegLoadKeyW(HKEY hKey,LPCWSTR lpSubKey,LPCWSTR lpFile);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegNotifyChangeKeyValue(HKEY hKey,WINBOOL bWatchSubtree,DWORD dwNotifyFilter,HANDLE hEvent,WINBOOL fAsynchronous);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegOpenKeyA(HKEY hKey,LPCSTR lpSubKey,PHKEY phkResult);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegOpenKeyW(HKEY hKey,LPCWSTR lpSubKey,PHKEY phkResult);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegOpenKeyExA(HKEY hKey,LPCSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegOpenKeyExW(HKEY hKey,LPCWSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegQueryInfoKeyA(HKEY hKey,LPSTR lpClass,LPDWORD lpcchClass,LPDWORD lpReserved,LPDWORD lpcSubKeys,LPDWORD lpcbMaxSubKeyLen,LPDWORD lpcbMaxClassLen,LPDWORD lpcValues,LPDWORD lpcbMaxValueNameLen,LPDWORD lpcbMaxValueLen,LPDWORD lpcbSecurityDescriptor,PFILETIME lpftLastWriteTime);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegQueryInfoKeyW(HKEY hKey,LPWSTR lpClass,LPDWORD lpcchClass,LPDWORD lpReserved,LPDWORD lpcSubKeys,LPDWORD lpcbMaxSubKeyLen,LPDWORD lpcbMaxClassLen,LPDWORD lpcValues,LPDWORD lpcbMaxValueNameLen,LPDWORD lpcbMaxValueLen,LPDWORD lpcbSecurityDescriptor,PFILETIME lpftLastWriteTime);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegQueryValueA(HKEY hKey,LPCSTR lpSubKey,LPSTR lpData,PLONG lpcbData);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegQueryValueW(HKEY hKey,LPCWSTR lpSubKey,LPWSTR lpData,PLONG lpcbData);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegQueryMultipleValuesA(HKEY hKey,PVALENTA val_list,DWORD num_vals,LPSTR lpValueBuf,LPDWORD ldwTotsize);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegQueryMultipleValuesW(HKEY hKey,PVALENTW val_list,DWORD num_vals,LPWSTR lpValueBuf,LPDWORD ldwTotsize);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegQueryValueExA(HKEY hKey,LPCSTR lpValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegQueryValueExW(HKEY hKey,LPCWSTR lpValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegReplaceKeyA(HKEY hKey,LPCSTR lpSubKey,LPCSTR lpNewFile,LPCSTR lpOldFile);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegReplaceKeyW(HKEY hKey,LPCWSTR lpSubKey,LPCWSTR lpNewFile,LPCWSTR lpOldFile);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegRestoreKeyA(HKEY hKey,LPCSTR lpFile,DWORD dwFlags);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegRestoreKeyW(HKEY hKey,LPCWSTR lpFile,DWORD dwFlags);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegSaveKeyA(HKEY hKey,LPCSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegSaveKeyW(HKEY hKey,LPCWSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegSetKeySecurity(HKEY hKey,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegSetValueA(HKEY hKey,LPCSTR lpSubKey,DWORD dwType,LPCSTR lpData,DWORD cbData);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegSetValueW(HKEY hKey,LPCWSTR lpSubKey,DWORD dwType,LPCWSTR lpData,DWORD cbData);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegSetValueExA(HKEY hKey,LPCSTR lpValueName,DWORD Reserved,DWORD dwType,const BYTE *lpData,DWORD cbData);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegSetValueExW(HKEY hKey,LPCWSTR lpValueName,DWORD Reserved,DWORD dwType,const BYTE *lpData,DWORD cbData);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegUnLoadKeyA(HKEY hKey,LPCSTR lpSubKey);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegUnLoadKeyW(HKEY hKey,LPCWSTR lpSubKey);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegGetValueA(HKEY hkey,LPCSTR lpSubKey,LPCSTR lpValue,DWORD dwFlags,LPDWORD pdwType,PVOID pvData,LPDWORD pcbData);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegGetValueW(HKEY hkey,LPCWSTR lpSubKey,LPCWSTR lpValue,DWORD dwFlags,LPDWORD pdwType,PVOID pvData,LPDWORD pcbData);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) InitiateSystemShutdownA(LPSTR lpMachineName,LPSTR lpMessage,DWORD dwTimeout,WINBOOL bForceAppsClosed,WINBOOL bRebootAfterShutdown);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) InitiateSystemShutdownW(LPWSTR lpMachineName,LPWSTR lpMessage,DWORD dwTimeout,WINBOOL bForceAppsClosed,WINBOOL bRebootAfterShutdown);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AbortSystemShutdownA(LPSTR lpMachineName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) AbortSystemShutdownW(LPWSTR lpMachineName);

# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/reason.h" 1 3 4
# 206 "/usr/i686-w64-mingw32/sys-root/mingw/include/winreg.h" 2 3 4
# 222 "/usr/i686-w64-mingw32/sys-root/mingw/include/winreg.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) InitiateSystemShutdownExA(LPSTR lpMachineName,LPSTR lpMessage,DWORD dwTimeout,WINBOOL bForceAppsClosed,WINBOOL bRebootAfterShutdown,DWORD dwReason);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) InitiateSystemShutdownExW(LPWSTR lpMachineName,LPWSTR lpMessage,DWORD dwTimeout,WINBOOL bForceAppsClosed,WINBOOL bRebootAfterShutdown,DWORD dwReason);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegSaveKeyExA(HKEY hKey,LPCSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD Flags);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) RegSaveKeyExW(HKEY hKey,LPCWSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD Flags);
  __attribute__((dllimport)) LONG __attribute__((__stdcall__)) Wow64Win32ApiEntry (DWORD dwFuncNumber,DWORD dwFlag,DWORD dwRes);
# 77 "/usr/i686-w64-mingw32/sys-root/mingw/include/windows.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnetwk.h" 1 3 4
# 17 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnetwk.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/wnnc.h" 1 3 4
# 18 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnetwk.h" 2 3 4
# 53 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnetwk.h" 3 4
  typedef struct _NETRESOURCEA {
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    LPSTR lpComment;
    LPSTR lpProvider;
  } NETRESOURCEA,*LPNETRESOURCEA;
  typedef struct _NETRESOURCEW {
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    LPWSTR lpComment;
    LPWSTR lpProvider;
  } NETRESOURCEW,*LPNETRESOURCEW;

  typedef NETRESOURCEA NETRESOURCE;
  typedef LPNETRESOURCEA LPNETRESOURCE;
# 106 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnetwk.h" 3 4
  DWORD __attribute__((__stdcall__)) WNetAddConnectionA(LPCSTR lpRemoteName,LPCSTR lpPassword,LPCSTR lpLocalName);
  DWORD __attribute__((__stdcall__)) WNetAddConnectionW(LPCWSTR lpRemoteName,LPCWSTR lpPassword,LPCWSTR lpLocalName);
  DWORD __attribute__((__stdcall__)) WNetAddConnection2A(LPNETRESOURCEA lpNetResource,LPCSTR lpPassword,LPCSTR lpUserName,DWORD dwFlags);
  DWORD __attribute__((__stdcall__)) WNetAddConnection2W(LPNETRESOURCEW lpNetResource,LPCWSTR lpPassword,LPCWSTR lpUserName,DWORD dwFlags);
  DWORD __attribute__((__stdcall__)) WNetAddConnection3A(HWND hwndOwner,LPNETRESOURCEA lpNetResource,LPCSTR lpPassword,LPCSTR lpUserName,DWORD dwFlags);
  DWORD __attribute__((__stdcall__)) WNetAddConnection3W(HWND hwndOwner,LPNETRESOURCEW lpNetResource,LPCWSTR lpPassword,LPCWSTR lpUserName,DWORD dwFlags);
  DWORD __attribute__((__stdcall__)) WNetCancelConnectionA(LPCSTR lpName,WINBOOL fForce);
  DWORD __attribute__((__stdcall__)) WNetCancelConnectionW(LPCWSTR lpName,WINBOOL fForce);
  DWORD __attribute__((__stdcall__)) WNetCancelConnection2A(LPCSTR lpName,DWORD dwFlags,WINBOOL fForce);
  DWORD __attribute__((__stdcall__)) WNetCancelConnection2W(LPCWSTR lpName,DWORD dwFlags,WINBOOL fForce);
  DWORD __attribute__((__stdcall__)) WNetGetConnectionA(LPCSTR lpLocalName,LPSTR lpRemoteName,LPDWORD lpnLength);
  DWORD __attribute__((__stdcall__)) WNetGetConnectionW(LPCWSTR lpLocalName,LPWSTR lpRemoteName,LPDWORD lpnLength);
  DWORD __attribute__((__stdcall__)) WNetRestoreConnectionA(HWND hwndParent,LPCSTR lpDevice);
  DWORD __attribute__((__stdcall__)) WNetUseConnectionA(HWND hwndOwner,LPNETRESOURCEA lpNetResource,LPCSTR lpPassword,LPCSTR lpUserID,DWORD dwFlags,LPSTR lpAccessName,LPDWORD lpBufferSize,LPDWORD lpResult);
  DWORD __attribute__((__stdcall__)) WNetUseConnectionW(HWND hwndOwner,LPNETRESOURCEW lpNetResource,LPCWSTR lpPassword,LPCWSTR lpUserID,DWORD dwFlags,LPWSTR lpAccessName,LPDWORD lpBufferSize,LPDWORD lpResult);
  DWORD __attribute__((__stdcall__)) WNetConnectionDialog(HWND hwnd,DWORD dwType);
  DWORD __attribute__((__stdcall__)) WNetDisconnectDialog(HWND hwnd,DWORD dwType);



  DWORD __attribute__((__stdcall__)) WNetRestoreConnectionW(HWND hwndParent,LPCWSTR lpDevice);


  typedef struct _CONNECTDLGSTRUCTA {
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
  } CONNECTDLGSTRUCTA,*LPCONNECTDLGSTRUCTA;

  typedef struct _CONNECTDLGSTRUCTW {
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
  } CONNECTDLGSTRUCTW,*LPCONNECTDLGSTRUCTW;

  typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
  typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;
# 158 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnetwk.h" 3 4
  DWORD __attribute__((__stdcall__)) WNetConnectionDialog1A(LPCONNECTDLGSTRUCTA lpConnDlgStruct);
  DWORD __attribute__((__stdcall__)) WNetConnectionDialog1W(LPCONNECTDLGSTRUCTW lpConnDlgStruct);

  typedef struct _DISCDLGSTRUCTA {
    DWORD cbStructure;
    HWND hwndOwner;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    DWORD dwFlags;
  } DISCDLGSTRUCTA,*LPDISCDLGSTRUCTA;

  typedef struct _DISCDLGSTRUCTW {
    DWORD cbStructure;
    HWND hwndOwner;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    DWORD dwFlags;
  } DISCDLGSTRUCTW,*LPDISCDLGSTRUCTW;

  typedef DISCDLGSTRUCTA DISCDLGSTRUCT;
  typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;
# 189 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnetwk.h" 3 4
  DWORD __attribute__((__stdcall__)) WNetDisconnectDialog1A(LPDISCDLGSTRUCTA lpConnDlgStruct);
  DWORD __attribute__((__stdcall__)) WNetDisconnectDialog1W(LPDISCDLGSTRUCTW lpConnDlgStruct);
  DWORD __attribute__((__stdcall__)) WNetOpenEnumA(DWORD dwScope,DWORD dwType,DWORD dwUsage,LPNETRESOURCEA lpNetResource,LPHANDLE lphEnum);
  DWORD __attribute__((__stdcall__)) WNetOpenEnumW(DWORD dwScope,DWORD dwType,DWORD dwUsage,LPNETRESOURCEW lpNetResource,LPHANDLE lphEnum);
  DWORD __attribute__((__stdcall__)) WNetEnumResourceA(HANDLE hEnum,LPDWORD lpcCount,LPVOID lpBuffer,LPDWORD lpBufferSize);
  DWORD __attribute__((__stdcall__)) WNetEnumResourceW(HANDLE hEnum,LPDWORD lpcCount,LPVOID lpBuffer,LPDWORD lpBufferSize);
  DWORD __attribute__((__stdcall__)) WNetCloseEnum(HANDLE hEnum);
  DWORD __attribute__((__stdcall__)) WNetGetResourceParentA(LPNETRESOURCEA lpNetResource,LPVOID lpBuffer,LPDWORD lpcbBuffer);
  DWORD __attribute__((__stdcall__)) WNetGetResourceParentW(LPNETRESOURCEW lpNetResource,LPVOID lpBuffer,LPDWORD lpcbBuffer);
  DWORD __attribute__((__stdcall__)) WNetGetResourceInformationA(LPNETRESOURCEA lpNetResource,LPVOID lpBuffer,LPDWORD lpcbBuffer,LPSTR *lplpSystem);
  DWORD __attribute__((__stdcall__)) WNetGetResourceInformationW(LPNETRESOURCEW lpNetResource,LPVOID lpBuffer,LPDWORD lpcbBuffer,LPWSTR *lplpSystem);




  typedef struct _UNIVERSAL_NAME_INFOA {
    LPSTR lpUniversalName;
  } UNIVERSAL_NAME_INFOA,*LPUNIVERSAL_NAME_INFOA;

  typedef struct _UNIVERSAL_NAME_INFOW {
    LPWSTR lpUniversalName;
  } UNIVERSAL_NAME_INFOW,*LPUNIVERSAL_NAME_INFOW;

  typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
  typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;

  typedef struct _REMOTE_NAME_INFOA {
    LPSTR lpUniversalName;
    LPSTR lpConnectionName;
    LPSTR lpRemainingPath;
  } REMOTE_NAME_INFOA,*LPREMOTE_NAME_INFOA;

  typedef struct _REMOTE_NAME_INFOW {
    LPWSTR lpUniversalName;
    LPWSTR lpConnectionName;
    LPWSTR lpRemainingPath;
  } REMOTE_NAME_INFOW,*LPREMOTE_NAME_INFOW;

  typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO;
  typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;





  DWORD __attribute__((__stdcall__)) WNetGetUniversalNameA(LPCSTR lpLocalPath,DWORD dwInfoLevel,LPVOID lpBuffer,LPDWORD lpBufferSize);
  DWORD __attribute__((__stdcall__)) WNetGetUniversalNameW(LPCWSTR lpLocalPath,DWORD dwInfoLevel,LPVOID lpBuffer,LPDWORD lpBufferSize);
  DWORD __attribute__((__stdcall__)) WNetGetUserA(LPCSTR lpName,LPSTR lpUserName,LPDWORD lpnLength);
  DWORD __attribute__((__stdcall__)) WNetGetUserW(LPCWSTR lpName,LPWSTR lpUserName,LPDWORD lpnLength);






  DWORD __attribute__((__stdcall__)) WNetGetProviderNameA(DWORD dwNetType,LPSTR lpProviderName,LPDWORD lpBufferSize);
  DWORD __attribute__((__stdcall__)) WNetGetProviderNameW(DWORD dwNetType,LPWSTR lpProviderName,LPDWORD lpBufferSize);

  typedef struct _NETINFOSTRUCT {
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    ULONG_PTR dwHandle;
    WORD wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
  } NETINFOSTRUCT,*LPNETINFOSTRUCT;







  DWORD __attribute__((__stdcall__)) WNetGetNetworkInformationA(LPCSTR lpProvider,LPNETINFOSTRUCT lpNetInfoStruct);
  DWORD __attribute__((__stdcall__)) WNetGetNetworkInformationW(LPCWSTR lpProvider,LPNETINFOSTRUCT lpNetInfoStruct);

  typedef UINT (__attribute__((__stdcall__)) *PFNGETPROFILEPATHA) (LPCSTR pszUsername,LPSTR pszBuffer,UINT cbBuffer);
  typedef UINT (__attribute__((__stdcall__)) *PFNGETPROFILEPATHW) (LPCWSTR pszUsername,LPWSTR pszBuffer,UINT cbBuffer);



  typedef UINT (__attribute__((__stdcall__)) *PFNRECONCILEPROFILEA) (LPCSTR pszCentralFile,LPCSTR pszLocalFile,DWORD dwFlags);
  typedef UINT (__attribute__((__stdcall__)) *PFNRECONCILEPROFILEW) (LPCWSTR pszCentralFile,LPCWSTR pszLocalFile,DWORD dwFlags);






  typedef WINBOOL (__attribute__((__stdcall__)) *PFNPROCESSPOLICIESA) (HWND hwnd,LPCSTR pszPath,LPCSTR pszUsername,LPCSTR pszComputerName,DWORD dwFlags);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFNPROCESSPOLICIESW) (HWND hwnd,LPCWSTR pszPath,LPCWSTR pszUsername,LPCWSTR pszComputerName,DWORD dwFlags);







  DWORD __attribute__((__stdcall__)) WNetGetLastErrorA(LPDWORD lpError,LPSTR lpErrorBuf,DWORD nErrorBufSize,LPSTR lpNameBuf,DWORD nNameBufSize);
  DWORD __attribute__((__stdcall__)) WNetGetLastErrorW(LPDWORD lpError,LPWSTR lpErrorBuf,DWORD nErrorBufSize,LPWSTR lpNameBuf,DWORD nNameBufSize);
# 335 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnetwk.h" 3 4
  typedef struct _NETCONNECTINFOSTRUCT {
    DWORD cbStructure;
    DWORD dwFlags;
    DWORD dwSpeed;
    DWORD dwDelay;
    DWORD dwOptDataSize;
  } NETCONNECTINFOSTRUCT,*LPNETCONNECTINFOSTRUCT;
# 350 "/usr/i686-w64-mingw32/sys-root/mingw/include/winnetwk.h" 3 4
  DWORD __attribute__((__stdcall__)) MultinetGetConnectionPerformanceA(LPNETRESOURCEA lpNetResource,LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct);
  DWORD __attribute__((__stdcall__)) MultinetGetConnectionPerformanceW(LPNETRESOURCEW lpNetResource,LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct);
# 78 "/usr/i686-w64-mingw32/sys-root/mingw/include/windows.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/virtdisk.h" 1 3 4
# 79 "/usr/i686-w64-mingw32/sys-root/mingw/include/windows.h" 2 3 4
# 114 "/usr/i686-w64-mingw32/sys-root/mingw/include/windows.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/stralign.h" 1 3 4
# 35 "/usr/i686-w64-mingw32/sys-root/mingw/include/stralign.h" 3 4
  PUWSTR ua_wcscpy(PUWSTR Destination,PCUWSTR Source);
# 205 "/usr/i686-w64-mingw32/sys-root/mingw/include/stralign.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/sec_api/stralign_s.h" 1 3 4
# 9 "/usr/i686-w64-mingw32/sys-root/mingw/include/sec_api/stralign_s.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/stralign.h" 1 3 4
# 10 "/usr/i686-w64-mingw32/sys-root/mingw/include/sec_api/stralign_s.h" 2 3 4
# 206 "/usr/i686-w64-mingw32/sys-root/mingw/include/stralign.h" 2 3 4
# 115 "/usr/i686-w64-mingw32/sys-root/mingw/include/windows.h" 2 3 4







# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/winsvc.h" 1 3 4
# 9 "/usr/i686-w64-mingw32/sys-root/mingw/include/winsvc.h" 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/_mingw.h" 1 3 4
# 10 "/usr/i686-w64-mingw32/sys-root/mingw/include/winsvc.h" 2 3 4
# 95 "/usr/i686-w64-mingw32/sys-root/mingw/include/winsvc.h" 3 4
  typedef struct _SERVICE_DESCRIPTIONA {
    LPSTR lpDescription;
  } SERVICE_DESCRIPTIONA,*LPSERVICE_DESCRIPTIONA;

  typedef struct _SERVICE_DESCRIPTIONW {
    LPWSTR lpDescription;
  } SERVICE_DESCRIPTIONW,*LPSERVICE_DESCRIPTIONW;

  typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
  typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION;

  typedef enum _SC_ACTION_TYPE {
    SC_ACTION_NONE = 0,SC_ACTION_RESTART = 1,SC_ACTION_REBOOT = 2,SC_ACTION_RUN_COMMAND = 3
  } SC_ACTION_TYPE;

  typedef struct _SC_ACTION {
    SC_ACTION_TYPE Type;
    DWORD Delay;
  } SC_ACTION,*LPSC_ACTION;

  typedef struct _SERVICE_FAILURE_ACTIONSA {
    DWORD dwResetPeriod;
    LPSTR lpRebootMsg;
    LPSTR lpCommand;
    DWORD cActions;
    SC_ACTION *lpsaActions;
  } SERVICE_FAILURE_ACTIONSA,*LPSERVICE_FAILURE_ACTIONSA;

  typedef struct _SERVICE_FAILURE_ACTIONSW {
    DWORD dwResetPeriod;
    LPWSTR lpRebootMsg;
    LPWSTR lpCommand;
    DWORD cActions;
    SC_ACTION *lpsaActions;
  } SERVICE_FAILURE_ACTIONSW,*LPSERVICE_FAILURE_ACTIONSW;

  typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
  typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS;

  struct SC_HANDLE__ { int unused; }; typedef struct SC_HANDLE__ *SC_HANDLE;
  typedef SC_HANDLE *LPSC_HANDLE;

  struct SERVICE_STATUS_HANDLE__ { int unused; }; typedef struct SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;

  typedef enum _SC_STATUS_TYPE {
    SC_STATUS_PROCESS_INFO = 0
  } SC_STATUS_TYPE;

  typedef enum _SC_ENUM_TYPE {
    SC_ENUM_PROCESS_INFO = 0
  } SC_ENUM_TYPE;

  typedef struct _SERVICE_STATUS {
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
  } SERVICE_STATUS,*LPSERVICE_STATUS;

  typedef struct _SERVICE_STATUS_PROCESS {
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
    DWORD dwProcessId;
    DWORD dwServiceFlags;
  } SERVICE_STATUS_PROCESS,*LPSERVICE_STATUS_PROCESS;

  typedef struct _ENUM_SERVICE_STATUSA {
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
  } ENUM_SERVICE_STATUSA,*LPENUM_SERVICE_STATUSA;

  typedef struct _ENUM_SERVICE_STATUSW {
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
  } ENUM_SERVICE_STATUSW,*LPENUM_SERVICE_STATUSW;

  typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
  typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS;

  typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
  } ENUM_SERVICE_STATUS_PROCESSA,*LPENUM_SERVICE_STATUS_PROCESSA;

  typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
  } ENUM_SERVICE_STATUS_PROCESSW,*LPENUM_SERVICE_STATUS_PROCESSW;

  typedef ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS;
  typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS;

  typedef LPVOID SC_LOCK;

  typedef struct _QUERY_SERVICE_LOCK_STATUSA {
    DWORD fIsLocked;
    LPSTR lpLockOwner;
    DWORD dwLockDuration;
  } QUERY_SERVICE_LOCK_STATUSA,*LPQUERY_SERVICE_LOCK_STATUSA;

  typedef struct _QUERY_SERVICE_LOCK_STATUSW {
    DWORD fIsLocked;
    LPWSTR lpLockOwner;
    DWORD dwLockDuration;
  } QUERY_SERVICE_LOCK_STATUSW,*LPQUERY_SERVICE_LOCK_STATUSW;

  typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
  typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS;

  typedef struct _QUERY_SERVICE_CONFIGA {
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPSTR lpBinaryPathName;
    LPSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPSTR lpDependencies;
    LPSTR lpServiceStartName;
    LPSTR lpDisplayName;
  } QUERY_SERVICE_CONFIGA,*LPQUERY_SERVICE_CONFIGA;

  typedef struct _QUERY_SERVICE_CONFIGW {
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPWSTR lpBinaryPathName;
    LPWSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPWSTR lpDependencies;
    LPWSTR lpServiceStartName;
    LPWSTR lpDisplayName;
  } QUERY_SERVICE_CONFIGW,*LPQUERY_SERVICE_CONFIGW;

  typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG;
  typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG;

  typedef void (__attribute__((__stdcall__)) *LPSERVICE_MAIN_FUNCTIONW)(DWORD dwNumServicesArgs,LPWSTR *lpServiceArgVectors);
  typedef void (__attribute__((__stdcall__)) *LPSERVICE_MAIN_FUNCTIONA)(DWORD dwNumServicesArgs,LPSTR *lpServiceArgVectors);



  typedef struct _SERVICE_TABLE_ENTRYA {
    LPSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA lpServiceProc;
  } SERVICE_TABLE_ENTRYA,*LPSERVICE_TABLE_ENTRYA;

  typedef struct _SERVICE_TABLE_ENTRYW {
    LPWSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONW lpServiceProc;
  } SERVICE_TABLE_ENTRYW,*LPSERVICE_TABLE_ENTRYW;

  typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
  typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY;

  typedef void (__attribute__((__stdcall__)) *LPHANDLER_FUNCTION)(DWORD dwControl);
  typedef DWORD (__attribute__((__stdcall__)) *LPHANDLER_FUNCTION_EX)(DWORD dwControl,DWORD dwEventType,LPVOID lpEventData,LPVOID lpContext);
# 282 "/usr/i686-w64-mingw32/sys-root/mingw/include/winsvc.h" 3 4
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ChangeServiceConfigA(SC_HANDLE hService,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCSTR lpBinaryPathName,LPCSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCSTR lpDependencies,LPCSTR lpServiceStartName,LPCSTR lpPassword,LPCSTR lpDisplayName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ChangeServiceConfigW(SC_HANDLE hService,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCWSTR lpBinaryPathName,LPCWSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCWSTR lpDependencies,LPCWSTR lpServiceStartName,LPCWSTR lpPassword,LPCWSTR lpDisplayName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ChangeServiceConfig2A(SC_HANDLE hService,DWORD dwInfoLevel,LPVOID lpInfo);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ChangeServiceConfig2W(SC_HANDLE hService,DWORD dwInfoLevel,LPVOID lpInfo);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) CloseServiceHandle(SC_HANDLE hSCObject);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) ControlService(SC_HANDLE hService,DWORD dwControl,LPSERVICE_STATUS lpServiceStatus);
  __attribute__((dllimport)) SC_HANDLE __attribute__((__stdcall__)) CreateServiceA(SC_HANDLE hSCManager,LPCSTR lpServiceName,LPCSTR lpDisplayName,DWORD dwDesiredAccess,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCSTR lpBinaryPathName,LPCSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCSTR lpDependencies,LPCSTR lpServiceStartName,LPCSTR lpPassword);
  __attribute__((dllimport)) SC_HANDLE __attribute__((__stdcall__)) CreateServiceW(SC_HANDLE hSCManager,LPCWSTR lpServiceName,LPCWSTR lpDisplayName,DWORD dwDesiredAccess,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCWSTR lpBinaryPathName,LPCWSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCWSTR lpDependencies,LPCWSTR lpServiceStartName,LPCWSTR lpPassword);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) DeleteService(SC_HANDLE hService);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumDependentServicesA(SC_HANDLE hService,DWORD dwServiceState,LPENUM_SERVICE_STATUSA lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumDependentServicesW(SC_HANDLE hService,DWORD dwServiceState,LPENUM_SERVICE_STATUSW lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumServicesStatusA(SC_HANDLE hSCManager,DWORD dwServiceType,DWORD dwServiceState,LPENUM_SERVICE_STATUSA lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumServicesStatusW(SC_HANDLE hSCManager,DWORD dwServiceType,DWORD dwServiceState,LPENUM_SERVICE_STATUSW lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumServicesStatusExA(SC_HANDLE hSCManager,SC_ENUM_TYPE InfoLevel,DWORD dwServiceType,DWORD dwServiceState,LPBYTE lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle,LPCSTR pszGroupName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) EnumServicesStatusExW(SC_HANDLE hSCManager,SC_ENUM_TYPE InfoLevel,DWORD dwServiceType,DWORD dwServiceState,LPBYTE lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle,LPCWSTR pszGroupName);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetServiceKeyNameA(SC_HANDLE hSCManager,LPCSTR lpDisplayName,LPSTR lpServiceName,LPDWORD lpcchBuffer);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetServiceKeyNameW(SC_HANDLE hSCManager,LPCWSTR lpDisplayName,LPWSTR lpServiceName,LPDWORD lpcchBuffer);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetServiceDisplayNameA(SC_HANDLE hSCManager,LPCSTR lpServiceName,LPSTR lpDisplayName,LPDWORD lpcchBuffer);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) GetServiceDisplayNameW(SC_HANDLE hSCManager,LPCWSTR lpServiceName,LPWSTR lpDisplayName,LPDWORD lpcchBuffer);
  __attribute__((dllimport)) SC_LOCK __attribute__((__stdcall__)) LockServiceDatabase(SC_HANDLE hSCManager);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) NotifyBootConfigStatus(WINBOOL BootAcceptable);
  __attribute__((dllimport)) SC_HANDLE __attribute__((__stdcall__)) OpenSCManagerA(LPCSTR lpMachineName,LPCSTR lpDatabaseName,DWORD dwDesiredAccess);
  __attribute__((dllimport)) SC_HANDLE __attribute__((__stdcall__)) OpenSCManagerW(LPCWSTR lpMachineName,LPCWSTR lpDatabaseName,DWORD dwDesiredAccess);
  __attribute__((dllimport)) SC_HANDLE __attribute__((__stdcall__)) OpenServiceA(SC_HANDLE hSCManager,LPCSTR lpServiceName,DWORD dwDesiredAccess);
  __attribute__((dllimport)) SC_HANDLE __attribute__((__stdcall__)) OpenServiceW(SC_HANDLE hSCManager,LPCWSTR lpServiceName,DWORD dwDesiredAccess);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) QueryServiceConfigA(SC_HANDLE hService,LPQUERY_SERVICE_CONFIGA lpServiceConfig,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) QueryServiceConfigW(SC_HANDLE hService,LPQUERY_SERVICE_CONFIGW lpServiceConfig,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) QueryServiceConfig2A(SC_HANDLE hService,DWORD dwInfoLevel,LPBYTE lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) QueryServiceConfig2W(SC_HANDLE hService,DWORD dwInfoLevel,LPBYTE lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) QueryServiceLockStatusA(SC_HANDLE hSCManager,LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) QueryServiceLockStatusW(SC_HANDLE hSCManager,LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) QueryServiceObjectSecurity(SC_HANDLE hService,SECURITY_INFORMATION dwSecurityInformation,PSECURITY_DESCRIPTOR lpSecurityDescriptor,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) QueryServiceStatus(SC_HANDLE hService,LPSERVICE_STATUS lpServiceStatus);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) QueryServiceStatusEx(SC_HANDLE hService,SC_STATUS_TYPE InfoLevel,LPBYTE lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
  __attribute__((dllimport)) SERVICE_STATUS_HANDLE __attribute__((__stdcall__)) RegisterServiceCtrlHandlerA(LPCSTR lpServiceName,LPHANDLER_FUNCTION lpHandlerProc);
  __attribute__((dllimport)) SERVICE_STATUS_HANDLE __attribute__((__stdcall__)) RegisterServiceCtrlHandlerW(LPCWSTR lpServiceName,LPHANDLER_FUNCTION lpHandlerProc);
  __attribute__((dllimport)) SERVICE_STATUS_HANDLE __attribute__((__stdcall__)) RegisterServiceCtrlHandlerExA(LPCSTR lpServiceName,LPHANDLER_FUNCTION_EX lpHandlerProc,LPVOID lpContext);
  __attribute__((dllimport)) SERVICE_STATUS_HANDLE __attribute__((__stdcall__)) RegisterServiceCtrlHandlerExW(LPCWSTR lpServiceName,LPHANDLER_FUNCTION_EX lpHandlerProc,LPVOID lpContext);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetServiceObjectSecurity(SC_HANDLE hService,SECURITY_INFORMATION dwSecurityInformation,PSECURITY_DESCRIPTOR lpSecurityDescriptor);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) SetServiceStatus(SERVICE_STATUS_HANDLE hServiceStatus,LPSERVICE_STATUS lpServiceStatus);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) StartServiceCtrlDispatcherA(const SERVICE_TABLE_ENTRYA *lpServiceStartTable);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) StartServiceCtrlDispatcherW(const SERVICE_TABLE_ENTRYW *lpServiceStartTable);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) StartServiceA(SC_HANDLE hService,DWORD dwNumServiceArgs,LPCSTR *lpServiceArgVectors);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) StartServiceW(SC_HANDLE hService,DWORD dwNumServiceArgs,LPCWSTR *lpServiceArgVectors);
  __attribute__((dllimport)) WINBOOL __attribute__((__stdcall__)) UnlockServiceDatabase(SC_LOCK ScLock);
# 123 "/usr/i686-w64-mingw32/sys-root/mingw/include/windows.h" 2 3 4



# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/mcx.h" 1 3 4
# 9 "/usr/i686-w64-mingw32/sys-root/mingw/include/mcx.h" 3 4
typedef struct _MODEMDEVCAPS {
  DWORD dwActualSize;
  DWORD dwRequiredSize;
  DWORD dwDevSpecificOffset;
  DWORD dwDevSpecificSize;
  DWORD dwModemProviderVersion;
  DWORD dwModemManufacturerOffset;
  DWORD dwModemManufacturerSize;
  DWORD dwModemModelOffset;
  DWORD dwModemModelSize;
  DWORD dwModemVersionOffset;
  DWORD dwModemVersionSize;
  DWORD dwDialOptions;
  DWORD dwCallSetupFailTimer;
  DWORD dwInactivityTimeout;
  DWORD dwSpeakerVolume;
  DWORD dwSpeakerMode;
  DWORD dwModemOptions;
  DWORD dwMaxDTERate;
  DWORD dwMaxDCERate;
  BYTE abVariablePortion[1];
} MODEMDEVCAPS,*PMODEMDEVCAPS,*LPMODEMDEVCAPS;

typedef struct _MODEMSETTINGS {
  DWORD dwActualSize;
  DWORD dwRequiredSize;
  DWORD dwDevSpecificOffset;
  DWORD dwDevSpecificSize;
  DWORD dwCallSetupFailTimer;
  DWORD dwInactivityTimeout;
  DWORD dwSpeakerVolume;
  DWORD dwSpeakerMode;
  DWORD dwPreferredModemOptions;
  DWORD dwNegotiatedModemOptions;
  DWORD dwNegotiatedDCERate;
  BYTE abVariablePortion [1];
} MODEMSETTINGS,*PMODEMSETTINGS,*LPMODEMSETTINGS;
# 127 "/usr/i686-w64-mingw32/sys-root/mingw/include/windows.h" 2 3 4



# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/imm.h" 1 3 4
# 18 "/usr/i686-w64-mingw32/sys-root/mingw/include/imm.h" 3 4
  struct HIMC__ { int unused; }; typedef struct HIMC__ *HIMC;
  struct HIMCC__ { int unused; }; typedef struct HIMCC__ *HIMCC;

  typedef HKL *LPHKL;


  typedef UINT *LPUINT;


  typedef struct tagCOMPOSITIONFORM {
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
  } COMPOSITIONFORM,*PCOMPOSITIONFORM,*NPCOMPOSITIONFORM,*LPCOMPOSITIONFORM;

  typedef struct tagCANDIDATEFORM {
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
  } CANDIDATEFORM,*PCANDIDATEFORM,*NPCANDIDATEFORM,*LPCANDIDATEFORM;

  typedef struct tagCANDIDATELIST {
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD dwOffset[1];
  } CANDIDATELIST,*PCANDIDATELIST,*NPCANDIDATELIST,*LPCANDIDATELIST;

  typedef struct tagREGISTERWORDA {
    LPSTR lpReading;
    LPSTR lpWord;
  } REGISTERWORDA,*PREGISTERWORDA,*NPREGISTERWORDA,*LPREGISTERWORDA;

  typedef struct tagREGISTERWORDW {
    LPWSTR lpReading;
    LPWSTR lpWord;
  } REGISTERWORDW,*PREGISTERWORDW,*NPREGISTERWORDW,*LPREGISTERWORDW;

  typedef REGISTERWORDA REGISTERWORD;
  typedef PREGISTERWORDA PREGISTERWORD;
  typedef NPREGISTERWORDA NPREGISTERWORD;
  typedef LPREGISTERWORDA LPREGISTERWORD;

  typedef struct tagRECONVERTSTRING {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwStrLen;
    DWORD dwStrOffset;
    DWORD dwCompStrLen;
    DWORD dwCompStrOffset;
    DWORD dwTargetStrLen;
    DWORD dwTargetStrOffset;
  } RECONVERTSTRING,*PRECONVERTSTRING,*NPRECONVERTSTRING,*LPRECONVERTSTRING;



  typedef struct tagSTYLEBUFA {
    DWORD dwStyle;
    CHAR szDescription[32];
  } STYLEBUFA,*PSTYLEBUFA,*NPSTYLEBUFA,*LPSTYLEBUFA;

  typedef struct tagSTYLEBUFW {
    DWORD dwStyle;
    WCHAR szDescription[32];
  } STYLEBUFW,*PSTYLEBUFW,*NPSTYLEBUFW,*LPSTYLEBUFW;

  typedef STYLEBUFA STYLEBUF;
  typedef PSTYLEBUFA PSTYLEBUF;
  typedef NPSTYLEBUFA NPSTYLEBUF;
  typedef LPSTYLEBUFA LPSTYLEBUF;



  typedef struct tagIMEMENUITEMINFOA {
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    CHAR szString[80];
    HBITMAP hbmpItem;
  } IMEMENUITEMINFOA,*PIMEMENUITEMINFOA,*NPIMEMENUITEMINFOA,*LPIMEMENUITEMINFOA;

  typedef struct tagIMEMENUITEMINFOW {
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    WCHAR szString[80];
    HBITMAP hbmpItem;
  } IMEMENUITEMINFOW,*PIMEMENUITEMINFOW,*NPIMEMENUITEMINFOW,*LPIMEMENUITEMINFOW;

  typedef IMEMENUITEMINFOA IMEMENUITEMINFO;
  typedef PIMEMENUITEMINFOA PIMEMENUITEMINFO;
  typedef NPIMEMENUITEMINFOA NPIMEMENUITEMINFO;
  typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO;

  typedef struct tagIMECHARPOSITION {
    DWORD dwSize;
    DWORD dwCharPos;
    POINT pt;
    UINT cLineHeight;
    RECT rcDocument;
  } IMECHARPOSITION,*PIMECHARPOSITION,*NPIMECHARPOSITION,*LPIMECHARPOSITION;

  typedef WINBOOL (__attribute__((__stdcall__)) *IMCENUMPROC)(HIMC,LPARAM);
# 143 "/usr/i686-w64-mingw32/sys-root/mingw/include/imm.h" 3 4
  HKL __attribute__((__stdcall__)) ImmInstallIMEA(LPCSTR lpszIMEFileName,LPCSTR lpszLayoutText);
  HKL __attribute__((__stdcall__)) ImmInstallIMEW(LPCWSTR lpszIMEFileName,LPCWSTR lpszLayoutText);
  HWND __attribute__((__stdcall__)) ImmGetDefaultIMEWnd(HWND);
  UINT __attribute__((__stdcall__)) ImmGetDescriptionA(HKL,LPSTR,UINT uBufLen);
  UINT __attribute__((__stdcall__)) ImmGetDescriptionW(HKL,LPWSTR,UINT uBufLen);
  UINT __attribute__((__stdcall__)) ImmGetIMEFileNameA(HKL,LPSTR,UINT uBufLen);
  UINT __attribute__((__stdcall__)) ImmGetIMEFileNameW(HKL,LPWSTR,UINT uBufLen);
  DWORD __attribute__((__stdcall__)) ImmGetProperty(HKL,DWORD);
  WINBOOL __attribute__((__stdcall__)) ImmIsIME(HKL);
  WINBOOL __attribute__((__stdcall__)) ImmSimulateHotKey(HWND,DWORD);
  HIMC __attribute__((__stdcall__)) ImmCreateContext(void);
  WINBOOL __attribute__((__stdcall__)) ImmDestroyContext(HIMC);
  HIMC __attribute__((__stdcall__)) ImmGetContext(HWND);
  WINBOOL __attribute__((__stdcall__)) ImmReleaseContext(HWND,HIMC);
  HIMC __attribute__((__stdcall__)) ImmAssociateContext(HWND,HIMC);
  WINBOOL __attribute__((__stdcall__)) ImmAssociateContextEx(HWND,HIMC,DWORD);
  LONG __attribute__((__stdcall__)) ImmGetCompositionStringA(HIMC,DWORD,LPVOID,DWORD);
  LONG __attribute__((__stdcall__)) ImmGetCompositionStringW(HIMC,DWORD,LPVOID,DWORD);
  WINBOOL __attribute__((__stdcall__)) ImmSetCompositionStringA(HIMC,DWORD dwIndex,LPVOID lpComp,DWORD,LPVOID lpRead,DWORD);
  WINBOOL __attribute__((__stdcall__)) ImmSetCompositionStringW(HIMC,DWORD dwIndex,LPVOID lpComp,DWORD,LPVOID lpRead,DWORD);
  DWORD __attribute__((__stdcall__)) ImmGetCandidateListCountA(HIMC,LPDWORD lpdwListCount);
  DWORD __attribute__((__stdcall__)) ImmGetCandidateListCountW(HIMC,LPDWORD lpdwListCount);
  DWORD __attribute__((__stdcall__)) ImmGetCandidateListA(HIMC,DWORD deIndex,LPCANDIDATELIST,DWORD dwBufLen);
  DWORD __attribute__((__stdcall__)) ImmGetCandidateListW(HIMC,DWORD deIndex,LPCANDIDATELIST,DWORD dwBufLen);
  DWORD __attribute__((__stdcall__)) ImmGetGuideLineA(HIMC,DWORD dwIndex,LPSTR,DWORD dwBufLen);
  DWORD __attribute__((__stdcall__)) ImmGetGuideLineW(HIMC,DWORD dwIndex,LPWSTR,DWORD dwBufLen);
  WINBOOL __attribute__((__stdcall__)) ImmGetConversionStatus(HIMC,LPDWORD,LPDWORD);
  WINBOOL __attribute__((__stdcall__)) ImmSetConversionStatus(HIMC,DWORD,DWORD);
  WINBOOL __attribute__((__stdcall__)) ImmGetOpenStatus(HIMC);
  WINBOOL __attribute__((__stdcall__)) ImmSetOpenStatus(HIMC,WINBOOL);






  WINBOOL __attribute__((__stdcall__)) ImmGetCompositionFontA(HIMC,LPLOGFONTA);
  WINBOOL __attribute__((__stdcall__)) ImmGetCompositionFontW(HIMC,LPLOGFONTW);
  WINBOOL __attribute__((__stdcall__)) ImmSetCompositionFontA(HIMC,LPLOGFONTA);
  WINBOOL __attribute__((__stdcall__)) ImmSetCompositionFontW(HIMC,LPLOGFONTW);


  typedef int (__attribute__((__stdcall__)) *REGISTERWORDENUMPROCA)(LPCSTR,DWORD,LPCSTR,LPVOID);
  typedef int (__attribute__((__stdcall__)) *REGISTERWORDENUMPROCW)(LPCWSTR,DWORD,LPCWSTR,LPVOID);
# 199 "/usr/i686-w64-mingw32/sys-root/mingw/include/imm.h" 3 4
  WINBOOL __attribute__((__stdcall__)) ImmConfigureIMEA(HKL,HWND,DWORD,LPVOID);
  WINBOOL __attribute__((__stdcall__)) ImmConfigureIMEW(HKL,HWND,DWORD,LPVOID);
  LRESULT __attribute__((__stdcall__)) ImmEscapeA(HKL,HIMC,UINT,LPVOID);
  LRESULT __attribute__((__stdcall__)) ImmEscapeW(HKL,HIMC,UINT,LPVOID);
  DWORD __attribute__((__stdcall__)) ImmGetConversionListA(HKL,HIMC,LPCSTR,LPCANDIDATELIST,DWORD dwBufLen,UINT uFlag);
  DWORD __attribute__((__stdcall__)) ImmGetConversionListW(HKL,HIMC,LPCWSTR,LPCANDIDATELIST,DWORD dwBufLen,UINT uFlag);
  WINBOOL __attribute__((__stdcall__)) ImmNotifyIME(HIMC,DWORD dwAction,DWORD dwIndex,DWORD dwValue);
  WINBOOL __attribute__((__stdcall__)) ImmGetStatusWindowPos(HIMC,LPPOINT);
  WINBOOL __attribute__((__stdcall__)) ImmSetStatusWindowPos(HIMC,LPPOINT);
  WINBOOL __attribute__((__stdcall__)) ImmGetCompositionWindow(HIMC,LPCOMPOSITIONFORM);
  WINBOOL __attribute__((__stdcall__)) ImmSetCompositionWindow(HIMC,LPCOMPOSITIONFORM);
  WINBOOL __attribute__((__stdcall__)) ImmGetCandidateWindow(HIMC,DWORD,LPCANDIDATEFORM);
  WINBOOL __attribute__((__stdcall__)) ImmSetCandidateWindow(HIMC,LPCANDIDATEFORM);
  WINBOOL __attribute__((__stdcall__)) ImmIsUIMessageA(HWND,UINT,WPARAM,LPARAM);
  WINBOOL __attribute__((__stdcall__)) ImmIsUIMessageW(HWND,UINT,WPARAM,LPARAM);
  UINT __attribute__((__stdcall__)) ImmGetVirtualKey(HWND);
  WINBOOL __attribute__((__stdcall__)) ImmRegisterWordA(HKL,LPCSTR lpszReading,DWORD,LPCSTR lpszRegister);
  WINBOOL __attribute__((__stdcall__)) ImmRegisterWordW(HKL,LPCWSTR lpszReading,DWORD,LPCWSTR lpszRegister);
  WINBOOL __attribute__((__stdcall__)) ImmUnregisterWordA(HKL,LPCSTR lpszReading,DWORD,LPCSTR lpszUnregister);
  WINBOOL __attribute__((__stdcall__)) ImmUnregisterWordW(HKL,LPCWSTR lpszReading,DWORD,LPCWSTR lpszUnregister);
  UINT __attribute__((__stdcall__)) ImmGetRegisterWordStyleA(HKL,UINT nItem,LPSTYLEBUFA);
  UINT __attribute__((__stdcall__)) ImmGetRegisterWordStyleW(HKL,UINT nItem,LPSTYLEBUFW);
  UINT __attribute__((__stdcall__)) ImmEnumRegisterWordA(HKL,REGISTERWORDENUMPROCA,LPCSTR lpszReading,DWORD,LPCSTR lpszRegister,LPVOID);
  UINT __attribute__((__stdcall__)) ImmEnumRegisterWordW(HKL,REGISTERWORDENUMPROCW,LPCWSTR lpszReading,DWORD,LPCWSTR lpszRegister,LPVOID);
  WINBOOL __attribute__((__stdcall__)) ImmDisableIME(DWORD);
  WINBOOL __attribute__((__stdcall__)) ImmEnumInputContext(DWORD idThread,IMCENUMPROC lpfn,LPARAM lParam);
  DWORD __attribute__((__stdcall__)) ImmGetImeMenuItemsA(HIMC,DWORD,DWORD,LPIMEMENUITEMINFOA,LPIMEMENUITEMINFOA,DWORD);
  DWORD __attribute__((__stdcall__)) ImmGetImeMenuItemsW(HIMC,DWORD,DWORD,LPIMEMENUITEMINFOW,LPIMEMENUITEMINFOW,DWORD);
  WINBOOL __attribute__((__stdcall__)) ImmDisableTextFrameService(DWORD idThread);
# 131 "/usr/i686-w64-mingw32/sys-root/mingw/include/windows.h" 2 3 4
# 64 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/freeglut_std.h" 2 3 4
# 398 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/freeglut_std.h" 3 4
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutInit( int* pargc, char** argv );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutInitWindowPosition( int x, int y );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutInitWindowSize( int width, int height );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutInitDisplayMode( unsigned int displayMode );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutInitDisplayString( const char* displayMode );




__attribute__((dllimport)) void __attribute__((__stdcall__)) glutMainLoop( void );




__attribute__((dllimport)) int __attribute__((__stdcall__)) glutCreateWindow( const char* title );
__attribute__((dllimport)) int __attribute__((__stdcall__)) glutCreateSubWindow( int window, int x, int y, int width, int height );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutDestroyWindow( int window );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSetWindow( int window );
__attribute__((dllimport)) int __attribute__((__stdcall__)) glutGetWindow( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSetWindowTitle( const char* title );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSetIconTitle( const char* title );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutReshapeWindow( int width, int height );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutPositionWindow( int x, int y );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutShowWindow( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutHideWindow( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutIconifyWindow( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutPushWindow( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutPopWindow( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutFullScreen( void );




__attribute__((dllimport)) void __attribute__((__stdcall__)) glutPostWindowRedisplay( int window );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutPostRedisplay( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSwapBuffers( void );




__attribute__((dllimport)) void __attribute__((__stdcall__)) glutWarpPointer( int x, int y );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSetCursor( int cursor );




__attribute__((dllimport)) void __attribute__((__stdcall__)) glutEstablishOverlay( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutRemoveOverlay( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutUseLayer( GLenum layer );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutPostOverlayRedisplay( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutPostWindowOverlayRedisplay( int window );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutShowOverlay( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutHideOverlay( void );




__attribute__((dllimport)) int __attribute__((__stdcall__)) glutCreateMenu( void (* callback)( int menu ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutDestroyMenu( int menu );
__attribute__((dllimport)) int __attribute__((__stdcall__)) glutGetMenu( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSetMenu( int menu );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutAddMenuEntry( const char* label, int value );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutAddSubMenu( const char* label, int subMenu );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutChangeToMenuEntry( int item, const char* label, int value );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutChangeToSubMenu( int item, const char* label, int value );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutRemoveMenuItem( int item );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutAttachMenu( int button );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutDetachMenu( int button );




__attribute__((dllimport)) void __attribute__((__stdcall__)) glutTimerFunc( unsigned int time, void (* callback)( int ), int value );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutIdleFunc( void (* callback)( void ) );




__attribute__((dllimport)) void __attribute__((__stdcall__)) glutKeyboardFunc( void (* callback)( unsigned char, int, int ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSpecialFunc( void (* callback)( int, int, int ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutReshapeFunc( void (* callback)( int, int ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutVisibilityFunc( void (* callback)( int ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutDisplayFunc( void (* callback)( void ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutMouseFunc( void (* callback)( int, int, int, int ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutMotionFunc( void (* callback)( int, int ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutPassiveMotionFunc( void (* callback)( int, int ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutEntryFunc( void (* callback)( int ) );

__attribute__((dllimport)) void __attribute__((__stdcall__)) glutKeyboardUpFunc( void (* callback)( unsigned char, int, int ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSpecialUpFunc( void (* callback)( int, int, int ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutJoystickFunc( void (* callback)( unsigned int, int, int, int ), int pollInterval );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutMenuStateFunc( void (* callback)( int ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutMenuStatusFunc( void (* callback)( int, int, int ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutOverlayDisplayFunc( void (* callback)( void ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutWindowStatusFunc( void (* callback)( int ) );

__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSpaceballMotionFunc( void (* callback)( int, int, int ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSpaceballRotateFunc( void (* callback)( int, int, int ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSpaceballButtonFunc( void (* callback)( int, int ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutButtonBoxFunc( void (* callback)( int, int ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutDialsFunc( void (* callback)( int, int ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutTabletMotionFunc( void (* callback)( int, int ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutTabletButtonFunc( void (* callback)( int, int, int, int ) );




__attribute__((dllimport)) int __attribute__((__stdcall__)) glutGet( GLenum query );
__attribute__((dllimport)) int __attribute__((__stdcall__)) glutDeviceGet( GLenum query );
__attribute__((dllimport)) int __attribute__((__stdcall__)) glutGetModifiers( void );
__attribute__((dllimport)) int __attribute__((__stdcall__)) glutLayerGet( GLenum query );




__attribute__((dllimport)) void __attribute__((__stdcall__)) glutBitmapCharacter( void* font, int character );
__attribute__((dllimport)) int __attribute__((__stdcall__)) glutBitmapWidth( void* font, int character );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutStrokeCharacter( void* font, int character );
__attribute__((dllimport)) int __attribute__((__stdcall__)) glutStrokeWidth( void* font, int character );
__attribute__((dllimport)) int __attribute__((__stdcall__)) glutBitmapLength( void* font, const unsigned char* string );
__attribute__((dllimport)) int __attribute__((__stdcall__)) glutStrokeLength( void* font, const unsigned char* string );




__attribute__((dllimport)) void __attribute__((__stdcall__)) glutWireCube( GLdouble size );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSolidCube( GLdouble size );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutWireSphere( GLdouble radius, GLint slices, GLint stacks );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSolidSphere( GLdouble radius, GLint slices, GLint stacks );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutWireCone( GLdouble base, GLdouble height, GLint slices, GLint stacks );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSolidCone( GLdouble base, GLdouble height, GLint slices, GLint stacks );

__attribute__((dllimport)) void __attribute__((__stdcall__)) glutWireTorus( GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSolidTorus( GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutWireDodecahedron( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSolidDodecahedron( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutWireOctahedron( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSolidOctahedron( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutWireTetrahedron( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSolidTetrahedron( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutWireIcosahedron( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSolidIcosahedron( void );





__attribute__((dllimport)) void __attribute__((__stdcall__)) glutWireTeapot( GLdouble size );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSolidTeapot( GLdouble size );




__attribute__((dllimport)) void __attribute__((__stdcall__)) glutGameModeString( const char* string );
__attribute__((dllimport)) int __attribute__((__stdcall__)) glutEnterGameMode( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutLeaveGameMode( void );
__attribute__((dllimport)) int __attribute__((__stdcall__)) glutGameModeGet( GLenum query );




__attribute__((dllimport)) int __attribute__((__stdcall__)) glutVideoResizeGet( GLenum query );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSetupVideoResizing( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutStopVideoResizing( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutVideoResize( int x, int y, int width, int height );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutVideoPan( int x, int y, int width, int height );




__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSetColor( int color, GLfloat red, GLfloat green, GLfloat blue );
__attribute__((dllimport)) GLfloat __attribute__((__stdcall__)) glutGetColor( int color, int component );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutCopyColormap( int window );




__attribute__((dllimport)) void __attribute__((__stdcall__)) glutIgnoreKeyRepeat( int ignore );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSetKeyRepeat( int repeatMode );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutForceJoystickFunc( void );




__attribute__((dllimport)) int __attribute__((__stdcall__)) glutExtensionSupported( const char* extension );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutReportErrors( void );
# 611 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/freeglut_std.h" 3 4
__attribute__((dllimport)) void __attribute__((__stdcall__)) __glutInitWithExit(int *argcp, char **argv, void (__attribute__((__cdecl__)) *exitfunc)(int));
__attribute__((dllimport)) int __attribute__((__stdcall__)) __glutCreateWindowWithExit(const char *title, void (__attribute__((__cdecl__)) *exitfunc)(int));
__attribute__((dllimport)) int __attribute__((__stdcall__)) __glutCreateMenuWithExit(void (* func)(int), void (__attribute__((__cdecl__)) *exitfunc)(int));






static void __attribute__((__stdcall__)) __attribute__((unused)) glutInit_ATEXIT_HACK(int *argcp, char **argv) { __glutInitWithExit(argcp, argv, exit); }

static int __attribute__((__stdcall__)) __attribute__((unused)) glutCreateWindow_ATEXIT_HACK(const char *title) { return __glutCreateWindowWithExit(title, exit); }

static int __attribute__((__stdcall__)) __attribute__((unused)) glutCreateMenu_ATEXIT_HACK(void (* func)(int)) { return __glutCreateMenuWithExit(func, exit); }
# 18 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/freeglut.h" 2 3 4
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/freeglut_ext.h" 1 3 4
# 125 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/freeglut_ext.h" 3 4
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutMainLoopEvent( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutLeaveMainLoop( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutExit ( void );




__attribute__((dllimport)) void __attribute__((__stdcall__)) glutFullScreenToggle( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutLeaveFullScreen( void );




__attribute__((dllimport)) void __attribute__((__stdcall__)) glutMouseWheelFunc( void (* callback)( int, int, int, int ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutCloseFunc( void (* callback)( void ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutWMCloseFunc( void (* callback)( void ) );

__attribute__((dllimport)) void __attribute__((__stdcall__)) glutMenuDestroyFunc( void (* callback)( void ) );




__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSetOption ( GLenum option_flag, int value );
__attribute__((dllimport)) int * __attribute__((__stdcall__)) glutGetModeValues(GLenum mode, int * size);

__attribute__((dllimport)) void* __attribute__((__stdcall__)) glutGetWindowData( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSetWindowData(void* data);
__attribute__((dllimport)) void* __attribute__((__stdcall__)) glutGetMenuData( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSetMenuData(void* data);




__attribute__((dllimport)) int __attribute__((__stdcall__)) glutBitmapHeight( void* font );
__attribute__((dllimport)) GLfloat __attribute__((__stdcall__)) glutStrokeHeight( void* font );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutBitmapString( void* font, const unsigned char *string );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutStrokeString( void* font, const unsigned char *string );




__attribute__((dllimport)) void __attribute__((__stdcall__)) glutWireRhombicDodecahedron( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSolidRhombicDodecahedron( void );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutWireSierpinskiSponge ( int num_levels, GLdouble offset[3], GLdouble scale );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSolidSierpinskiSponge ( int num_levels, GLdouble offset[3], GLdouble scale );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutWireCylinder( GLdouble radius, GLdouble height, GLint slices, GLint stacks);
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutSolidCylinder( GLdouble radius, GLdouble height, GLint slices, GLint stacks);




typedef void (*GLUTproc)();
__attribute__((dllimport)) GLUTproc __attribute__((__stdcall__)) glutGetProcAddress( const char *procName );







__attribute__((dllimport)) void __attribute__((__stdcall__)) glutMultiEntryFunc( void (* callback)( int, int ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutMultiButtonFunc( void (* callback)( int, int, int, int, int ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutMultiMotionFunc( void (* callback)( int, int, int ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutMultiPassiveFunc( void (* callback)( int, int, int ) );
# 199 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/freeglut_ext.h" 3 4
int glutJoystickGetNumAxes( int ident );
int glutJoystickGetNumButtons( int ident );
int glutJoystickNotWorking( int ident );
float glutJoystickGetDeadBand( int ident, int axis );
void glutJoystickSetDeadBand( int ident, int axis, float db );
float glutJoystickGetSaturation( int ident, int axis );
void glutJoystickSetSaturation( int ident, int axis, float st );
void glutJoystickSetMinRange( int ident, float *axes );
void glutJoystickSetMaxRange( int ident, float *axes );
void glutJoystickSetCenter( int ident, float *axes );
void glutJoystickGetMinRange( int ident, float *axes );
void glutJoystickGetMaxRange( int ident, float *axes );
void glutJoystickGetCenter( int ident, float *axes );




__attribute__((dllimport)) void __attribute__((__stdcall__)) glutInitContextVersion( int majorVersion, int minorVersion );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutInitContextFlags( int flags );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutInitContextProfile( int profile );


# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/stdarg.h" 1 3 4
# 222 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/freeglut_ext.h" 2 3 4

__attribute__((dllimport)) void __attribute__((__stdcall__)) glutInitErrorFunc( void (* vError)( const char *fmt, va_list ap ) );
__attribute__((dllimport)) void __attribute__((__stdcall__)) glutInitWarningFunc( void (* vWarning)( const char *fmt, va_list ap ) );
# 19 "/usr/i686-w64-mingw32/sys-root/mingw/include/GL/freeglut.h" 2 3 4
# 8 "JCEBA.LoadLibs.h" 2
# 1 "Libs/soil/SOIL.h" 1
# 55 "Libs/soil/SOIL.h"

# 55 "Libs/soil/SOIL.h"
enum
{
 SOIL_LOAD_AUTO = 0,
 SOIL_LOAD_L = 1,
 SOIL_LOAD_LA = 2,
 SOIL_LOAD_RGB = 3,
 SOIL_LOAD_RGBA = 4
};
# 71 "Libs/soil/SOIL.h"
enum
{
 SOIL_CREATE_NEW_ID = 0
};
# 95 "Libs/soil/SOIL.h"
enum
{
 SOIL_FLAG_POWER_OF_TWO = 1,
 SOIL_FLAG_MIPMAPS = 2,
 SOIL_FLAG_TEXTURE_REPEATS = 4,
 SOIL_FLAG_MULTIPLY_ALPHA = 8,
 SOIL_FLAG_INVERT_Y = 16,
 SOIL_FLAG_COMPRESS_TO_DXT = 32,
 SOIL_FLAG_DDS_LOAD_DIRECT = 64,
 SOIL_FLAG_NTSC_SAFE_RGB = 128,
 SOIL_FLAG_CoCg_Y = 256,
 SOIL_FLAG_TEXTURE_RECTANGLE = 512
};







enum
{
 SOIL_SAVE_TYPE_TGA = 0,
 SOIL_SAVE_TYPE_BMP = 1,
 SOIL_SAVE_TYPE_DDS = 2
};
# 137 "Libs/soil/SOIL.h"
enum
{
 SOIL_HDR_RGBE = 0,
 SOIL_HDR_RGBdivA = 1,
 SOIL_HDR_RGBdivA2 = 2
};
# 152 "Libs/soil/SOIL.h"
unsigned int
 SOIL_load_OGL_texture
 (
  const char *filename,
  int force_channels,
  unsigned int reuse_texture_ID,
  unsigned int flags
 );
# 174 "Libs/soil/SOIL.h"
unsigned int
 SOIL_load_OGL_cubemap
 (
  const char *x_pos_file,
  const char *x_neg_file,
  const char *y_pos_file,
  const char *y_neg_file,
  const char *z_pos_file,
  const char *z_neg_file,
  int force_channels,
  unsigned int reuse_texture_ID,
  unsigned int flags
 );
# 197 "Libs/soil/SOIL.h"
unsigned int
 SOIL_load_OGL_single_cubemap
 (
  const char *filename,
  const char face_order[6],
  int force_channels,
  unsigned int reuse_texture_ID,
  unsigned int flags
 );
# 215 "Libs/soil/SOIL.h"
unsigned int
 SOIL_load_OGL_HDR_texture
 (
  const char *filename,
  int fake_HDR_format,
  int rescale_to_max,
  unsigned int reuse_texture_ID,
  unsigned int flags
 );
# 234 "Libs/soil/SOIL.h"
unsigned int
 SOIL_load_OGL_texture_from_memory
 (
  const unsigned char *const buffer,
  int buffer_length,
  int force_channels,
  unsigned int reuse_texture_ID,
  unsigned int flags
 );
# 263 "Libs/soil/SOIL.h"
unsigned int
 SOIL_load_OGL_cubemap_from_memory
 (
  const unsigned char *const x_pos_buffer,
  int x_pos_buffer_length,
  const unsigned char *const x_neg_buffer,
  int x_neg_buffer_length,
  const unsigned char *const y_pos_buffer,
  int y_pos_buffer_length,
  const unsigned char *const y_neg_buffer,
  int y_neg_buffer_length,
  const unsigned char *const z_pos_buffer,
  int z_pos_buffer_length,
  const unsigned char *const z_neg_buffer,
  int z_neg_buffer_length,
  int force_channels,
  unsigned int reuse_texture_ID,
  unsigned int flags
 );
# 293 "Libs/soil/SOIL.h"
unsigned int
 SOIL_load_OGL_single_cubemap_from_memory
 (
  const unsigned char *const buffer,
  int buffer_length,
  const char face_order[6],
  int force_channels,
  unsigned int reuse_texture_ID,
  unsigned int flags
 );
# 315 "Libs/soil/SOIL.h"
unsigned int
 SOIL_create_OGL_texture
 (
  const unsigned char *const data,
  int width, int height, int channels,
  unsigned int reuse_texture_ID,
  unsigned int flags
 );
# 335 "Libs/soil/SOIL.h"
unsigned int
 SOIL_create_OGL_single_cubemap
 (
  const unsigned char *const data,
  int width, int height, int channels,
  const char face_order[6],
  unsigned int reuse_texture_ID,
  unsigned int flags
 );





int
 SOIL_save_screenshot
 (
  const char *filename,
  int image_type,
  int x, int y,
  int width, int height
 );
# 367 "Libs/soil/SOIL.h"
unsigned char*
 SOIL_load_image
 (
  const char *filename,
  int *width, int *height, int *channels,
  int force_channels
 );
# 384 "Libs/soil/SOIL.h"
unsigned char*
 SOIL_load_image_from_memory
 (
  const unsigned char *const buffer,
  int buffer_length,
  int *width, int *height, int *channels,
  int force_channels
 );





int
 SOIL_save_image
 (
  const char *filename,
  int image_type,
  int width, int height, int channels,
  const unsigned char *const data
 );






void
 SOIL_free_image_data
 (
  unsigned char *img_data
 );






const char*
 SOIL_last_result
 (
  void
 );
# 9 "JCEBA.LoadLibs.h" 2
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/AL/al.h" 1 3 4
# 51 "/usr/i686-w64-mingw32/sys-root/mingw/include/AL/al.h" 3 4

# 51 "/usr/i686-w64-mingw32/sys-root/mingw/include/AL/al.h" 3 4
typedef char ALboolean;


typedef char ALchar;


typedef signed char ALbyte;


typedef unsigned char ALubyte;


typedef short ALshort;


typedef unsigned short ALushort;


typedef int ALint;


typedef unsigned int ALuint;


typedef int ALsizei;


typedef int ALenum;


typedef float ALfloat;


typedef double ALdouble;


typedef void ALvoid;
# 366 "/usr/i686-w64-mingw32/sys-root/mingw/include/AL/al.h" 3 4
__attribute__((dllimport)) void __attribute__((__cdecl__)) alEnable( ALenum capability );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alDisable( ALenum capability );

__attribute__((dllimport)) ALboolean __attribute__((__cdecl__)) alIsEnabled( ALenum capability );





__attribute__((dllimport)) const ALchar* __attribute__((__cdecl__)) alGetString( ALenum param );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alGetBooleanv( ALenum param, ALboolean* data );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alGetIntegerv( ALenum param, ALint* data );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alGetFloatv( ALenum param, ALfloat* data );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alGetDoublev( ALenum param, ALdouble* data );

__attribute__((dllimport)) ALboolean __attribute__((__cdecl__)) alGetBoolean( ALenum param );

__attribute__((dllimport)) ALint __attribute__((__cdecl__)) alGetInteger( ALenum param );

__attribute__((dllimport)) ALfloat __attribute__((__cdecl__)) alGetFloat( ALenum param );

__attribute__((dllimport)) ALdouble __attribute__((__cdecl__)) alGetDouble( ALenum param );






__attribute__((dllimport)) ALenum __attribute__((__cdecl__)) alGetError( void );







__attribute__((dllimport)) ALboolean __attribute__((__cdecl__)) alIsExtensionPresent( const ALchar* extname );

__attribute__((dllimport)) void* __attribute__((__cdecl__)) alGetProcAddress( const ALchar* fname );

__attribute__((dllimport)) ALenum __attribute__((__cdecl__)) alGetEnumValue( const ALchar* ename );
# 430 "/usr/i686-w64-mingw32/sys-root/mingw/include/AL/al.h" 3 4
__attribute__((dllimport)) void __attribute__((__cdecl__)) alListenerf( ALenum param, ALfloat value );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alListener3f( ALenum param, ALfloat value1, ALfloat value2, ALfloat value3 );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alListenerfv( ALenum param, const ALfloat* values );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alListeneri( ALenum param, ALint value );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alListener3i( ALenum param, ALint value1, ALint value2, ALint value3 );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alListeneriv( ALenum param, const ALint* values );




__attribute__((dllimport)) void __attribute__((__cdecl__)) alGetListenerf( ALenum param, ALfloat* value );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alGetListener3f( ALenum param, ALfloat *value1, ALfloat *value2, ALfloat *value3 );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alGetListenerfv( ALenum param, ALfloat* values );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alGetListeneri( ALenum param, ALint* value );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alGetListener3i( ALenum param, ALint *value1, ALint *value2, ALint *value3 );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alGetListeneriv( ALenum param, ALint* values );
# 492 "/usr/i686-w64-mingw32/sys-root/mingw/include/AL/al.h" 3 4
__attribute__((dllimport)) void __attribute__((__cdecl__)) alGenSources( ALsizei n, ALuint* sources );


__attribute__((dllimport)) void __attribute__((__cdecl__)) alDeleteSources( ALsizei n, const ALuint* sources );


__attribute__((dllimport)) ALboolean __attribute__((__cdecl__)) alIsSource( ALuint sid );




__attribute__((dllimport)) void __attribute__((__cdecl__)) alSourcef( ALuint sid, ALenum param, ALfloat value );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alSource3f( ALuint sid, ALenum param, ALfloat value1, ALfloat value2, ALfloat value3 );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alSourcefv( ALuint sid, ALenum param, const ALfloat* values );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alSourcei( ALuint sid, ALenum param, ALint value );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alSource3i( ALuint sid, ALenum param, ALint value1, ALint value2, ALint value3 );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alSourceiv( ALuint sid, ALenum param, const ALint* values );




__attribute__((dllimport)) void __attribute__((__cdecl__)) alGetSourcef( ALuint sid, ALenum param, ALfloat* value );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alGetSource3f( ALuint sid, ALenum param, ALfloat* value1, ALfloat* value2, ALfloat* value3);

__attribute__((dllimport)) void __attribute__((__cdecl__)) alGetSourcefv( ALuint sid, ALenum param, ALfloat* values );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alGetSourcei( ALuint sid, ALenum param, ALint* value );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alGetSource3i( ALuint sid, ALenum param, ALint* value1, ALint* value2, ALint* value3);

__attribute__((dllimport)) void __attribute__((__cdecl__)) alGetSourceiv( ALuint sid, ALenum param, ALint* values );







__attribute__((dllimport)) void __attribute__((__cdecl__)) alSourcePlayv( ALsizei ns, const ALuint *sids );


__attribute__((dllimport)) void __attribute__((__cdecl__)) alSourceStopv( ALsizei ns, const ALuint *sids );


__attribute__((dllimport)) void __attribute__((__cdecl__)) alSourceRewindv( ALsizei ns, const ALuint *sids );


__attribute__((dllimport)) void __attribute__((__cdecl__)) alSourcePausev( ALsizei ns, const ALuint *sids );






__attribute__((dllimport)) void __attribute__((__cdecl__)) alSourcePlay( ALuint sid );


__attribute__((dllimport)) void __attribute__((__cdecl__)) alSourceStop( ALuint sid );


__attribute__((dllimport)) void __attribute__((__cdecl__)) alSourceRewind( ALuint sid );


__attribute__((dllimport)) void __attribute__((__cdecl__)) alSourcePause( ALuint sid );




__attribute__((dllimport)) void __attribute__((__cdecl__)) alSourceQueueBuffers( ALuint sid, ALsizei numEntries, const ALuint *bids );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alSourceUnqueueBuffers( ALuint sid, ALsizei numEntries, ALuint *bids );
# 586 "/usr/i686-w64-mingw32/sys-root/mingw/include/AL/al.h" 3 4
__attribute__((dllimport)) void __attribute__((__cdecl__)) alGenBuffers( ALsizei n, ALuint* buffers );


__attribute__((dllimport)) void __attribute__((__cdecl__)) alDeleteBuffers( ALsizei n, const ALuint* buffers );


__attribute__((dllimport)) ALboolean __attribute__((__cdecl__)) alIsBuffer( ALuint bid );


__attribute__((dllimport)) void __attribute__((__cdecl__)) alBufferData( ALuint bid, ALenum format, const ALvoid* data, ALsizei size, ALsizei freq );




__attribute__((dllimport)) void __attribute__((__cdecl__)) alBufferf( ALuint bid, ALenum param, ALfloat value );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alBuffer3f( ALuint bid, ALenum param, ALfloat value1, ALfloat value2, ALfloat value3 );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alBufferfv( ALuint bid, ALenum param, const ALfloat* values );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alBufferi( ALuint bid, ALenum param, ALint value );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alBuffer3i( ALuint bid, ALenum param, ALint value1, ALint value2, ALint value3 );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alBufferiv( ALuint bid, ALenum param, const ALint* values );




__attribute__((dllimport)) void __attribute__((__cdecl__)) alGetBufferf( ALuint bid, ALenum param, ALfloat* value );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alGetBuffer3f( ALuint bid, ALenum param, ALfloat* value1, ALfloat* value2, ALfloat* value3);

__attribute__((dllimport)) void __attribute__((__cdecl__)) alGetBufferfv( ALuint bid, ALenum param, ALfloat* values );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alGetBufferi( ALuint bid, ALenum param, ALint* value );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alGetBuffer3i( ALuint bid, ALenum param, ALint* value1, ALint* value2, ALint* value3);

__attribute__((dllimport)) void __attribute__((__cdecl__)) alGetBufferiv( ALuint bid, ALenum param, ALint* values );





__attribute__((dllimport)) void __attribute__((__cdecl__)) alDopplerFactor( ALfloat value );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alDopplerVelocity( ALfloat value );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alSpeedOfSound( ALfloat value );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alDistanceModel( ALenum distanceModel );




typedef void (__attribute__((__cdecl__)) *LPALENABLE)( ALenum capability );
typedef void (__attribute__((__cdecl__)) *LPALDISABLE)( ALenum capability );
typedef ALboolean (__attribute__((__cdecl__)) *LPALISENABLED)( ALenum capability );
typedef const ALchar* (__attribute__((__cdecl__)) *LPALGETSTRING)( ALenum param );
typedef void (__attribute__((__cdecl__)) *LPALGETBOOLEANV)( ALenum param, ALboolean* data );
typedef void (__attribute__((__cdecl__)) *LPALGETINTEGERV)( ALenum param, ALint* data );
typedef void (__attribute__((__cdecl__)) *LPALGETFLOATV)( ALenum param, ALfloat* data );
typedef void (__attribute__((__cdecl__)) *LPALGETDOUBLEV)( ALenum param, ALdouble* data );
typedef ALboolean (__attribute__((__cdecl__)) *LPALGETBOOLEAN)( ALenum param );
typedef ALint (__attribute__((__cdecl__)) *LPALGETINTEGER)( ALenum param );
typedef ALfloat (__attribute__((__cdecl__)) *LPALGETFLOAT)( ALenum param );
typedef ALdouble (__attribute__((__cdecl__)) *LPALGETDOUBLE)( ALenum param );
typedef ALenum (__attribute__((__cdecl__)) *LPALGETERROR)( void );
typedef ALboolean (__attribute__((__cdecl__)) *LPALISEXTENSIONPRESENT)(const ALchar* extname );
typedef void* (__attribute__((__cdecl__)) *LPALGETPROCADDRESS)( const ALchar* fname );
typedef ALenum (__attribute__((__cdecl__)) *LPALGETENUMVALUE)( const ALchar* ename );
typedef void (__attribute__((__cdecl__)) *LPALLISTENERF)( ALenum param, ALfloat value );
typedef void (__attribute__((__cdecl__)) *LPALLISTENER3F)( ALenum param, ALfloat value1, ALfloat value2, ALfloat value3 );
typedef void (__attribute__((__cdecl__)) *LPALLISTENERFV)( ALenum param, const ALfloat* values );
typedef void (__attribute__((__cdecl__)) *LPALLISTENERI)( ALenum param, ALint value );
typedef void (__attribute__((__cdecl__)) *LPALLISTENER3I)( ALenum param, ALint value1, ALint value2, ALint value3 );
typedef void (__attribute__((__cdecl__)) *LPALLISTENERIV)( ALenum param, const ALint* values );
typedef void (__attribute__((__cdecl__)) *LPALGETLISTENERF)( ALenum param, ALfloat* value );
typedef void (__attribute__((__cdecl__)) *LPALGETLISTENER3F)( ALenum param, ALfloat *value1, ALfloat *value2, ALfloat *value3 );
typedef void (__attribute__((__cdecl__)) *LPALGETLISTENERFV)( ALenum param, ALfloat* values );
typedef void (__attribute__((__cdecl__)) *LPALGETLISTENERI)( ALenum param, ALint* value );
typedef void (__attribute__((__cdecl__)) *LPALGETLISTENER3I)( ALenum param, ALint *value1, ALint *value2, ALint *value3 );
typedef void (__attribute__((__cdecl__)) *LPALGETLISTENERIV)( ALenum param, ALint* values );
typedef void (__attribute__((__cdecl__)) *LPALGENSOURCES)( ALsizei n, ALuint* sources );
typedef void (__attribute__((__cdecl__)) *LPALDELETESOURCES)( ALsizei n, const ALuint* sources );
typedef ALboolean (__attribute__((__cdecl__)) *LPALISSOURCE)( ALuint sid );
typedef void (__attribute__((__cdecl__)) *LPALSOURCEF)( ALuint sid, ALenum param, ALfloat value);
typedef void (__attribute__((__cdecl__)) *LPALSOURCE3F)( ALuint sid, ALenum param, ALfloat value1, ALfloat value2, ALfloat value3 );
typedef void (__attribute__((__cdecl__)) *LPALSOURCEFV)( ALuint sid, ALenum param, const ALfloat* values );
typedef void (__attribute__((__cdecl__)) *LPALSOURCEI)( ALuint sid, ALenum param, ALint value);
typedef void (__attribute__((__cdecl__)) *LPALSOURCE3I)( ALuint sid, ALenum param, ALint value1, ALint value2, ALint value3 );
typedef void (__attribute__((__cdecl__)) *LPALSOURCEIV)( ALuint sid, ALenum param, const ALint* values );
typedef void (__attribute__((__cdecl__)) *LPALGETSOURCEF)( ALuint sid, ALenum param, ALfloat* value );
typedef void (__attribute__((__cdecl__)) *LPALGETSOURCE3F)( ALuint sid, ALenum param, ALfloat* value1, ALfloat* value2, ALfloat* value3);
typedef void (__attribute__((__cdecl__)) *LPALGETSOURCEFV)( ALuint sid, ALenum param, ALfloat* values );
typedef void (__attribute__((__cdecl__)) *LPALGETSOURCEI)( ALuint sid, ALenum param, ALint* value );
typedef void (__attribute__((__cdecl__)) *LPALGETSOURCE3I)( ALuint sid, ALenum param, ALint* value1, ALint* value2, ALint* value3);
typedef void (__attribute__((__cdecl__)) *LPALGETSOURCEIV)( ALuint sid, ALenum param, ALint* values );
typedef void (__attribute__((__cdecl__)) *LPALSOURCEPLAYV)( ALsizei ns, const ALuint *sids );
typedef void (__attribute__((__cdecl__)) *LPALSOURCESTOPV)( ALsizei ns, const ALuint *sids );
typedef void (__attribute__((__cdecl__)) *LPALSOURCEREWINDV)( ALsizei ns, const ALuint *sids );
typedef void (__attribute__((__cdecl__)) *LPALSOURCEPAUSEV)( ALsizei ns, const ALuint *sids );
typedef void (__attribute__((__cdecl__)) *LPALSOURCEPLAY)( ALuint sid );
typedef void (__attribute__((__cdecl__)) *LPALSOURCESTOP)( ALuint sid );
typedef void (__attribute__((__cdecl__)) *LPALSOURCEREWIND)( ALuint sid );
typedef void (__attribute__((__cdecl__)) *LPALSOURCEPAUSE)( ALuint sid );
typedef void (__attribute__((__cdecl__)) *LPALSOURCEQUEUEBUFFERS)(ALuint sid, ALsizei numEntries, const ALuint *bids );
typedef void (__attribute__((__cdecl__)) *LPALSOURCEUNQUEUEBUFFERS)(ALuint sid, ALsizei numEntries, ALuint *bids );
typedef void (__attribute__((__cdecl__)) *LPALGENBUFFERS)( ALsizei n, ALuint* buffers );
typedef void (__attribute__((__cdecl__)) *LPALDELETEBUFFERS)( ALsizei n, const ALuint* buffers );
typedef ALboolean (__attribute__((__cdecl__)) *LPALISBUFFER)( ALuint bid );
typedef void (__attribute__((__cdecl__)) *LPALBUFFERDATA)( ALuint bid, ALenum format, const ALvoid* data, ALsizei size, ALsizei freq );
typedef void (__attribute__((__cdecl__)) *LPALBUFFERF)( ALuint bid, ALenum param, ALfloat value);
typedef void (__attribute__((__cdecl__)) *LPALBUFFER3F)( ALuint bid, ALenum param, ALfloat value1, ALfloat value2, ALfloat value3 );
typedef void (__attribute__((__cdecl__)) *LPALBUFFERFV)( ALuint bid, ALenum param, const ALfloat* values );
typedef void (__attribute__((__cdecl__)) *LPALBUFFERI)( ALuint bid, ALenum param, ALint value);
typedef void (__attribute__((__cdecl__)) *LPALBUFFER3I)( ALuint bid, ALenum param, ALint value1, ALint value2, ALint value3 );
typedef void (__attribute__((__cdecl__)) *LPALBUFFERIV)( ALuint bid, ALenum param, const ALint* values );
typedef void (__attribute__((__cdecl__)) *LPALGETBUFFERF)( ALuint bid, ALenum param, ALfloat* value );
typedef void (__attribute__((__cdecl__)) *LPALGETBUFFER3F)( ALuint bid, ALenum param, ALfloat* value1, ALfloat* value2, ALfloat* value3);
typedef void (__attribute__((__cdecl__)) *LPALGETBUFFERFV)( ALuint bid, ALenum param, ALfloat* values );
typedef void (__attribute__((__cdecl__)) *LPALGETBUFFERI)( ALuint bid, ALenum param, ALint* value );
typedef void (__attribute__((__cdecl__)) *LPALGETBUFFER3I)( ALuint bid, ALenum param, ALint* value1, ALint* value2, ALint* value3);
typedef void (__attribute__((__cdecl__)) *LPALGETBUFFERIV)( ALuint bid, ALenum param, ALint* values );
typedef void (__attribute__((__cdecl__)) *LPALDOPPLERFACTOR)( ALfloat value );
typedef void (__attribute__((__cdecl__)) *LPALDOPPLERVELOCITY)( ALfloat value );
typedef void (__attribute__((__cdecl__)) *LPALSPEEDOFSOUND)( ALfloat value );
typedef void (__attribute__((__cdecl__)) *LPALDISTANCEMODEL)( ALenum distanceModel );
# 10 "JCEBA.LoadLibs.h" 2
# 1 "Libs/AL/alut.h" 1
# 12 "Libs/AL/alut.h"
# 1 "/usr/i686-w64-mingw32/sys-root/mingw/include/AL/alc.h" 1 3 4
# 45 "/usr/i686-w64-mingw32/sys-root/mingw/include/AL/alc.h" 3 4
typedef struct ALCdevice_struct ALCdevice;
typedef struct ALCcontext_struct ALCcontext;



typedef char ALCboolean;


typedef char ALCchar;


typedef signed char ALCbyte;


typedef unsigned char ALCubyte;


typedef short ALCshort;


typedef unsigned short ALCushort;


typedef int ALCint;


typedef unsigned int ALCuint;


typedef int ALCsizei;


typedef int ALCenum;


typedef float ALCfloat;


typedef double ALCdouble;


typedef void ALCvoid;
# 182 "/usr/i686-w64-mingw32/sys-root/mingw/include/AL/alc.h" 3 4
__attribute__((dllimport)) ALCcontext * __attribute__((__cdecl__)) alcCreateContext( ALCdevice *device, const ALCint* attrlist );

__attribute__((dllimport)) ALCboolean __attribute__((__cdecl__)) alcMakeContextCurrent( ALCcontext *context );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alcProcessContext( ALCcontext *context );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alcSuspendContext( ALCcontext *context );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alcDestroyContext( ALCcontext *context );

__attribute__((dllimport)) ALCcontext * __attribute__((__cdecl__)) alcGetCurrentContext( void );

__attribute__((dllimport)) ALCdevice* __attribute__((__cdecl__)) alcGetContextsDevice( ALCcontext *context );





__attribute__((dllimport)) ALCdevice * __attribute__((__cdecl__)) alcOpenDevice( const ALCchar *devicename );

__attribute__((dllimport)) ALCboolean __attribute__((__cdecl__)) alcCloseDevice( ALCdevice *device );






__attribute__((dllimport)) ALCenum __attribute__((__cdecl__)) alcGetError( ALCdevice *device );







__attribute__((dllimport)) ALCboolean __attribute__((__cdecl__)) alcIsExtensionPresent( ALCdevice *device, const ALCchar *extname );

__attribute__((dllimport)) void * __attribute__((__cdecl__)) alcGetProcAddress( ALCdevice *device, const ALCchar *funcname );

__attribute__((dllimport)) ALCenum __attribute__((__cdecl__)) alcGetEnumValue( ALCdevice *device, const ALCchar *enumname );





__attribute__((dllimport)) const ALCchar * __attribute__((__cdecl__)) alcGetString( ALCdevice *device, ALCenum param );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alcGetIntegerv( ALCdevice *device, ALCenum param, ALCsizei size, ALCint *data );





__attribute__((dllimport)) ALCdevice* __attribute__((__cdecl__)) alcCaptureOpenDevice( const ALCchar *devicename, ALCuint frequency, ALCenum format, ALCsizei buffersize );

__attribute__((dllimport)) ALCboolean __attribute__((__cdecl__)) alcCaptureCloseDevice( ALCdevice *device );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alcCaptureStart( ALCdevice *device );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alcCaptureStop( ALCdevice *device );

__attribute__((dllimport)) void __attribute__((__cdecl__)) alcCaptureSamples( ALCdevice *device, ALCvoid *buffer, ALCsizei samples );




typedef ALCcontext * (__attribute__((__cdecl__)) *LPALCCREATECONTEXT) (ALCdevice *device, const ALCint *attrlist);
typedef ALCboolean (__attribute__((__cdecl__)) *LPALCMAKECONTEXTCURRENT)( ALCcontext *context );
typedef void (__attribute__((__cdecl__)) *LPALCPROCESSCONTEXT)( ALCcontext *context );
typedef void (__attribute__((__cdecl__)) *LPALCSUSPENDCONTEXT)( ALCcontext *context );
typedef void (__attribute__((__cdecl__)) *LPALCDESTROYCONTEXT)( ALCcontext *context );
typedef ALCcontext * (__attribute__((__cdecl__)) *LPALCGETCURRENTCONTEXT)( void );
typedef ALCdevice * (__attribute__((__cdecl__)) *LPALCGETCONTEXTSDEVICE)( ALCcontext *context );
typedef ALCdevice * (__attribute__((__cdecl__)) *LPALCOPENDEVICE)( const ALCchar *devicename );
typedef ALCboolean (__attribute__((__cdecl__)) *LPALCCLOSEDEVICE)( ALCdevice *device );
typedef ALCenum (__attribute__((__cdecl__)) *LPALCGETERROR)( ALCdevice *device );
typedef ALCboolean (__attribute__((__cdecl__)) *LPALCISEXTENSIONPRESENT)( ALCdevice *device, const ALCchar *extname );
typedef void * (__attribute__((__cdecl__)) *LPALCGETPROCADDRESS)(ALCdevice *device, const ALCchar *funcname );
typedef ALCenum (__attribute__((__cdecl__)) *LPALCGETENUMVALUE)(ALCdevice *device, const ALCchar *enumname );
typedef const ALCchar* (__attribute__((__cdecl__)) *LPALCGETSTRING)( ALCdevice *device, ALCenum param );
typedef void (__attribute__((__cdecl__)) *LPALCGETINTEGERV)( ALCdevice *device, ALCenum param, ALCsizei size, ALCint *dest );
typedef ALCdevice * (__attribute__((__cdecl__)) *LPALCCAPTUREOPENDEVICE)( const ALCchar *devicename, ALCuint frequency, ALCenum format, ALCsizei buffersize );
typedef ALCboolean (__attribute__((__cdecl__)) *LPALCCAPTURECLOSEDEVICE)( ALCdevice *device );
typedef void (__attribute__((__cdecl__)) *LPALCCAPTURESTART)( ALCdevice *device );
typedef void (__attribute__((__cdecl__)) *LPALCCAPTURESTOP)( ALCdevice *device );
typedef void (__attribute__((__cdecl__)) *LPALCCAPTURESAMPLES)( ALCdevice *device, ALCvoid *buffer, ALCsizei samples );
# 13 "Libs/AL/alut.h" 2
# 84 "Libs/AL/alut.h"
__attribute__((
# 84 "Libs/AL/alut.h"
dllimport)) ALboolean __attribute__((__cdecl__)) alutInit (int *argcp, char **argv);
__attribute__((dllimport)) ALboolean __attribute__((__cdecl__)) alutInitWithoutContext (int *argcp, char **argv);
__attribute__((dllimport)) ALboolean __attribute__((__cdecl__)) alutExit (void);

__attribute__((dllimport)) ALenum __attribute__((__cdecl__)) alutGetError (void);
__attribute__((dllimport)) const char *__attribute__((__cdecl__)) alutGetErrorString (ALenum error);

__attribute__((dllimport)) ALuint __attribute__((__cdecl__)) alutCreateBufferFromFile (const char *fileName);
__attribute__((dllimport)) ALuint __attribute__((__cdecl__)) alutCreateBufferFromFileImage (const ALvoid *data, ALsizei length);
__attribute__((dllimport)) ALuint __attribute__((__cdecl__)) alutCreateBufferHelloWorld (void);
__attribute__((dllimport)) ALuint __attribute__((__cdecl__)) alutCreateBufferWaveform (ALenum waveshape, ALfloat frequency, ALfloat phase, ALfloat duration);

__attribute__((dllimport)) ALvoid *__attribute__((__cdecl__)) alutLoadMemoryFromFile (const char *fileName, ALenum *format, ALsizei *size, ALfloat *frequency);
__attribute__((dllimport)) ALvoid *__attribute__((__cdecl__)) alutLoadMemoryFromFileImage (const ALvoid *data, ALsizei length, ALenum *format, ALsizei *size, ALfloat *frequency);
__attribute__((dllimport)) ALvoid *__attribute__((__cdecl__)) alutLoadMemoryHelloWorld (ALenum *format, ALsizei *size, ALfloat *frequency);
__attribute__((dllimport)) ALvoid *__attribute__((__cdecl__)) alutLoadMemoryWaveform (ALenum waveshape, ALfloat frequency, ALfloat phase, ALfloat duration, ALenum *format, ALsizei *size, ALfloat *freq);

__attribute__((dllimport)) const char *__attribute__((__cdecl__)) alutGetMIMETypes (ALenum loader);

__attribute__((dllimport)) ALint __attribute__((__cdecl__)) alutGetMajorVersion (void);
__attribute__((dllimport)) ALint __attribute__((__cdecl__)) alutGetMinorVersion (void);

__attribute__((dllimport)) ALboolean __attribute__((__cdecl__)) alutSleep (ALfloat duration);






__attribute__((dllimport)) __attribute__((deprecated)) void __attribute__((__cdecl__)) alutLoadWAVFile (ALbyte *fileName, ALenum *format, void **data, ALsizei *size, ALsizei *frequency, ALboolean *loop);
__attribute__((dllimport)) __attribute__((deprecated)) void __attribute__((__cdecl__)) alutLoadWAVMemory (ALbyte *buffer, ALenum *format, void **data, ALsizei *size, ALsizei *frequency, ALboolean *loop);

__attribute__((dllimport)) __attribute__((deprecated)) void __attribute__((__cdecl__)) alutUnloadWAV (ALenum format, ALvoid *data, ALsizei size, ALsizei frequency);
# 11 "JCEBA.LoadLibs.h" 2


# 1 "Libs/JCEBA.Globals.h" 1
# 30 "Libs/JCEBA.Globals.h"
char elementalPath[]="";
bool bugMODE=false;
bool useStencil=true;
bool cheatMode=false;
bool DEBUG=false;

char language[25]="english";
float gravity=-100.8;
int mapPreConfig=0;
bool soundState=1,musicState=1;
int initPlayerLifes=3;
int initPlayerBombs=1;
int wind=1;
bool windState=1;
int difficulty=1,idxMap=1;;
float damageRocket=2;
float damageAtomic=9;

int nMapGen=250;
int variationMapGen=60;
int smallVariationMapGen=10;
int mountainVariationMapGen=20;
int mountainVerticalSize=100;
int mountainHorizontalSize=55;
int mountainChance=120;
float averageGroundSpawn=600/3-600/2;
# 77 "Libs/JCEBA.Globals.h"
int currentScreen=-111;
float FPS=40;
int gameFPS=60;
bool mouseClicked=0;
void AIturn();
float getAngle(int isRAD);
void saveMapConfig();
void saveSettings();
void createList();
int languageIdx=0;
float angle,strengh;
ALuint ALsource[23];
bool MOUSE2=0;
bool fullscreen=false;
bool canGG=0;
int pause=1;
bool alreadyAI=false;
int playerTurn=1;
float disFromP1=rand()%200;

typedef struct mapSettings {
                            int nMapGen=250;
                            int variationMapGen=60;
                            int smallVariationMapGen=10;
                            int mountainVariationMapGen=20;
                            int mountainVerticalSize=100;
                            int mountainHorizontalSize=55;
                            int mountainChance=120;
} MAP_SETTINGS;

MAP_SETTINGS mapType[5];
typedef struct settings {
    bool music=1,sound=1, windState=1;
    int difficulty=1,lives=3,specialAmmo=2,language=0,maps=0,resolutionIdx=0,gameFPS=60;
} SETTINGS;
# 14 "JCEBA.LoadLibs.h" 2
# 1 "Libs/JCEBA.Util.h" 1

char* filePath;

typedef struct point{
  float x;
  float y;
} Point;
typedef struct rectangle{
  Point p0;
  Point p1;
} Rectangle;

bool ENTER=0,MOUSE1=0;
float currentWidth=800,currentHeight=600;
int mouseX=0,mouseY=0;
int players=1;
int player1,player2,stage;
Rectangle pos_Explosion;

Point* mapPoints;

char* getLanguageStr(int n){
    switch(n){
        case 0: return "portugues";
        case 1: return "english";
        case 2: return "russkiy";
        case 3: return "hangug-ui";
        case 4: return "alearabia";
    }
}

float simplifyAngle(float Angle){
  int signal=1;
  if(Angle<0){
    signal*=-1;
    Angle*=-1;
  }
  while (Angle>360) {
    Angle-=360;
  }
  if(signal<0)
    Angle=360-Angle;
  if(Angle>180)
    Angle-=180;
  return Angle;
}

float radToAngle(float RAD,bool simplify){
  if(simplify)
    return simplifyAngle(RAD*180/3.14159265);
  return RAD*180/3.14159265;
}

float angleToRad(float RAD){
  return RAD*3.14159265/180;
}

void setMapConfig(int n){
  if(n<1){
    nMapGen=250;
    variationMapGen=60;
    smallVariationMapGen=10;
    mountainVariationMapGen=20;
    mountainVerticalSize=100;
    mountainHorizontalSize=55;
    mountainChance=120;
    return;
  }
    nMapGen=mapType[n].nMapGen;
    variationMapGen=mapType[n].variationMapGen;
    smallVariationMapGen=mapType[n].smallVariationMapGen;
    mountainVariationMapGen=mapType[n].mountainVariationMapGen;
    mountainVerticalSize=mapType[n].mountainVerticalSize;
    mountainHorizontalSize=mapType[n].mountainHorizontalSize;
    mountainChance=mapType[n].mountainChance;
}

int strEq(char* str1, char*str2){
    int i,value = 1;
    for(i=0;str1[i]!='\0';i++)
        if(str1[i]!=str2[i]){
            value=0;
            break;
        }
    return value;
}

char* newPath(char* path){
  if(strEq(elementalPath,""))
    return path;
  else
    return strcat(elementalPath,path);
}

int getLanguageInt(char* in){
  if(strEq(in,"portugues"))
    return 0;
  if(strEq(in,"english"))
    return 1;
  if(strEq(in,"russkiy"))
    return 2;
  if(strEq(in,"hangug-ui"))
    return 3;
  if(strEq(in,"alearabia"))
    return 4;
  return 0;
}

int getNumberAlgo(int num){
  int divisor=1;
  int numberAlgo=0;
  do{
    numberAlgo++;
    divisor*=10;
  }while(num/divisor>0);
  return numberAlgo;
}

int randCountry(){
  switch (rand()%5) {
    case 0: return 7;
    case 1: return 51;
    case 2: return 11;
    case 3: return 666;
    case 4: return 24;
  }
}

char getCharEqInt(int i){
  switch (i) {
    default: return '0';
    case 1: return '1';
    case 2: return '2';
    case 3: return '3';
    case 4: return '4';
    case 5: return '5';
    case 6: return '6';
    case 7: return '7';
    case 8: return '8';
    case 9: return '9';
  }
}
void getAnimatedFiles(char* str1,int index,char*str2){
  str1=newPath(str1);
  int fullsize=getNumberAlgo(index)+strlen(str1)+strlen(str2)+1;
  filePath=(char*)realloc(filePath,fullsize*sizeof(char));
  int idxBkp=index;
  for(int i=0;i<fullsize;i++){
    if(i<strlen(str1))
      filePath[i]=str1[i];
    else if(i>=strlen(str1)&&i<strlen(str1)+getNumberAlgo(index)){
      filePath[i]=getCharEqInt((idxBkp-idxBkp%(int)round(pow(10,getNumberAlgo(idxBkp)-1)))/(int)round(pow(10,getNumberAlgo(idxBkp)-1)));
      idxBkp=idxBkp%(int)round(pow(10,getNumberAlgo(idxBkp)-1));
    }else
      filePath[i]=str2[i-strlen(str1)-getNumberAlgo(index)];
  }
}

void mapGen(){
  mapPoints=(Point*)realloc(mapPoints,(nMapGen+2)*sizeof(Point));
  float tmpWidth=-800/2;
  float randN0,randN1,randN2;
  int mapSignal=-1;
  int genaretingMountain=0,currentImountain=0;
  for(int i=1;i<=nMapGen;i++){
    mapPoints[i].x=tmpWidth;
    randN0=rand();
    randN1=(randN0/23.0-(int)randN0/23);
    if(i==1)
      randN2=(float)randN1*((rand()%(int)(variationMapGen/randN1/2)*10000))/10000;
    else{
      if(!(rand()%mountainChance)&&!genaretingMountain){
        genaretingMountain=1;
        currentImountain=i;
      }else if(i-currentImountain>=mountainHorizontalSize)
        genaretingMountain=0;
      if(!genaretingMountain)
        randN2=(float)randN1*((rand()%(int)(smallVariationMapGen/randN1/2)*10000))/10000;
      else
        randN2=(float)randN1*((rand()%(int)(mountainVariationMapGen/randN1/2)*10000))/10000;
    }
    if(rand()%2&&genaretingMountain==0) mapSignal*=-1;

    if(!genaretingMountain)
      mapPoints[i].y=averageGroundSpawn+randN2*mapSignal;
    else if(i-currentImountain>=mountainHorizontalSize/2)
      mapPoints[i].y=mapPoints[i-1].y+randN2*mapSignal;
    else
      mapPoints[i].y=mapPoints[i-1].y-randN2*mapSignal;

    if(!genaretingMountain){
      if(mapPoints[i].y>averageGroundSpawn+variationMapGen)mapPoints[i].y=averageGroundSpawn+variationMapGen;
      if(mapPoints[i].y<averageGroundSpawn-variationMapGen)mapPoints[i].y=averageGroundSpawn-variationMapGen;
    }else{
      if(mapPoints[i].y>averageGroundSpawn+mountainVerticalSize)mapPoints[i].y=averageGroundSpawn+mountainVerticalSize;
      if(mapPoints[i].y<averageGroundSpawn-mountainVerticalSize)mapPoints[i].y=averageGroundSpawn-mountainVerticalSize;
    }
    tmpWidth+=800/nMapGen*1.1;


  }
  mapPoints[0].x=-800/2;
  mapPoints[0].y=-600/2;
  mapPoints[nMapGen].x=800/2;
  mapPoints[nMapGen+1].x=800/2;
  mapPoints[nMapGen+1].y=-600/2;
}

float dynamicX(float x){
  return x*currentWidth/800;
}

float dynamicY(float y){
  return y*currentHeight/600;
}
# 15 "JCEBA.LoadLibs.h" 2
# 1 "Libs/JCEBA.GL.h" 1
double R=0,G=0,B=0,A=0;
float greyShade=0;
int sR=1,sG=1,sB=1;




void drawPolygon(float raio,unsigned long int lados,Point p,float z)
{
    glBegin(
# 10 "Libs/JCEBA.GL.h" 3 4
           0x0006
# 10 "Libs/JCEBA.GL.h"
                          );
    glVertex3f(p.x,p.y,z);
    for(int i=0;i<=lados;i++)
    {
        glVertex3f(cos(2*3.14159265*i/lados)*raio+p.x,sin(2*3.14159265*i/lados)*raio+p.y,z);
    }
    glEnd();
}

void selectColor(char* color) {
  R=1;G=1;B=1;
  if(strEq(color,"black")){
      R=0;G=0;B=0;
  }else if(strEq(color,"red")){
      R=1;G=0;B=0;
  }else if(strEq(color,"green")){
      R=0;G=1;B=0;
  }else if(strEq(color,"blue")){
      R=0;G=0;B=1;
  }else if(strEq(color,"yellow")){
      R=1;G=1;B=0;
  }else if(strEq(color,"magenta")){
      R=1;G=0;B=1;
  }else if(strEq(color,"cyan")){
      R=0;G=1;B=1;
  }else if(strEq(color,"grey")){
      R=0.6;G=0.6;B=0.6;
  }else if(strEq(color,"violet")){
      R=0.6;G=0.4392156;B=0.80392156;
  }
  glColor3f(R, G, B);
}

void drawText(void* font, char* text, Point p,float z){
  glRasterPos3f(p.x,p.y,z);
  for (unsigned int i = 0;i<strlen(text);i++) {
     glutBitmapCharacter(font, text[i]);
  }
}

void drawRectangle(Rectangle r,float z){
   glBegin(
# 51 "Libs/JCEBA.GL.h" 3 4
          0x0009
# 51 "Libs/JCEBA.GL.h"
                    );
        glVertex3f(r.p0.x, r.p0.y, z);
        glVertex3f(r.p1.x, r.p0.y, z);
        glVertex3f(r.p1.x, r.p1.y, z);
        glVertex3f(r.p0.x, r.p1.y, z);
    glEnd();
}

void drawTexture(Rectangle r,float z,GLuint textureIndex, int orientation){

  glEnable(
# 61 "Libs/JCEBA.GL.h" 3 4
          0x0DE1
# 61 "Libs/JCEBA.GL.h"
                       );
  glEnable(
# 62 "Libs/JCEBA.GL.h" 3 4
          0x0BC0
# 62 "Libs/JCEBA.GL.h"
                       );
  if(!bugMODE||currentScreen==-111||currentScreen==-116)
    glBindTexture(
# 64 "Libs/JCEBA.GL.h" 3 4
                 0x0DE1
# 64 "Libs/JCEBA.GL.h"
                              , textureIndex);
  else
    selectColor("violet");
  glBegin(
# 67 "Libs/JCEBA.GL.h" 3 4
         0x0007
# 67 "Libs/JCEBA.GL.h"
                 );
  if(orientation<0){
    glTexCoord2f(1, 0); glVertex3f(r.p0.x, r.p0.y, z);
    glTexCoord2f(0, 0); glVertex3f(r.p1.x, r.p0.y, z);
    glTexCoord2f(0, 1); glVertex3f(r.p1.x, r.p1.y, z);
    glTexCoord2f(1, 1); glVertex3f(r.p0.x, r.p1.y, z);
  }else{
    glTexCoord2f(0, 0); glVertex3f(r.p0.x, r.p0.y, z);
    glTexCoord2f(1, 0); glVertex3f(r.p1.x, r.p0.y, z);
    glTexCoord2f(1, 1); glVertex3f(r.p1.x, r.p1.y, z);
    glTexCoord2f(0, 1); glVertex3f(r.p0.x, r.p1.y, z);
  }
  glEnd();
  glDisable(
# 80 "Libs/JCEBA.GL.h" 3 4
           0x0DE1
# 80 "Libs/JCEBA.GL.h"
                        );
  glDisable(
# 81 "Libs/JCEBA.GL.h" 3 4
           0x0BC0
# 81 "Libs/JCEBA.GL.h"
                        );
  glColor4f(1,1,1,1);
}

void genColor(){
    if(rand()%10==0)
        switch(rand()%7){
            case 0:
                sR=1,sG=1,sB=-1;
            break;

            case 1:
                sR=1,sG=-1,sB=1;
            break;

            case 2:
                sR=1,sG=-1,sB=-1;
            break;

            case 3:
                sR=-1,sG=1,sB=1;
            break;

            case 4:
                sR=-1,sG=1,sB=-1;
            break;

            case 5:
                sR=-1,sG=-1,sB=1;
            break;

            case 6:
                sR=-1,sG=-1,sB=-1;
            break;
        }
    R+=0.0039215686*1*sR;
    G+=0.0039215686*1*sG;
    B+=0.0039215686*1*sB;
    if(R<0)R=0;
    if(R>1)R=1;
    if(G>1)G=1;
    if(G<0)G=0;
    if(B>1)B=1;
    if(B<0)B=0;
}
# 16 "JCEBA.LoadLibs.h" 2
# 1 "Libs/JCEBA.AL.h" 1

ALfloat listenerPos[]={0,0,4};
ALfloat listenerVel[]={0,0,0};
ALfloat listenerOri[]={0,0,1,0,1,0};
ALuint ALbuffer[23];
ALuint ALenviroment[1];
ALboolean al_bool;
ALsizei ALsize,ALfreq;
ALenum ALformat;
ALvoid *ALdata;

int currentFileLoading=0;
# 23 "Libs/JCEBA.AL.h"
void ALinit(){

 alListenerfv(
# 25 "Libs/JCEBA.AL.h" 3 4
             0x1004
# 25 "Libs/JCEBA.AL.h"
                        ,listenerPos);
 alListenerfv(
# 26 "Libs/JCEBA.AL.h" 3 4
             0x1006
# 26 "Libs/JCEBA.AL.h"
                        ,listenerVel);
 alListenerfv(
# 27 "Libs/JCEBA.AL.h" 3 4
             0x100F
# 27 "Libs/JCEBA.AL.h"
                           ,listenerOri);

 alGetError();
 if(alGetError()!=
# 30 "Libs/JCEBA.AL.h" 3 4
                 0
# 30 "Libs/JCEBA.AL.h"
                            ) exit(0);
}

void loadSound(char* path,float vol,ALboolean loop){

 alGenBuffers(1, &ALbuffer[currentFileLoading]);

  alutLoadWAVFile(newPath(path),&ALformat,&ALdata,&ALsize,&ALfreq,&al_bool);



 alBufferData(ALbuffer[currentFileLoading],ALformat,ALdata,ALsize,ALfreq);
 alutUnloadWAV(ALformat,ALdata,ALsize,ALfreq);
 alGetError();
 alGenSources(1,&ALsource[currentFileLoading]);
 if(alGetError()!=
# 45 "Libs/JCEBA.AL.h" 3 4
                 0
# 45 "Libs/JCEBA.AL.h"
                            ) exit(0);



 alSourcef(ALsource[currentFileLoading],
# 49 "Libs/JCEBA.AL.h" 3 4
                                       0x1003
# 49 "Libs/JCEBA.AL.h"
                                               ,1.0f);
 alSourcef(ALsource[currentFileLoading],
# 50 "Libs/JCEBA.AL.h" 3 4
                                       0x100A
# 50 "Libs/JCEBA.AL.h"
                                              ,vol);
 alSourcef(ALsource[currentFileLoading],
# 51 "Libs/JCEBA.AL.h" 3 4
                                       0x1004
# 51 "Libs/JCEBA.AL.h"
                                                  ,listenerPos[0]);
 alSourcef(ALsource[currentFileLoading],
# 52 "Libs/JCEBA.AL.h" 3 4
                                       0x1006
# 52 "Libs/JCEBA.AL.h"
                                                  ,listenerVel[0]);
 alSourcef(ALsource[currentFileLoading],
# 53 "Libs/JCEBA.AL.h" 3 4
                                       0x1009
# 53 "Libs/JCEBA.AL.h"
                                                ,ALbuffer[currentFileLoading]);
 alSourcef(ALsource[currentFileLoading],
# 54 "Libs/JCEBA.AL.h" 3 4
                                       0x1007
# 54 "Libs/JCEBA.AL.h"
                                                 ,loop);
 if(currentFileLoading<23 -1)
  currentFileLoading++;
}

void stopAllSounds(int n){
 for(int i=0;i<23;i++)
  if(i!=4&&i!=n)
   alSourceStop(ALsource[i]);
}
# 17 "JCEBA.LoadLibs.h" 2
# 1 "Libs/JCEBA.Strings.h" 1
char btn_1P[45];
char btn_2P[45];
char btn_Off[45];
char btn_HowTo[45];
char btn_Play[45];
char btn_On[45];
char btn_Options[45];
char btn_Exit[45];
char btn_Back[45];
char btn_Continue[45];
char btn_Defaults[45];
char btn_Fullscreen[45];
char btn_MapOptions[45];
char btn_example[45];

char str_ez[15];
char str_normal[15];
char str_hard[15];
char str_on[15];
char str_off[15];
char str_gndPoints[40];
char str_varBtwPoints[40];
char str_minVarBtwPnts[40];
char str_varBtwMountains[40];
char str_mountainVsize[40];
char str_mountainHsize[40];
char str_mountainChance[40];
char str_resolution[20];
char str_toReshape[80];
char str_pressEnterToContinue[35];
char str_escape[35];
char str_restart[35];
char str_howToPlay0[80];
char str_howToPlay1[80];
char str_howToPlay2[80];
char str_howToPlay3[80];
char str_howToPlay4[80];
char str_howToPlay5[80];
char str_howToPlay6[80];
char str_howToPlay7[80];
char str_howToPlay8[80];
char str_howToPlay9[80];
char str_howToPlay10[80];
char str_howToPlay11[80];
char str_howToPlay12[80];
char str_howToPlay13[80];
char str_music[20];
char str_pause[20];
char str_sound[20];
char str_Language[20];
char str_wind[20];
char str_mapgen[20];
char str_difficulty[20];
char str_lifeInitAmount[35];
char str_bombInitAmount[50];
char str_RussiaWon[25];
char str_BRWon[25];
char str_USAWon[25];
char str_IslamicWon[30];
char str_KoreaWon[30];
char str_Lifes[20];
char str_Projetile[15];
char str_AtomicBombs[25];
char str_Strength[20];
char str_Angle[20];
char str_CheatOn[20];
char str_currentMap[30];


void setStrings(){
  if(strEq(language,"portugues")){
      strcpy(btn_1P,"GUIandHUD/Buttons/pt/woglow/1Jogador.png");
      strcpy(btn_2P,"GUIandHUD/Buttons/pt/woglow/2Jogadores.png");
      strcpy(btn_Off,"GUIandHUD/Buttons/pt/woglow/Desligado.png");
      strcpy(btn_HowTo,"GUIandHUD/Buttons/pt/woglow/Instrucoes.png");
      strcpy(btn_Play,"GUIandHUD/Buttons/pt/woglow/Jogar.png");
      strcpy(btn_On,"GUIandHUD/Buttons/pt/woglow/Ligado.png");
      strcpy(btn_Options,"GUIandHUD/Buttons/pt/woglow/Opcoes.png");
      strcpy(btn_Exit,"GUIandHUD/Buttons/pt/woglow/Sair.png");
      strcpy(btn_Back,"GUIandHUD/Buttons/pt/woglow/Voltar.png");
      strcpy(btn_Continue,"GUIandHUD/Buttons/pt/woglow/Continuar.png");
      strcpy(btn_Fullscreen,"GUIandHUD/Buttons/en/woglow/fulsscreen.png");
      strcpy(btn_Defaults,"GUIandHUD/Buttons/pt/woglow/padroes.png");
      strcpy(btn_MapOptions,"GUIandHUD/Buttons/pt/woglow/mapopt.png");
      strcpy(btn_example,"GUIandHUD/Buttons/pt/woglow/sample.png");
      strcpy(str_pressEnterToContinue,"Pressione ENTER para iniciar");
      strcpy(str_howToPlay0,"Instrucoes de jogo:");
      strcpy(str_howToPlay1,"	-O objetivo do jogo é vencer a guerra nuclear contra ");
      strcpy(str_howToPlay2,"	  todos os paises,para se afirmar como superpotencia,");
      strcpy(str_howToPlay3,"	  ou apenas para destruir a vida na terra,voce escolhe!!!");
      strcpy(str_howToPlay4,"	-No turno de cada jogador,ele pode andar e atirar,");
      strcpy(str_howToPlay5,"	  com o objetivo de acertar e matar o lider do pais ");
      strcpy(str_howToPlay6,"	  inimigo,os comandos para jogar são:");
      strcpy(str_howToPlay7,"	-[WASD] para se locomover e pular");
      strcpy(str_howToPlay8,"	-[T] para alternar entre misses e bombas atomicas");
      strcpy(str_howToPlay9,"		(ATENCAO:o estoque de bombas atomicas e limitado)");
      strcpy(str_howToPlay10,"  -[P] para pausar");
      strcpy(str_howToPlay11,"  -[R] para reiniciar o jogo");
      strcpy(str_howToPlay12,"	-Use o mouse para mirar e botao esquerdo para atirar");
      strcpy(str_howToPlay13,"	-Segure o botao do mouse para ajustar a forca do tiro");
      strcpy(str_music,"Musica:");
      strcpy(str_wind,"Vento:");
      strcpy(str_mapgen,"Geracao de mapa:");
      strcpy(str_difficulty,"Dificuldade:");
      strcpy(str_lifeInitAmount,"Quantidade inicial de vidas:");
      strcpy(str_bombInitAmount,"Quantidade inicial de bombas atomicas:");
      strcpy(str_sound,"Som:");
      strcpy(str_Language,"Idioma:");
      strcpy(str_pause,"Pausado");
      strcpy(str_RussiaWon,"Vitoria da Russia!");
      strcpy(str_BRWon,"Vitoria do Brasil!");
      strcpy(str_USAWon,"Vitoria dos EUA!");
      strcpy(str_IslamicWon,"Allahu Akbar!!!");
      strcpy(str_KoreaWon,"Vitoria da Coreia do Norte!");
      strcpy(str_Lifes,"Vidas:");
      strcpy(str_Projetile,"Projetil:");
      strcpy(str_AtomicBombs,"Bombas Atomicas:");
      strcpy(str_Strength,"Forca:");
      strcpy(str_Angle,"Angulo:");
      strcpy(str_CheatOn,"Trapaca Ligada");
      strcpy(str_escape,"Deseja sair?");
      strcpy(str_restart,"Deseja reiniciar?");
      strcpy(str_resolution,"Resolucao:");
      strcpy(str_toReshape,"Para redimencionar a tela,va ao menu de opcoes");
      strcpy(str_gndPoints,"Numero de pontos:");
      strcpy(str_varBtwPoints,"Variacao entre pontos:");
      strcpy(str_minVarBtwPnts,"Variacao minima entre pontos:");
      strcpy(str_varBtwMountains,"Variacao entre Vales/Montanhas:");
      strcpy(str_mountainVsize,"Tamanho vertical de Vales/Montanhas:");
      strcpy(str_mountainHsize,"Tamanho horizontal de Vales/Montanhas:");
      strcpy(str_mountainChance,"Chance de Vale/Montanha:");
      strcpy(str_on,"Ligado");
      strcpy(str_off,"Desligado");
      strcpy(str_ez,"Facil");
      strcpy(str_normal,"Normal");
      strcpy(str_hard,"Dificil <3");
      strcpy(str_currentMap,"Mapa Atual:");
  }else if(strEq(language,"english")){
      strcpy(btn_1P,"GUIandHUD/Buttons/en/woglow/1Player.png");
      strcpy(btn_2P,"GUIandHUD/Buttons/en/woglow/2Players.png");
      strcpy(btn_Off,"GUIandHUD/Buttons/en/woglow/Off.png");
      strcpy(btn_HowTo,"GUIandHUD/Buttons/en/woglow/Instructions.png");
      strcpy(btn_Play,"GUIandHUD/Buttons/en/woglow/Play.png");
      strcpy(btn_On,"GUIandHUD/Buttons/en/woglow/On.png");
      strcpy(btn_Options,"GUIandHUD/Buttons/en/woglow/Options.png");
      strcpy(btn_Exit,"GUIandHUD/Buttons/en/woglow/Exit.png");
      strcpy(btn_Back,"GUIandHUD/Buttons/en/woglow/Back.png");
      strcpy(btn_Continue,"GUIandHUD/Buttons/en/woglow/continue.png");
      strcpy(btn_Fullscreen,"GUIandHUD/Buttons/en/woglow/fulsscreen.png");
      strcpy(btn_Defaults,"GUIandHUD/Buttons/en/woglow/defaults.png");
      strcpy(btn_MapOptions,"GUIandHUD/Buttons/en/woglow/mapOptions.png");
      strcpy(btn_example,"GUIandHUD/Buttons/en/woglow/sample.png");
      strcpy(str_pressEnterToContinue,"Press ENTER to continue");
      strcpy(str_howToPlay0,"Game Instructions:");
      strcpy(str_howToPlay1,"	-The game's goal is to win the nuclear war against");
      strcpy(str_howToPlay2,"	  every country,to ensure yourself as a superpower,");
      strcpy(str_howToPlay3,"		or just to destroy all life in Earth,you pick!!!");
      strcpy(str_howToPlay4,"	-In each player's turn,it can walk and shoot,");
      strcpy(str_howToPlay5,"	  to hit and kill the enemy country's leader,");
      strcpy(str_howToPlay6,"	  the key mapping is:");
      strcpy(str_howToPlay7,"	-[WASD] to walk and jump");
      strcpy(str_howToPlay8,"	-[T] to change between missiles and atomic bombs");
      strcpy(str_howToPlay9,"		(CAUTION:the ammount of atomic bombs is limited)");
      strcpy(str_howToPlay10,"	-[P] to pause");
      strcpy(str_howToPlay11,"	-[R] to restart the game");
      strcpy(str_howToPlay12,"	-Use the mouse to aim and the left button to shoot");
      strcpy(str_howToPlay13,"	-Hold the mouse button to adjust the shot's strenght");
      strcpy(str_music,"Music:");
      strcpy(str_wind,"Wind:");
      strcpy(str_mapgen,"Map gen:");
      strcpy(str_difficulty,"Difficulty:");
      strcpy(str_lifeInitAmount,"Initial amount of lives:");
      strcpy(str_bombInitAmount,"Initial amount of atomic bombs:");
      strcpy(str_sound,"Sound:");
      strcpy(str_Language,"Language:");
      strcpy(str_pause,"Paused");
      strcpy(str_RussiaWon,"Russia Wins!");
      strcpy(str_BRWon,"Brazil Wins!");
      strcpy(str_USAWon,"USA Wins!");
      strcpy(str_IslamicWon,"Allahu Akbar!!!");
      strcpy(str_KoreaWon,"North Korea Wins!");
      strcpy(str_Lifes,"Lives:");
      strcpy(str_Projetile,"Projectile:");
      strcpy(str_AtomicBombs,"Atomic Bombs:");
      strcpy(str_Strength,"Strength:");
      strcpy(str_Angle,"Angle:");
      strcpy(str_CheatOn,"CHEAT ON");
      strcpy(str_escape,"Wanna leave?");
      strcpy(str_restart,"Gonna cry?");
      strcpy(str_resolution,"Resolution:");
      strcpy(str_toReshape,"To reshape the window,go to options menu");
      strcpy(str_gndPoints,"Number of Ground Points:");
      strcpy(str_varBtwPoints,"Variation between points:");
      strcpy(str_minVarBtwPnts,"Minimum variation between points:");
      strcpy(str_varBtwMountains,"Variation between Mountain/Pit points:");
      strcpy(str_mountainVsize,"Mountain/Pit Vertical size:");
      strcpy(str_mountainHsize,"Mountain/Pit Horizontal size:");
      strcpy(str_mountainChance,"Mountain/Pit Chance:");
      strcpy(str_on,"On");
      strcpy(str_off,"Off");
      strcpy(str_ez,"Easy");
      strcpy(str_normal,"Normal");
      strcpy(str_hard,"HARD");
      strcpy(str_currentMap,"Current Map:");
  }else if(strEq(language,"russkiy")){
    strcpy(btn_1P,"GUIandHUD/Buttons/ru/woglow/1jogador.png");
    strcpy(btn_2P,"GUIandHUD/Buttons/ru/woglow/2jogadores.png");
    strcpy(btn_Off,"GUIandHUD/Buttons/ru/woglow/desligado.png");
    strcpy(btn_HowTo,"GUIandHUD/Buttons/ru/woglow/instrucoes.png");
    strcpy(btn_Play,"GUIandHUD/Buttons/ru/woglow/jogar.png");
    strcpy(btn_On,"GUIandHUD/Buttons/ru/woglow/ligado.png");
    strcpy(btn_Options,"GUIandHUD/Buttons/ru/woglow/opcoes.png");
    strcpy(btn_Exit,"GUIandHUD/Buttons/ru/woglow/sair.png");
    strcpy(btn_Back,"GUIandHUD/Buttons/ru/woglow/voltar.png");
    strcpy(btn_Continue,"GUIandHUD/Buttons/ru/woglow/continuar.png");
    strcpy(btn_Fullscreen,"GUIandHUD/Buttons/ru/woglow/fulsscreen.png");
    strcpy(btn_Defaults,"GUIandHUD/Buttons/ru/woglow/defaultsRusso.png");
    strcpy(btn_MapOptions,"GUIandHUD/Buttons/ru/woglow/mapoptionsRusso.png");
    strcpy(btn_example,"GUIandHUD/Buttons/ru/woglow/exemploRusso.png");
    strcpy(str_pressEnterToContinue,"Nazhmite knopku ENTER, chtoby nachat'");
    strcpy(str_howToPlay0,"Igra Instruktsii :");
    strcpy(str_howToPlay1,"  -Tsel' igra yavlyayetsya , chtoby vyigrat' voynu protiv yadernoy");
    strcpy(str_howToPlay2,"   kazhdaya strana , chtoby obespechit' sebya kak sverkhderzhava ,");
    strcpy(str_howToPlay3,"   ili prosto unichtozhit' vsyu zhizn' na zemle, vy vybirayete !!!");
    strcpy(str_howToPlay4,"	-V Khoda kazhdogo igroka , on mozhet khodit' i strelyat',");
    strcpy(str_howToPlay5,"	  udarit' i ubit' lidera vrazheskoy strany ,");
    strcpy(str_howToPlay6,"	  klyuch otobrazheniye :");
    strcpy(str_howToPlay7,"	-[WASD] , chtoby khodit' i prygat'");
    strcpy(str_howToPlay8,"	-[T] dlya pereklyucheniya mezhdu raketami i atomnymi bombami");
    strcpy(str_howToPlay9,"		(VNIMANIYE: summoy atomnykh bomb ogranicheno )");
    strcpy(str_howToPlay10,"	-[P], chtoby priostanovit'");
    strcpy(str_howToPlay11,"	-[R], chtoby perezapustit' igru");
    strcpy(str_howToPlay12,"	-Ispol'zuyte Mysh', chtoby pritselit'sya i levuyu knopku myshi , chtoby strelyat'");
    strcpy(str_howToPlay13,"	-Postoy Knopku myshi dlya regulirovki strenght vystrela v");
    strcpy(str_music,"Muzyka:");
    strcpy(str_wind,"veter:");
    strcpy(str_mapgen,"Generatsiya karty:");
    strcpy(str_difficulty,"Uroven' slozhnosti:");
    strcpy(str_lifeInitAmount,"Nachal'noye kolichestvo zhizney:");
    strcpy(str_bombInitAmount,"nachal'noye kolichestvo atomnykh bomb:");
    strcpy(str_sound,"zvuk:");
    strcpy(str_Language,"yazyk:");
    strcpy(str_pause,"priostanovlena");
    strcpy(str_RussiaWon,"Pobeda Rossii!");
    strcpy(str_BRWon,"Pobeda Brazilii");
    strcpy(str_USAWon,"Pobeda SSHA!");
    strcpy(str_IslamicWon,"Allahu Akbar!!!");
    strcpy(str_KoreaWon,"Pobeda Severnaya Koreya!");
    strcpy(str_Lifes,"zhivet:");
    strcpy(str_Projetile,"snaryad:");
    strcpy(str_AtomicBombs,"Atomnyye bomby:");
    strcpy(str_Strength,"sila:");
    strcpy(str_Angle,"Ugol:");
    strcpy(str_CheatOn,"obmanyval");
    strcpy(str_escape,"Vy khotite ostavit'?");
    strcpy(str_restart,"Vy khotite perezapustit'?");
    strcpy(str_resolution,"razresheniye:");
    strcpy(str_toReshape,"Chtoby izmenit' formu okna, pereydite v menyu optsiy");
    strcpy(str_gndPoints,"Kolichestvo opornykh tochek:");
    strcpy(str_varBtwPoints,"Raskhozhdeniye mezhdu tochki:");
    strcpy(str_minVarBtwPnts,"Minimal'naya raznitsa mezhdu tochki:");
    strcpy(str_varBtwMountains,"Raskhozhdeniye mezhdu Gora/yama tochki:");
    strcpy(str_mountainVsize,"Gora/yama vertikal'nyy razmer:");
    strcpy(str_mountainHsize,"Gora/yama gorizontal'nyy razmer:");
    strcpy(str_mountainChance,"Gora/yama shans:");
    strcpy(str_on,"soyedinennyy");
    strcpy(str_off,"ot");
    strcpy(str_ez,"legko");
    strcpy(str_normal,"normal'nyy");
    strcpy(str_hard,"trudno");
    strcpy(str_currentMap,"tekushchaya karta:");
  }else if(strEq(language,"hangug-ui")){
    strcpy(btn_1P,"GUIandHUD/Buttons/ko/woglow/1jogador.png");
    strcpy(btn_2P,"GUIandHUD/Buttons/ko/woglow/2jogadores.png");
    strcpy(btn_Off,"GUIandHUD/Buttons/ko/woglow/desligado.png");
    strcpy(btn_HowTo,"GUIandHUD/Buttons/ko/woglow/instrucoes.png");
    strcpy(btn_Play,"GUIandHUD/Buttons/ko/woglow/jogar.png");
    strcpy(btn_On,"GUIandHUD/Buttons/ko/woglow/ligado.png");
    strcpy(btn_Options,"GUIandHUD/Buttons/ko/woglow/opcoes.png");
    strcpy(btn_Exit,"GUIandHUD/Buttons/ko/woglow/sair.png");
    strcpy(btn_Back,"GUIandHUD/Buttons/ko/woglow/voltar.png");
    strcpy(btn_Continue,"GUIandHUD/Buttons/ko/woglow/continuar.png");
    strcpy(btn_Fullscreen,"GUIandHUD/Buttons/ko/woglow/fulsscreen.png");
    strcpy(btn_Defaults,"GUIandHUD/Buttons/ko/woglow/defaultsCoreano.png");
    strcpy(btn_MapOptions,"GUIandHUD/Buttons/ko/woglow/mapoptionsCoreano.png");
    strcpy(btn_example,"GUIandHUD/Buttons/ko/woglow/sample.png");
    strcpy(str_pressEnterToContinue,"leul nulleo sijaghabnida");
    strcpy(str_howToPlay0,"geim bangbeob :");
    strcpy(str_howToPlay1," -nyeon geim ui mogpyo e daehae haeg jeonjaeng-eul seungli haneun geos-ibnida");
    strcpy(str_howToPlay2,"   modeun gugga neun chogangdaegug eulo jasin-eul bojanghagi wihae animyeon ");
    strcpy(str_howToPlay3,"   geunyang jigu eissneun modeun saengmyeong-eul pagoehaneun , dangsin-eun seontaeg !");
    strcpy(str_howToPlay4,"	-gag peulleieoui teon -in , geugeos-eun dobolo chwal-yeonghal su issseubnida ,");
    strcpy(str_howToPlay5,"	  gong-gyeog gwa jeog-ui guggaui jidojaleul jug-il ,");
    strcpy(str_howToPlay6,"	  ki maeping eun da-eumgwa gatseubnida");
    strcpy(str_howToPlay7,"	-[WASD] neun dobolo idonghabnida");
    strcpy(str_howToPlay8,"	-[T] neun misailgwa wonja pogtan saie byeongyeong");
    strcpy(str_howToPlay9,"   ( JUUI : wonja pogtan ui aegsu ga jehandoebnida )");
    strcpy(str_howToPlay10,"  -[P] leul ilsi jungji");
    strcpy(str_howToPlay11,"	-[R] eun geim-eul dasi sijaghabnida");
    strcpy(str_howToPlay12,"	-chwal-yeong-eul mogpyolo mauseu oenjjog beoteun-eul -use");
    strcpy(str_howToPlay13,"	-syas ui strenght eul jojeong mauseu beoteun-eul kkwag jab-ala");
    strcpy(str_music,"eum-ag:");
    strcpy(str_wind,"balam:");
    strcpy(str_mapgen,"maeb saengseong:");
    strcpy(str_difficulty,"nan-ido:");
    strcpy(str_lifeInitAmount,"salm ui chogi lyang:");
    strcpy(str_bombInitAmount,"wonja pogtan ui chogi lyang:");
    strcpy(str_sound,"soli:");
    strcpy(str_Language,"eon-eo:");
    strcpy(str_pause,"ilsi jungji");
    strcpy(str_RussiaWon,"leosia eseo seungli!");
    strcpy(str_BRWon,"beulajil eseo seungli!");
    strcpy(str_USAWon,"migug-ui seungli!");
    strcpy(str_IslamicWon,"Allahu Akbar!!!");
    strcpy(str_KoreaWon,"bughan ui seungli!");
    strcpy(str_Lifes,"salm:");
    strcpy(str_Projetile,"balsa mul:");
    strcpy(str_AtomicBombs,"wonja pogtan:");
    strcpy(str_Strength,"him:");
    strcpy(str_Angle,"gagdo:");
    strcpy(str_CheatOn,"e bujeong haeng-wi");
    strcpy(str_escape,"dangsin-eun tteonago sip-eo?");
    strcpy(str_restart,"dangsin-eun dasi sijag hago sip-eo?");
    strcpy(str_resolution,"haegyeol:");
    strcpy(str_toReshape,"chang moyang-eul byeongyeong halyeomyeon obsyeon menyulo idong");
    strcpy(str_gndPoints,"jeobji pointeu ui su:");
    strcpy(str_varBtwPoints,"jeom saiui byeonhwa:");
    strcpy(str_minVarBtwPnts,"jeom saiui choeso byeonhwa:");
    strcpy(str_varBtwMountains,"san/piteu jijeom saiui byeonhwa:");
    strcpy(str_mountainVsize,"san/piteu selo keugi:");
    strcpy(str_mountainHsize,"san/piteu galo keugi:");
    strcpy(str_mountainChance,"san/piteu/Pit gihoe:");
    strcpy(str_on,"yeongyeol");
    strcpy(str_off,"tteol-eojyeoseo");
    strcpy(str_ez,"swibge");
    strcpy(str_normal,"pyojun");
    strcpy(str_hard,"eolyeoun");
    strcpy(str_currentMap,"hyeonjaejido:");
  }else{
    strcpy(btn_1P,"GUIandHUD/Buttons/ar/woglow/1jogador.png");
    strcpy(btn_2P,"GUIandHUD/Buttons/ar/woglow/2jogadores.png");
    strcpy(btn_Off,"GUIandHUD/Buttons/ar/woglow/desligado.png");
    strcpy(btn_HowTo,"GUIandHUD/Buttons/ar/woglow/instrucoes.png");
    strcpy(btn_Play,"GUIandHUD/Buttons/ar/woglow/jogar.png");
    strcpy(btn_On,"GUIandHUD/Buttons/ar/woglow/ligado.png");
    strcpy(btn_Options,"GUIandHUD/Buttons/ar/woglow/opcoes.png");
    strcpy(btn_Exit,"GUIandHUD/Buttons/ar/woglow/sair.png");
    strcpy(btn_Back,"GUIandHUD/Buttons/ar/woglow/voltar.png");
    strcpy(btn_Continue,"GUIandHUD/Buttons/ar/woglow/continuar.png");
    strcpy(btn_Fullscreen,"GUIandHUD/Buttons/ar/woglow/fulsscreen.png");
    strcpy(btn_Defaults,"GUIandHUD/Buttons/ar/woglow/defaultsArabe.png");
    strcpy(btn_MapOptions,"GUIandHUD/Buttons/ar/woglow/mapoptionsArabe.png");
    strcpy(btn_example,"GUIandHUD/Buttons/ar/woglow/exampleArabe.png");
    strcpy(str_pressEnterToContinue,"adght ENTER libad");
    strcpy(str_howToPlay0,"taelimat alllaebata:");
    strcpy(str_howToPlay1," -alhadaf -The allluebat hu alfawz fi harb nawawiat didd");
    strcpy(str_howToPlay2,"   kl balad , lidaman nafsak kaquwwat euzmaa ،");
    strcpy(str_howToPlay3,"   'aw limujrud tadmir jmye 'ashkal alhayat fi al'ard , yumkinuk aikhtiar !!!");
    strcpy(str_howToPlay4,"	-fy bidawrih kl laeib , ymkn 'an tamshi ​​watlaq alnnari,");
    strcpy(str_howToPlay5,"	  lidarb w qutil zaeim albilad aleaduww ،");
    strcpy(str_howToPlay6,"	  taeyin alrrayiysi hu :");
    strcpy(str_howToPlay7,"	-[WASD] ealaa almashi walqafz");
    strcpy(str_howToPlay8,"	-[T] litaghyir bayn alssawarikh walqanabil aldhdhrria");
    strcpy(str_howToPlay9,"   (TUNBIH : yaqtasir ammount alqanabil aldhdhrria )");
    strcpy(str_howToPlay10,"  -[P] 'iilaa waqfa");
    strcpy(str_howToPlay11,"	-[R] li'iieadat tashghil alllueba");
    strcpy(str_howToPlay12,"	-aistikhdam almawis lihadaf w alzzrr al'aysar li'iitlaq alnnar");
    strcpy(str_howToPlay13,"	-Hold ealaa zirr almawis l dabt satarinat alnnar fi");
    strcpy(str_music,"almusiqaa:");
    strcpy(str_wind,"alrriah:");
    strcpy(str_mapgen,"khritat jyl:");
    strcpy(str_difficulty,"alseubat:");
    strcpy(str_lifeInitAmount,"almablagh al'awwali min hayat:");
    strcpy(str_bombInitAmount,"almablagh al'awwali min alqanabil aldhdharit:");
    strcpy(str_sound,"sut:");
    strcpy(str_Language,"lghat:");
    strcpy(str_pause,"twaqaf");
    strcpy(str_RussiaWon,"aintisar rwsya!");
    strcpy(str_BRWon,"fuz albarazil!");
    strcpy(str_USAWon,"fwaz alwilayat almuttahidat!");
    strcpy(str_IslamicWon,"alllah 'akbr!!!");
    strcpy(str_KoreaWon,"fwaz kuria alshmaly!");
    strcpy(str_Lifes,"yeish:");
    strcpy(str_Projetile,"qdhifat:");
    strcpy(str_AtomicBombs,"qnabul dharit:");
    strcpy(str_Strength,"qut:");
    strcpy(str_Angle,"anjulu:");
    strcpy(str_CheatOn,"alghsh fy");
    strcpy(str_escape,"kunt 'urid 'an 'atruk?");
    strcpy(str_restart,"hal turid 'iieadat tashghil?");
    strcpy(str_resolution,"qarar:");
    strcpy(str_toReshape,"li'iieadat tashkil al'iitar, aintaqil 'iilaa qayimat alkhiarat");
    strcpy(str_gndPoints,"eadad niqat al'ardi:");
    strcpy(str_varBtwPoints,"alaikhtilaf bayn niqat:");
    strcpy(str_minVarBtwPnts,"tabayun alhadd al'adnaa bayn niqat:");
    strcpy(str_varBtwMountains,"alaikhtilaf bayn niqat aljabal/hufra:");
    strcpy(str_mountainVsize,"aljabal/hufra hajm aleumudi:");
    strcpy(str_mountainHsize,"aljabal/hufra hajm al'afaqi:");
    strcpy(str_mountainChance,"aljabal/hufra fursa:");
    strcpy(str_on,"muttasil");
    strcpy(str_off,"baeidanaan");
    strcpy(str_ez,"sahl");
    strcpy(str_normal,"tabiei");
    strcpy(str_hard,"saeb");
    strcpy(str_currentMap,"kharitat alhalia:");
  }
}
# 18 "JCEBA.LoadLibs.h" 2
# 1 "Libs/JCEBA.LoadFiles.h" 1
# 13 "Libs/JCEBA.LoadFiles.h"
GLuint tex_Splash[24],tex_Credits[66],tex_bixao,tex_Heart,tex_plusArrow,tex_minusArrow,tex_btn_defaults,tex_btn_mapconfigs;
GLuint tex_JCEBA,tex_mundiMap,tex_Joguinho,tex_MainMenu,tex_btn_1P,tex_btn_2P,tex_btn_Off,tex_btn_HowTo,tex_btn_Play,tex_btn_On,tex_btn_Options,tex_btn_Exit,tex_btn_Back;
GLuint tex_flagUSA,tex_flagBR,tex_flagKorea,tex_flagIsla,tex_flagRussia,tex_SubMenu0,tex_SubMenu1,tex_X,tex_texBR,tex_texRussia,tex_texIslamic,tex_texUSA,tex_texKorea,
       tex_backBR,tex_backKorea,tex_backRussia,tex_backUSA,tex_backIslamic,tex_btn_Continue,tex_flagRand,tex_btn_example;
GLuint tex_BRDie[6],tex_BRFall[2],tex_BRIdle[4],tex_BRShot[4],tex_BRWalk[6],tex_BRDamage[3],tex_BRTouchGround;
GLuint tex_USADie[6],tex_USAFall[2],tex_USAIdle[4],tex_USAShot[4],tex_USAWalk[6],tex_USADamage[3],tex_USATouchGround;
GLuint tex_IslamicDie[6],tex_IslamicFall[2],tex_IslamicIdle[4],tex_IslamicShot[4],tex_IslamicWalk[6],tex_IslamicDamage[3],tex_IslamicTouchGround;
GLuint tex_KoreaDie[6],tex_KoreaFall[2],tex_KoreaIdle[4],tex_KoreaShot[4],tex_KoreaWalk[6],tex_KoreaDamage[3],tex_KoreaTouchGround;
GLuint tex_RussiaDie[6],tex_RussiaFall[2],tex_RussiaIdle[4],tex_RussiaShot[4],tex_RussiaWalk[6],tex_RussiaDamage[3],tex_RussiaTouchGround;
GLuint tex_Smoke[5];
GLuint tex_BulletAtomic,tex_BulletRocket,tex_BulletDolly,tex_BulletBanana,tex_G,tex_Explosion1[24];

void loadButtons(){
  tex_btn_1P=SOIL_load_OGL_texture(newPath(btn_1P),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_btn_2P=SOIL_load_OGL_texture(newPath(btn_2P),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_btn_Off=SOIL_load_OGL_texture(newPath(btn_Off),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_btn_HowTo=SOIL_load_OGL_texture(newPath(btn_HowTo),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_btn_Play=SOIL_load_OGL_texture(newPath(btn_Play),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_btn_On=SOIL_load_OGL_texture(newPath(btn_On),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_btn_Options=SOIL_load_OGL_texture(newPath(btn_Options),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_btn_Exit=SOIL_load_OGL_texture(newPath(btn_Exit),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_btn_Back=SOIL_load_OGL_texture(newPath(btn_Back),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_btn_Continue=SOIL_load_OGL_texture(newPath(btn_Continue),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_btn_defaults=SOIL_load_OGL_texture(newPath(btn_Defaults),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_btn_mapconfigs=SOIL_load_OGL_texture(newPath(btn_MapOptions),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_btn_example=SOIL_load_OGL_texture(newPath(btn_example),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_RussiaTouchGround=SOIL_load_OGL_texture(newPath("Characters/Russia/fall/touchGround.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
}

void refreshLanguage(){
  strcpy(language,getLanguageStr(languageIdx));
        setStrings();loadButtons();createList();
}


void loadFiles(){
  filePath=(char*)malloc(1);

  for(int i=0;i<24;i++){
    getAnimatedFiles("Splash/corpLogo/",i,".png");
    tex_Splash[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  }
  tex_JCEBA=SOIL_load_OGL_texture(newPath("Splash/gameLogo/JCEBA3.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_Joguinho=SOIL_load_OGL_texture(newPath("Splash/gameLogo/JCEBA4.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_MainMenu=SOIL_load_OGL_texture(newPath("GUIandHUD/mainmenu.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);

  tex_mundiMap=SOIL_load_OGL_texture(newPath("Maps/worldMap.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);

  loadButtons();

  tex_flagRand=SOIL_load_OGL_texture(newPath("Maps/Flags/rand.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_flagUSA=SOIL_load_OGL_texture(newPath("Maps/Flags/usa.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_flagBR=SOIL_load_OGL_texture(newPath("Maps/Flags/brasil.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_flagKorea=SOIL_load_OGL_texture(newPath("Maps/Flags/coreia.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_flagIsla=SOIL_load_OGL_texture(newPath("Maps/Flags/islamico.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_flagRussia=SOIL_load_OGL_texture(newPath("Maps/Flags/russia.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_SubMenu0=SOIL_load_OGL_texture(newPath("GUIandHUD/submenu0.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_SubMenu1=SOIL_load_OGL_texture(newPath("GUIandHUD/submenu1.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_X=SOIL_load_OGL_texture(newPath("GUIandHUD/X.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_G=SOIL_load_OGL_texture(newPath("GUIandHUD/G.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_Heart=SOIL_load_OGL_texture(newPath("GUIandHUD/heart.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);

  tex_plusArrow=SOIL_load_OGL_texture(newPath("GUIandHUD/arrowMinus.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_minusArrow=SOIL_load_OGL_texture(newPath("GUIandHUD/arrowPlus.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_bixao=SOIL_load_OGL_texture(newPath("Splash/credits/bixhao.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);

  tex_texBR=SOIL_load_OGL_texture(newPath("Maps/Textures/brasil.jpg"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_texRussia=SOIL_load_OGL_texture(newPath("Maps/Textures/russia.jpg"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_texIslamic=SOIL_load_OGL_texture(newPath("Maps/Textures/islamico.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_texUSA=SOIL_load_OGL_texture(newPath("Maps/Textures/usa.jpg"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_texKorea=SOIL_load_OGL_texture(newPath("Maps/Textures/coreia.jpg"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_backBR=SOIL_load_OGL_texture(newPath("Maps/stageBrasil.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_backKorea=SOIL_load_OGL_texture(newPath("Maps/stageCoreia.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_backRussia=SOIL_load_OGL_texture(newPath("Maps/stageRussia.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_backUSA=SOIL_load_OGL_texture(newPath("Maps/stageUSA.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_backIslamic=SOIL_load_OGL_texture(newPath("Maps/stageIslamico.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);

  for(int i=0;i<3;i++){
    getAnimatedFiles("Characters/BR/damage/",i,".png");
    tex_BRDamage[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/USA/damage/",i,".png");
    tex_USADamage[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/Korea/damage/",i,".png");
    tex_KoreaDamage[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/Russia/damage/",i,".png");
    tex_RussiaDamage[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/Islamic/damage/",i,".png");
    tex_IslamicDamage[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  }
  for(int i=0;i<6;i++){
    getAnimatedFiles("Characters/BR/die/",i,".png");
    tex_BRDie[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/USA/die/",i,".png");
    tex_USADie[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/Islamic/die/",i,".png");
    tex_IslamicDie[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/Korea/die/",i,".png");
    tex_KoreaDie[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/Russia/die/",i,".png");
    tex_RussiaDie[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  }
  for(int i=0;i<2;i++){
    getAnimatedFiles("Characters/BR/fall/",i,".png");
    tex_BRFall[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/USA/fall/",i,".png");
    tex_USAFall[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/Islamic/fall/",i,".png");
    tex_IslamicFall[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/Korea/fall/",i,".png");
    tex_KoreaFall[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/Russia/fall/",i,".png");
    tex_RussiaFall[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  }
  for(int i=0;i<4;i++){
    getAnimatedFiles("Characters/BR/idle/",i,".png");
    tex_BRIdle[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/USA/idle/",i,".png");
    tex_USAIdle[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/Islamic/idle/",i,".png");
    tex_IslamicIdle[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/Korea/idle/",i,".png");
    tex_KoreaIdle[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/Russia/idle/",i,".png");
    tex_RussiaIdle[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  }
  for(int i=0;i<4;i++){
    getAnimatedFiles("Characters/BR/shot/",i,".png");
    tex_BRShot[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/USA/shot/",i,".png");
    tex_USAShot[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/Islamic/shot/",i,".png");
    tex_IslamicShot[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/Korea/shot/",i,".png");
    tex_KoreaShot[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/Russia/shot/",i,".png");
    tex_RussiaShot[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  }
  for(int i=0;i<6;i++){
    getAnimatedFiles("Characters/BR/walk/",i,".png");
    tex_BRWalk[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/USA/walk/",i,".png");
    tex_USAWalk[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/Islamic/walk/",i,".png");
    tex_IslamicWalk[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/Korea/walk/",i,".png");
    tex_KoreaWalk[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
    getAnimatedFiles("Characters/Russia/walk/",i,".png");
    tex_RussiaWalk[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  }

  for(int i=0;i<5;i++){
    getAnimatedFiles("Particles/missileSmoke/",i,".png");
    tex_Smoke[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  }

  for(int i=0;i<24;i++){
    getAnimatedFiles("Particles/explosion0/",i,".png");
    tex_Explosion1[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  }

  tex_BulletAtomic=SOIL_load_OGL_texture(newPath("Characters/Ammo/atomic1.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_BulletRocket=SOIL_load_OGL_texture(newPath("Characters/Ammo/missile1.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_BulletDolly=SOIL_load_OGL_texture(newPath("Characters/Ammo/dolly.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_BulletBanana=SOIL_load_OGL_texture(newPath("Characters/Ammo/banana.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);

  tex_BRTouchGround=SOIL_load_OGL_texture(newPath("Characters/BR/fall/touchGround.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_USATouchGround=SOIL_load_OGL_texture(newPath("Characters/USA/fall/touchGround.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_IslamicTouchGround=SOIL_load_OGL_texture(newPath("Characters/Islamic/fall/touchGround.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  tex_KoreaTouchGround=SOIL_load_OGL_texture(newPath("Characters/Korea/fall/touchGround.png"),SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);

  loadSound("Sounds/Splash/zuimarcoiris.wav",1.5,
# 183 "Libs/JCEBA.LoadFiles.h" 3 4
                                                0
# 183 "Libs/JCEBA.LoadFiles.h"
                                                        );
  loadSound("Sounds/Splash/zuim.wav",1.5,
# 184 "Libs/JCEBA.LoadFiles.h" 3 4
                                        0
# 184 "Libs/JCEBA.LoadFiles.h"
                                                );
  loadSound("Sounds/Splash/plim.wav",1,
# 185 "Libs/JCEBA.LoadFiles.h" 3 4
                                      0
# 185 "Libs/JCEBA.LoadFiles.h"
                                              );
  loadSound("Sounds/Music/Menu/2001.wav",1,
# 186 "Libs/JCEBA.LoadFiles.h" 3 4
                                          1
# 186 "Libs/JCEBA.LoadFiles.h"
                                                 );
  loadSound("Sounds/click.wav",1.1,
# 187 "Libs/JCEBA.LoadFiles.h" 3 4
                                  0
# 187 "Libs/JCEBA.LoadFiles.h"
                                          );
  loadSound("Sounds/Music/Stage/brasilSOUND.wav",0.42,
# 188 "Libs/JCEBA.LoadFiles.h" 3 4
                                                     1
# 188 "Libs/JCEBA.LoadFiles.h"
                                                            );
  loadSound("Sounds/Music/Stage/islamicSOUND.wav",0.5,
# 189 "Libs/JCEBA.LoadFiles.h" 3 4
                                                     1
# 189 "Libs/JCEBA.LoadFiles.h"
                                                            );
  loadSound("Sounds/Music/Stage/koreaSOUND.wav",0.5,
# 190 "Libs/JCEBA.LoadFiles.h" 3 4
                                                   1
# 190 "Libs/JCEBA.LoadFiles.h"
                                                          );
  loadSound("Sounds/Music/Stage/russiaSOUND.wav",0.5,
# 191 "Libs/JCEBA.LoadFiles.h" 3 4
                                                    1
# 191 "Libs/JCEBA.LoadFiles.h"
                                                           );
  loadSound("Sounds/Music/Stage/usaSOUND.wav",0.5,
# 192 "Libs/JCEBA.LoadFiles.h" 3 4
                                                 1
# 192 "Libs/JCEBA.LoadFiles.h"
                                                        );
  loadSound("Sounds/Char/damage1.wav",1.2,
# 193 "Libs/JCEBA.LoadFiles.h" 3 4
                                         0
# 193 "Libs/JCEBA.LoadFiles.h"
                                                 );
  loadSound("Sounds/Char/damage2.wav",1.2,
# 194 "Libs/JCEBA.LoadFiles.h" 3 4
                                         0
# 194 "Libs/JCEBA.LoadFiles.h"
                                                 );
  loadSound("Sounds/Char/die.wav",2.5,
# 195 "Libs/JCEBA.LoadFiles.h" 3 4
                                     0
# 195 "Libs/JCEBA.LoadFiles.h"
                                             );
  loadSound("Sounds/Char/die2.wav",2.5,
# 196 "Libs/JCEBA.LoadFiles.h" 3 4
                                      0
# 196 "Libs/JCEBA.LoadFiles.h"
                                              );
  loadSound("Sounds/Wind/vento1.wav",1,
# 197 "Libs/JCEBA.LoadFiles.h" 3 4
                                      1
# 197 "Libs/JCEBA.LoadFiles.h"
                                             );
  loadSound("Sounds/Wind/vento2.wav",1,
# 198 "Libs/JCEBA.LoadFiles.h" 3 4
                                      1
# 198 "Libs/JCEBA.LoadFiles.h"
                                             );
  loadSound("Sounds/Wind/vento3.wav",1,
# 199 "Libs/JCEBA.LoadFiles.h" 3 4
                                      1
# 199 "Libs/JCEBA.LoadFiles.h"
                                             );
  loadSound("Sounds/Weapons/atomicComplete.wav",1.2,
# 200 "Libs/JCEBA.LoadFiles.h" 3 4
                                                   0
# 200 "Libs/JCEBA.LoadFiles.h"
                                                           );
  loadSound("Sounds/Weapons/atomicExplosion.wav",2,
# 201 "Libs/JCEBA.LoadFiles.h" 3 4
                                                  0
# 201 "Libs/JCEBA.LoadFiles.h"
                                                          );
  loadSound("Sounds/Weapons/atomicShot.wav",1.3,
# 202 "Libs/JCEBA.LoadFiles.h" 3 4
                                               0
# 202 "Libs/JCEBA.LoadFiles.h"
                                                       );
  loadSound("Sounds/Weapons/explosion.wav",2.5,
# 203 "Libs/JCEBA.LoadFiles.h" 3 4
                                              0
# 203 "Libs/JCEBA.LoadFiles.h"
                                                      );
  loadSound("Sounds/Weapons/shot.wav",1.3,
# 204 "Libs/JCEBA.LoadFiles.h" 3 4
                                         0
# 204 "Libs/JCEBA.LoadFiles.h"
                                                 );
  loadSound("Sounds/parabains.wav",1.3,
# 205 "Libs/JCEBA.LoadFiles.h" 3 4
                                      1
# 205 "Libs/JCEBA.LoadFiles.h"
                                             );

  for(int i=0;i<66;i++){
    getAnimatedFiles("Splash/credits/",i,".png");
    tex_Credits[i]=SOIL_load_OGL_texture(filePath,SOIL_LOAD_AUTO,SOIL_CREATE_NEW_ID,SOIL_FLAG_INVERT_Y);
  }
  filePath=(char*)realloc(filePath,1);
}
# 19 "JCEBA.LoadLibs.h" 2
# 1 "Libs/JCEBA.Lists.h" 1

int title,subtitle,playIcon,optionsIcon,howtoIcon,
    quitIcon,fullscreenFront,optionsMenu,backButton,instructionsMenu,
    onePlayerButton,mapMenu,twoPlayersButton,Background,Smoke,G1,G2,WhoWon,continueIcon,parabol,heart,showBullet,scenarioExplode,Example;

int flagBR,flagUSA,flagIsla,flagKorea,flagRand,flagRussia,btnPlay2,MAP,flagXes,P1,P2,Bullet,showStrength,restore,mapConfigs;

Rectangle pos_global,pos_btnBack,pos_flagBR,pos_flagUSA,pos_flagIslamic,pos_flagKorea,pos_flagRussia,pos_title,
          pos_subtitle,pos_btnPlay,pos_btnOptions,pos_btnHowTo,pos_btnQuit,pos_btn1P,pos_btn2P,
          pos_Splash,pos_btnPlay2,pos_G1,pos_G2, pos_standartHeart,pos_ShowBullet,pos_showStrength,pos_flagRand;

Point pos_music, pos_wind,pos_mapgen,pos_difficulty,pos_lifeInitAmount,pos_bombInitAmount, pos_instructions,
      pos_pressEnterToContinue,pos_sound,pos_language,pos_WhoWon,pos_life,pos_player,pos_cheat,pos_angle,pos_VARangle,
      pos_strength,pos_resolution,pos_FPS,pos_bombs,pos_VARbombs,pos_projetile,pos_wind2,pos_VARwind,pos_currentMap;

void defineCords(){
  mapPoints=(Point*)malloc(1*sizeof(Point));
  pos_global.p0.x=-currentWidth/2;pos_global.p0.y=-currentHeight/2;
  pos_global.p1.x=currentWidth/2;pos_global.p1.y=currentHeight/2;
  pos_btnBack.p0.x=-350;pos_btnBack.p0.y=-250;pos_btnBack.p1.x=-230;pos_btnBack.p1.y=-220;
  pos_flagBR.p0.x=-180;pos_flagBR.p0.y=-160;pos_flagBR.p1.x=-80;pos_flagBR.p1.y=-90;
  pos_flagUSA.p0.x=-270;pos_flagUSA.p0.y=45;pos_flagUSA.p1.x=-170;pos_flagUSA.p1.y=115;
  pos_flagIslamic.p0.x=20;pos_flagIslamic.p0.y=-50;pos_flagIslamic.p1.x=120;pos_flagIslamic.p1.y=30;
  pos_flagKorea.p0.x=230;pos_flagKorea.p0.y=20;pos_flagKorea.p1.x=330;pos_flagKorea.p1.y=90;
  pos_flagRussia.p0.x=160;pos_flagRussia.p0.y=150;pos_flagRussia.p1.x=260;pos_flagRussia.p1.y=220;
  pos_flagRand.p0.x=220;pos_flagRand.p0.y=-180;pos_flagRand.p1.x=300;pos_flagRand.p1.y=-130;

  pos_standartHeart.p0.x=-150;pos_standartHeart.p0.y=266;pos_standartHeart.p1.x=pos_standartHeart.p0.x+20;pos_standartHeart.p1.y=pos_standartHeart.p0.y+20;
  pos_ShowBullet.p0.x=300;pos_ShowBullet.p0.y=-280;pos_ShowBullet.p1.x=pos_ShowBullet.p0.x+55;pos_ShowBullet.p1.y=pos_ShowBullet.p0.y+40;

  pos_title.p0.x=-400;pos_title.p0.y=0;pos_title.p1.x=400;pos_title.p1.y=250;
  pos_subtitle.p0.x=-350;pos_subtitle.p0.y=-100;pos_subtitle.p1.x=350;pos_subtitle.p1.y=20;
  pos_G1.p0.x=-200;pos_G1.p0.y=0;pos_G1.p1.x=0;pos_G1.p1.y=200;
  pos_G2.p0.x=0;pos_G2.p0.y=0;pos_G2.p1.x=200;pos_G2.p1.y=200;

  pos_btnPlay.p0.x=-50;pos_btnPlay.p0.y=-160;pos_btnPlay.p1.x=50;pos_btnPlay.p1.y=-130;
  pos_btnPlay2.p0.x=230;pos_btnPlay2.p0.y=-250;pos_btnPlay2.p1.x=350;pos_btnPlay2.p1.y=-220;
  pos_btnOptions.p0.x=-60;pos_btnOptions.p0.y=-200;pos_btnOptions.p1.x=60;pos_btnOptions.p1.y=-170;
  pos_btnHowTo.p0.x=-70;pos_btnHowTo.p0.y=-240;pos_btnHowTo.p1.x=70;pos_btnHowTo.p1.y=-210;
  pos_btnQuit.p0.x=-40;pos_btnQuit.p0.y=-280;pos_btnQuit.p1.x=40;pos_btnQuit.p1.y=-250;

  pos_btn1P.p0.x=-80;pos_btn1P.p0.y=-160;pos_btn1P.p1.x=80;pos_btn1P.p1.y=-130;
  pos_btn2P.p0.x=-80;pos_btn2P.p0.y=-200;pos_btn2P.p1.x=80;pos_btn2P.p1.y=-170;

  pos_showStrength.p0.x=-150;pos_showStrength.p0.y=-280;pos_showStrength.p1.x=pos_showStrength.p0.x+140;pos_showStrength.p1.y=pos_showStrength.p0.y+35;

  pos_FPS.x=-350;pos_FPS.y=-170;
  pos_resolution.x=-350;pos_resolution.y=190;
    pos_music.x=-350;pos_music.y=150;
    pos_sound.x=-350;pos_sound.y=110;
    pos_wind.x=-350;pos_wind.y=70;
    pos_difficulty.x=-350;pos_difficulty.y=30;
    pos_lifeInitAmount.x=-350;pos_lifeInitAmount.y=-10;
    pos_bombInitAmount.x=-350;pos_bombInitAmount.y=-50;
    pos_mapgen.x=-350;pos_mapgen.y=-90;
    pos_language.x=-350;pos_language.y=-130;
  pos_WhoWon.x=-43;pos_WhoWon.y=-30;

  pos_life.x=-200;pos_life.y=270;
  pos_player.x=-350;pos_player.y=270;
  pos_cheat.x=240;pos_cheat.y=270;
  pos_wind2.x=145;pos_wind2.y=270;
  pos_VARwind.x=205;pos_VARwind.y=270;
  pos_angle.x=-380;pos_angle.y=-270;
  pos_strength.x=-235;pos_strength.y=-270;
  pos_bombs.x=0;pos_bombs.y=-270;
  pos_projetile.x=200;pos_projetile.y=-270;

  pos_VARangle.x=-310;pos_VARangle.y=-270;
  pos_VARbombs.x=150;pos_VARbombs.y=-270;

  pos_instructions.x=-350;pos_instructions.y=150;
  pos_pressEnterToContinue.x=-115;pos_pressEnterToContinue.y=-200;
}

void createList()
{
    Background=glGenLists(1);
    title=glGenLists(1);
    subtitle=glGenLists(1);
    playIcon=glGenLists(1);
    optionsIcon=glGenLists(1);
    howtoIcon=glGenLists(1);
    quitIcon=glGenLists(1);
    optionsMenu=glGenLists(10);
    backButton=glGenLists(1);
    instructionsMenu=glGenLists(14);
    onePlayerButton=glGenLists(1);
    twoPlayersButton=glGenLists(1);
    flagBR=glGenLists(1);
    flagUSA=glGenLists(1);
    flagIsla=glGenLists(1);
    flagKorea=glGenLists(1);
    flagRussia=glGenLists(1);
    flagRand=glGenLists(1);
    btnPlay2=glGenLists(1);
    MAP=glGenLists(1);
    flagXes=glGenLists(1);
    P1=glGenLists(1);
    P2=glGenLists(1);
    Bullet=glGenLists(1);
    Smoke=glGenLists(1);
    G1=glGenLists(1);
    G2=glGenLists(1);
    WhoWon=glGenLists(1);
    continueIcon=glGenLists(1);
    parabol=glGenLists(1);
    heart=glGenLists(1);
    showBullet=glGenLists(1);
    showStrength=glGenLists(1);
    scenarioExplode=glGenLists(1);
    mapMenu=glGenLists(8);
    restore=glGenLists(1);
    mapConfigs=glGenLists(1);
    Example=glGenLists(1);

    glNewList(mapMenu,
# 117 "Libs/JCEBA.Lists.h" 3 4
                     0x1300
# 117 "Libs/JCEBA.Lists.h"
                               );
      drawText(
# 118 "Libs/JCEBA.Lists.h" 3 4
              ((void *)0x0008)
# 118 "Libs/JCEBA.Lists.h"
                                      ,str_currentMap,pos_resolution,1);
        drawText(
# 119 "Libs/JCEBA.Lists.h" 3 4
                ((void *)0x0008)
# 119 "Libs/JCEBA.Lists.h"
                                        ,str_gndPoints,pos_music,1);
        drawText(
# 120 "Libs/JCEBA.Lists.h" 3 4
                ((void *)0x0008)
# 120 "Libs/JCEBA.Lists.h"
                                        ,str_varBtwPoints,pos_sound,1);
        drawText(
# 121 "Libs/JCEBA.Lists.h" 3 4
                ((void *)0x0008)
# 121 "Libs/JCEBA.Lists.h"
                                        ,str_minVarBtwPnts,pos_wind,1);
        drawText(
# 122 "Libs/JCEBA.Lists.h" 3 4
                ((void *)0x0008)
# 122 "Libs/JCEBA.Lists.h"
                                        ,str_varBtwMountains,pos_difficulty,1);
        drawText(
# 123 "Libs/JCEBA.Lists.h" 3 4
                ((void *)0x0008)
# 123 "Libs/JCEBA.Lists.h"
                                        ,str_mountainVsize,pos_lifeInitAmount,1);
        drawText(
# 124 "Libs/JCEBA.Lists.h" 3 4
                ((void *)0x0008)
# 124 "Libs/JCEBA.Lists.h"
                                        ,str_mountainHsize,pos_bombInitAmount,1);
        drawText(
# 125 "Libs/JCEBA.Lists.h" 3 4
                ((void *)0x0008)
# 125 "Libs/JCEBA.Lists.h"
                                        ,str_mountainChance,pos_mapgen,1);
    glEndList();

    glNewList(restore,
# 128 "Libs/JCEBA.Lists.h" 3 4
                     0x1300
# 128 "Libs/JCEBA.Lists.h"
                               );
        drawTexture(pos_btnPlay2,1,tex_btn_defaults,1);glEndList();
    glNewList(Example,
# 130 "Libs/JCEBA.Lists.h" 3 4
                     0x1300
# 130 "Libs/JCEBA.Lists.h"
                               );
        drawTexture(pos_btnPlay2,1,tex_btn_example,1);glEndList();

    glNewList(mapConfigs,
# 133 "Libs/JCEBA.Lists.h" 3 4
                        0x1300
# 133 "Libs/JCEBA.Lists.h"
                                  );
        drawTexture(pos_btnQuit,0.99,tex_btn_mapconfigs,1);glEndList();
    glNewList(backButton,
# 135 "Libs/JCEBA.Lists.h" 3 4
                        0x1300
# 135 "Libs/JCEBA.Lists.h"
                                  );
        drawTexture(pos_btnBack,0.99,tex_btn_Back,1);glEndList();
        glNewList(flagRand,
# 137 "Libs/JCEBA.Lists.h" 3 4
                          0x1300
# 137 "Libs/JCEBA.Lists.h"
                                    );
          drawTexture(pos_flagRand,0.4,tex_flagRand,1);glEndList();
        glNewList(flagBR,
# 139 "Libs/JCEBA.Lists.h" 3 4
                        0x1300
# 139 "Libs/JCEBA.Lists.h"
                                  );
          drawTexture(pos_flagBR,0.4,tex_flagBR,1);glEndList();
        glNewList(flagUSA,
# 141 "Libs/JCEBA.Lists.h" 3 4
                         0x1300
# 141 "Libs/JCEBA.Lists.h"
                                   );
            drawTexture(pos_flagUSA,0.4,tex_flagUSA,1);glEndList();
        glNewList(flagIsla,
# 143 "Libs/JCEBA.Lists.h" 3 4
                          0x1300
# 143 "Libs/JCEBA.Lists.h"
                                    );
            drawTexture(pos_flagIslamic,0.4,tex_flagIsla,1);glEndList();
        glNewList(flagKorea,
# 145 "Libs/JCEBA.Lists.h" 3 4
                           0x1300
# 145 "Libs/JCEBA.Lists.h"
                                     );
            drawTexture(pos_flagKorea,0.4,tex_flagKorea,1);glEndList();
        glNewList(flagRussia,
# 147 "Libs/JCEBA.Lists.h" 3 4
                            0x1300
# 147 "Libs/JCEBA.Lists.h"
                                      );
            drawTexture(pos_flagRussia,0.4,tex_flagRussia,1);glEndList();
        glNewList(G1,
# 149 "Libs/JCEBA.Lists.h" 3 4
                    0x1300
# 149 "Libs/JCEBA.Lists.h"
                              );
            drawTexture(pos_G1,1,tex_G,1);glEndList();
        glNewList(G2,
# 151 "Libs/JCEBA.Lists.h" 3 4
                    0x1300
# 151 "Libs/JCEBA.Lists.h"
                              );
            drawTexture(pos_G2,1,tex_G,1);glEndList();
        glNewList(continueIcon,
# 153 "Libs/JCEBA.Lists.h" 3 4
                              0x1300
# 153 "Libs/JCEBA.Lists.h"
                                        );
            drawTexture(pos_btnPlay2,0.99,tex_btn_Continue,1);glEndList();
        glNewList(title,
# 155 "Libs/JCEBA.Lists.h" 3 4
                       0x1300
# 155 "Libs/JCEBA.Lists.h"
                                 );
            drawTexture(pos_title,0,tex_JCEBA,1);glEndList();
    glNewList(subtitle,
# 157 "Libs/JCEBA.Lists.h" 3 4
                      0x1300
# 157 "Libs/JCEBA.Lists.h"
                                );
        drawTexture(pos_subtitle,0.1,tex_Joguinho,1);glEndList();

        glNewList(playIcon,
# 160 "Libs/JCEBA.Lists.h" 3 4
                          0x1300
# 160 "Libs/JCEBA.Lists.h"
                                    );
            drawTexture(pos_btnPlay,0.5,tex_btn_Play,1);glEndList();
            glNewList(btnPlay2,
# 162 "Libs/JCEBA.Lists.h" 3 4
                              0x1300
# 162 "Libs/JCEBA.Lists.h"
                                        );
                drawTexture(pos_btnPlay2,1,tex_btn_Play,1);glEndList();
    glNewList(optionsIcon,
# 164 "Libs/JCEBA.Lists.h" 3 4
                         0x1300
# 164 "Libs/JCEBA.Lists.h"
                                   );
        drawTexture(pos_btnOptions,0.5,tex_btn_Options,1);glEndList();
    glNewList(howtoIcon,
# 166 "Libs/JCEBA.Lists.h" 3 4
                       0x1300
# 166 "Libs/JCEBA.Lists.h"
                                 );
        drawTexture(pos_btnHowTo,0.5,tex_btn_HowTo,1);glEndList();
    glNewList(quitIcon,
# 168 "Libs/JCEBA.Lists.h" 3 4
                      0x1300
# 168 "Libs/JCEBA.Lists.h"
                                );
        drawTexture(pos_btnQuit,0.99,tex_btn_Exit,1);glEndList();

    glNewList(optionsMenu,
# 171 "Libs/JCEBA.Lists.h" 3 4
                         0x1300
# 171 "Libs/JCEBA.Lists.h"
                                   );
        drawText(
# 172 "Libs/JCEBA.Lists.h" 3 4
                ((void *)0x0008)
# 172 "Libs/JCEBA.Lists.h"
                                        ,"FPS:",pos_FPS,0.4);
        drawText(
# 173 "Libs/JCEBA.Lists.h" 3 4
                ((void *)0x0008)
# 173 "Libs/JCEBA.Lists.h"
                                        ,str_resolution,pos_resolution,0.4);
        drawText(
# 174 "Libs/JCEBA.Lists.h" 3 4
                ((void *)0x0008)
# 174 "Libs/JCEBA.Lists.h"
                                        ,str_music,pos_music,0.4);
        drawText(
# 175 "Libs/JCEBA.Lists.h" 3 4
                ((void *)0x0008)
# 175 "Libs/JCEBA.Lists.h"
                                        ,str_wind,pos_wind,0.4);
        drawText(
# 176 "Libs/JCEBA.Lists.h" 3 4
                ((void *)0x0008)
# 176 "Libs/JCEBA.Lists.h"
                                        ,str_mapgen,pos_mapgen,0.4);
        drawText(
# 177 "Libs/JCEBA.Lists.h" 3 4
                ((void *)0x0008)
# 177 "Libs/JCEBA.Lists.h"
                                        ,str_difficulty,pos_difficulty,0.4);
        drawText(
# 178 "Libs/JCEBA.Lists.h" 3 4
                ((void *)0x0008)
# 178 "Libs/JCEBA.Lists.h"
                                        ,str_lifeInitAmount,pos_lifeInitAmount,0.4);
        drawText(
# 179 "Libs/JCEBA.Lists.h" 3 4
                ((void *)0x0008)
# 179 "Libs/JCEBA.Lists.h"
                                        ,str_bombInitAmount,pos_bombInitAmount,0.4);
        drawText(
# 180 "Libs/JCEBA.Lists.h" 3 4
                ((void *)0x0008)
# 180 "Libs/JCEBA.Lists.h"
                                        ,str_sound,pos_sound,0.4);
        drawText(
# 181 "Libs/JCEBA.Lists.h" 3 4
                ((void *)0x0008)
# 181 "Libs/JCEBA.Lists.h"
                                        ,str_Language,pos_language,0.4);
    glEndList();

    glNewList(instructionsMenu,
# 184 "Libs/JCEBA.Lists.h" 3 4
                              0x1300
# 184 "Libs/JCEBA.Lists.h"
                                        );
      pos_instructions.y=200;
      drawText(
# 186 "Libs/JCEBA.Lists.h" 3 4
              ((void *)0x0008)
# 186 "Libs/JCEBA.Lists.h"
                                      ,str_howToPlay0,pos_instructions,0.4);pos_instructions.y-=40;
      drawText(
# 187 "Libs/JCEBA.Lists.h" 3 4
              ((void *)0x0008)
# 187 "Libs/JCEBA.Lists.h"
                                      ,str_howToPlay1,pos_instructions,0.4);pos_instructions.y-=20;
      drawText(
# 188 "Libs/JCEBA.Lists.h" 3 4
              ((void *)0x0008)
# 188 "Libs/JCEBA.Lists.h"
                                      ,str_howToPlay2,pos_instructions,0.4);pos_instructions.y-=20;
      drawText(
# 189 "Libs/JCEBA.Lists.h" 3 4
              ((void *)0x0008)
# 189 "Libs/JCEBA.Lists.h"
                                      ,str_howToPlay3,pos_instructions,0.4);pos_instructions.y-=40;
      drawText(
# 190 "Libs/JCEBA.Lists.h" 3 4
              ((void *)0x0008)
# 190 "Libs/JCEBA.Lists.h"
                                      ,str_howToPlay4,pos_instructions,0.4);pos_instructions.y-=20;
      drawText(
# 191 "Libs/JCEBA.Lists.h" 3 4
              ((void *)0x0008)
# 191 "Libs/JCEBA.Lists.h"
                                      ,str_howToPlay5,pos_instructions,0.4);pos_instructions.y-=20;
      drawText(
# 192 "Libs/JCEBA.Lists.h" 3 4
              ((void *)0x0008)
# 192 "Libs/JCEBA.Lists.h"
                                      ,str_howToPlay6,pos_instructions,0.4);pos_instructions.y-=40;
      drawText(
# 193 "Libs/JCEBA.Lists.h" 3 4
              ((void *)0x0008)
# 193 "Libs/JCEBA.Lists.h"
                                      ,str_howToPlay7,pos_instructions,0.4);pos_instructions.y-=20;
      drawText(
# 194 "Libs/JCEBA.Lists.h" 3 4
              ((void *)0x0008)
# 194 "Libs/JCEBA.Lists.h"
                                      ,str_howToPlay8,pos_instructions,0.4);pos_instructions.y-=20;
      drawText(
# 195 "Libs/JCEBA.Lists.h" 3 4
              ((void *)0x0008)
# 195 "Libs/JCEBA.Lists.h"
                                      ,str_howToPlay9,pos_instructions,0.4);pos_instructions.y-=20;
      drawText(
# 196 "Libs/JCEBA.Lists.h" 3 4
              ((void *)0x0008)
# 196 "Libs/JCEBA.Lists.h"
                                      ,str_howToPlay10,pos_instructions,0.4);pos_instructions.y-=20;
      drawText(
# 197 "Libs/JCEBA.Lists.h" 3 4
              ((void *)0x0008)
# 197 "Libs/JCEBA.Lists.h"
                                      ,str_howToPlay11,pos_instructions,0.4);pos_instructions.y-=20;
      drawText(
# 198 "Libs/JCEBA.Lists.h" 3 4
              ((void *)0x0008)
# 198 "Libs/JCEBA.Lists.h"
                                      ,str_howToPlay12,pos_instructions,0.4);pos_instructions.y-=20;
      drawText(
# 199 "Libs/JCEBA.Lists.h" 3 4
              ((void *)0x0008)
# 199 "Libs/JCEBA.Lists.h"
                                      ,str_howToPlay13,pos_instructions,0.4);
    glEndList();

    glNewList(onePlayerButton,
# 202 "Libs/JCEBA.Lists.h" 3 4
                             0x1300
# 202 "Libs/JCEBA.Lists.h"
                                       );
        drawTexture(pos_btn1P,0.5,tex_btn_1P,1);glEndList();
    glNewList(twoPlayersButton,
# 204 "Libs/JCEBA.Lists.h" 3 4
                              0x1300
# 204 "Libs/JCEBA.Lists.h"
                                        );
        drawTexture(pos_btn2P,0.5,tex_btn_2P,1);glEndList();
}

void refreshFlagXes(Rectangle pos){
  glNewList(flagXes,
# 209 "Libs/JCEBA.Lists.h" 3 4
                   0x1301
# 209 "Libs/JCEBA.Lists.h"
                                         );
    drawTexture(pos,0.5,tex_X,1);glEndList();
}

void refreshP1(Rectangle pos, GLuint tex, int orientation){
  glNewList(P1,
# 214 "Libs/JCEBA.Lists.h" 3 4
              0x1301
# 214 "Libs/JCEBA.Lists.h"
                                    );
    drawTexture(pos,0.52,tex,orientation);glEndList();
}

void refreshP2(Rectangle pos, GLuint tex, int orientation){
  glNewList(P2,
# 219 "Libs/JCEBA.Lists.h" 3 4
              0x1301
# 219 "Libs/JCEBA.Lists.h"
                                    );
    drawTexture(pos,0.52,tex,orientation);glEndList();
}

void refreshSmoke(Rectangle pos, GLuint tex, int ori){
  glNewList(Smoke,
# 224 "Libs/JCEBA.Lists.h" 3 4
                 0x1301
# 224 "Libs/JCEBA.Lists.h"
                                       );
    drawTexture(pos,0.441,tex,ori);glEndList();
}

void refreshWhoWon(char* str){
  glNewList(WhoWon,
# 229 "Libs/JCEBA.Lists.h" 3 4
                  0x1301
# 229 "Libs/JCEBA.Lists.h"
                                        );
      drawText(
# 230 "Libs/JCEBA.Lists.h" 3 4
              ((void *)0x0008)
# 230 "Libs/JCEBA.Lists.h"
                                      ,str,pos_WhoWon,1);
  glEndList();
}

void refreshBullet(Rectangle pos, GLuint tex, int orientation){
  glNewList(Bullet,
# 235 "Libs/JCEBA.Lists.h" 3 4
                  0x1301
# 235 "Libs/JCEBA.Lists.h"
                                        );
    drawTexture(pos,0.44,tex,orientation);glEndList();
}

void refreshBackground(GLuint texture){
  glNewList(Background,
# 240 "Libs/JCEBA.Lists.h" 3 4
                      0x1300
# 240 "Libs/JCEBA.Lists.h"
                                );
      drawTexture(pos_global,-0.9,texture,1);glEndList();
}

void refreshShowBullet(GLuint texture){
  glNewList(showBullet,
# 245 "Libs/JCEBA.Lists.h" 3 4
                      0x1301
# 245 "Libs/JCEBA.Lists.h"
                                            );
      drawTexture(pos_ShowBullet,1,texture,1);glEndList();
}
void refreshExplosion(GLuint texture){
  glNewList(scenarioExplode,
# 249 "Libs/JCEBA.Lists.h" 3 4
                           0x1301
# 249 "Libs/JCEBA.Lists.h"
                                                 );
      drawTexture(pos_Explosion,0.51,texture,1);glEndList();
}

void refreshShowStrength(){
  selectColor("black");
  glNewList(showBullet,
# 255 "Libs/JCEBA.Lists.h" 3 4
                      0x1301
# 255 "Libs/JCEBA.Lists.h"
                                            );
  glLineWidth(1.6);
  glBegin(
# 257 "Libs/JCEBA.Lists.h" 3 4
         0x0002
# 257 "Libs/JCEBA.Lists.h"
                     );
       glVertex3f(pos_showStrength.p0.x, pos_showStrength.p0.y, 1);
       glVertex3f(pos_showStrength.p1.x, pos_showStrength.p0.y, 1);
       glVertex3f(pos_showStrength.p1.x, pos_showStrength.p1.y, 1);
       glVertex3f(pos_showStrength.p0.x, pos_showStrength.p1.y, 1);
   glEnd();
   if(players==1&&playerTurn==2){
     glEndList();
     return;
     }
     selectColor("violet");
     float barSize=((strengh-150)*(140-1)/(300 -150));
     if(barSize<0)
      barSize*=-1;
     glBegin(
# 271 "Libs/JCEBA.Lists.h" 3 4
            0x0009
# 271 "Libs/JCEBA.Lists.h"
                      );
          glVertex3f(pos_showStrength.p0.x+0.5, pos_showStrength.p0.y+0.5, 1);
          glVertex3f(pos_showStrength.p0.x-0.5+barSize, pos_showStrength.p0.y+0.5, 1);
          glVertex3f(pos_showStrength.p0.x-0.5+barSize, pos_showStrength.p1.y-0.5, 1);
          glVertex3f(pos_showStrength.p0.x+0.5, pos_showStrength.p1.y-0.5, 1);
      glEnd();
  glEndList();
}

void refreshHeart(int n){
  glNewList(heart,
# 281 "Libs/JCEBA.Lists.h" 3 4
                 0x1301
# 281 "Libs/JCEBA.Lists.h"
                                       );
  glEnable(
# 282 "Libs/JCEBA.Lists.h" 3 4
          0x0DE1
# 282 "Libs/JCEBA.Lists.h"
                       );
  glEnable(
# 283 "Libs/JCEBA.Lists.h" 3 4
          0x0BC0
# 283 "Libs/JCEBA.Lists.h"
                       );
  glBindTexture(
# 284 "Libs/JCEBA.Lists.h" 3 4
               0x0DE1
# 284 "Libs/JCEBA.Lists.h"
                            , tex_Heart);
  float aux=(pos_standartHeart.p1.x-pos_standartHeart.p0.x);
  if(aux<0)
    aux*=1;
  glBegin(
# 288 "Libs/JCEBA.Lists.h" 3 4
         0x0007
# 288 "Libs/JCEBA.Lists.h"
                 );
    glTexCoord2f(0, 0); glVertex3f(pos_standartHeart.p0.x+n*aux, pos_standartHeart.p0.y, 1);
    glTexCoord2f(1, 0); glVertex3f(pos_standartHeart.p1.x+n*aux, pos_standartHeart.p0.y, 1);
    glTexCoord2f(1, 1); glVertex3f(pos_standartHeart.p1.x+n*aux, pos_standartHeart.p1.y, 1);
    glTexCoord2f(0, 1); glVertex3f(pos_standartHeart.p0.x+n*aux, pos_standartHeart.p1.y, 1);
  glEnd();
  glDisable(
# 294 "Libs/JCEBA.Lists.h" 3 4
           0x0DE1
# 294 "Libs/JCEBA.Lists.h"
                        );
  glDisable(
# 295 "Libs/JCEBA.Lists.h" 3 4
           0x0BC0
# 295 "Libs/JCEBA.Lists.h"
                        );
  glColor4f(1,1,1,1);
  glEndList();
}

void refreshMapList(int stencil){
  if(stencil){
    glNewList(MAP,
# 302 "Libs/JCEBA.Lists.h" 3 4
                 0x1300
# 302 "Libs/JCEBA.Lists.h"
                           );
    glEnable(
# 303 "Libs/JCEBA.Lists.h" 3 4
            0x0DE1
# 303 "Libs/JCEBA.Lists.h"
                         );
    glEnable(
# 304 "Libs/JCEBA.Lists.h" 3 4
            0x0BC0
# 304 "Libs/JCEBA.Lists.h"
                         );
    glEnable(
# 305 "Libs/JCEBA.Lists.h" 3 4
            0x0B90
# 305 "Libs/JCEBA.Lists.h"
                           );
    glColorMask(
# 306 "Libs/JCEBA.Lists.h" 3 4
               0
# 306 "Libs/JCEBA.Lists.h"
                       , 
# 306 "Libs/JCEBA.Lists.h" 3 4
                         0
# 306 "Libs/JCEBA.Lists.h"
                                 , 
# 306 "Libs/JCEBA.Lists.h" 3 4
                                   0
# 306 "Libs/JCEBA.Lists.h"
                                           , 
# 306 "Libs/JCEBA.Lists.h" 3 4
                                             0
# 306 "Libs/JCEBA.Lists.h"
                                                     );
    glDepthMask(
# 307 "Libs/JCEBA.Lists.h" 3 4
               0
# 307 "Libs/JCEBA.Lists.h"
                       );
    glStencilFunc(
# 308 "Libs/JCEBA.Lists.h" 3 4
                 0x0200
# 308 "Libs/JCEBA.Lists.h"
                         , 1, 0xFF);
    glStencilOp(
# 309 "Libs/JCEBA.Lists.h" 3 4
               0x1E01
# 309 "Libs/JCEBA.Lists.h"
                         , 
# 309 "Libs/JCEBA.Lists.h" 3 4
                           0x1E00
# 309 "Libs/JCEBA.Lists.h"
                                  , 
# 309 "Libs/JCEBA.Lists.h" 3 4
                                    0x1E00
# 309 "Libs/JCEBA.Lists.h"
                                           );
    glStencilMask(0xFF);
    glClear(
# 311 "Libs/JCEBA.Lists.h" 3 4
           0x00000400
# 311 "Libs/JCEBA.Lists.h"
                                );
    glPolygonMode(
# 312 "Libs/JCEBA.Lists.h" 3 4
                 0x0408
# 312 "Libs/JCEBA.Lists.h"
                                  ,
# 312 "Libs/JCEBA.Lists.h" 3 4
                                   0x1B02
# 312 "Libs/JCEBA.Lists.h"
                                          );
    glBegin(
# 313 "Libs/JCEBA.Lists.h" 3 4
           0x0008
# 313 "Libs/JCEBA.Lists.h"
                        );
    for(int i=nMapGen+1;i>=0;i--){
      glVertex3f(mapPoints[i].x, -600/2,0.5);
      glVertex3f(mapPoints[i].x, mapPoints[i].y,0.5);
    }
    glEnd();
    if(stage==7)glBindTexture(
# 319 "Libs/JCEBA.Lists.h" 3 4
                                  0x0DE1
# 319 "Libs/JCEBA.Lists.h"
                                               , tex_texBR);
    if(stage==51) glBindTexture(
# 320 "Libs/JCEBA.Lists.h" 3 4
                                   0x0DE1
# 320 "Libs/JCEBA.Lists.h"
                                                , tex_texRussia);;
    if(stage==24) glBindTexture(
# 321 "Libs/JCEBA.Lists.h" 3 4
                                  0x0DE1
# 321 "Libs/JCEBA.Lists.h"
                                               , tex_texKorea);
    if(stage==11) glBindTexture(
# 322 "Libs/JCEBA.Lists.h" 3 4
                                    0x0DE1
# 322 "Libs/JCEBA.Lists.h"
                                                 , tex_texIslamic);
    if(stage==666) glBindTexture(
# 323 "Libs/JCEBA.Lists.h" 3 4
                                0x0DE1
# 323 "Libs/JCEBA.Lists.h"
                                             , tex_texUSA);
    glColorMask(
# 324 "Libs/JCEBA.Lists.h" 3 4
               1
# 324 "Libs/JCEBA.Lists.h"
                      , 
# 324 "Libs/JCEBA.Lists.h" 3 4
                        1
# 324 "Libs/JCEBA.Lists.h"
                               , 
# 324 "Libs/JCEBA.Lists.h" 3 4
                                 1
# 324 "Libs/JCEBA.Lists.h"
                                        , 
# 324 "Libs/JCEBA.Lists.h" 3 4
                                          1
# 324 "Libs/JCEBA.Lists.h"
                                                 );
      glDepthMask(
# 325 "Libs/JCEBA.Lists.h" 3 4
                 1
# 325 "Libs/JCEBA.Lists.h"
                        );
      glStencilMask(0x00);

      glStencilFunc(
# 328 "Libs/JCEBA.Lists.h" 3 4
                   0x0202
# 328 "Libs/JCEBA.Lists.h"
                           , 0, 0xFF);

      glStencilFunc(
# 330 "Libs/JCEBA.Lists.h" 3 4
                   0x0202
# 330 "Libs/JCEBA.Lists.h"
                           , 1, 0xFF);

      glBegin(
# 332 "Libs/JCEBA.Lists.h" 3 4
             0x0009
# 332 "Libs/JCEBA.Lists.h"
                       );
      glTexCoord2f(0, 0); glVertex3f(-800/2, -600/2, 0.5);
      glTexCoord2f(1, 0); glVertex3f(800/2, -600/2, 0.5);
      glTexCoord2f(1, 1); glVertex3f(800/2, 600/2, 0.5);
      glTexCoord2f(0, 1); glVertex3f(-800/2,600/2, 0.5);
      glEnd();
    glDisable(
# 338 "Libs/JCEBA.Lists.h" 3 4
             0x0DE1
# 338 "Libs/JCEBA.Lists.h"
                          );
    glDisable(
# 339 "Libs/JCEBA.Lists.h" 3 4
             0x0BC0
# 339 "Libs/JCEBA.Lists.h"
                          );
    glDisable(
# 340 "Libs/JCEBA.Lists.h" 3 4
             0x0B90
# 340 "Libs/JCEBA.Lists.h"
                            );
    glEndList();
  }else{
    glNewList(MAP,
# 343 "Libs/JCEBA.Lists.h" 3 4
                 0x1300
# 343 "Libs/JCEBA.Lists.h"
                           );
    selectColor("violet");
    glBegin(
# 345 "Libs/JCEBA.Lists.h" 3 4
           0x0008
# 345 "Libs/JCEBA.Lists.h"
                        );
    for(int i=nMapGen+1;i>=0;i--){
      glVertex3f(mapPoints[i].x, -600/2,0.5);
      glVertex3f(mapPoints[i].x, mapPoints[i].y,0.5);
    }
    glEnd();
    glEndList();
    glColor4f(1,1,1,1);
  }
}
# 20 "JCEBA.LoadLibs.h" 2
# 1 "Libs/JCEBA.Options.h" 1
int resolutionIdx=0;
bool alreadyGenMap=false;
float triedReshapping=0;
void drawMapValue(int option);

Rectangle currentResolution,currentMusic,currentSound,currentWind,currentdifficulty,
          currentInitLives,currentInitBombs,currentMap,currentLanguage,arrowMinus,arrowPlus;

Point currentMapMenuValue;

void defineOPT(){
        currentResolution.p0.x=80;currentResolution.p1.x=200;currentResolution.p0.y=180;currentResolution.p1.y=210;
        currentMusic.p0.x=80;currentMusic.p1.x=200;currentMusic.p0.y=140;currentMusic.p1.y=170;
        currentSound.p0.x=80;currentSound.p1.x=200;currentSound.p0.y=100;currentSound.p1.y=130;
        currentWind.p0.x=80;currentWind.p1.x=200;currentWind.p0.y=60;currentWind.p1.y=90;
        currentdifficulty.p0.x=120;currentdifficulty.p1.x=160;currentdifficulty.p0.y=20;currentdifficulty.p1.y=50;
        currentInitLives.p0.x=120;currentInitLives.p1.x=160;currentInitLives.p0.y=-20;currentInitLives.p1.y=10;
        currentInitBombs.p0.x=120;currentInitBombs.p1.x=160;currentInitBombs.p0.y=-60;currentInitBombs.p1.y=-30;
        currentMap.p0.x=120;currentMap.p1.x=160;currentMap.p0.y=-100;currentMap.p1.y=-70;
        currentLanguage.p0.x=80;currentLanguage.p1.x=200;currentLanguage.p0.y=-140;currentLanguage.p1.y=-110;
        currentMapMenuValue.x=120;currentMapMenuValue.y=180;
}

char* getResolution(int n){
  switch (n) {
  case 0: return "800x600";
  case 1: return "866x650";
  case 2: return "933x700";
  case 3: return "fullscreen";
  }
}

char* getDifficulty(int n){
  switch (n) {
  case 1: return str_ez;
  case 2: return str_normal;
  case 3: return str_hard;
  }
}

char* getState(int n){
  switch (n) {
  case 0: return str_off;
  default: return str_on;
}
}

void drawCharValue(char* in){
    int tam=strlen(in);
    currentMapMenuValue.y-=40;
    currentMapMenuValue.x=115-((float)tam/2.0)*10;
    for(int i=0;i<tam;i++){
        currentMapMenuValue.x+=13;

        glRasterPos3f(currentMapMenuValue.x,currentMapMenuValue.y,1);
        glutBitmapCharacter(
# 56 "Libs/JCEBA.Options.h" 3 4
                           ((void *)0x0008)
# 56 "Libs/JCEBA.Options.h"
                                                   , in[i]);
    }
}

void drawCurrentOptions()
{
    selectColor("yellow");
    currentMapMenuValue.y=230;
    drawCharValue(getResolution(resolutionIdx));
    drawCharValue(getState(musicState));
    drawCharValue(getState(soundState));
    drawCharValue(getState(windState));
    drawCharValue(getDifficulty(difficulty));
    drawMapValue(initPlayerLifes);
    drawMapValue(initPlayerBombs);
    drawMapValue(mapPreConfig);
    drawCharValue(getLanguageStr(languageIdx));
    drawMapValue(gameFPS);
}

int algorithm(int position,int number){
    int r;
    int i;
    for(i=0;i<position;i++)
    {
        number=(number-number%10)/10;
    }
    return number%10;
}

void drawMapValue(int option){
    currentMapMenuValue.y-=40;
    currentMapMenuValue.x=135-((float)getNumberAlgo(option)/2.0)*10;
    for(int i=0;i<getNumberAlgo(option);i++){
        currentMapMenuValue.x+=10;

        glRasterPos3f(currentMapMenuValue.x,currentMapMenuValue.y,1);
        glutBitmapCharacter(
# 93 "Libs/JCEBA.Options.h" 3 4
                           ((void *)0x0008)
# 93 "Libs/JCEBA.Options.h"
                                                   , algorithm((getNumberAlgo(option)-i-1),option)+48);
    }
}

void drawCurrentMapOptions(){
    selectColor("yellow");
    currentMapMenuValue.y=230;
    if(DEBUG)printf("%d %d %d %d %d %d %d \n",nMapGen,variationMapGen,smallVariationMapGen,
           mountainVariationMapGen,mountainVerticalSize,mountainHorizontalSize,mountainChance);
    drawMapValue(idxMap);
    drawMapValue(nMapGen);
    drawMapValue(variationMapGen);
    drawMapValue(smallVariationMapGen);
    drawMapValue(mountainVariationMapGen);
    drawMapValue(mountainVerticalSize);
    drawMapValue(mountainHorizontalSize);
    drawMapValue(mountainChance);
}

void compareArrowsPress(Rectangle r,int optionIdx,int addValue)
{
    int currentOption,maxOptionValue,minOptionValue;
    switch (optionIdx){
        case 0:{currentOption=resolutionIdx; maxOptionValue=3; minOptionValue=0; }break;
        case 1:{currentOption=musicState; maxOptionValue=1; minOptionValue=0; }break;
        case 2:{currentOption=soundState; maxOptionValue=1; minOptionValue=0; }break;
        case 3:{currentOption=windState; maxOptionValue=1; minOptionValue=0; }break;
        case 4:{currentOption=difficulty; maxOptionValue=3; minOptionValue=1; }break;
        case 5:{currentOption=initPlayerLifes; maxOptionValue=9; minOptionValue=1; }break;
        case 6:{currentOption=initPlayerBombs; maxOptionValue=3; minOptionValue=0; }break;
        case 7:{currentOption=mapPreConfig; maxOptionValue=5; minOptionValue=0; }break;
        case 8:{currentOption=languageIdx; maxOptionValue=4; minOptionValue=0; }break;
        case 9:{currentOption=gameFPS/30; maxOptionValue=2; minOptionValue=1; }break;
        case 10:currentOption=idxMap; maxOptionValue=(5 -1); minOptionValue=1; break;
        case 11:{currentOption=mapType[idxMap].nMapGen; maxOptionValue=400; minOptionValue=50; }break;
        case 12:{currentOption=mapType[idxMap].variationMapGen; maxOptionValue=600; minOptionValue=smallVariationMapGen; }break;
        case 13:{currentOption=mapType[idxMap].smallVariationMapGen; maxOptionValue=variationMapGen; minOptionValue=0; }break;
        case 14:{currentOption=mapType[idxMap].mountainVariationMapGen; maxOptionValue=mountainVerticalSize; minOptionValue=0; }break;
        case 15:{currentOption=mapType[idxMap].mountainVerticalSize; maxOptionValue=400; minOptionValue=0; }break;
        case 16:{currentOption=mapType[idxMap].mountainHorizontalSize; maxOptionValue=nMapGen; minOptionValue=0; }break;
        case 17:{currentOption=mapType[idxMap].mountainChance; maxOptionValue=nMapGen; minOptionValue=0; }break;
    }
    if(mouseX>=r.p0.x&&mouseY>=r.p0.y&&mouseX<=r.p1.x&&mouseY<=r.p1.y){
        glColor3f(0.15,0.15,0.15);
        if(MOUSE2){
                MOUSE2=0;
                if(soundState)alSourcePlay(ALsource[4]);
                        currentOption+=addValue;
                        if(currentOption>maxOptionValue)
                            currentOption=minOptionValue;
                        if(currentOption<minOptionValue)
                            currentOption=maxOptionValue;
                        switch (optionIdx){
                        case 0:{resolutionIdx=currentOption;}break;
                        case 1:{musicState=currentOption; stopAllSounds(-1);
                          ALint state;
                          alGetSourcei(ALsource[3],
# 149 "Libs/JCEBA.Options.h" 3 4
                                                  0x1010
# 149 "Libs/JCEBA.Options.h"
                                                                 ,&state);
                            if(
# 150 "Libs/JCEBA.Options.h" 3 4
                              0x1012 
# 150 "Libs/JCEBA.Options.h"
                                         != state)
                              if(musicState)alSourcePlay(ALsource[3]);
                            }break;
                        case 2:{soundState=currentOption;}break;
                        case 3:{windState=currentOption;}break;
                        case 4:{difficulty=currentOption;}break;
                        case 5:{initPlayerLifes=currentOption;}break;
                        case 6:{initPlayerBombs=currentOption;}break;
                        case 7:{mapPreConfig=currentOption;}break;
                        case 8:{languageIdx=currentOption;refreshLanguage();refreshBackground(tex_SubMenu0);
                        }break;
                        case 9:{gameFPS=currentOption*30;}break;
                        case 10:{idxMap=currentOption; setMapConfig(idxMap);}break;
                        case 11:{mapType[idxMap].nMapGen=currentOption;setMapConfig(idxMap);}break;
                        case 12:{mapType[idxMap].variationMapGen=currentOption;setMapConfig(idxMap);}break;
                        case 13:{mapType[idxMap].smallVariationMapGen=currentOption;setMapConfig(idxMap);}break;
                        case 14:{mapType[idxMap].mountainVariationMapGen=currentOption;setMapConfig(idxMap);}break;
                        case 15:{mapType[idxMap].mountainVerticalSize=currentOption;setMapConfig(idxMap);}break;
                        case 16:{mapType[idxMap].mountainHorizontalSize=currentOption;setMapConfig(idxMap);}break;
                        case 17:{mapType[idxMap].mountainChance=currentOption;setMapConfig(idxMap);}break;
                        }
                  }
    }else glColor4f(1,1,1,1);

}

void drawArrows(bool isMapEditing){
    if(!isMapEditing){
        arrowMinus.p0.x=40;arrowMinus.p1.x=70;
        arrowPlus.p0.x=210;arrowPlus.p1.x=240;
        for(int i=0;i<10;i++){
            arrowMinus.p0.y=180+i*-40;arrowMinus.p1.y=210+i*-40;
            arrowPlus.p0.y=180+i*-40;arrowPlus.p1.y=210+i*-40;
            compareArrowsPress(arrowMinus,i,-1);
            drawTexture(arrowMinus,1,tex_minusArrow,1);
            compareArrowsPress(arrowPlus,i,1);
            drawTexture(arrowPlus,1,tex_plusArrow,1);
        }
    }
    else {
        arrowMinus.p0.x=40;arrowMinus.p1.x=70;
        arrowPlus.p0.x=210;arrowPlus.p1.x=240;
        for(int i=0;i<8;i++){
            arrowMinus.p0.y=180+i*-40;arrowMinus.p1.y=210+i*-40;
            arrowPlus.p0.y=180+i*-40;arrowPlus.p1.y=210+i*-40;
            if(i>=1){
            compareArrowsPress(arrowMinus,i+10,-5);
            drawTexture(arrowMinus,1,tex_minusArrow,1);
            compareArrowsPress(arrowPlus,i+10,5);
            drawTexture(arrowPlus,1,tex_plusArrow,1);
          }else{
            compareArrowsPress(arrowMinus,i+10,-1);
            drawTexture(arrowMinus,1,tex_minusArrow,1);
            compareArrowsPress(arrowPlus,i+10,1);
            drawTexture(arrowPlus,1,tex_plusArrow,1);
          }
        }
    }
}

void changeResolution()
{
    int windowPosX=glutGet(
# 212 "Libs/JCEBA.Options.h" 3 4
                          0x0064
# 212 "Libs/JCEBA.Options.h"
                                       ),windowPosY=glutGet(
# 212 "Libs/JCEBA.Options.h" 3 4
                                                            0x0065
# 212 "Libs/JCEBA.Options.h"
                                                                         );
    if(fullscreen)
        windowPosX=10,windowPosY=30;
    switch(resolutionIdx){
    case 0:{currentWidth=800 ;currentHeight=600 ;fullscreen=false;}break;
    case 1:{currentWidth=866 ;currentHeight=650 ;fullscreen=false;}break;
    case 2:{currentWidth=933 ;currentHeight=700 ;fullscreen=false;}break;
    case 3:{fullscreen=true;}break;
    }
    if(!fullscreen){
        glutReshapeWindow(currentWidth,currentHeight);
        glutPositionWindow(windowPosX,windowPosY);
    }
    else{
        glutFullScreen();
        currentWidth=glutGet(
# 227 "Libs/JCEBA.Options.h" 3 4
                            0x00C8
# 227 "Libs/JCEBA.Options.h"
                                             );currentHeight=glutGet(
# 227 "Libs/JCEBA.Options.h" 3 4
                                                                     0x00C9
# 227 "Libs/JCEBA.Options.h"
                                                                                       );
        windowPosX=0;windowPosY=20;
    }
}

void currentOptions(){
    selectColor("yellow");
    defineOPT();
    drawCurrentOptions();
    drawArrows(false);
    changeResolution();
    if(1)saveSettings();
}

void warnReshapping(){
    glColor4f(1,1,0,triedReshapping);
    Point reshapeWarning;
    reshapeWarning.x=-200;reshapeWarning.y=270;
    drawText(
# 245 "Libs/JCEBA.Options.h" 3 4
            ((void *)0x0008)
# 245 "Libs/JCEBA.Options.h"
                                    ,str_toReshape,reshapeWarning,0.99);
    if(triedReshapping>0)
        triedReshapping-=0.01;
    if(triedReshapping<=0)
        triedReshapping=0;
}

void currentMapOptions(){
    drawCurrentMapOptions();
    drawArrows(true);
    if(1)saveMapConfig();
}

void restoreDefaultSettings(){
    musicState=1;
    soundState=1;
    windState=1;
    difficulty=1;
    initPlayerLifes=3;
    initPlayerBombs=1;
    mapPreConfig=0;
    gameFPS=60;
    stopAllSounds(-1);
      ALint state;
      alGetSourcei(ALsource[3],
# 269 "Libs/JCEBA.Options.h" 3 4
                              0x1010
# 269 "Libs/JCEBA.Options.h"
                                             ,&state);
        if(
# 270 "Libs/JCEBA.Options.h" 3 4
          0x1012 
# 270 "Libs/JCEBA.Options.h"
                     != state)
          if(musicState)alSourcePlay(ALsource[3]);
}
# 21 "JCEBA.LoadLibs.h" 2
# 1 "Libs/JCEBA.Buttons.h" 1
int compareButton(Rectangle r,int currentScreenValue,int nextScreenValue,int listValue)
{
    if(mouseX>=r.p0.x&&mouseY>=r.p0.y&&mouseX<=r.p1.x&&mouseY<=r.p1.y){
        glColor3f(0.15,0.15,0.15);
        if(MOUSE2){
                MOUSE2=0;
                if(soundState)alSourcePlay(ALsource[4]);
                    return nextScreenValue;
                  }
    }else glColor4f(1,1,1,1);
            glCallList(listValue);
    return currentScreenValue;
}

int actionButtons(int screen)
{
    int returnValue;
    switch(screen)
    {
        case -112:

            returnValue=compareButton(pos_btnPlay,screen,-118,playIcon);
            if(returnValue!=screen)
                return returnValue;

            returnValue=compareButton(pos_btnOptions,screen,-114,optionsIcon);
            if(returnValue!=screen)
                return returnValue;

            returnValue=compareButton(pos_btnHowTo,screen,-115,howtoIcon);
            if(returnValue!=screen)
                return returnValue;

            returnValue=compareButton(pos_btnQuit,screen,-121,quitIcon);
            if(returnValue!=screen)
                return returnValue;

        return screen;

        case -119:
          returnValue=compareButton(pos_btnBack,screen,-118,backButton);
          if(returnValue!=screen)
              return returnValue;

              returnValue=compareButton(pos_flagRand,screen,-120,flagRand);
              if(returnValue!=screen){
                int tmp=randCountry();
                if(players==1){
                  player1=tmp;
                  player2=7;
                }else if(!player1){
                    player1=tmp;
                    returnValue=-119;
                  }else if(player1!=tmp||1){
                    player2=tmp;
                  }else{
                    while (player1==tmp) {
                      tmp=randCountry();
                    }
                    player2=tmp;
                  }
                  return returnValue;
                }

                returnValue=compareButton(pos_flagRussia,screen,-120,flagRussia);
                if(returnValue!=screen){
                  if(players==1){
                    player1=51;
                    player2=7;
                  }else if(!player1){
                      player1=51;
                      returnValue=-119;
                    }else if(player1!=51||1){
                      player2=51;
                    }else returnValue=-119;
                    return returnValue;
                  }
              returnValue=compareButton(pos_flagBR,screen,-120,flagBR);
              if(returnValue!=screen){
                if(players==1){
                  player1=7;
                  player2=7;
                }else if(!player1){
                    player1=7;
                    returnValue=-119;
                  }else if(player1!=7||1){
                    player2=7;
                  }else returnValue=-119;
                  return returnValue;
                }
              returnValue=compareButton(pos_flagUSA,screen,-120,flagUSA);
              if(returnValue!=screen){
                if(players==1){
                  player1=666;
                  player2=7;
                }else if(!player1){
                    player1=666;
                    returnValue=-119;
                  }
                  else if(player1!=666||1){
                    player2=666;
                  }else returnValue=-119;
                  return returnValue;
                }
              returnValue=compareButton(pos_flagIslamic,screen,-120,flagIsla);
              if(returnValue!=screen){
                if(players==1){
                  player1=11;
                  player2=7;
                  return returnValue;
                }else if(!player1){
                    player1=11;
                    returnValue=-119;
                  }
                  else if(player1!=11||1){
                    player2=11;
                  }else returnValue=-119;
                  return returnValue;
                }
              returnValue=compareButton(pos_flagKorea,screen,-120,flagKorea);
              if(returnValue!=screen){
                if(players==1){
                  player1=24;
                  player2=7;
                }else if(!player1){
                    player1=24;
                    returnValue=-119;
                  }
                  else if(player1!=24||1){
                    player2=24;
                  }else returnValue=-119;
                  return returnValue;
                }
        return screen;

        case -120:
          returnValue=compareButton(pos_btnPlay2,screen,-113,btnPlay2);
          if(returnValue!=screen)
              return returnValue;
        return screen;

        case -114:

        returnValue=compareButton(pos_btnBack,screen,-112,backButton);
        if(returnValue!=screen)
            return returnValue;

        returnValue=compareButton(pos_btnPlay2,screen,-112,restore);
        if(returnValue!=screen){
            restoreDefaultSettings();
            return screen;
        }
        returnValue=compareButton(pos_btnQuit,screen,-7,mapConfigs);
        if(returnValue!=screen)
            return returnValue;

        return screen;

        case -115:

            returnValue=compareButton(pos_btnBack,screen,-112,backButton);
            if(returnValue!=screen)
                return returnValue;

        return screen;

        case -7:

            returnValue=compareButton(pos_btnBack,screen,-114,backButton);
            if(returnValue!=screen)
                return returnValue;

            returnValue=compareButton(pos_btnPlay2,screen,-112,Example);
            if(returnValue!=screen){
              mapGen(); refreshMapList(0); alreadyGenMap=true;
                return screen;
              }

        return screen;

        case -118:

            returnValue=compareButton(pos_btn1P,screen,-119,onePlayerButton);
            if(returnValue!=screen)
            {
                players=1;
                player1=0;player2=0;
                return returnValue;
            }

            returnValue=compareButton(pos_btn2P,screen,-119,twoPlayersButton);
            if(returnValue!=screen)
            {
                players=2;
                player1=0;player2=0;
                return returnValue;
            }

            returnValue=compareButton(pos_btnBack,screen,-112,backButton);
            if(returnValue!=screen)
                return returnValue;
        return screen;

        case 98:

        screen=-113;
        returnValue=compareButton(pos_btnPlay2,screen,-120,continueIcon);
        if(returnValue!=screen){
            player2=stage;
            return returnValue;
          }

          returnValue=compareButton(pos_btnQuit,screen,-112,quitIcon);
            if(returnValue!=screen)
                return returnValue;

        return screen;

        case 99:

          screen=-113;
            returnValue=compareButton(pos_btnPlay2,screen,-116,continueIcon);
            if(returnValue!=screen)
                return returnValue;

        return screen;

        case 101:

          screen=-113;
            returnValue=compareButton(pos_btnPlay2,screen,-112,continueIcon);
            if(returnValue!=screen)
                return returnValue;

        return screen;

        case 201:
          screen=-113;
          returnValue=compareButton(pos_btnQuit,screen,-112,quitIcon);
          if(returnValue!=screen){
              currentScreen=returnValue;
              pause=1;
              return 0;
            }

          returnValue=compareButton(pos_btnPlay2,screen,-112,continueIcon);
          if(returnValue!=screen){
            mouseClicked=0;
            MOUSE1=0;
            pause*=-1;
          return 0;
          }
        return screen;

        case 202:
          screen=-113;
          returnValue=compareButton(pos_btnPlay2,screen,-120,continueIcon);
          if(returnValue!=screen){
              pause=1;
              currentScreen=returnValue;
              return 0;
            }

          returnValue=compareButton(pos_btnBack,screen,-112,backButton);
          if(returnValue!=screen){
            pause=1;
            mouseClicked=0;
            MOUSE1=0;
          return 0;
          }
        return screen;
    }
}
# 22 "JCEBA.LoadLibs.h" 2
# 1 "Libs/JCEBA.PlayerBehaviour.h" 1
Rectangle pos_P1;
Rectangle pos_P2;
int P1currentIndexAnimation;
int P2currentIndexAnimation;
int P1_Bombs,P2_Bombs;
float P1_Vspeed,P1_Hspeed;
float P2_Vspeed,P2_Hspeed;
GLuint P1_currentTex,P2_currentTex;
int P1_state,P2_state, P1_life, P2_life;
int P1_currentAnimation,P1_nextAnimation;
int P2_currentAnimation,P2_nextAnimation;
bool walking=0;
int jumping=0;
int P1_Ori,P2_Ori;


void movePlayer(int player,char* way,float steeps);
void remPlayerFromInsideMap(int player);
void execPlayerAnimations(int n);
void gg();

void initPlayerConfigs(){
  pos_P1.p0.x=-360;
  pos_P1.p0.y=100;
  pos_P1.p1.x=pos_P1.p0.x+60;
  pos_P1.p1.y=pos_P1.p0.y+100;

  pos_P2.p1.x=360;
  pos_P2.p0.y=100;
  pos_P2.p0.x=pos_P2.p1.x-60;
  pos_P2.p1.y=pos_P2.p0.y+100;

  P1_Vspeed=0;
  P1_Hspeed=0;
  P2_Vspeed=0;
  P2_Hspeed=0;
  P1_Bombs=initPlayerBombs;
  P2_Bombs=initPlayerBombs;

  P1_state=0;
  P2_state=0;
  P1_life=initPlayerLifes;
  P2_life=initPlayerLifes;
  P1_currentAnimation=0;
  P1_nextAnimation=-1;
  P2_currentAnimation=0;
  P2_nextAnimation=-1;
  playerTurn=1;
  P1_Ori=1;
  P2_Ori=-1;
  jumping=0;
  P1currentIndexAnimation=0;
  P2currentIndexAnimation=0;
  glutTimerFunc(0, execPlayerAnimations, 1);
}

void ctrlPlayerAnimations(){
  if(P1_state==4&&P1_currentAnimation!=4){
    P1_currentAnimation=4; P1currentIndexAnimation=0;
  }else if(P1_state==3){
    if(P1_currentAnimation!=3){

    }
  }else if(P1_state==2&&P1_currentAnimation!=2){
    P1_nextAnimation=2;
  }else if((P1_state==5&&P1_currentAnimation!=5)||(P1_Vspeed!=0&&P1_currentAnimation!=5)){
    P1_nextAnimation=5;
  }else if(P1_state==1&&P1_currentAnimation!=1){
    P1_nextAnimation=1;
  }else if(P1_currentAnimation!=0)
    P1_nextAnimation=0;

  if(P2_state==4&&P2_currentAnimation!=4){
    P2_currentAnimation=4; P2currentIndexAnimation=0;
  }else if(P2_state==3){
    if(P2_currentAnimation!=3){

    }
  }else if(P2_state==2&&P2_currentAnimation!=2){
    P2_nextAnimation=2;
  }else if((P2_state==5&&P2_currentAnimation!=5)||(P2_Vspeed!=0&&P2_currentAnimation!=5))
    P2_nextAnimation=5;
  else if(P2_state==1&&P2_currentAnimation!=1)
    P2_nextAnimation=1;
  else if(P2_currentAnimation!=0)
    P2_nextAnimation=0;
}

void normalizeSprites(){
  if(P1_life<=0){
    if(player1==7) P1_currentTex=tex_BRDie[6 -1];
    if(player1==666) P1_currentTex=tex_USADie[6 -1];
    if(player1==11) P1_currentTex=tex_IslamicDie[6 -1];
    if(player1==24) P1_currentTex=tex_KoreaDie[6 -1];
    if(player1==51) P1_currentTex=tex_RussiaDie[6 -1];

    if(player2==7) P2_currentTex=tex_BRTouchGround;
    if(player2==666) P2_currentTex=tex_USATouchGround;
    if(player2==11) P2_currentTex=tex_IslamicTouchGround;
    if(player2==24) P2_currentTex=tex_KoreaTouchGround;
    if(player2==51) P2_currentTex=tex_RussiaTouchGround;
  }else if(P2_life<=0){
    if(player1==7) P1_currentTex=tex_BRTouchGround;
    if(player1==666) P1_currentTex=tex_USATouchGround;
    if(player1==11) P1_currentTex=tex_IslamicTouchGround;
    if(player1==24) P1_currentTex=tex_KoreaTouchGround;
    if(player1==51) P1_currentTex=tex_RussiaTouchGround;

    if(player2==7) P2_currentTex=tex_BRDie[6 -1];
    if(player2==666) P2_currentTex=tex_USADie[6 -1];
    if(player2==11) P2_currentTex=tex_IslamicDie[6 -1];
    if(player2==24) P2_currentTex=tex_KoreaDie[6 -1];
    if(player2==51) P2_currentTex=tex_RussiaDie[6 -1];
  }
}

void playerBehave(){
  if(P1_life<=0){
    P1_state=4;
    if(P1_Vspeed<0){
      movePlayer(1,"down",P1_Vspeed*1/FPS);
    }
    pos_P1.p1.x=pos_P1.p0.x+100;
    pos_P1.p1.y=pos_P1.p0.y+60;
  }else{
    if(P1_state!=2){
    if(P1_state!=3){
      if(P1_Vspeed!=0){
        movePlayer(1,"down",P1_Vspeed*1/FPS);
        P1_state=5;
      }
      if(P1_Hspeed!=0){
        movePlayer(1,"left",P1_Hspeed*1/FPS);
        P1_state=1;
      }else if(P1_Vspeed==0&&!walking){
        P1_state=0;
      }
    }else{
      if(P1_Vspeed!=0)
        movePlayer(1,"down",P1_Vspeed*1/FPS);
    }
  }
  }

  if(P2_life<=0){
    P2_state=4;
    if(P2_Vspeed<0){
      movePlayer(2,"down",P2_Vspeed*1/FPS);
    }
    pos_P2.p1.x=pos_P2.p0.x+100;
    pos_P2.p1.y=pos_P2.p0.y+60;
  }else{
    if(P2_state!=2){
    if(P2_state!=3){
    if(P2_Vspeed!=0){
      movePlayer(2,"down",P2_Vspeed*1/FPS);
      P2_state=5;
    }
    if(P2_Hspeed!=0){
      movePlayer(2,"left",P2_Hspeed*1/FPS);
      P2_state=1;
    }else if(P2_Vspeed==0&&!walking){
      P2_state=0;
    }
    }else{
      if(P2_Vspeed!=0)
        movePlayer(2,"down",P2_Vspeed*1/FPS);
    }
  }
  }
  walking=0;
  ctrlPlayerAnimations();
}

void realizeJump(){
  if(jumping>0){
    if(playerTurn==1){
      P1_state=5;
      if(jumping==1)P1_Vspeed+=120;
      else if(jumping==80/2)P1_Vspeed-=120;
    }else{
      P2_state=5;
      if(jumping==1)P2_Vspeed+=120;
      else if(jumping==80/2)P2_Vspeed-=120;
    }
    jumping++;
    if(jumping>=80)jumping=0;
  }
}

void movePlayer(int player,char* way,float steeps){
  if(strEq(way,"up")||strEq(way,"down")){
    if(player==1){
      pos_P1.p0.y+=steeps;
      pos_P1.p1.y+=steeps;
      if(pos_P1.p1.y>600/2){pos_P1.p1.y=(600/2)-1;pos_P1.p1.y=600/2-100 -1;}
      if(pos_P1.p0.y<-600/2)pos_P1.p0.y=-600/2;
    }else{
      pos_P2.p0.y+=steeps;
      pos_P2.p1.y+=steeps;
      if(pos_P2.p1.y>600/2){pos_P2.p1.y=(600/2)-1;pos_P2.p0.y=600/2-100 -1;}
      if(pos_P2.p0.y<-600/2)pos_P2.p0.y=-600/2;
    }
  }else if(strEq(way,"right")||strEq(way,"left")){
    if(player==1){
      pos_P1.p0.x+=steeps;
      pos_P1.p1.x+=steeps;
      if(pos_P1.p1.x>0){pos_P1.p1.x=0; pos_P1.p0.x=-60;}
      if(pos_P1.p0.x<-800/2){pos_P1.p0.x=-800/2;pos_P1.p1.x=pos_P1.p0.x+60;}
    }else{
      pos_P2.p0.x+=steeps;
      pos_P2.p1.x+=steeps;
      if(pos_P2.p1.x>800/2){pos_P2.p1.x=800/2;pos_P2.p0.x=pos_P2.p1.x-60;}
      if(pos_P2.p0.x<0){pos_P2.p0.x=0;pos_P2.p1.x=60; }
    }
  }
  remPlayerFromInsideMap(player);
}

void remPlayerFromInsideMap(int player){
  float highestDiference=0;
  float tmp;
  if(player==1){
    for(int i=1;i<=nMapGen;i++){
      if(mapPoints[i].x>=pos_P1.p0.x+20&&mapPoints[i].x<=pos_P1.p1.x-20)
        if(mapPoints[i].y>pos_P1.p0.y){
          tmp=mapPoints[i].y-pos_P1.p0.y;
          if(tmp<0) tmp*=1;
          if(tmp>highestDiference)highestDiference=tmp;
        }
      }
  }else{
    for(int i=nMapGen;i>=1;i--){
      if(mapPoints[i].x>=pos_P2.p0.x+20&&mapPoints[i].x<=pos_P2.p1.x-20)
        if(mapPoints[i].y>pos_P2.p0.y){
          tmp=mapPoints[i].y-pos_P2.p0.y;
          if(tmp<0) tmp*=1;
          if(tmp>highestDiference)highestDiference=tmp;
        }
      }
  }
  if(highestDiference>0)
    movePlayer(player,"up",highestDiference);
}

void execPlayerAnimations(int n){
  if(pause>0){
    if(P1_currentAnimation==5&&P1_state!=4){
      if(P1currentIndexAnimation>=2){
        P1currentIndexAnimation=0;
        if(P1_nextAnimation>=0&&P1_nextAnimation!=P1_currentAnimation){
          P1_currentAnimation=P1_nextAnimation;
          P1currentIndexAnimation=0;
        }
        P1_nextAnimation=-1;
      }
      if(player1==7&&P1_currentTex!=tex_BRTouchGround) P1_currentTex=tex_BRFall[P1currentIndexAnimation];
      if(player1==51&&P1_currentTex!=tex_RussiaTouchGround) P1_currentTex=tex_RussiaFall[P1currentIndexAnimation];
      if(player1==24&&P1_currentTex!=tex_KoreaTouchGround) P1_currentTex=tex_KoreaFall[P1currentIndexAnimation];
      if(player1==11&&P1_currentTex!=tex_IslamicTouchGround) P1_currentTex=tex_IslamicFall[P1currentIndexAnimation];
      if(player1==666&&P1_currentTex!=tex_USATouchGround) P1_currentTex=tex_USAFall[P1currentIndexAnimation];
      P1currentIndexAnimation++;
    }else if(P1_life<=0){
      if(P1currentIndexAnimation>=6){
        canGG=1;
      }else{P1currentIndexAnimation++;}
      if(player1==7) P1_currentTex=tex_BRDie[P1currentIndexAnimation];
      if(player1==51) P1_currentTex=tex_RussiaDie[P1currentIndexAnimation];
      if(player1==24) P1_currentTex=tex_KoreaDie[P1currentIndexAnimation];
      if(player1==11) P1_currentTex=tex_IslamicDie[P1currentIndexAnimation];
      if(player1==666) P1_currentTex=tex_USADie[P1currentIndexAnimation];
    }else if(P1_currentAnimation==2){
      if(P1currentIndexAnimation>=3){
        P1_state=0;
        P1currentIndexAnimation=0;
        if(P1_nextAnimation>=0&&P1_nextAnimation!=P1_currentAnimation){
          P1_currentAnimation=P1_nextAnimation;
          P1currentIndexAnimation=0;
        }
        P1_nextAnimation=-1;
      }
      if(player1==7) P1_currentTex=tex_BRDamage[P1currentIndexAnimation];
      if(player1==51) P1_currentTex=tex_RussiaDamage[P1currentIndexAnimation];
      if(player1==24) P1_currentTex=tex_KoreaDamage[P1currentIndexAnimation];
      if(player1==11) P1_currentTex=tex_IslamicDamage[P1currentIndexAnimation];
      if(player1==666) P1_currentTex=tex_USADamage[P1currentIndexAnimation];
      P1currentIndexAnimation++;
    }else if(P1_currentAnimation==1){
      if(P1currentIndexAnimation>=6){
        P1currentIndexAnimation=0;
        if(P1_nextAnimation>=0&&P1_nextAnimation!=P1_currentAnimation){
          P1_currentAnimation=P1_nextAnimation;
          P1currentIndexAnimation=0;
        }
        P1_nextAnimation=-1;
      }
      if(player1==7) P1_currentTex=tex_BRWalk[P1currentIndexAnimation];
      if(player1==51) P1_currentTex=tex_RussiaWalk[P1currentIndexAnimation];
      if(player1==24) P1_currentTex=tex_KoreaWalk[P1currentIndexAnimation];
      if(player1==11) P1_currentTex=tex_IslamicWalk[P1currentIndexAnimation];
      if(player1==666) P1_currentTex=tex_USAWalk[P1currentIndexAnimation];
      P1currentIndexAnimation++;
    }else if(P1_currentAnimation==3){
      if(P1currentIndexAnimation>=4){
        P1currentIndexAnimation=0;
        if(P1_nextAnimation>=0&&P1_nextAnimation!=P1_currentAnimation){
          P1_currentAnimation=P1_nextAnimation;
          P1currentIndexAnimation=0;
        }
        P1_nextAnimation=-1;
      }
      if(player1==7) P1_currentTex=tex_BRShot[P1currentIndexAnimation];
      if(player1==51) P1_currentTex=tex_RussiaShot[P1currentIndexAnimation];
      if(player1==24) P1_currentTex=tex_KoreaShot[P1currentIndexAnimation];
      if(player1==11) P1_currentTex=tex_IslamicShot[P1currentIndexAnimation];
      if(player1==666) P1_currentTex=tex_USAShot[P1currentIndexAnimation];
      P1currentIndexAnimation++;
    }else {
      if(P1currentIndexAnimation>=4){
        P1currentIndexAnimation=0;
        if(P1_nextAnimation>=0&&P1_nextAnimation!=P1_currentAnimation){
          P1_currentAnimation=P1_nextAnimation;
          P1currentIndexAnimation=0;
        }
        P1_nextAnimation=-1;
      }
      if(player1==7) P1_currentTex=tex_BRIdle[P1currentIndexAnimation];
      if(player1==51) P1_currentTex=tex_RussiaIdle[P1currentIndexAnimation];
      if(player1==24) P1_currentTex=tex_KoreaIdle[P1currentIndexAnimation];
      if(player1==11) P1_currentTex=tex_IslamicIdle[P1currentIndexAnimation];
      if(player1==666) P1_currentTex=tex_USAIdle[P1currentIndexAnimation];
      P1currentIndexAnimation++;
  }

  if(P2_currentAnimation==5&&P2_life>0){
    if(P2currentIndexAnimation>=2){
      P2currentIndexAnimation=0;
      if(P2_nextAnimation>=0&&P2_nextAnimation!=P2_currentAnimation){
        P2_currentAnimation=P2_nextAnimation;
        P2currentIndexAnimation=0;
      }
      P2_nextAnimation=-1;
    }
    if(player2==7&&P2_currentTex!=tex_BRTouchGround) P2_currentTex=tex_BRFall[P2currentIndexAnimation];
    if(player2==51&&P2_currentTex!=tex_RussiaTouchGround) P2_currentTex=tex_RussiaFall[P2currentIndexAnimation];
    if(player2==24&&P2_currentTex!=tex_KoreaTouchGround) P2_currentTex=tex_KoreaFall[P2currentIndexAnimation];
    if(player2==11&&P2_currentTex!=tex_IslamicTouchGround) P2_currentTex=tex_IslamicFall[P2currentIndexAnimation];
    if(player2==666&&P2_currentTex!=tex_USATouchGround) P2_currentTex=tex_USAFall[P2currentIndexAnimation];
    P2currentIndexAnimation++;
  }else if(P2_life<=0){
    if(P2currentIndexAnimation>=6){
      canGG=1;
    }else{P2currentIndexAnimation++;}
    if(player2==7) P2_currentTex=tex_BRDie[P2currentIndexAnimation];
    if(player2==51) P2_currentTex=tex_RussiaDie[P2currentIndexAnimation];
    if(player2==24) P2_currentTex=tex_KoreaDie[P2currentIndexAnimation];
    if(player2==11) P2_currentTex=tex_IslamicDie[P2currentIndexAnimation];
    if(player2==666) P2_currentTex=tex_USADie[P2currentIndexAnimation];
  }else if(P2_currentAnimation==2){
    if(P2currentIndexAnimation>=3){
      P2_state=0;
      P2currentIndexAnimation=0;
      if(P2_nextAnimation>=0&&P2_nextAnimation!=P2_currentAnimation){
        P2_currentAnimation=P2_nextAnimation;
        P2currentIndexAnimation=0;
      }
      P2_nextAnimation=-1;
    }
    if(player2==7) P2_currentTex=tex_BRDamage[P2currentIndexAnimation];
    if(player2==51) P2_currentTex=tex_RussiaDamage[P2currentIndexAnimation];
    if(player2==24) P2_currentTex=tex_KoreaDamage[P2currentIndexAnimation];
    if(player2==11) P2_currentTex=tex_IslamicDamage[P2currentIndexAnimation];
    if(player2==666) P2_currentTex=tex_USADamage[P2currentIndexAnimation];
    P2currentIndexAnimation++;
  }else if(P2_currentAnimation==1){
    if(P2currentIndexAnimation>=6){
      P2currentIndexAnimation=0;
      if(P2_nextAnimation>=0&&P2_nextAnimation!=P2_currentAnimation){
        P2_currentAnimation=P2_nextAnimation;
        P2currentIndexAnimation=0;
      }
      P2_nextAnimation=-1;
    }
    if(player2==7) P2_currentTex=tex_BRWalk[P2currentIndexAnimation];
    if(player2==51) P2_currentTex=tex_RussiaWalk[P2currentIndexAnimation];
    if(player2==24) P2_currentTex=tex_KoreaWalk[P2currentIndexAnimation];
    if(player2==11) P2_currentTex=tex_IslamicWalk[P2currentIndexAnimation];
    if(player2==666) P2_currentTex=tex_USAWalk[P2currentIndexAnimation];
    P2currentIndexAnimation++;
  }else if(P2_currentAnimation==3){
    if(P2currentIndexAnimation>=4){
      P2currentIndexAnimation=0;
      if(P2_nextAnimation>=0&&P2_nextAnimation!=P2_currentAnimation){
        P2_currentAnimation=P2_nextAnimation;
        P2currentIndexAnimation=0;
      }
      P2_nextAnimation=-1;
    }
    if(player2==7) P2_currentTex=tex_BRShot[P2currentIndexAnimation];
    if(player2==51) P2_currentTex=tex_RussiaShot[P2currentIndexAnimation];
    if(player2==24) P2_currentTex=tex_KoreaShot[P2currentIndexAnimation];
    if(player2==11) P2_currentTex=tex_IslamicShot[P2currentIndexAnimation];
    if(player2==666) P2_currentTex=tex_USAShot[P2currentIndexAnimation];
    P2currentIndexAnimation++;
  }else {
    if(P2currentIndexAnimation>=4){
      P2currentIndexAnimation=0;
      if(P2_nextAnimation>=0&&P2_nextAnimation!=P2_currentAnimation){
        P2_currentAnimation=P2_nextAnimation;
        P2currentIndexAnimation=0;
      }
      P2_nextAnimation=-1;
    }
    if(player2==7) P2_currentTex=tex_BRIdle[P2currentIndexAnimation];
    if(player2==51) P2_currentTex=tex_RussiaIdle[P2currentIndexAnimation];
    if(player2==24) P2_currentTex=tex_KoreaIdle[P2currentIndexAnimation];
    if(player2==11) P2_currentTex=tex_IslamicIdle[P2currentIndexAnimation];
    if(player2==666) P2_currentTex=tex_USAIdle[P2currentIndexAnimation];
    P2currentIndexAnimation++;
}
  }
  if(currentScreen==-113&&n==1)
    glutTimerFunc(1000/FPS*6, execPlayerAnimations, 1);
}
# 23 "JCEBA.LoadLibs.h" 2
# 1 "Libs/JCEBA.BulletBehaviour.h" 1
Rectangle pos_Bullet;
Rectangle pos_Smoke;
int idxExplosion=-1;
int explodeNumber;
bool explodeAtomic;
int Bullet_owner;
bool Bullet_type=0;
bool BulletIsVisible;
int BulletOri;
GLuint BulletCurrentTex;
float Bullet_Vspeed,Bullet_Hspeed,Bullet_Angle;
float idxSmokeSprite=0;
int lastShoot=0;
float lastBulletX,lastBulletY;
void destroyBullet(int n);

void explode1(int n){
    if(!n){
      explodeAtomic=Bullet_type;
      idxExplosion=0;
      explodeNumber=1;
      pos_Explosion.p0.x=pos_Bullet.p0.x-(45.1/1.3);pos_Explosion.p0.y=(pos_Bullet.p1.y-pos_Bullet.p0.y)/2+pos_Bullet.p0.y;
      pos_Explosion.p1.x=pos_Explosion.p0.x+(80*(explodeAtomic+1));pos_Explosion.p1.y=pos_Explosion.p0.y+(80*(explodeAtomic+1));
    }
    if(idxExplosion>=24 -1)
      idxExplosion=-1;
    else
      glutTimerFunc(6*1000/FPS,explode1,1);
    idxExplosion++;
}

void initBulletConfigs(int owner){
  Bullet_owner=owner;
  Bullet_Vspeed=0;
  Bullet_Hspeed=0;
  BulletIsVisible=0;
  idxSmokeSprite=0;
  BulletOri=1;
  Bullet_Angle=0;
  if(owner==1){
    pos_Bullet.p0.y=pos_P1.p0.y+100;pos_Bullet.p1.y=pos_Bullet.p0.y+20;
    pos_Bullet.p0.x=pos_P1.p1.x;pos_Bullet.p1.x=pos_Bullet.p0.x+45.1;
    if(Bullet_type){
      pos_Bullet.p1.y+=20/1.3;
      pos_Bullet.p1.x+=45.1/1.3;
    }
    lastBulletX=pos_Bullet.p0.x;
  }else{
    pos_Bullet.p0.y=pos_P2.p0.y+100;pos_Bullet.p1.y=pos_Bullet.p0.y-20;
    pos_Bullet.p0.x=pos_P2.p0.x;pos_Bullet.p1.x=pos_Bullet.p0.x-45.1;
    if(Bullet_type){
      pos_Bullet.p1.y-=20/1.3;
      pos_Bullet.p1.x-=45.1/1.3;
    }
    lastBulletX=pos_Bullet.p1.x;
  }
  lastBulletY=(pos_Bullet.p1.y-pos_Bullet.p0.y)/2+pos_Bullet.p0.y;
}

void moveBullet(char* way, float steeps){

  lastBulletY=pos_Bullet.p0.y;
  if(BulletOri==1&&!(players==1&&playerTurn==2)){
    if(Bullet_owner==1)
      lastBulletX=pos_Bullet.p1.x-45.1;
    else
      lastBulletX=pos_Bullet.p1.x-45.1/4;
  }else{
    if(Bullet_owner==1)
      lastBulletX=pos_Bullet.p1.x+45.1/1.5;
    else
      lastBulletX=pos_Bullet.p1.x+45.1*2;
  }
  if(strEq(way,"up")||strEq(way,"down")){
      pos_Bullet.p0.y+=steeps;
      pos_Bullet.p1.y+=steeps;
      if(pos_Bullet.p0.y>600)destroyBullet(0);
      if(pos_Bullet.p0.y<-600/2)destroyBullet(0);
  }else if(strEq(way,"right")||strEq(way,"left")){
      pos_Bullet.p0.x+=steeps;
      pos_Bullet.p1.x+=steeps;
      if(pos_Bullet.p1.x>800/2)destroyBullet(0);
      if(pos_Bullet.p0.x<-800/2)destroyBullet(0);
    }
    if(bugMODE) movePlayer(playerTurn,way,steeps);
}

int checkCollision(){
  if(!BulletIsVisible)
    return 0;
  if(Bullet_owner==2){
    if(pos_Bullet.p0.x>=pos_P1.p0.x&&pos_Bullet.p0.x<=pos_P1.p1.x)
      if(pos_Bullet.p0.y>=pos_P1.p0.y&&pos_Bullet.p0.y<=pos_P1.p1.y)
        return 1;
  }else{
    if(pos_Bullet.p1.x>=pos_P2.p0.x&&pos_Bullet.p1.x<=pos_P2.p1.x)
      if(pos_Bullet.p0.y>=pos_P2.p0.y&&pos_Bullet.p0.y<=pos_P2.p1.y)
        return 2;
  }
  for(int i=0;i<=nMapGen;i++){
      if(playerTurn==1){
        if(pos_Bullet.p0.x<=mapPoints[i].x && mapPoints[i].x<=pos_Bullet.p1.x)
        if(600/-2<pos_Bullet.p0.y&&mapPoints[i].y>pos_Bullet.p0.y)
          return 3;
      }else{
        if(pos_Bullet.p1.x<=mapPoints[i].x && mapPoints[i].x<=pos_Bullet.p0.x)
        if(600/-2<pos_Bullet.p0.y&&mapPoints[i].y>pos_Bullet.p0.y)
          return 3;
      }
    }
  return 0;
}

void smokeBullet(){
  if(BulletIsVisible&&pause>0){
    if(idxSmokeSprite>=5 -1)
      idxSmokeSprite=0;
    idxSmokeSprite+=1/FPS*6*2;
    float divisor=2;
    if(Bullet_type)
      divisor=1.3;
    if(BulletOri){
      pos_Smoke.p0.x=lastBulletX;pos_Smoke.p0.y=lastBulletY;
      pos_Smoke.p1.x=pos_Smoke.p0.x-(45.1/divisor*2);pos_Smoke.p1.y=pos_Smoke.p0.y+(pos_Bullet.p1.y-pos_Bullet.p0.y);
    }else{
      pos_Smoke.p0.x=lastBulletX;pos_Smoke.p0.y=lastBulletY;
      pos_Smoke.p1.x=pos_Smoke.p0.x-(45.1/divisor*2);pos_Smoke.p1.y=pos_Smoke.p0.y+(pos_Bullet.p1.y-pos_Bullet.p0.y);
    }
  }
}

void bulletRotate(float Angle,bool smoke,bool banana){
    Angle=radToAngle(Angle,0);

    glPushMatrix();
    if(banana){
      if(Bullet_owner==1){
          glTranslatef((pos_Bullet.p0.x+(45.1/2))*1,(pos_Bullet.p0.y+(20/2))*1,0);
          glRotatef(Angle,0,0,1);
          glTranslatef((pos_Bullet.p0.x+(45.1/2))*-1,(pos_Bullet.p0.y+(20/2))*-1,0);
      }else{
          glTranslatef((pos_Bullet.p1.x+(45.1/2))*1,(pos_Bullet.p1.y+(20/2))*1,0);
          glRotatef(Angle,0,0,1);
          glTranslatef((pos_Bullet.p1.x+(45.1/2))*-1,(pos_Bullet.p1.y+(20/2))*-1,0);
      }
      refreshBullet(pos_Bullet,BulletCurrentTex,1);
    }else{
      if(BulletOri==1&&!(players==1&&playerTurn==2)){
          glTranslatef((pos_Bullet.p0.x+(45.1/2))*1,(pos_Bullet.p0.y+(20/2))*1,0);
          glRotatef(Angle,0,0,1);
          glTranslatef((pos_Bullet.p0.x+(45.1/2))*-1,(pos_Bullet.p0.y+(20/2))*-1,0);
          if(playerTurn==1)
            refreshBullet(pos_Bullet,BulletCurrentTex,1);
          else
          refreshBullet(pos_Bullet,BulletCurrentTex,-1);
      }else{
          glTranslatef((pos_Bullet.p1.x+(45.1/2))*1,(pos_Bullet.p1.y+(20/2))*1,0);
          glRotatef(Angle,0,0,1);
          glTranslatef((pos_Bullet.p1.x+(45.1/2))*-1,(pos_Bullet.p1.y+(20/2))*-1,0);
          if(Bullet_owner==2)
            refreshBullet(pos_Bullet,BulletCurrentTex,1);
          else
            refreshBullet(pos_Bullet,BulletCurrentTex,-1);
      }
    }
    glPopMatrix();
    if(smoke){
      glPushMatrix();
      if(BulletOri==1&&!(players==1&&playerTurn==2)){
        glTranslatef((pos_Bullet.p0.x+(45.1/2))*1,(pos_Bullet.p0.y+(20/2))*1,0);
        glRotatef(Angle,0,0,1);
        glTranslatef((pos_Bullet.p0.x+(45.1/2))*-1,(pos_Bullet.p0.y+(20/2))*-1,0);
      }else{
        glTranslatef((pos_Bullet.p1.x+(45.1/2))*1,(pos_Bullet.p1.y+(20/2))*1,0);
        glRotatef(Angle,0,0,1);
        glTranslatef((pos_Bullet.p1.x+(45.1/2))*-1,(pos_Bullet.p1.y+(20/2))*-1,0);
      }
      refreshSmoke(pos_Smoke,tex_Smoke[(int)idxSmokeSprite],BulletOri);
      glPopMatrix();
    }
}

void bulletTransform(){
    float Angle;
  if(!Bullet_type){
  if(Bullet_owner==1){
    if(player1==7){
      Bullet_Angle+=0.15;
      if(Bullet_Angle>2*3.14159265)
        Bullet_Angle=0;
      bulletRotate(Bullet_Angle,0,1);
      return;
    }
  }
  if(Bullet_owner==2){
    if(player2==7){
      Bullet_Angle+=0.15;
      if(Bullet_Angle>2*3.14159265)
        Bullet_Angle=0;
      bulletRotate(Bullet_Angle,0,1);
      return;
    }
  }
}
  Bullet_Angle=atan(Bullet_Vspeed/Bullet_Hspeed);
  bulletRotate(Bullet_Angle,!Bullet_type,0);
}

void BulletBehave(){
  if(Bullet_Hspeed!=0){
    moveBullet("left",(Bullet_Hspeed+wind)*1/FPS);
  }
  if(Bullet_Vspeed!=0){
    moveBullet("up",Bullet_Vspeed*1/FPS);
  }
  if(Bullet_type){
    if(Bullet_owner==1){
      if(player1==7)
        BulletCurrentTex=tex_BulletDolly;
      else
        BulletCurrentTex=tex_BulletAtomic;
      }
      if(Bullet_owner==2){
        if(player2==7)
          BulletCurrentTex=tex_BulletDolly;
        else
          BulletCurrentTex=tex_BulletAtomic;
        }
    }else{
      if(Bullet_owner==1){
        if(player1==7)
          BulletCurrentTex=tex_BulletBanana;
        else
          BulletCurrentTex=tex_BulletRocket;
        }
        if(Bullet_owner==2){
          if(player2==7)
            BulletCurrentTex=tex_BulletBanana;
          else
            BulletCurrentTex=tex_BulletRocket;
          }
    }
  if(Bullet_owner==1){
    if(player1!=7||Bullet_type==1)
      smokeBullet();
  }else{
    if(player2!=7||Bullet_type==1)
      smokeBullet();
  }
  bulletTransform();
  int collision=checkCollision();
  switch (collision) {
    default:break;
    case 1:
      explode1(0);
      if(Bullet_type){
        P1_life-=damageAtomic/2;
        if(P1_life<0)P1_life=0;
        if(P1_life==0){
          P1currentIndexAnimation=0;
          P1_state=4;
          if(soundState)alSourcePlay(ALsource[12+rand()%2]);
        }else{
          P1_state=2;
          P1currentIndexAnimation=0;
          if(soundState)alSourcePlay(ALsource[10+rand()%2]);
          if(soundState)alSourcePlay(ALsource[18]);
        }
      }else{
        P1_life-=damageRocket/2;
        if(P1_life<0)P1_life=0;
        if(P1_life==0){
          P1currentIndexAnimation=0;
          P1_state=4;
          if(soundState)alSourcePlay(ALsource[12+rand()%2]);
        }else{
          P1_state=2;
          P2currentIndexAnimation=0;
          if(soundState)alSourcePlay(ALsource[10+rand()%2]);
        }
      }

    break;
    case 2:
      explode1(0);
      if(Bullet_type){
        P2_life-=damageAtomic/2;
        if(P2_life<0)P2_life=0;
        if(P2_life==0){
          P2currentIndexAnimation=0;
          P2_state=4;
          if(soundState)alSourcePlay(ALsource[12+rand()%2]);
        }else{
          P2_state=2;
          if(soundState)alSourcePlay(ALsource[10+rand()%2]);
          if(soundState)alSourcePlay(ALsource[18]);
        }
      }else{
        P2_life-=damageRocket/2;
        if(P2_life<0)P2_life=0;
        if(P2_life==0){
          P2currentIndexAnimation=0;
          P2_state=4;
          if(soundState)alSourcePlay(ALsource[12+rand()%2]);
        }else{
          P2_state=2;
          if(soundState)alSourcePlay(ALsource[10+rand()%2]);
        }
      }

    break;
    case 3:
    if(DEBUG) printf("Mapa acertado\n");
    if(Bullet_type){
      if(soundState)alSourcePlay(ALsource[18]);
    }else{
      if(soundState)alSourcePlay(ALsource[20]);
    }
    explode1(0);
      float currentPoints=1;
      float MAXdamage;
      if(Bullet_type)
        MAXdamage=damageAtomic*0.67;
      else
        MAXdamage=damageRocket*1.3;
      float nPoints=45.1*MAXdamage/800*nMapGen;
      float damagePercent=0;
      for(int i=1;i<=nMapGen;i++){
        if(pos_Bullet.p0.x-(nPoints*2)<=mapPoints[i].x && mapPoints[i].x<=pos_Bullet.p1.x+(nPoints*2)){
          if(DEBUG)printf("damage:%f    MADDAM:%f\n",damagePercent,MAXdamage);
              if(!bugMODE)
                mapPoints[i].y-=damagePercent;
              else
                mapPoints[i].y+=damagePercent/4;

              if(mapPoints[i].y<averageGroundSpawn-199)
                mapPoints[i].y=averageGroundSpawn-199;
              if(currentPoints<nPoints/1.5)
                damagePercent+=MAXdamage*(25/nPoints);
              else
                damagePercent-=MAXdamage*(25/nPoints);
              if(damagePercent<0)
                damagePercent=0;
              currentPoints++;
          }
      }
      refreshMapList(useStencil);
    break;
  }
  if(collision>0){
    destroyBullet(0);
  }
}


void destroyBullet(int n){
  if(BulletIsVisible&&lastShoot==playerTurn){
  Bullet_type=0;
  if(playerTurn==1){
    P1_state=0;
    playerTurn=2;
  }else{
    P2_state=0;
    playerTurn=1;
    disFromP1=((pos_P1.p1.x-pos_P1.p0.x)/2+pos_P1.p0.x)-(pos_Bullet.p0.x);
  }
  if(windState) wind=((rand()%3)+1)*20;
    else wind=0;
  alSourceStop(ALsource[14]);alSourceStop(ALsource[15]);alSourceStop(ALsource[16]);
  if(windState) alSourcePlay(ALsource[(wind/20)-1+14]);
  if(20&&rand()%2) wind*=-1;
  if(Bullet_type){
    if(soundState)alSourcePlay(ALsource[18]);
  }else{
    if(soundState)alSourcePlay(ALsource[20]);
  }
  BulletIsVisible=0;
  strengh=150;
  alreadyAI=false;
}
}

void shootBullet(float Angle,float speed,bool isHuman){
  if(Bullet_type){
    if(soundState)alSourcePlay(ALsource[19]);
  }else{
    if(soundState)alSourcePlay(ALsource[21]);
  }
  if(playerTurn==1){
    P1_state=0;
    Bullet_owner=1;
  }else{
    P2_state=0;
    Bullet_owner=2;
  }
  BulletIsVisible=1;
  Bullet_Angle=Angle;
  Bullet_Vspeed=sin(Angle)*speed;
  if((Bullet_Vspeed<0&&(!1||(players==1&&playerTurn==2)))||(playerTurn==2&&mouseX<pos_P2.p0.x&&players==2))
    Bullet_Vspeed*=-1;
  Bullet_Hspeed=cos(Angle)*speed;

  if(isHuman){
  if(Bullet_Hspeed<0)Bullet_Hspeed*=-1;
  if(Bullet_owner==1&&mouseX<pos_P1.p1.x){
      Bullet_Hspeed*=-1;
      BulletOri*=-1;
    }
    if(Bullet_owner==2&&mouseX<pos_P2.p0.x){
      Bullet_Hspeed*=-1;
      BulletOri*=-1;
    }
  }
  lastShoot=playerTurn;
  if(DEBUG)printf("angle: %f, strengh:%f\n",getAngle(0),speed);
  if(DEBUG)printf("BulletVS:%f  BulletHS:%f  BulletORI:%.1d\n",Bullet_Vspeed,Bullet_Hspeed,BulletOri);
  if(0)glutTimerFunc(1000*0, destroyBullet, 0);
}
# 24 "JCEBA.LoadLibs.h" 2
# 1 "Libs/JCEBA.Mechanics.h" 1

int checkNormalForce(int id){
  if(id==1){
    for(int i=1;i<=nMapGen;i++){
      if(mapPoints[i].x>=pos_P1.p0.x+20&&mapPoints[i].x<=pos_P1.p1.x-20)
        if(mapPoints[i].y>=pos_P1.p0.y){
          if(P1_Vspeed<0&&P1_currentAnimation==5){
            P1currentIndexAnimation=0;
            if(player1==7) P1_currentTex=tex_BRTouchGround;
            if(player1==51) P1_currentTex=tex_RussiaTouchGround;
            if(player1==24) P1_currentTex=tex_KoreaTouchGround;
            if(player1==11) P1_currentTex=tex_IslamicTouchGround;
            if(player1==666) P1_currentTex=tex_USATouchGround;
          }
          return 1;
        }
      }
  }else{
    for(int i=nMapGen;i>=1;i--){
      if(mapPoints[i].x>=pos_P2.p0.x+20&&mapPoints[i].x<=pos_P2.p1.x-20)
        if(mapPoints[i].y>=pos_P2.p0.y){
          if(P2_Vspeed<0&&P2_currentAnimation==5){
            P2currentIndexAnimation=0;
            if(player2==7) P2_currentTex=tex_BRTouchGround;
            if(player2==51) P2_currentTex=tex_RussiaTouchGround;
            if(player2==24) P2_currentTex=tex_KoreaTouchGround;
            if(player2==11) P2_currentTex=tex_IslamicTouchGround;
            if(player2==666) P2_currentTex=tex_USATouchGround;
        }
        return 1;
      }
    }
  }
  return 0;
}

float getAngle(int isRAD){
    float tgH,tgW;
    float arcTG;
  if(playerTurn==1){
    tgH=(float)mouseY-(100 +pos_P1.p0.y);
    tgW=(float)mouseX-pos_P1.p1.x;
  }else{
    tgH=(float)mouseY-(100 +pos_P2.p0.y);
    tgW=(float)mouseX-pos_P2.p0.x;
  }
  arcTG=atan(tgH/tgW);
  if(!isRAD)
    return radToAngle(arcTG,0);
  else
    return arcTG;
}

void drawMissilePath(){
  float pX,pY;
  float MPVSpeed=0,MPHSpeed=0;
  if(!mouseClicked||!MOUSE1)
    return;
  MPVSpeed=sin(getAngle(1))*strengh;
  if((MPVSpeed<0&&(!1||(players==1&&playerTurn==2)))||(playerTurn==2&&mouseX<pos_P2.p0.x&&players==2))
    MPVSpeed*=-1;
  MPHSpeed=cos(getAngle(1))*strengh;
  if(MPHSpeed<0)MPHSpeed*=-1;
  if(Bullet_owner==1&&mouseX<pos_P1.p1.x)
    MPHSpeed*=-1;
  if(Bullet_owner==2&&mouseX<pos_P2.p0.x)
    MPHSpeed*=-1;
  if(playerTurn==1){
    pY=pos_P1.p0.y+100;
    pX=pos_P1.p1.x;
  }else{
    pY=pos_P2.p0.y+100;
    pX=pos_P2.p0.x;
  }
glNewList(parabol,
# 75 "Libs/JCEBA.Mechanics.h" 3 4
                 0x1301
# 75 "Libs/JCEBA.Mechanics.h"
                                       );
glLineWidth(1.5);
glBegin(
# 77 "Libs/JCEBA.Mechanics.h" 3 4
       0x0003
# 77 "Libs/JCEBA.Mechanics.h"
                    );
while (pX>-800/2&&pX<800/2&&pY>-600/2) {
  pX+=(MPHSpeed+wind)/FPS;
  pY+=MPVSpeed/FPS;
  glVertex3f(pX,pY,0.4);
  MPVSpeed+=gravity*(1/FPS);
}
glEnd();
glEndList();
}

void applyGravity(){
  if(!checkNormalForce(1)){

    P1_Vspeed+=gravity*(1/FPS);
  }else if(P1_Vspeed<0)
    P1_Vspeed=0;

  if(!checkNormalForce(2)){

    P2_Vspeed+=gravity*(1/FPS);
  }else if(P2_Vspeed<0)
    P2_Vspeed=0;

  if(BulletIsVisible)
    Bullet_Vspeed+=gravity*(1/FPS);
}
# 25 "JCEBA.LoadLibs.h" 2
# 1 "Libs/JCEBA.Scenes.h" 1
int idxSplash=-1,idxCredits=0;
int idxGG=0;
int auxPrepartida=-1;
bool gameCalled=0;
bool menuCalled=0;
bool preMenuCalled=0;
bool creditsCalled=0;
bool optionsCalled=0;
bool howToCalled=0;
bool numPlayersCalled=0;
bool chooseCharsCalled=0;
bool prePartidaCalled=0;
bool splashCalled=0;
bool escape=0;
bool restart=0;

void HUD(){
  char varTemp[50];
  if(players==2){
    if(playerTurn==2){
      glColor4f(1,1,1,1);
      for(int i=0;i<P2_life;i++)
        refreshHeart(i);
      selectColor("yellow");
      drawText(
# 25 "Libs/JCEBA.Scenes.h" 3 4
              ((void *)0x0008)
# 25 "Libs/JCEBA.Scenes.h"
                                      ,"Player 2",pos_player,1);
      drawText(
# 26 "Libs/JCEBA.Scenes.h" 3 4
              ((void *)0x0008)
# 26 "Libs/JCEBA.Scenes.h"
                                      ,str_Lifes,pos_life,1);
      drawText(
# 27 "Libs/JCEBA.Scenes.h" 3 4
              ((void *)0x0008)
# 27 "Libs/JCEBA.Scenes.h"
                                      ,str_wind,pos_wind2,1);
      if(wind<0)
        snprintf(varTemp, 50, "%d", -wind);
      else
        snprintf(varTemp, 50, "%d", wind);
      drawText(
# 32 "Libs/JCEBA.Scenes.h" 3 4
              ((void *)0x0008)
# 32 "Libs/JCEBA.Scenes.h"
                                      ,varTemp,pos_VARwind,1);
      drawText(
# 33 "Libs/JCEBA.Scenes.h" 3 4
              ((void *)0x0008)
# 33 "Libs/JCEBA.Scenes.h"
                                      ,str_Angle,pos_angle,1);
      snprintf(varTemp, 50, "%.2f", simplifyAngle(getAngle(0)));
      drawText(
# 35 "Libs/JCEBA.Scenes.h" 3 4
              ((void *)0x0008)
# 35 "Libs/JCEBA.Scenes.h"
                                      ,varTemp,pos_VARangle,1);
      drawText(
# 36 "Libs/JCEBA.Scenes.h" 3 4
              ((void *)0x0008)
# 36 "Libs/JCEBA.Scenes.h"
                                      ,str_Strength,pos_strength,1);
      drawText(
# 37 "Libs/JCEBA.Scenes.h" 3 4
              ((void *)0x0008)
# 37 "Libs/JCEBA.Scenes.h"
                                      ,str_AtomicBombs,pos_bombs,1);
      snprintf(varTemp, 50, "%d", P2_Bombs);
      drawText(
# 39 "Libs/JCEBA.Scenes.h" 3 4
              ((void *)0x0008)
# 39 "Libs/JCEBA.Scenes.h"
                                      ,varTemp,pos_VARbombs,1);
      drawText(
# 40 "Libs/JCEBA.Scenes.h" 3 4
              ((void *)0x0008)
# 40 "Libs/JCEBA.Scenes.h"
                                      ,str_Projetile,pos_projetile,1);
      if(cheatMode)
        drawText(
# 42 "Libs/JCEBA.Scenes.h" 3 4
                ((void *)0x0008)
# 42 "Libs/JCEBA.Scenes.h"
                                        ,str_CheatOn,pos_cheat,1);
      glColor4f(1,1,1,1);
      if(Bullet_type){
        if(player2==7)
          refreshShowBullet(tex_BulletDolly);
        else
          refreshShowBullet(tex_BulletAtomic);
      }else{
        if(player2==7)
          refreshShowBullet(tex_BulletBanana);
        else
          refreshShowBullet(tex_BulletRocket);
      }
      refreshShowStrength();
      glLineWidth(2);
      glColor4f(1,1,1,1);
      glBegin(
# 58 "Libs/JCEBA.Scenes.h" 3 4
             0x0002
# 58 "Libs/JCEBA.Scenes.h"
                         );
        if(!10000)glVertex3f(mouseX,mouseY,1);
        else{
          float nX=cos(getAngle(1))*10000,nY=sin(getAngle(1))*10000;
          if(nX<0||mouseX<pos_P2.p0.x)nX*=-1;
          if((nY<0&&(!1||(players==1&&playerTurn==2)))||(playerTurn==2&&mouseX<pos_P2.p0.x&&players==2))nY*=-1;
          glVertex3f(nX,nY,1);
        }
        glVertex3f(pos_P2.p0.x,pos_P2.p1.y,1);
      glEnd();
      return;
    }
  }
  glColor4f(1,1,1,1);
  for(int i=0;i<P1_life;i++)
    refreshHeart(i);
  selectColor("yellow");
  drawText(
# 75 "Libs/JCEBA.Scenes.h" 3 4
          ((void *)0x0008)
# 75 "Libs/JCEBA.Scenes.h"
                                  ,"Player 1",pos_player,1);
  drawText(
# 76 "Libs/JCEBA.Scenes.h" 3 4
          ((void *)0x0008)
# 76 "Libs/JCEBA.Scenes.h"
                                  ,str_Lifes,pos_life,1);
  drawText(
# 77 "Libs/JCEBA.Scenes.h" 3 4
          ((void *)0x0008)
# 77 "Libs/JCEBA.Scenes.h"
                                  ,str_wind,pos_wind2,1);
  if(wind<0)
    snprintf(varTemp, 50, "%d", -wind);
  else
    snprintf(varTemp, 50, "%d", wind);
  drawText(
# 82 "Libs/JCEBA.Scenes.h" 3 4
          ((void *)0x0008)
# 82 "Libs/JCEBA.Scenes.h"
                                  ,varTemp,pos_VARwind,1);
  drawText(
# 83 "Libs/JCEBA.Scenes.h" 3 4
          ((void *)0x0008)
# 83 "Libs/JCEBA.Scenes.h"
                                  ,str_Angle,pos_angle,1);
  snprintf(varTemp, 50, "%.2f", simplifyAngle(getAngle(0)));
  drawText(
# 85 "Libs/JCEBA.Scenes.h" 3 4
          ((void *)0x0008)
# 85 "Libs/JCEBA.Scenes.h"
                                  ,varTemp,pos_VARangle,1);
  drawText(
# 86 "Libs/JCEBA.Scenes.h" 3 4
          ((void *)0x0008)
# 86 "Libs/JCEBA.Scenes.h"
                                  ,str_Strength,pos_strength,1);
  drawText(
# 87 "Libs/JCEBA.Scenes.h" 3 4
          ((void *)0x0008)
# 87 "Libs/JCEBA.Scenes.h"
                                  ,str_AtomicBombs,pos_bombs,1);
  snprintf(varTemp, 50, "%d", P1_Bombs);
  drawText(
# 89 "Libs/JCEBA.Scenes.h" 3 4
          ((void *)0x0008)
# 89 "Libs/JCEBA.Scenes.h"
                                  ,varTemp,pos_VARbombs,1);
  drawText(
# 90 "Libs/JCEBA.Scenes.h" 3 4
          ((void *)0x0008)
# 90 "Libs/JCEBA.Scenes.h"
                                  ,str_Projetile,pos_projetile,1);
  if(cheatMode)
    drawText(
# 92 "Libs/JCEBA.Scenes.h" 3 4
            ((void *)0x0008)
# 92 "Libs/JCEBA.Scenes.h"
                                    ,str_CheatOn,pos_cheat,1);
  glColor4f(1,1,1,1);
  if(Bullet_type&&playerTurn==1){
    if(player1==7)
      refreshShowBullet(tex_BulletDolly);
    else
      refreshShowBullet(tex_BulletAtomic);
  }else{
    if(player1==7)
      refreshShowBullet(tex_BulletBanana);
    else
      refreshShowBullet(tex_BulletRocket);
  }
  refreshShowStrength();
  if(playerTurn==1){
  glColor4f(1,1,1,1);
  glLineWidth(2);
  glBegin(
# 109 "Libs/JCEBA.Scenes.h" 3 4
         0x0002
# 109 "Libs/JCEBA.Scenes.h"
                     );
  if(!10000)glVertex3f(mouseX,mouseY,1);
  else{
    float nX=cos(getAngle(1))*10000,nY=sin(getAngle(1))*10000;
    if(nX<0||mouseX<pos_P1.p1.x)nX*=-1;
    if((nY<0&&(!1||(players==1&&playerTurn==2)))||(playerTurn==2&&mouseX<pos_P2.p0.x&&players==2))nY*=-1;
    glVertex3f(nX,nY,1);
  }
    glVertex3f(pos_P1.p1.x,pos_P1.p1.y,1);
  glEnd();
}
}
void game(){
  if(!gameCalled){
    changeResolution();
    stopAllSounds(-1);
    initPlayerConfigs();
    setMapConfig(mapPreConfig);
    mapGen(); refreshMapList(useStencil);
    initBulletConfigs(playerTurn);
    mouseClicked=0;MOUSE1=0;idxGG=-1;lastShoot=0;
    prePartidaCalled=0;menuCalled=0;canGG=0; creditsCalled=0;
    strengh=150;
    if(stage==7){ refreshBackground(tex_backBR); if(musicState)alSourcePlay(ALsource[5]);}
    if(stage==51) {refreshBackground(tex_backRussia);if(musicState)alSourcePlay(ALsource[8]);}
    if(stage==24) {refreshBackground(tex_backKorea);if(musicState)alSourcePlay(ALsource[7]);}
    if(stage==11) {refreshBackground(tex_backIslamic);if(musicState)alSourcePlay(ALsource[6]);}
    if(stage==666) {refreshBackground(tex_backUSA);if(musicState)alSourcePlay(ALsource[9]);}
    gameCalled=1;
  }
  if(pause>0){
    if(cheatMode&&MOUSE1){
      selectColor("red");
      drawMissilePath();
    }
    glColor4f(1,1,1,1);
    glCallList(Background);
    glCallList(MAP);
    applyGravity();
    if(idxExplosion>0){
      if(explodeAtomic)
        selectColor("green");
      if(explodeNumber==1)
        refreshExplosion(tex_Explosion1[idxExplosion]);

      glColor4f(1,1,1,1);
    }
    if(players==1&&playerTurn==2&&P2_state!=2)
      AIturn();
    playerBehave();
    if(BulletIsVisible)
      BulletBehave();
    if(canGG) gg();
    glColor4f(1,1,1,1);
    refreshP1(pos_P1,P1_currentTex,P1_Ori);
    if(player1==player2){
      selectColor("red");
      refreshP2(pos_P2,P2_currentTex,P2_Ori);
      glColor4f(1,1,1,1);
    }else
      refreshP2(pos_P2,P2_currentTex,P2_Ori);
  }else{

    glColor4f(1,1,1,1);
    glCallList(Background);
    glCallList(MAP);
    refreshP1(pos_P1,P1_currentTex,P1_Ori);
    if(player1==player2){
      selectColor("red");
      refreshP2(pos_P2,P2_currentTex,P2_Ori);
      glColor4f(1,1,1,1);
    }else
      refreshP2(pos_P2,P2_currentTex,P2_Ori);

    glColor3f(0,0,1);
    if(escape){
      glRasterPos3f(-350,0,1);
      for (unsigned int i = 0;i<strlen(str_escape);i++) {
         glutBitmapCharacter(
# 187 "Libs/JCEBA.Scenes.h" 3 4
                            ((void *)0x0008)
# 187 "Libs/JCEBA.Scenes.h"
                                                    , str_escape[i]);
      }
    }else if(restart){
      glRasterPos3f(-350,0,1);
      for (unsigned int i = 0;i<strlen(str_restart);i++) {
         glutBitmapCharacter(
# 192 "Libs/JCEBA.Scenes.h" 3 4
                            ((void *)0x0008)
# 192 "Libs/JCEBA.Scenes.h"
                                                    , str_restart[i]);
      }
    }else{
      glRasterPos3f(-350,0,1);
      for (unsigned int i = 0;i<strlen(str_pause);i++) {
         glutBitmapCharacter(
# 197 "Libs/JCEBA.Scenes.h" 3 4
                            ((void *)0x0008)
# 197 "Libs/JCEBA.Scenes.h"
                                                    , str_pause[i]);
      }
    }

    glColor4f(1,1,1,1);
    if(escape)
      escape=actionButtons(201);
    if(restart)
      restart=actionButtons(202);
    glColor4f(0,0,0,0.5);
    drawRectangle(pos_global,1);
  }
  if(pause>0&&P1_life>0&&P2_life>0)
    HUD();
}

void gg(){
  normalizeSprites();
  if(players==1){
    glColor4f(1,1,1,1);
    if(P1_life<=0){
      if(idxGG<0)idxGG=0;

      currentScreen=actionButtons(98);
    }else if(P2_life<=0){
      if(idxGG<0){idxGG=0;
        if(stage==666) stage=0;
        if(stage==51)stage=666;
        if(stage==24) stage=51;
        if(stage==11) stage=24;
        if(stage==7)stage=11;
      }
      if(stage==0) {

        currentScreen=actionButtons(99);
      }else{

        currentScreen=actionButtons(98);
      }
    }
  }else{
    if(idxGG<0)idxGG=0;

    currentScreen=actionButtons(101);
  }
  glColor4f(1,1,1,1);
  glCallList(G1);
  if(idxGG>=45)
    glCallList(G2);
  selectColor("yellow");
  if(idxGG>=90)
    if(P1_life<=0){
      if(player2==7) refreshWhoWon(str_BRWon);
      if(player2==51) refreshWhoWon(str_RussiaWon);
      if(player2==24) refreshWhoWon(str_KoreaWon);
      if(player2==11) refreshWhoWon(str_IslamicWon);
      if(player2==666) refreshWhoWon(str_USAWon);
    }else if(P2_life<=0){
      if(player1==7) refreshWhoWon(str_BRWon);
      if(player1==51) refreshWhoWon(str_RussiaWon);
      if(player1==24) refreshWhoWon(str_KoreaWon);
      if(player1==11) refreshWhoWon(str_IslamicWon);
      if(player1==666) refreshWhoWon(str_USAWon);
    }
}
void menu(){
    glColor4f(1,1,1,1);
    if(!menuCalled){changeResolution(); menuCalled=1; optionsCalled=0; howToCalled=0; numPlayersCalled=0;stopAllSounds(3); prePartidaCalled=0;
    ALint state;
    alGetSourcei(ALsource[3],
# 266 "Libs/JCEBA.Scenes.h" 3 4
                            0x1010
# 266 "Libs/JCEBA.Scenes.h"
                                           ,&state);
      if(
# 267 "Libs/JCEBA.Scenes.h" 3 4
        0x1012 
# 267 "Libs/JCEBA.Scenes.h"
                   != state)
        if(musicState)alSourcePlay(ALsource[3]);
    refreshLanguage();
    refreshBackground(tex_MainMenu);
    }
    glCallList(Background);
    glColor4f(1,1,1,1);
    glCallList(title);
    glCallList(subtitle);
    glColor4f(R, G, B, A);
    currentScreen=actionButtons(-112);
}

void preMenu(){
    glColor4f(1,1,1,1);
    if(!preMenuCalled){changeResolution();refreshBackground(tex_MainMenu); preMenuCalled=1; menuCalled=0; A=0;stopAllSounds(3); if(musicState)alSourcePlay(ALsource[3]);}
    glCallList(Background);
    glColor4f(1,1,1,A);
    glCallList(title);
    if(A>=1)
    {
        glColor4f(1,1,1,(A-1)*2);
        glCallList(subtitle);
        glColor4f(R, G, B, A);
    }
    if(A>=2)mapGen(); refreshMapList(0);
    {
        glColor4f(1,1,0,(A-2)*4);
        drawText(
# 295 "Libs/JCEBA.Scenes.h" 3 4
                ((void *)0x0008)
# 295 "Libs/JCEBA.Scenes.h"
                                        ,str_pressEnterToContinue,pos_pressEnterToContinue,0.9);
    }
    if(ENTER||MOUSE1)
    {
        currentScreen=-112;
        ENTER=0;
    }
}

void splash(){
  if(!splashCalled){
    changeResolution();
    if(rand()%10==0){
      if(soundState)alSourcePlay(ALsource[0]);
    }else{
      if(soundState)alSourcePlay(ALsource[1]);
    }
  splashCalled=1;
  }
  pos_Splash.p0.x=-800/2;pos_Splash.p0.y=-114;
  pos_Splash.p1.x=800/2;pos_Splash.p1.y=114;
  if(DEBUG) printf("splash.");
  glColor4f(1,1,1,1);
  if(idxSplash==24 -3)
    if(soundState)alSourcePlay(ALsource[2]);
  if(idxSplash<24 -1)
    drawTexture(pos_Splash,1,tex_Splash[idxSplash],1);
  else
    drawTexture(pos_Splash,1,tex_Splash[24 -1],1);
  glColor4f(R, G, B, A);
  if(idxSplash>=24 +16){
    currentScreen=-117;
    if(DEBUG) printf("..OK\n");
  }
}

void options(){
    glColor3f(1,1,1);
    if(!optionsCalled){refreshBackground(tex_SubMenu0); optionsCalled=1; menuCalled=0;stopAllSounds(3);}
    glCallList(Background);
    selectColor("yellow");
    glCallList(optionsMenu);
    selectColor("grey");
    currentScreen=actionButtons(-114);
    currentOptions();
}
void mapEdit(){
    glColor3f(1,1,1);
    if(!optionsCalled){refreshBackground(tex_SubMenu0); optionsCalled=1; menuCalled=0;stopAllSounds(3);mapGen();alreadyGenMap=false; refreshMapList(0);}
    glCallList(Background);
    if(alreadyGenMap)glCallList(MAP);
    selectColor("yellow");
    glCallList(mapMenu);
    selectColor("grey");
    currentScreen=actionButtons(-7);
    currentMapOptions();
}

void howto(){
    glColor3f(1,1,1);
    if(!howToCalled){changeResolution();refreshBackground(tex_SubMenu1); howToCalled=1; menuCalled=0;stopAllSounds(3);}
    glCallList(Background);
    selectColor("yellow");
    glCallList(instructionsMenu);
    selectColor("grey");
    currentScreen=actionButtons(-115);
}

void credits(){
  if(!creditsCalled){refreshLanguage();preMenuCalled=0;stopAllSounds(-1);idxCredits=0;creditsCalled=1;alSourcePlay(ALsource[22]);}
  glColor4f(1,1,1,1);
  if(idxCredits<66){
    refreshBackground(tex_Credits[idxCredits]);
    if(DEBUG) printf("idx: %d\n",idxCredits);
  }else{
    if(bugMODE)refreshBackground(tex_bixao);
    if(idxCredits>66 +23)
      currentScreen=-117;
  }
  glCallList(Background);
  idxCredits++;
}

void numPlayers(){
    selectColor("red");
    if(!numPlayersCalled){changeResolution();refreshBackground(tex_MainMenu); numPlayersCalled=1; menuCalled=0; chooseCharsCalled=0;stopAllSounds(3);}
    glCallList(Background);
    selectColor("grey");
    currentScreen=actionButtons(-118);
}

void chooseChars(){
    FPS=90;
    stage=0;
    glColor4f(1,1,1,1);
    if(!chooseCharsCalled){changeResolution();refreshBackground(tex_mundiMap); chooseCharsCalled=1; numPlayersCalled=0; prePartidaCalled=0;stopAllSounds(3);}
    glCallList(Background);
    currentScreen=actionButtons(-119);
    if(players==2&&!1){
      if(player1==7) refreshFlagXes(pos_flagBR);
      if(player1==51) refreshFlagXes(pos_flagRussia);
      if(player1==24) refreshFlagXes(pos_flagKorea);
      if(player1==11) refreshFlagXes(pos_flagIslamic);
      if(player1==666) refreshFlagXes(pos_flagUSA);
    }
    glColor4f(R, G, B, A);
}

void prePartida(){
  glColor4f(1,1,1,1);
  if(!prePartidaCalled){changeResolution();refreshBackground(tex_mundiMap); stopAllSounds(3);prePartidaCalled=1; greyShade=0.5; chooseCharsCalled=0; gameCalled=0;
    ALint state;
    alGetSourcei(ALsource[3],
# 407 "Libs/JCEBA.Scenes.h" 3 4
                            0x1010
# 407 "Libs/JCEBA.Scenes.h"
                                           ,&state);
      if(
# 408 "Libs/JCEBA.Scenes.h" 3 4
        0x1012 
# 408 "Libs/JCEBA.Scenes.h"
                   != state)
        if(musicState)alSourcePlay(ALsource[3]);
  }
  glCallList(Background);
  if (players==1){
    stage=player2;
    if(player2>7){
      glCallList(flagBR);
      refreshFlagXes(pos_flagBR);
    }
    if(player2>11){
      glCallList(flagIsla);
      refreshFlagXes(pos_flagIslamic);
    }
    if(player2>24){
      glCallList(flagKorea);
      refreshFlagXes(pos_flagKorea);
    }
    if(player2>51){
      glCallList(flagRussia);
      refreshFlagXes(pos_flagRussia);
    }
  }else if(stage==0){
    stage=randCountry();
  }

  currentScreen=actionButtons(-120);

  glColor3f(greyShade,greyShade,greyShade);
  if(stage==7) glCallList(flagBR);
  if(stage==51) glCallList(flagRussia);
  if(stage==24) glCallList(flagKorea);
  if(stage==11) glCallList(flagIsla);
  if(stage==666) glCallList(flagUSA);
}
# 26 "JCEBA.LoadLibs.h" 2
# 1 "Libs/JCEBA.IO.h" 1
void mouseAction(int isHuman){ if(DEBUG) printf("mouse action\n");
  if(players==1&&playerTurn==2&&isHuman){
    mouseClicked=0;
    return;
  }
  if(isHuman&&playerTurn==1&&P1_state==5){
    mouseClicked=0;
    return;
  }
  if(isHuman&&playerTurn==2&&P2_state==5){
    mouseClicked=0;
    return;
  }
  if(mouseClicked&&gameCalled&&P1_life>0&&P2_life>0&&pause>0){if(DEBUG) printf("mouse clicked\n");

    if(playerTurn==1){
      P1_state=3;
    }else{
      P2_state=3;
    }
    angle=getAngle(1);
    if(!BulletIsVisible&&lastShoot!=playerTurn)initBulletConfigs(playerTurn);
    if(MOUSE1==0){if(DEBUG) printf("mouse released\n");

      if(!BulletIsVisible&&lastShoot!=playerTurn){
        if(P1_state==3)
            P1_nextAnimation=3;
        if(P2_state==3)
            P2_nextAnimation=3;
        execPlayerAnimations(0);
        shootBullet(angle,strengh,1);
      }
      mouseClicked=0;
    }
  }
}


void keyboardAction(char* action,int isHuman){
if(currentScreen==-113){
  if(players==1&&isHuman&&playerTurn==2) return;
  if(strEq(action,"changeAmmo")){
    if(!BulletIsVisible)
      if(!Bullet_type){
        if(playerTurn==1){
          if(P1_Bombs>0){
            Bullet_type=1;
            P1_Bombs--;
          }
        }else{
          if(P2_Bombs>0){
            Bullet_type=1;
            P2_Bombs--;
          }
        }
      }
  }
  if(playerTurn==1&&P1_state==3) return;
  if(playerTurn==2&&P2_state==3&&players==2) return;
  if(strEq(action,"jump")){
      if(jumping==0)
        jumping=1;
  }else if(strEq(action,"moveLeft")){
    walking=1;
    if(playerTurn==1){
      P1_Ori=-1;
      movePlayer(1,"left",(P1_Hspeed-160)*1/FPS);
      P1_state=1;
    }else{
      P2_Ori=-1;
      movePlayer(2,"left",(P2_Hspeed-160)*1/FPS);
      P2_state=1;
    }
  }else if(strEq(action,"moveRight")){
    walking=1;
    if(playerTurn==1){
      P1_Ori=1;
      movePlayer(1,"right",(P1_Hspeed+160)*1/FPS);
      P1_state=1;
    }else{
      P2_Ori=1;
      movePlayer(2,"right",(P2_Hspeed+160)*1/FPS);
      P2_state=1;
    }
  }
}
}
# 27 "JCEBA.LoadLibs.h" 2
# 1 "Libs/JCEBA.AI.h" 1
# 13 "Libs/JCEBA.AI.h"
int WalkR=50;
int WalkL=80;
float AIangle=(rand()%100)+10;
float AIstrengh=0;
float AILaststrengh=0;
float sleepAItime=0;

void moveAI(int n){
  if(pause<0)
    return;
  if(n==1){
    keyboardAction("moveRight",0);
    if(DEBUG)printf("Steep right exec!\n");
  }
  if(n==2){
    keyboardAction("moveLeft",0);
    if(DEBUG)printf("Steep left exec!\n");
  }
}

void AIendTurn(int n){
  if(difficulty==1){
    AIangle=(rand()%100)+10;
    AIstrengh=(rand()%(300 -150))+150;
    if(rand()%16==0)
      keyboardAction("changeAmmo",0);
  }else if(difficulty==2){
    if(rand()%16==0)
      keyboardAction("changeAmmo",0);
    if(-20<disFromP1&&disFromP1<20)
      keyboardAction("changeAmmo",0);
    if(rand()%16==0||disFromP1<-160||disFromP1>160){
      AIangle=(rand()%100)+10;
    }else{
      if(rand()%2==0)
        AIangle+=(rand()%666)/100.0;
      else
        AIangle-=(rand()%666)/100.0;
      }
    strengh=AILaststrengh;
    if(strengh==0) AIstrengh=(rand()%(300 -150))+150;
    if(disFromP1>0){
      strengh-=(disFromP1/1.35002)+(rand()%(int)(disFromP1*1000))/1000.0;
    }else{
      strengh+=(disFromP1/1.35002)+(rand()%(int)(disFromP1*1000))/1000.0;
    }
    AILaststrengh=strengh;
  }else if(difficulty==3){
    if(-10<disFromP1&&disFromP1<10)
      keyboardAction("changeAmmo",0);
    if(rand()%(16/2)==0)
      keyboardAction("changeAmmo",0);
    AIangle=(100 -1-10)/2+10;
    AIstrengh=150*1.3;
    float pX,pY;
    float MPVSpeed=0,MPHSpeed=0;
    bool end=false;
    while(true) {
      MPVSpeed=sin(angleToRad(AIangle))*AIstrengh;
      if(MPVSpeed<0)
        MPVSpeed*=-1;
      MPHSpeed=cos(angleToRad(AIangle))*AIstrengh;
      if(MPHSpeed>0)MPHSpeed*=-1;
      pY=pos_P2.p0.y+100;
      pX=pos_P2.p0.x;
      if(!end)
      while(pX>-800/2&&pX<800/2&&pY>-600/2){
        pX+=(MPHSpeed+wind)/FPS;
        pY+=MPVSpeed/FPS;
        MPVSpeed+=gravity*(1/FPS);
        if(!(pX>pos_P1.p1.x||pX<pos_P1.p0.x||pY>pos_P1.p1.y||pY<pos_P1.p0.y))
          end=1;
        if(end) break;
      }
      if(end){
        if(pY>pos_P1.p0.y+100/2){
          AIstrengh+=(300 -150)/50;
        }else{
          AIstrengh+=(300 -150)/38;
        }
      break;}
      AIstrengh++;
      if(AIstrengh>=300){
        AIstrengh=150*1.3;
        AIangle++;
        if(AIangle>=10 +100 -1){
          AIangle=(rand()%100)+10;
          AIstrengh=(rand()%(300 -150))+150;
          break;
        }
      }
    }
  }
  P2_state=3;
  P2_nextAnimation=3;
  if(!BulletIsVisible&&lastShoot!=playerTurn)initBulletConfigs(playerTurn);
  execPlayerAnimations(0);
  shootBullet(angleToRad(AIangle),-AIstrengh,0);
  if(DEBUG)printf("IA shot: Speed:%f  Angle(º):%f\n",AIstrengh,AIangle);
  mouseClicked=0;
  P2_Ori=-1;
}

void AIturn(){
  if(!alreadyAI&&playerTurn==2&&P2_life>0){
    WalkR=((800/2)-(pos_P2.p0.x+(60/2)))/160*FPS;
    WalkL=(pos_P2.p0.x+(60/2))/160*FPS;
    alreadyAI=true;
  for(int i=0;i<3;i++)
    if(rand()%15==0)
      keyboardAction("jump",0);
  if(rand()%3==0){
    if(rand()%4==0){
      int temp=rand()%WalkR;
      if(temp<WalkR*0.2)
        temp=(int)WalkR*0.2;
      for(int i=0;i<temp;i++){
        glutTimerFunc(9000/FPS*i,moveAI,1);
        sleepAItime=9000/FPS*i;
        if(DEBUG)printf("Steep right registred(%f)!\n",sleepAItime);
      }
    }else{
      int temp=rand()%WalkL;
      if(temp<WalkL*0.2)
        temp=(int)WalkL*0.2;
      for(int i=0;i<temp;i++){
        glutTimerFunc(9000/FPS*i,moveAI,2);
        sleepAItime=9000/FPS*i;
        if(DEBUG)printf("Steep left registred(%f)!\n",sleepAItime);
      }
    }
  }
  glutTimerFunc(sleepAItime+(1/FPS*(rand()%(600 -181)+181)),AIendTurn,0);
  }
}
# 28 "JCEBA.LoadLibs.h" 2
# 1 "Libs/JCEBA.Settings.h" 1
SETTINGS configs;
void saveSettings(){
  configs.gameFPS=gameFPS;
  configs.resolutionIdx=resolutionIdx;
  configs.music=musicState;
  configs.sound=soundState;
  configs.windState=windState;
  configs.difficulty=difficulty;
  configs.lives=initPlayerLifes;
  configs.specialAmmo=initPlayerBombs;
  configs.maps=mapPreConfig;
  configs.language=getLanguageInt(language);
  languageIdx=getLanguageInt(language);
  FILE *settingsFP=fopen("settings.bin","wb");
 if(settingsFP==
# 15 "Libs/JCEBA.Settings.h" 3 4
               ((void *)0)
# 15 "Libs/JCEBA.Settings.h"
                   ){
        if(DEBUG)printf("Erro ao salvar arquivo settings.bin\n");
        return;
 }
 fwrite(&configs,sizeof(SETTINGS),1,settingsFP);
 fclose(settingsFP);
}

void saveMapConfig(){
    FILE *mapSettingsFP=fopen("mapSettings.bin","wb");
 if(mapSettingsFP==
# 25 "Libs/JCEBA.Settings.h" 3 4
                  ((void *)0)
# 25 "Libs/JCEBA.Settings.h"
                      ){
      if(DEBUG)printf("\nErro ao gravar o arquivo mapSettings.bin\n");
      return;
    }
    for(int i=0;i<5;i++){
        fwrite(&mapType[i],sizeof(MAP_SETTINGS),1,mapSettingsFP);
    }
    fclose(mapSettingsFP);
}
void loadSettings(){
 FILE *settingsFP=fopen("settings.bin","rb");
 if(settingsFP==
# 36 "Libs/JCEBA.Settings.h" 3 4
               ((void *)0)
# 36 "Libs/JCEBA.Settings.h"
                   ){
        if(DEBUG)printf("Erro ao carregar settings.bin\n");
        if(DEBUG)printf("Criando novo arquivo settings.bin...");
        saveSettings();
        if(DEBUG)printf("OK\n");
        return;
    }
  fread(&configs,sizeof(SETTINGS),1,settingsFP);
 fclose(settingsFP);
    gameFPS=configs.gameFPS;
    resolutionIdx=configs.resolutionIdx;
    musicState=configs.music;
    soundState=configs.sound;
    windState=configs.windState;
    difficulty=configs.difficulty;
    initPlayerLifes=configs.lives;
    initPlayerBombs=configs.specialAmmo;
    mapPreConfig=configs.maps;
    strcpy(language,getLanguageStr(configs.language));
    languageIdx=configs.language;
}

void loadMapSettings(){
    FILE *mapSettingsFP=fopen("mapSettings.bin","rb");
 if(mapSettingsFP==
# 60 "Libs/JCEBA.Settings.h" 3 4
                  ((void *)0)
# 60 "Libs/JCEBA.Settings.h"
                      ){
        if(DEBUG)printf("Erro ao abrir o arquivo mapSettings.bin\n");
        if(DEBUG)printf("Criando novo arquivo mapSettings.bin...");
        mapType[0].nMapGen=250;
        mapType[0].variationMapGen=60;
        mapType[0].smallVariationMapGen=10;
        mapType[0].mountainVariationMapGen=20;
        mapType[0].mountainVerticalSize=100;
        mapType[0].mountainHorizontalSize=55;
        mapType[0].mountainChance=120;
        saveMapConfig();
        if(DEBUG)printf("OK\n");
        return;
    }
    for(int i=0;i<5;i++){
        fread(&mapType[i],sizeof(MAP_SETTINGS),1,mapSettingsFP);
    }
    nMapGen=mapType[mapPreConfig].nMapGen;
    variationMapGen=mapType[mapPreConfig].variationMapGen;
    smallVariationMapGen=mapType[mapPreConfig].smallVariationMapGen;
    mountainVariationMapGen=mapType[mapPreConfig].mountainVariationMapGen;
    mountainVerticalSize=mapType[mapPreConfig].mountainVerticalSize;
    mountainHorizontalSize=mapType[mapPreConfig].mountainHorizontalSize;
    mountainChance=mapType[mapPreConfig].mountainChance;
 fclose(mapSettingsFP);
}

void editMapSettings(int posMap)
{
    mapType[posMap].nMapGen=nMapGen;
    mapType[posMap].variationMapGen=variationMapGen;
    mapType[posMap].smallVariationMapGen=smallVariationMapGen;
    mapType[posMap].mountainVariationMapGen=mountainVariationMapGen;
    mapType[posMap].mountainVerticalSize=mountainVerticalSize;
    mapType[posMap].mountainHorizontalSize=mountainHorizontalSize;
    mapType[posMap].mountainChance=mountainChance;
    saveMapConfig();
}
# 28 "JCEBA.LoadLibs.h" 2
# 3 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c" 2

void drawScene(void){
    glClear(
# 5 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c" 3 4
           0x00004000
# 5 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c"
                              |
# 5 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c" 3 4
                               0x00000100
# 5 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c"
                                                  );
    if(triedReshapping)
        warnReshapping();
    switch(currentScreen){
        case -111: splash();break;
        case -112: menu();break;
        case -117: preMenu();break;
        case -113: game();break;
        case -118: numPlayers();break;
        case -119:chooseChars();break;
        case -120: prePartida();break;
        case -114: options();break;
        case -115: howto();break;
        case -116: credits();break;
        case -7: mapEdit();break;
        case -121: exit(0);break;
    }
    glutSwapBuffers();
}

void setup(void){
    srand(time(
# 26 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c" 3 4
              ((void *)0)
# 26 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c"
                  ));
    glutInitDisplayMode(
# 27 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c" 3 4
                       0x0002 
# 27 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c"
                                   | 
# 27 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c" 3 4
                                     0x0000
# 27 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c"
                                              |
# 27 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c" 3 4
                                               0x0010
# 27 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c"
                                                         |
# 27 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c" 3 4
                                                          0x0020
# 27 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c"
                                                                      |
# 27 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c" 3 4
                                                                       0x0008
# 27 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c"
                                                                                 );
    glutInitWindowSize(800, 600);
    glutInitWindowPosition(0, 0);
    
# 30 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c" 3 4
   glutCreateWindow_ATEXIT_HACK
# 30 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c"
                   ("JCEBA.BAS");
    glClearColor(0, 0, 0, 0);
    glEnable(
# 32 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c" 3 4
            0x0B71
# 32 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c"
                         );
    glEnable (
# 33 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c" 3 4
             0x0BE2
# 33 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c"
                     );
    glBlendFunc (
# 34 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c" 3 4
                0x0302
# 34 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c"
                            , 
# 34 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c" 3 4
                              0x0303
# 34 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c"
                                                    );
    refreshBackground(0);
}

void reshape(int width, int height){
  if((width!=currentWidth||height!=currentHeight)&&!fullscreen){
        glutReshapeWindow(currentWidth,currentHeight);
    triedReshapping=1;
  }
  glutPostRedisplay();
  glViewport(0, 0, currentWidth, currentHeight);
  glMatrixMode(
# 45 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c" 3 4
              0x1701
# 45 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c"
                           );
  glLoadIdentity();
  glOrtho(-800/2, 800/2, -600/2, 600/2, -1, 1);
  glMatrixMode(
# 48 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c" 3 4
              0x1700
# 48 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c"
                          );
  glLoadIdentity();
}

void keyboard(unsigned char key, int x, int y){
   switch(key){
    case 13:
        ENTER=1;
       break;
    case 27:
    if(currentScreen==-113&&!restart ){
      pause=-1;
      escape=1;
    }else
      exit(0);
    break;

    case 'a':case 'A':
        keyboardAction("moveLeft",1);
      break;

    case 'd':case 'D':
        keyboardAction("moveRight",1);
        if(currentScreen==-111)
          DEBUG=true;
      break;

      case 'w':case 'W':
        keyboardAction("jump",1);
        break;

        case 't':case 'T':
          keyboardAction("changeAmmo",1);
          break;

      case 'c':case 'C':
        if(cheatMode)cheatMode=0;else cheatMode=1;
        break;

        case 'p':case 'P':
          if(currentScreen==-113&&!restart&&!escape)
            pause*=-1;
          break;

          case 'r':case 'R':
          if(currentScreen==-113&&pause>0){
            pause=-1;
            restart=1;
          }
            break;
      case'b':case'B':
        if(currentScreen==-111)
          bugMODE=true;
      break;
      default:
         break;
   }
}

void update(int n){
    switch(currentScreen){
        case -111:
          FPS=14;
          idxSplash++;
        break;
        case -117:
            FPS=50;
            A+=0.01;
        break;
        case -112:
          FPS=40;
        break;
        case -120:
          FPS=30;
          greyShade+=(float)0.08*auxPrepartida;
          if(greyShade>=0.9||greyShade<=0.1)
            auxPrepartida*=-1;
        break;
        case -113:
          FPS=gameFPS;
          if(pause>0){
            realizeJump();
            if(mouseClicked&&!BulletIsVisible){
              strengh+=(300 -150)/(FPS);
              if(strengh>=300)
                strengh=150;
            }
          }
          if(idxGG>=0&&idxGG<8003)
            idxGG++;
        break;
        case -114:
            FPS=40;
        break;
        case -115:
            FPS=40;
        break;
        case -116:
            if(idxCredits<1)
              FPS=0.13;
            else
            FPS=2;
        break;
    }
    glutPostRedisplay();
    glutTimerFunc(1000/FPS, update, 0);
}

void idle(){
}

void mousePress(int button,int state,int x,int y){
    if(button==
# 160 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c" 3 4
              0x0000
# 160 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c"
                              ){
        if(state==
# 161 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c" 3 4
                 0x0000
# 161 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c"
                          ){
            MOUSE1=1;
            MOUSE2=1;
            mouseClicked=1;
          }
      if(state==
# 166 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c" 3 4
               0x0001
# 166 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c"
                      ){
            MOUSE1=0;
            MOUSE2=0;
        }
      mouseAction(1);
    }
}

void mousePassiveMotion(int x,int y){
  mouseX=x*((float)800/(float)currentWidth)-(800/2);
  mouseY=-y*((float)600/(float)currentHeight)+(600/2);
}

void mouseActiveMotion(int x,int y){
    MOUSE2=0;
    mouseX=x*((float)800/(float)currentWidth)-(800/2);
    mouseY=-y*((float)600/(float)currentHeight)+(600/2);
}

int main(int argc, char **argv){
    if(DEBUG) printf("definindo idioma...");
    setStrings();
    if(DEBUG) printf("OK\n");
    if(DEBUG) printf("definindo coordenadas...");
    defineCords();
    if(DEBUG) printf("OK\n");
    if(DEBUG) printf("iniciando openAL e openGL...");
    
# 193 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c" 3 4
   glutInit_ATEXIT_HACK
# 193 "joguinho_de_controle_de_estoque_de_bomba_atomica.BAS.c"
           (&argc, argv);
    alutInit(&argc, argv);
    if(DEBUG) printf("OK\n");
    if(DEBUG) printf("carregando openAL...");
    ALinit();
    if(DEBUG) printf("OK\n");
    if(DEBUG) printf("carregando openGL...");
    setup();
    if(DEBUG) printf("OK\n");
    if(1){
      if(DEBUG) printf("carregndo configuracoes de jogo...");
      loadSettings();
      idxMap=mapPreConfig; if(idxMap==0)idxMap=1;
      if(DEBUG) printf("OK\n");
      if(DEBUG) printf("carregndo configuracoes de mapa...");
      loadMapSettings();
      if(DEBUG) printf("OK\n");
    }
    if(DEBUG) printf("registando callbacks...");
    glutDisplayFunc(drawScene);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);
    glutTimerFunc(0, update, 0);
    glutIdleFunc(idle);
    glutPassiveMotionFunc(mousePassiveMotion);
    glutMotionFunc(mouseActiveMotion);
    glutMouseFunc(mousePress);
    if(DEBUG) printf("OK\n");
    if(DEBUG) printf("carregando arquivos...");
    loadFiles();
    if(DEBUG) printf("OK\n");
    if(DEBUG) printf("criando listas...");
    createList();
    if(DEBUG) printf("OK\n");

    if(DEBUG) printf("entrando no GLUT loop...OK\n");
    glutMainLoop();
    return 0;
}
